// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: affiliate/service/v1/affiliate.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ContactType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ContactType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContactTypeMultiError, or
// nil if none found.
func (m *ContactType) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Label

	// no validation rules for ContactValue

	if len(errors) > 0 {
		return ContactTypeMultiError(errors)
	}

	return nil
}

// ContactTypeMultiError is an error wrapping multiple validation errors
// returned by ContactType.ValidateAll() if the designated constraints aren't met.
type ContactTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactTypeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactTypeMultiError) AllErrors() []error { return m }

// ContactTypeValidationError is the validation error returned by
// ContactType.Validate if the designated constraints aren't met.
type ContactTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactTypeValidationError) ErrorName() string { return "ContactTypeValidationError" }

// Error satisfies the builtin error interface
func (e ContactTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactTypeValidationError{}

// Validate checks the field values on AffiliateInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AffiliateInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AffiliateInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AffiliateInfoMultiError, or
// nil if none found.
func (m *AffiliateInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AffiliateInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompanyName

	// no validation rules for Status

	// no validation rules for InvoicePeriod

	// no validation rules for PhotoUrl

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for TwoFaEnabled

	// no validation rules for Firstname

	// no validation rules for Lastname

	// no validation rules for Phone

	for idx, item := range m.GetContactTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AffiliateInfoValidationError{
						field:  fmt.Sprintf("ContactTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AffiliateInfoValidationError{
						field:  fmt.Sprintf("ContactTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AffiliateInfoValidationError{
					field:  fmt.Sprintf("ContactTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Country

	// no validation rules for Region

	// no validation rules for City

	// no validation rules for PostCode

	// no validation rules for Street

	// no validation rules for InternalInfo

	if len(errors) > 0 {
		return AffiliateInfoMultiError(errors)
	}

	return nil
}

// AffiliateInfoMultiError is an error wrapping multiple validation errors
// returned by AffiliateInfo.ValidateAll() if the designated constraints
// aren't met.
type AffiliateInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AffiliateInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AffiliateInfoMultiError) AllErrors() []error { return m }

// AffiliateInfoValidationError is the validation error returned by
// AffiliateInfo.Validate if the designated constraints aren't met.
type AffiliateInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AffiliateInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AffiliateInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AffiliateInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AffiliateInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AffiliateInfoValidationError) ErrorName() string { return "AffiliateInfoValidationError" }

// Error satisfies the builtin error interface
func (e AffiliateInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAffiliateInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AffiliateInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AffiliateInfoValidationError{}

// Validate checks the field values on CreateAffiliateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAffiliateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAffiliateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAffiliateRequestMultiError, or nil if none found.
func (m *CreateAffiliateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAffiliateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAffiliate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAffiliateRequestValidationError{
					field:  "Affiliate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAffiliateRequestValidationError{
					field:  "Affiliate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAffiliate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAffiliateRequestValidationError{
				field:  "Affiliate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAffiliateRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAffiliateRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAffiliateRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInitiatorOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAffiliateRequestValidationError{
					field:  "InitiatorOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAffiliateRequestValidationError{
					field:  "InitiatorOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInitiatorOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAffiliateRequestValidationError{
				field:  "InitiatorOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitiatorUserId

	if len(errors) > 0 {
		return CreateAffiliateRequestMultiError(errors)
	}

	return nil
}

// CreateAffiliateRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAffiliateRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAffiliateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAffiliateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAffiliateRequestMultiError) AllErrors() []error { return m }

// CreateAffiliateRequestValidationError is the validation error returned by
// CreateAffiliateRequest.Validate if the designated constraints aren't met.
type CreateAffiliateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAffiliateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAffiliateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAffiliateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAffiliateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAffiliateRequestValidationError) ErrorName() string {
	return "CreateAffiliateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAffiliateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAffiliateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAffiliateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAffiliateRequestValidationError{}

// Validate checks the field values on CreateAffiliateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAffiliateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAffiliateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAffiliateResponseMultiError, or nil if none found.
func (m *CreateAffiliateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAffiliateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateAffiliateResponseMultiError(errors)
	}

	return nil
}

// CreateAffiliateResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAffiliateResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAffiliateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAffiliateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAffiliateResponseMultiError) AllErrors() []error { return m }

// CreateAffiliateResponseValidationError is the validation error returned by
// CreateAffiliateResponse.Validate if the designated constraints aren't met.
type CreateAffiliateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAffiliateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAffiliateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAffiliateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAffiliateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAffiliateResponseValidationError) ErrorName() string {
	return "CreateAffiliateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAffiliateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAffiliateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAffiliateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAffiliateResponseValidationError{}

// Validate checks the field values on UpdateAffiliateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAffiliateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAffiliateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAffiliateRequestMultiError, or nil if none found.
func (m *UpdateAffiliateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAffiliateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAffiliate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAffiliateRequestValidationError{
					field:  "Affiliate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAffiliateRequestValidationError{
					field:  "Affiliate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAffiliate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAffiliateRequestValidationError{
				field:  "Affiliate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AffiliateId

	if all {
		switch v := interface{}(m.GetInitiatorOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAffiliateRequestValidationError{
					field:  "InitiatorOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAffiliateRequestValidationError{
					field:  "InitiatorOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInitiatorOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAffiliateRequestValidationError{
				field:  "InitiatorOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitiatorUserId

	if len(errors) > 0 {
		return UpdateAffiliateRequestMultiError(errors)
	}

	return nil
}

// UpdateAffiliateRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAffiliateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAffiliateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAffiliateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAffiliateRequestMultiError) AllErrors() []error { return m }

// UpdateAffiliateRequestValidationError is the validation error returned by
// UpdateAffiliateRequest.Validate if the designated constraints aren't met.
type UpdateAffiliateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAffiliateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAffiliateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAffiliateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAffiliateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAffiliateRequestValidationError) ErrorName() string {
	return "UpdateAffiliateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAffiliateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAffiliateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAffiliateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAffiliateRequestValidationError{}

// Validate checks the field values on UpdateAffiliateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAffiliateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAffiliateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAffiliateResponseMultiError, or nil if none found.
func (m *UpdateAffiliateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAffiliateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAffiliateResponseMultiError(errors)
	}

	return nil
}

// UpdateAffiliateResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAffiliateResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAffiliateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAffiliateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAffiliateResponseMultiError) AllErrors() []error { return m }

// UpdateAffiliateResponseValidationError is the validation error returned by
// UpdateAffiliateResponse.Validate if the designated constraints aren't met.
type UpdateAffiliateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAffiliateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAffiliateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAffiliateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAffiliateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAffiliateResponseValidationError) ErrorName() string {
	return "UpdateAffiliateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAffiliateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAffiliateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAffiliateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAffiliateResponseValidationError{}

// Validate checks the field values on GetAffiliateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAffiliateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAffiliateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAffiliateRequestMultiError, or nil if none found.
func (m *GetAffiliateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAffiliateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AffiliateId

	if all {
		switch v := interface{}(m.GetInitiatorOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAffiliateRequestValidationError{
					field:  "InitiatorOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAffiliateRequestValidationError{
					field:  "InitiatorOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInitiatorOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAffiliateRequestValidationError{
				field:  "InitiatorOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAffiliateRequestMultiError(errors)
	}

	return nil
}

// GetAffiliateRequestMultiError is an error wrapping multiple validation
// errors returned by GetAffiliateRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAffiliateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAffiliateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAffiliateRequestMultiError) AllErrors() []error { return m }

// GetAffiliateRequestValidationError is the validation error returned by
// GetAffiliateRequest.Validate if the designated constraints aren't met.
type GetAffiliateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAffiliateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAffiliateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAffiliateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAffiliateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAffiliateRequestValidationError) ErrorName() string {
	return "GetAffiliateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAffiliateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAffiliateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAffiliateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAffiliateRequestValidationError{}

// Validate checks the field values on GetAffiliateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAffiliateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAffiliateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAffiliateResponseMultiError, or nil if none found.
func (m *GetAffiliateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAffiliateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAffiliate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAffiliateResponseValidationError{
					field:  "Affiliate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAffiliateResponseValidationError{
					field:  "Affiliate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAffiliate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAffiliateResponseValidationError{
				field:  "Affiliate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AffiliateId

	if len(errors) > 0 {
		return GetAffiliateResponseMultiError(errors)
	}

	return nil
}

// GetAffiliateResponseMultiError is an error wrapping multiple validation
// errors returned by GetAffiliateResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAffiliateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAffiliateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAffiliateResponseMultiError) AllErrors() []error { return m }

// GetAffiliateResponseValidationError is the validation error returned by
// GetAffiliateResponse.Validate if the designated constraints aren't met.
type GetAffiliateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAffiliateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAffiliateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAffiliateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAffiliateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAffiliateResponseValidationError) ErrorName() string {
	return "GetAffiliateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAffiliateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAffiliateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAffiliateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAffiliateResponseValidationError{}

// Validate checks the field values on ListAffiliatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAffiliatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAffiliatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAffiliatesRequestMultiError, or nil if none found.
func (m *ListAffiliatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAffiliatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAffiliatesRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAffiliatesRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAffiliatesRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInitiatorOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAffiliatesRequestValidationError{
					field:  "InitiatorOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAffiliatesRequestValidationError{
					field:  "InitiatorOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInitiatorOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAffiliatesRequestValidationError{
				field:  "InitiatorOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListAffiliatesRequestMultiError(errors)
	}

	return nil
}

// ListAffiliatesRequestMultiError is an error wrapping multiple validation
// errors returned by ListAffiliatesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAffiliatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAffiliatesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAffiliatesRequestMultiError) AllErrors() []error { return m }

// ListAffiliatesRequestValidationError is the validation error returned by
// ListAffiliatesRequest.Validate if the designated constraints aren't met.
type ListAffiliatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAffiliatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAffiliatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAffiliatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAffiliatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAffiliatesRequestValidationError) ErrorName() string {
	return "ListAffiliatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAffiliatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAffiliatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAffiliatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAffiliatesRequestValidationError{}

// Validate checks the field values on ListAffiliatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAffiliatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAffiliatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAffiliatesResponseMultiError, or nil if none found.
func (m *ListAffiliatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAffiliatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAffiliates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAffiliatesResponseValidationError{
						field:  fmt.Sprintf("Affiliates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAffiliatesResponseValidationError{
						field:  fmt.Sprintf("Affiliates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAffiliatesResponseValidationError{
					field:  fmt.Sprintf("Affiliates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for ActiveCount

	// no validation rules for InactiveCount

	// no validation rules for PendingCount

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListAffiliatesResponseMultiError(errors)
	}

	return nil
}

// ListAffiliatesResponseMultiError is an error wrapping multiple validation
// errors returned by ListAffiliatesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAffiliatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAffiliatesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAffiliatesResponseMultiError) AllErrors() []error { return m }

// ListAffiliatesResponseValidationError is the validation error returned by
// ListAffiliatesResponse.Validate if the designated constraints aren't met.
type ListAffiliatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAffiliatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAffiliatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAffiliatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAffiliatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAffiliatesResponseValidationError) ErrorName() string {
	return "ListAffiliatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAffiliatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAffiliatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAffiliatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAffiliatesResponseValidationError{}

// Validate checks the field values on DeleteAffiliateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAffiliateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAffiliateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAffiliateRequestMultiError, or nil if none found.
func (m *DeleteAffiliateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAffiliateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AffiliateId

	if all {
		switch v := interface{}(m.GetInitiatorOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteAffiliateRequestValidationError{
					field:  "InitiatorOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteAffiliateRequestValidationError{
					field:  "InitiatorOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInitiatorOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAffiliateRequestValidationError{
				field:  "InitiatorOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitiatorUserId

	if len(errors) > 0 {
		return DeleteAffiliateRequestMultiError(errors)
	}

	return nil
}

// DeleteAffiliateRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAffiliateRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAffiliateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAffiliateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAffiliateRequestMultiError) AllErrors() []error { return m }

// DeleteAffiliateRequestValidationError is the validation error returned by
// DeleteAffiliateRequest.Validate if the designated constraints aren't met.
type DeleteAffiliateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAffiliateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAffiliateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAffiliateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAffiliateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAffiliateRequestValidationError) ErrorName() string {
	return "DeleteAffiliateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAffiliateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAffiliateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAffiliateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAffiliateRequestValidationError{}

// Validate checks the field values on DeleteAffiliateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAffiliateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAffiliateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAffiliateResponseMultiError, or nil if none found.
func (m *DeleteAffiliateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAffiliateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAffiliateResponseMultiError(errors)
	}

	return nil
}

// DeleteAffiliateResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAffiliateResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAffiliateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAffiliateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAffiliateResponseMultiError) AllErrors() []error { return m }

// DeleteAffiliateResponseValidationError is the validation error returned by
// DeleteAffiliateResponse.Validate if the designated constraints aren't met.
type DeleteAffiliateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAffiliateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAffiliateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAffiliateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAffiliateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAffiliateResponseValidationError) ErrorName() string {
	return "DeleteAffiliateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAffiliateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAffiliateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAffiliateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAffiliateResponseValidationError{}

// Validate checks the field values on Campaign with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Campaign) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Campaign with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CampaignMultiError, or nil
// if none found.
func (m *Campaign) ValidateAll() error {
	return m.validate(true)
}

func (m *Campaign) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for CampaignName

	// no validation rules for ChannelType

	if all {
		switch v := interface{}(m.GetChannelConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CampaignValidationError{
					field:  "ChannelConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CampaignValidationError{
					field:  "ChannelConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannelConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CampaignValidationError{
				field:  "ChannelConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CampaignValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CampaignValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CampaignValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEventMappings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CampaignValidationError{
					field:  "EventMappings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CampaignValidationError{
					field:  "EventMappings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEventMappings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CampaignValidationError{
				field:  "EventMappings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CampaignMultiError(errors)
	}

	return nil
}

// CampaignMultiError is an error wrapping multiple validation errors returned
// by Campaign.ValidateAll() if the designated constraints aren't met.
type CampaignMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CampaignMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CampaignMultiError) AllErrors() []error { return m }

// CampaignValidationError is the validation error returned by
// Campaign.Validate if the designated constraints aren't met.
type CampaignValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CampaignValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CampaignValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CampaignValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CampaignValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CampaignValidationError) ErrorName() string { return "CampaignValidationError" }

// Error satisfies the builtin error interface
func (e CampaignValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCampaign.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CampaignValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CampaignValidationError{}

// Validate checks the field values on Params with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Params) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Params with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ParamsMultiError, or nil if none found.
func (m *Params) ValidateAll() error {
	return m.validate(true)
}

func (m *Params) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPredefinedParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParamsValidationError{
						field:  fmt.Sprintf("PredefinedParameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParamsValidationError{
						field:  fmt.Sprintf("PredefinedParameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParamsValidationError{
					field:  fmt.Sprintf("PredefinedParameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCustomParameters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParamsValidationError{
						field:  fmt.Sprintf("CustomParameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParamsValidationError{
						field:  fmt.Sprintf("CustomParameters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParamsValidationError{
					field:  fmt.Sprintf("CustomParameters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ParamsMultiError(errors)
	}

	return nil
}

// ParamsMultiError is an error wrapping multiple validation errors returned by
// Params.ValidateAll() if the designated constraints aren't met.
type ParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParamsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParamsMultiError) AllErrors() []error { return m }

// ParamsValidationError is the validation error returned by Params.Validate if
// the designated constraints aren't met.
type ParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParamsValidationError) ErrorName() string { return "ParamsValidationError" }

// Error satisfies the builtin error interface
func (e ParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParamsValidationError{}

// Validate checks the field values on ChannelConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChannelConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChannelConfigMultiError, or
// nil if none found.
func (m *ChannelConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.FacebookChannelConfig != nil {

		if all {
			switch v := interface{}(m.GetFacebookChannelConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelConfigValidationError{
						field:  "FacebookChannelConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelConfigValidationError{
						field:  "FacebookChannelConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFacebookChannelConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelConfigValidationError{
					field:  "FacebookChannelConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.TiktokChannelConfig != nil {

		if all {
			switch v := interface{}(m.GetTiktokChannelConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelConfigValidationError{
						field:  "TiktokChannelConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelConfigValidationError{
						field:  "TiktokChannelConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTiktokChannelConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelConfigValidationError{
					field:  "TiktokChannelConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.KwaiChannelConfig != nil {

		if all {
			switch v := interface{}(m.GetKwaiChannelConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelConfigValidationError{
						field:  "KwaiChannelConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelConfigValidationError{
						field:  "KwaiChannelConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetKwaiChannelConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelConfigValidationError{
					field:  "KwaiChannelConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.AppsflyerChannelConfig != nil {

		if all {
			switch v := interface{}(m.GetAppsflyerChannelConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelConfigValidationError{
						field:  "AppsflyerChannelConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelConfigValidationError{
						field:  "AppsflyerChannelConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAppsflyerChannelConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelConfigValidationError{
					field:  "AppsflyerChannelConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.AdjustChannelConfig != nil {

		if all {
			switch v := interface{}(m.GetAdjustChannelConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelConfigValidationError{
						field:  "AdjustChannelConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelConfigValidationError{
						field:  "AdjustChannelConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAdjustChannelConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelConfigValidationError{
					field:  "AdjustChannelConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.AgencyChannelConfig != nil {

		if all {
			switch v := interface{}(m.GetAgencyChannelConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelConfigValidationError{
						field:  "AgencyChannelConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelConfigValidationError{
						field:  "AgencyChannelConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAgencyChannelConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelConfigValidationError{
					field:  "AgencyChannelConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GoogleAdsChannelConfig != nil {

		if all {
			switch v := interface{}(m.GetGoogleAdsChannelConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelConfigValidationError{
						field:  "GoogleAdsChannelConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelConfigValidationError{
						field:  "GoogleAdsChannelConfig",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGoogleAdsChannelConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelConfigValidationError{
					field:  "GoogleAdsChannelConfig",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChannelConfigMultiError(errors)
	}

	return nil
}

// ChannelConfigMultiError is an error wrapping multiple validation errors
// returned by ChannelConfig.ValidateAll() if the designated constraints
// aren't met.
type ChannelConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelConfigMultiError) AllErrors() []error { return m }

// ChannelConfigValidationError is the validation error returned by
// ChannelConfig.Validate if the designated constraints aren't met.
type ChannelConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelConfigValidationError) ErrorName() string { return "ChannelConfigValidationError" }

// Error satisfies the builtin error interface
func (e ChannelConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelConfigValidationError{}

// Validate checks the field values on CustomParams with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CustomParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomParams with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CustomParamsMultiError, or
// nil if none found.
func (m *CustomParams) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCustomParams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CustomParamsValidationError{
						field:  fmt.Sprintf("CustomParams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CustomParamsValidationError{
						field:  fmt.Sprintf("CustomParams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CustomParamsValidationError{
					field:  fmt.Sprintf("CustomParams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CustomParamsMultiError(errors)
	}

	return nil
}

// CustomParamsMultiError is an error wrapping multiple validation errors
// returned by CustomParams.ValidateAll() if the designated constraints aren't met.
type CustomParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomParamsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomParamsMultiError) AllErrors() []error { return m }

// CustomParamsValidationError is the validation error returned by
// CustomParams.Validate if the designated constraints aren't met.
type CustomParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomParamsValidationError) ErrorName() string { return "CustomParamsValidationError" }

// Error satisfies the builtin error interface
func (e CustomParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomParamsValidationError{}

// Validate checks the field values on EventMappings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventMappings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventMappings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventMappingsMultiError, or
// nil if none found.
func (m *EventMappings) ValidateAll() error {
	return m.validate(true)
}

func (m *EventMappings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRegister()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventMappingsValidationError{
					field:  "Register",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventMappingsValidationError{
					field:  "Register",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegister()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventMappingsValidationError{
				field:  "Register",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFirstDeposit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventMappingsValidationError{
					field:  "FirstDeposit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventMappingsValidationError{
					field:  "FirstDeposit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFirstDeposit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventMappingsValidationError{
				field:  "FirstDeposit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSecondDeposit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventMappingsValidationError{
					field:  "SecondDeposit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventMappingsValidationError{
					field:  "SecondDeposit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecondDeposit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventMappingsValidationError{
				field:  "SecondDeposit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetThirdDeposit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventMappingsValidationError{
					field:  "ThirdDeposit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventMappingsValidationError{
					field:  "ThirdDeposit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThirdDeposit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventMappingsValidationError{
				field:  "ThirdDeposit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWithdrawal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventMappingsValidationError{
					field:  "Withdrawal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventMappingsValidationError{
					field:  "Withdrawal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWithdrawal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventMappingsValidationError{
				field:  "Withdrawal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGameStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventMappingsValidationError{
					field:  "GameStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventMappingsValidationError{
					field:  "GameStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGameStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventMappingsValidationError{
				field:  "GameStart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGameBet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventMappingsValidationError{
					field:  "GameBet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventMappingsValidationError{
					field:  "GameBet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGameBet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventMappingsValidationError{
				field:  "GameBet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EventMappingsMultiError(errors)
	}

	return nil
}

// EventMappingsMultiError is an error wrapping multiple validation errors
// returned by EventMappings.ValidateAll() if the designated constraints
// aren't met.
type EventMappingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMappingsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMappingsMultiError) AllErrors() []error { return m }

// EventMappingsValidationError is the validation error returned by
// EventMappings.Validate if the designated constraints aren't met.
type EventMappingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventMappingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventMappingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventMappingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventMappingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventMappingsValidationError) ErrorName() string { return "EventMappingsValidationError" }

// Error satisfies the builtin error interface
func (e EventMappingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventMappings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventMappingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventMappingsValidationError{}

// Validate checks the field values on CreateCampaignRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCampaignRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCampaignRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCampaignRequestMultiError, or nil if none found.
func (m *CreateCampaignRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCampaignRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCampaign()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCampaignRequestValidationError{
					field:  "Campaign",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCampaignRequestValidationError{
					field:  "Campaign",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCampaign()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCampaignRequestValidationError{
				field:  "Campaign",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInitiatorOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCampaignRequestValidationError{
					field:  "InitiatorOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCampaignRequestValidationError{
					field:  "InitiatorOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInitiatorOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCampaignRequestValidationError{
				field:  "InitiatorOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitiatorUserId

	if len(errors) > 0 {
		return CreateCampaignRequestMultiError(errors)
	}

	return nil
}

// CreateCampaignRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCampaignRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCampaignRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCampaignRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCampaignRequestMultiError) AllErrors() []error { return m }

// CreateCampaignRequestValidationError is the validation error returned by
// CreateCampaignRequest.Validate if the designated constraints aren't met.
type CreateCampaignRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCampaignRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCampaignRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCampaignRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCampaignRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCampaignRequestValidationError) ErrorName() string {
	return "CreateCampaignRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCampaignRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCampaignRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCampaignRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCampaignRequestValidationError{}

// Validate checks the field values on CreateCampaignResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCampaignResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCampaignResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCampaignResponseMultiError, or nil if none found.
func (m *CreateCampaignResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCampaignResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CampaignId

	if len(errors) > 0 {
		return CreateCampaignResponseMultiError(errors)
	}

	return nil
}

// CreateCampaignResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCampaignResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCampaignResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCampaignResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCampaignResponseMultiError) AllErrors() []error { return m }

// CreateCampaignResponseValidationError is the validation error returned by
// CreateCampaignResponse.Validate if the designated constraints aren't met.
type CreateCampaignResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCampaignResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCampaignResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCampaignResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCampaignResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCampaignResponseValidationError) ErrorName() string {
	return "CreateCampaignResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCampaignResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCampaignResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCampaignResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCampaignResponseValidationError{}

// Validate checks the field values on UpdateCampaignRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCampaignRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCampaignRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCampaignRequestMultiError, or nil if none found.
func (m *UpdateCampaignRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCampaignRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CampaignId

	// no validation rules for InitiatorUserId

	if m.Campaign != nil {

		if all {
			switch v := interface{}(m.GetCampaign()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateCampaignRequestValidationError{
						field:  "Campaign",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateCampaignRequestValidationError{
						field:  "Campaign",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCampaign()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateCampaignRequestValidationError{
					field:  "Campaign",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if len(errors) > 0 {
		return UpdateCampaignRequestMultiError(errors)
	}

	return nil
}

// UpdateCampaignRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCampaignRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCampaignRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCampaignRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCampaignRequestMultiError) AllErrors() []error { return m }

// UpdateCampaignRequestValidationError is the validation error returned by
// UpdateCampaignRequest.Validate if the designated constraints aren't met.
type UpdateCampaignRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCampaignRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCampaignRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCampaignRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCampaignRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCampaignRequestValidationError) ErrorName() string {
	return "UpdateCampaignRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCampaignRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCampaignRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCampaignRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCampaignRequestValidationError{}

// Validate checks the field values on UpdateCampaignResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCampaignResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCampaignResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCampaignResponseMultiError, or nil if none found.
func (m *UpdateCampaignResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCampaignResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCampaignResponseMultiError(errors)
	}

	return nil
}

// UpdateCampaignResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCampaignResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCampaignResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCampaignResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCampaignResponseMultiError) AllErrors() []error { return m }

// UpdateCampaignResponseValidationError is the validation error returned by
// UpdateCampaignResponse.Validate if the designated constraints aren't met.
type UpdateCampaignResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCampaignResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCampaignResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCampaignResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCampaignResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCampaignResponseValidationError) ErrorName() string {
	return "UpdateCampaignResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCampaignResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCampaignResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCampaignResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCampaignResponseValidationError{}

// Validate checks the field values on ListCampaignsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCampaignsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCampaignsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCampaignsRequestMultiError, or nil if none found.
func (m *ListCampaignsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCampaignsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInitiatorOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCampaignsRequestValidationError{
					field:  "InitiatorOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCampaignsRequestValidationError{
					field:  "InitiatorOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInitiatorOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCampaignsRequestValidationError{
				field:  "InitiatorOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCampaignsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCampaignsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCampaignsRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.CampaignName != nil {
		// no validation rules for CampaignName
	}

	if m.CampaignId != nil {
		// no validation rules for CampaignId
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.InitiatorUserId != nil {
		// no validation rules for InitiatorUserId
	}

	if len(errors) > 0 {
		return ListCampaignsRequestMultiError(errors)
	}

	return nil
}

// ListCampaignsRequestMultiError is an error wrapping multiple validation
// errors returned by ListCampaignsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCampaignsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCampaignsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCampaignsRequestMultiError) AllErrors() []error { return m }

// ListCampaignsRequestValidationError is the validation error returned by
// ListCampaignsRequest.Validate if the designated constraints aren't met.
type ListCampaignsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCampaignsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCampaignsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCampaignsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCampaignsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCampaignsRequestValidationError) ErrorName() string {
	return "ListCampaignsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCampaignsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCampaignsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCampaignsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCampaignsRequestValidationError{}

// Validate checks the field values on ListCampaignsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCampaignsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCampaignsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCampaignsResponseMultiError, or nil if none found.
func (m *ListCampaignsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCampaignsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCampaigns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCampaignsResponseValidationError{
						field:  fmt.Sprintf("Campaigns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCampaignsResponseValidationError{
						field:  fmt.Sprintf("Campaigns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCampaignsResponseValidationError{
					field:  fmt.Sprintf("Campaigns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for TotalEnabled

	// no validation rules for TotalDisabled

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListCampaignsResponseMultiError(errors)
	}

	return nil
}

// ListCampaignsResponseMultiError is an error wrapping multiple validation
// errors returned by ListCampaignsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCampaignsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCampaignsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCampaignsResponseMultiError) AllErrors() []error { return m }

// ListCampaignsResponseValidationError is the validation error returned by
// ListCampaignsResponse.Validate if the designated constraints aren't met.
type ListCampaignsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCampaignsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCampaignsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCampaignsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCampaignsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCampaignsResponseValidationError) ErrorName() string {
	return "ListCampaignsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCampaignsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCampaignsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCampaignsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCampaignsResponseValidationError{}

// Validate checks the field values on DeleteCampaignRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCampaignRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCampaignRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCampaignRequestMultiError, or nil if none found.
func (m *DeleteCampaignRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCampaignRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CampaignId

	// no validation rules for InitiatorUserId

	if len(errors) > 0 {
		return DeleteCampaignRequestMultiError(errors)
	}

	return nil
}

// DeleteCampaignRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCampaignRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCampaignRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCampaignRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCampaignRequestMultiError) AllErrors() []error { return m }

// DeleteCampaignRequestValidationError is the validation error returned by
// DeleteCampaignRequest.Validate if the designated constraints aren't met.
type DeleteCampaignRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCampaignRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCampaignRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCampaignRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCampaignRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCampaignRequestValidationError) ErrorName() string {
	return "DeleteCampaignRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCampaignRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCampaignRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCampaignRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCampaignRequestValidationError{}

// Validate checks the field values on DeleteCampaignResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCampaignResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCampaignResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCampaignResponseMultiError, or nil if none found.
func (m *DeleteCampaignResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCampaignResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCampaignResponseMultiError(errors)
	}

	return nil
}

// DeleteCampaignResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCampaignResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCampaignResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCampaignResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCampaignResponseMultiError) AllErrors() []error { return m }

// DeleteCampaignResponseValidationError is the validation error returned by
// DeleteCampaignResponse.Validate if the designated constraints aren't met.
type DeleteCampaignResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCampaignResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCampaignResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCampaignResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCampaignResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCampaignResponseValidationError) ErrorName() string {
	return "DeleteCampaignResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCampaignResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCampaignResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCampaignResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCampaignResponseValidationError{}

// Validate checks the field values on ListEventsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEventsRequestMultiError, or nil if none found.
func (m *ListEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEventsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEventsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEventsRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEventsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEventsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEventsRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitiatorUserId

	// no validation rules for InitiatorRoleId

	if all {
		switch v := interface{}(m.GetInitiatorOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEventsRequestValidationError{
					field:  "InitiatorOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEventsRequestValidationError{
					field:  "InitiatorOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInitiatorOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEventsRequestValidationError{
				field:  "InitiatorOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEventsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEventsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEventsRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.AffiliateId != nil {
		// no validation rules for AffiliateId
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListEventsRequestMultiError(errors)
	}

	return nil
}

// ListEventsRequestMultiError is an error wrapping multiple validation errors
// returned by ListEventsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEventsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEventsRequestMultiError) AllErrors() []error { return m }

// ListEventsRequestValidationError is the validation error returned by
// ListEventsRequest.Validate if the designated constraints aren't met.
type ListEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventsRequestValidationError) ErrorName() string {
	return "ListEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventsRequestValidationError{}

// Validate checks the field values on ListEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEventsResponseMultiError, or nil if none found.
func (m *ListEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEventsResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEventsResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEventsResponseValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListEventsResponseMultiError(errors)
	}

	return nil
}

// ListEventsResponseMultiError is an error wrapping multiple validation errors
// returned by ListEventsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEventsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEventsResponseMultiError) AllErrors() []error { return m }

// ListEventsResponseValidationError is the validation error returned by
// ListEventsResponse.Validate if the designated constraints aren't met.
type ListEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventsResponseValidationError) ErrorName() string {
	return "ListEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventsResponseValidationError{}

// Validate checks the field values on ListCommissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommissionsRequestMultiError, or nil if none found.
func (m *ListCommissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCommissionsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCommissionsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCommissionsRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCommissionsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCommissionsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCommissionsRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitiatorUserId

	// no validation rules for InitiatorRoleId

	if all {
		switch v := interface{}(m.GetInitiatorOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCommissionsRequestValidationError{
					field:  "InitiatorOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCommissionsRequestValidationError{
					field:  "InitiatorOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInitiatorOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCommissionsRequestValidationError{
				field:  "InitiatorOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCommissionsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCommissionsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCommissionsRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.AffiliateId != nil {
		// no validation rules for AffiliateId
	}

	if m.CommissionId != nil {
		// no validation rules for CommissionId
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListCommissionsRequestMultiError(errors)
	}

	return nil
}

// ListCommissionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListCommissionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCommissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommissionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommissionsRequestMultiError) AllErrors() []error { return m }

// ListCommissionsRequestValidationError is the validation error returned by
// ListCommissionsRequest.Validate if the designated constraints aren't met.
type ListCommissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommissionsRequestValidationError) ErrorName() string {
	return "ListCommissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommissionsRequestValidationError{}

// Validate checks the field values on ListCommissionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommissionsResponseMultiError, or nil if none found.
func (m *ListCommissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCommissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCommissionsResponseValidationError{
						field:  fmt.Sprintf("Commissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCommissionsResponseValidationError{
						field:  fmt.Sprintf("Commissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommissionsResponseValidationError{
					field:  fmt.Sprintf("Commissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for TotalPending

	// no validation rules for TotalApproved

	// no validation rules for TotalRejected

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListCommissionsResponseMultiError(errors)
	}

	return nil
}

// ListCommissionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListCommissionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCommissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommissionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommissionsResponseMultiError) AllErrors() []error { return m }

// ListCommissionsResponseValidationError is the validation error returned by
// ListCommissionsResponse.Validate if the designated constraints aren't met.
type ListCommissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommissionsResponseValidationError) ErrorName() string {
	return "ListCommissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommissionsResponseValidationError{}

// Validate checks the field values on ListUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersRequestMultiError, or nil if none found.
func (m *ListUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFtdStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "FtdStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "FtdStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFtdStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersRequestValidationError{
				field:  "FtdStartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFtdEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "FtdEndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "FtdEndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFtdEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersRequestValidationError{
				field:  "FtdEndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRegistrationStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "RegistrationStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "RegistrationStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegistrationStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersRequestValidationError{
				field:  "RegistrationStartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRegistrationEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "RegistrationEndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "RegistrationEndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegistrationEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersRequestValidationError{
				field:  "RegistrationEndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitiatorUserId

	// no validation rules for InitiatorRoleId

	if all {
		switch v := interface{}(m.GetInitiatorOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "InitiatorOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "InitiatorOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInitiatorOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersRequestValidationError{
				field:  "InitiatorOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.AffiliateId != nil {
		// no validation rules for AffiliateId
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListUsersRequestMultiError(errors)
	}

	return nil
}

// ListUsersRequestMultiError is an error wrapping multiple validation errors
// returned by ListUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersRequestMultiError) AllErrors() []error { return m }

// ListUsersRequestValidationError is the validation error returned by
// ListUsersRequest.Validate if the designated constraints aren't met.
type ListUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersRequestValidationError) ErrorName() string { return "ListUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersRequestValidationError{}

// Validate checks the field values on ListUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersResponseMultiError, or nil if none found.
func (m *ListUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListUsersResponseMultiError(errors)
	}

	return nil
}

// ListUsersResponseMultiError is an error wrapping multiple validation errors
// returned by ListUsersResponse.ValidateAll() if the designated constraints
// aren't met.
type ListUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersResponseMultiError) AllErrors() []error { return m }

// ListUsersResponseValidationError is the validation error returned by
// ListUsersResponse.Validate if the designated constraints aren't met.
type ListUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponseValidationError) ErrorName() string {
	return "ListUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponseValidationError{}

// Validate checks the field values on ListAffiliatesResponse_Affiliate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListAffiliatesResponse_Affiliate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAffiliatesResponse_Affiliate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListAffiliatesResponse_AffiliateMultiError, or nil if none found.
func (m *ListAffiliatesResponse_Affiliate) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAffiliatesResponse_Affiliate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AffiliateId

	// no validation rules for PhotoUrl

	// no validation rules for CompanyName

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for RetailerOperatorName

	// no validation rules for CompanyOperatorName

	// no validation rules for OperatorName

	// no validation rules for Status

	// no validation rules for LastLoginIp

	// no validation rules for BalanceUsd

	// no validation rules for BalanceReportingCurrency

	// no validation rules for CommisionsUsd

	// no validation rules for CommisionsReportingCurrency

	if len(errors) > 0 {
		return ListAffiliatesResponse_AffiliateMultiError(errors)
	}

	return nil
}

// ListAffiliatesResponse_AffiliateMultiError is an error wrapping multiple
// validation errors returned by
// ListAffiliatesResponse_Affiliate.ValidateAll() if the designated
// constraints aren't met.
type ListAffiliatesResponse_AffiliateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAffiliatesResponse_AffiliateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAffiliatesResponse_AffiliateMultiError) AllErrors() []error { return m }

// ListAffiliatesResponse_AffiliateValidationError is the validation error
// returned by ListAffiliatesResponse_Affiliate.Validate if the designated
// constraints aren't met.
type ListAffiliatesResponse_AffiliateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAffiliatesResponse_AffiliateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAffiliatesResponse_AffiliateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAffiliatesResponse_AffiliateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAffiliatesResponse_AffiliateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAffiliatesResponse_AffiliateValidationError) ErrorName() string {
	return "ListAffiliatesResponse_AffiliateValidationError"
}

// Error satisfies the builtin error interface
func (e ListAffiliatesResponse_AffiliateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAffiliatesResponse_Affiliate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAffiliatesResponse_AffiliateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAffiliatesResponse_AffiliateValidationError{}

// Validate checks the field values on Params_Parameter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Params_Parameter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Params_Parameter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Params_ParameterMultiError, or nil if none found.
func (m *Params_Parameter) ValidateAll() error {
	return m.validate(true)
}

func (m *Params_Parameter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Value

	if len(errors) > 0 {
		return Params_ParameterMultiError(errors)
	}

	return nil
}

// Params_ParameterMultiError is an error wrapping multiple validation errors
// returned by Params_Parameter.ValidateAll() if the designated constraints
// aren't met.
type Params_ParameterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Params_ParameterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Params_ParameterMultiError) AllErrors() []error { return m }

// Params_ParameterValidationError is the validation error returned by
// Params_Parameter.Validate if the designated constraints aren't met.
type Params_ParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Params_ParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Params_ParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Params_ParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Params_ParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Params_ParameterValidationError) ErrorName() string { return "Params_ParameterValidationError" }

// Error satisfies the builtin error interface
func (e Params_ParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParams_Parameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Params_ParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Params_ParameterValidationError{}

// Validate checks the field values on ChannelConfig_FacebookChannelConfig with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChannelConfig_FacebookChannelConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelConfig_FacebookChannelConfig
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChannelConfig_FacebookChannelConfigMultiError, or nil if none found.
func (m *ChannelConfig_FacebookChannelConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelConfig_FacebookChannelConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PixelId

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return ChannelConfig_FacebookChannelConfigMultiError(errors)
	}

	return nil
}

// ChannelConfig_FacebookChannelConfigMultiError is an error wrapping multiple
// validation errors returned by
// ChannelConfig_FacebookChannelConfig.ValidateAll() if the designated
// constraints aren't met.
type ChannelConfig_FacebookChannelConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelConfig_FacebookChannelConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelConfig_FacebookChannelConfigMultiError) AllErrors() []error { return m }

// ChannelConfig_FacebookChannelConfigValidationError is the validation error
// returned by ChannelConfig_FacebookChannelConfig.Validate if the designated
// constraints aren't met.
type ChannelConfig_FacebookChannelConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelConfig_FacebookChannelConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelConfig_FacebookChannelConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelConfig_FacebookChannelConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelConfig_FacebookChannelConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelConfig_FacebookChannelConfigValidationError) ErrorName() string {
	return "ChannelConfig_FacebookChannelConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelConfig_FacebookChannelConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelConfig_FacebookChannelConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelConfig_FacebookChannelConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelConfig_FacebookChannelConfigValidationError{}

// Validate checks the field values on ChannelConfig_TiktokChannelConfig with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChannelConfig_TiktokChannelConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelConfig_TiktokChannelConfig
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChannelConfig_TiktokChannelConfigMultiError, or nil if none found.
func (m *ChannelConfig_TiktokChannelConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelConfig_TiktokChannelConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PixelId

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return ChannelConfig_TiktokChannelConfigMultiError(errors)
	}

	return nil
}

// ChannelConfig_TiktokChannelConfigMultiError is an error wrapping multiple
// validation errors returned by
// ChannelConfig_TiktokChannelConfig.ValidateAll() if the designated
// constraints aren't met.
type ChannelConfig_TiktokChannelConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelConfig_TiktokChannelConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelConfig_TiktokChannelConfigMultiError) AllErrors() []error { return m }

// ChannelConfig_TiktokChannelConfigValidationError is the validation error
// returned by ChannelConfig_TiktokChannelConfig.Validate if the designated
// constraints aren't met.
type ChannelConfig_TiktokChannelConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelConfig_TiktokChannelConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelConfig_TiktokChannelConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelConfig_TiktokChannelConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelConfig_TiktokChannelConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelConfig_TiktokChannelConfigValidationError) ErrorName() string {
	return "ChannelConfig_TiktokChannelConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelConfig_TiktokChannelConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelConfig_TiktokChannelConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelConfig_TiktokChannelConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelConfig_TiktokChannelConfigValidationError{}

// Validate checks the field values on ChannelConfig_KwaiChannelConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChannelConfig_KwaiChannelConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelConfig_KwaiChannelConfig with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChannelConfig_KwaiChannelConfigMultiError, or nil if none found.
func (m *ChannelConfig_KwaiChannelConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelConfig_KwaiChannelConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PixelId

	// no validation rules for AccessToken

	// no validation rules for TrackFlag

	if len(errors) > 0 {
		return ChannelConfig_KwaiChannelConfigMultiError(errors)
	}

	return nil
}

// ChannelConfig_KwaiChannelConfigMultiError is an error wrapping multiple
// validation errors returned by ChannelConfig_KwaiChannelConfig.ValidateAll()
// if the designated constraints aren't met.
type ChannelConfig_KwaiChannelConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelConfig_KwaiChannelConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelConfig_KwaiChannelConfigMultiError) AllErrors() []error { return m }

// ChannelConfig_KwaiChannelConfigValidationError is the validation error
// returned by ChannelConfig_KwaiChannelConfig.Validate if the designated
// constraints aren't met.
type ChannelConfig_KwaiChannelConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelConfig_KwaiChannelConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelConfig_KwaiChannelConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelConfig_KwaiChannelConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelConfig_KwaiChannelConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelConfig_KwaiChannelConfigValidationError) ErrorName() string {
	return "ChannelConfig_KwaiChannelConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelConfig_KwaiChannelConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelConfig_KwaiChannelConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelConfig_KwaiChannelConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelConfig_KwaiChannelConfigValidationError{}

// Validate checks the field values on ChannelConfig_AppsflyerChannelConfig
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ChannelConfig_AppsflyerChannelConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelConfig_AppsflyerChannelConfig
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChannelConfig_AppsflyerChannelConfigMultiError, or nil if none found.
func (m *ChannelConfig_AppsflyerChannelConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelConfig_AppsflyerChannelConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppPlatform

	// no validation rules for BundleId

	// no validation rules for DevKey

	if len(errors) > 0 {
		return ChannelConfig_AppsflyerChannelConfigMultiError(errors)
	}

	return nil
}

// ChannelConfig_AppsflyerChannelConfigMultiError is an error wrapping multiple
// validation errors returned by
// ChannelConfig_AppsflyerChannelConfig.ValidateAll() if the designated
// constraints aren't met.
type ChannelConfig_AppsflyerChannelConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelConfig_AppsflyerChannelConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelConfig_AppsflyerChannelConfigMultiError) AllErrors() []error { return m }

// ChannelConfig_AppsflyerChannelConfigValidationError is the validation error
// returned by ChannelConfig_AppsflyerChannelConfig.Validate if the designated
// constraints aren't met.
type ChannelConfig_AppsflyerChannelConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelConfig_AppsflyerChannelConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelConfig_AppsflyerChannelConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelConfig_AppsflyerChannelConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelConfig_AppsflyerChannelConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelConfig_AppsflyerChannelConfigValidationError) ErrorName() string {
	return "ChannelConfig_AppsflyerChannelConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelConfig_AppsflyerChannelConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelConfig_AppsflyerChannelConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelConfig_AppsflyerChannelConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelConfig_AppsflyerChannelConfigValidationError{}

// Validate checks the field values on ChannelConfig_AdjustChannelConfig with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChannelConfig_AdjustChannelConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelConfig_AdjustChannelConfig
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChannelConfig_AdjustChannelConfigMultiError, or nil if none found.
func (m *ChannelConfig_AdjustChannelConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelConfig_AdjustChannelConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppPlatform

	// no validation rules for AppToken

	// no validation rules for BundleId

	if len(errors) > 0 {
		return ChannelConfig_AdjustChannelConfigMultiError(errors)
	}

	return nil
}

// ChannelConfig_AdjustChannelConfigMultiError is an error wrapping multiple
// validation errors returned by
// ChannelConfig_AdjustChannelConfig.ValidateAll() if the designated
// constraints aren't met.
type ChannelConfig_AdjustChannelConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelConfig_AdjustChannelConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelConfig_AdjustChannelConfigMultiError) AllErrors() []error { return m }

// ChannelConfig_AdjustChannelConfigValidationError is the validation error
// returned by ChannelConfig_AdjustChannelConfig.Validate if the designated
// constraints aren't met.
type ChannelConfig_AdjustChannelConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelConfig_AdjustChannelConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelConfig_AdjustChannelConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelConfig_AdjustChannelConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelConfig_AdjustChannelConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelConfig_AdjustChannelConfigValidationError) ErrorName() string {
	return "ChannelConfig_AdjustChannelConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelConfig_AdjustChannelConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelConfig_AdjustChannelConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelConfig_AdjustChannelConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelConfig_AdjustChannelConfigValidationError{}

// Validate checks the field values on ChannelConfig_AgencyChannelConfig with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChannelConfig_AgencyChannelConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelConfig_AgencyChannelConfig
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChannelConfig_AgencyChannelConfigMultiError, or nil if none found.
func (m *ChannelConfig_AgencyChannelConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelConfig_AgencyChannelConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CampaignId

	if len(errors) > 0 {
		return ChannelConfig_AgencyChannelConfigMultiError(errors)
	}

	return nil
}

// ChannelConfig_AgencyChannelConfigMultiError is an error wrapping multiple
// validation errors returned by
// ChannelConfig_AgencyChannelConfig.ValidateAll() if the designated
// constraints aren't met.
type ChannelConfig_AgencyChannelConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelConfig_AgencyChannelConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelConfig_AgencyChannelConfigMultiError) AllErrors() []error { return m }

// ChannelConfig_AgencyChannelConfigValidationError is the validation error
// returned by ChannelConfig_AgencyChannelConfig.Validate if the designated
// constraints aren't met.
type ChannelConfig_AgencyChannelConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelConfig_AgencyChannelConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelConfig_AgencyChannelConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelConfig_AgencyChannelConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelConfig_AgencyChannelConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelConfig_AgencyChannelConfigValidationError) ErrorName() string {
	return "ChannelConfig_AgencyChannelConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelConfig_AgencyChannelConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelConfig_AgencyChannelConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelConfig_AgencyChannelConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelConfig_AgencyChannelConfigValidationError{}

// Validate checks the field values on ChannelConfig_GoogleAdsChannelConfig
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ChannelConfig_GoogleAdsChannelConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelConfig_GoogleAdsChannelConfig
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChannelConfig_GoogleAdsChannelConfigMultiError, or nil if none found.
func (m *ChannelConfig_GoogleAdsChannelConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelConfig_GoogleAdsChannelConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CustomerId

	// no validation rules for ConversionAction

	if len(errors) > 0 {
		return ChannelConfig_GoogleAdsChannelConfigMultiError(errors)
	}

	return nil
}

// ChannelConfig_GoogleAdsChannelConfigMultiError is an error wrapping multiple
// validation errors returned by
// ChannelConfig_GoogleAdsChannelConfig.ValidateAll() if the designated
// constraints aren't met.
type ChannelConfig_GoogleAdsChannelConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelConfig_GoogleAdsChannelConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelConfig_GoogleAdsChannelConfigMultiError) AllErrors() []error { return m }

// ChannelConfig_GoogleAdsChannelConfigValidationError is the validation error
// returned by ChannelConfig_GoogleAdsChannelConfig.Validate if the designated
// constraints aren't met.
type ChannelConfig_GoogleAdsChannelConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelConfig_GoogleAdsChannelConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelConfig_GoogleAdsChannelConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelConfig_GoogleAdsChannelConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelConfig_GoogleAdsChannelConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelConfig_GoogleAdsChannelConfigValidationError) ErrorName() string {
	return "ChannelConfig_GoogleAdsChannelConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelConfig_GoogleAdsChannelConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelConfig_GoogleAdsChannelConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelConfig_GoogleAdsChannelConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelConfig_GoogleAdsChannelConfigValidationError{}

// Validate checks the field values on CustomParams_CustomParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CustomParams_CustomParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomParams_CustomParam with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CustomParams_CustomParamMultiError, or nil if none found.
func (m *CustomParams_CustomParam) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomParams_CustomParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Value

	if len(errors) > 0 {
		return CustomParams_CustomParamMultiError(errors)
	}

	return nil
}

// CustomParams_CustomParamMultiError is an error wrapping multiple validation
// errors returned by CustomParams_CustomParam.ValidateAll() if the designated
// constraints aren't met.
type CustomParams_CustomParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomParams_CustomParamMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomParams_CustomParamMultiError) AllErrors() []error { return m }

// CustomParams_CustomParamValidationError is the validation error returned by
// CustomParams_CustomParam.Validate if the designated constraints aren't met.
type CustomParams_CustomParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomParams_CustomParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomParams_CustomParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomParams_CustomParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomParams_CustomParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomParams_CustomParamValidationError) ErrorName() string {
	return "CustomParams_CustomParamValidationError"
}

// Error satisfies the builtin error interface
func (e CustomParams_CustomParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomParams_CustomParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomParams_CustomParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomParams_CustomParamValidationError{}

// Validate checks the field values on EventMappings_EventMapping with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventMappings_EventMapping) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventMappings_EventMapping with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventMappings_EventMappingMultiError, or nil if none found.
func (m *EventMappings_EventMapping) ValidateAll() error {
	return m.validate(true)
}

func (m *EventMappings_EventMapping) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.ChannelEvent != nil {
		// no validation rules for ChannelEvent
	}

	if m.CustomName != nil {
		// no validation rules for CustomName
	}

	if len(errors) > 0 {
		return EventMappings_EventMappingMultiError(errors)
	}

	return nil
}

// EventMappings_EventMappingMultiError is an error wrapping multiple
// validation errors returned by EventMappings_EventMapping.ValidateAll() if
// the designated constraints aren't met.
type EventMappings_EventMappingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMappings_EventMappingMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMappings_EventMappingMultiError) AllErrors() []error { return m }

// EventMappings_EventMappingValidationError is the validation error returned
// by EventMappings_EventMapping.Validate if the designated constraints aren't met.
type EventMappings_EventMappingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventMappings_EventMappingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventMappings_EventMappingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventMappings_EventMappingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventMappings_EventMappingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventMappings_EventMappingValidationError) ErrorName() string {
	return "EventMappings_EventMappingValidationError"
}

// Error satisfies the builtin error interface
func (e EventMappings_EventMappingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventMappings_EventMapping.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventMappings_EventMappingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventMappings_EventMappingValidationError{}

// Validate checks the field values on CreateCampaignRequest_Campaign with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCampaignRequest_Campaign) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCampaignRequest_Campaign with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCampaignRequest_CampaignMultiError, or nil if none found.
func (m *CreateCampaignRequest_Campaign) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCampaignRequest_Campaign) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for CampaignName

	// no validation rules for ChannelType

	if all {
		switch v := interface{}(m.GetChannelConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCampaignRequest_CampaignValidationError{
					field:  "ChannelConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCampaignRequest_CampaignValidationError{
					field:  "ChannelConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannelConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCampaignRequest_CampaignValidationError{
				field:  "ChannelConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCampaignRequest_CampaignMultiError(errors)
	}

	return nil
}

// CreateCampaignRequest_CampaignMultiError is an error wrapping multiple
// validation errors returned by CreateCampaignRequest_Campaign.ValidateAll()
// if the designated constraints aren't met.
type CreateCampaignRequest_CampaignMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCampaignRequest_CampaignMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCampaignRequest_CampaignMultiError) AllErrors() []error { return m }

// CreateCampaignRequest_CampaignValidationError is the validation error
// returned by CreateCampaignRequest_Campaign.Validate if the designated
// constraints aren't met.
type CreateCampaignRequest_CampaignValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCampaignRequest_CampaignValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCampaignRequest_CampaignValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCampaignRequest_CampaignValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCampaignRequest_CampaignValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCampaignRequest_CampaignValidationError) ErrorName() string {
	return "CreateCampaignRequest_CampaignValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCampaignRequest_CampaignValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCampaignRequest_Campaign.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCampaignRequest_CampaignValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCampaignRequest_CampaignValidationError{}

// Validate checks the field values on ListCampaignsResponse_CampaignInfo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListCampaignsResponse_CampaignInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCampaignsResponse_CampaignInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListCampaignsResponse_CampaignInfoMultiError, or nil if none found.
func (m *ListCampaignsResponse_CampaignInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCampaignsResponse_CampaignInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CampaignId

	// no validation rules for AffiliateCompanyName

	// no validation rules for AffiliateId

	// no validation rules for SystemOperatorName

	// no validation rules for RetailerOperatorName

	// no validation rules for CompanyOperatorName

	// no validation rules for OperatorName

	// no validation rules for CampaignName

	// no validation rules for EventMappingsStatus

	// no validation rules for EventMappingsCount

	// no validation rules for Enabled

	if all {
		switch v := interface{}(m.GetCampaign()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCampaignsResponse_CampaignInfoValidationError{
					field:  "Campaign",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCampaignsResponse_CampaignInfoValidationError{
					field:  "Campaign",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCampaign()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCampaignsResponse_CampaignInfoValidationError{
				field:  "Campaign",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCampaignsResponse_CampaignInfoMultiError(errors)
	}

	return nil
}

// ListCampaignsResponse_CampaignInfoMultiError is an error wrapping multiple
// validation errors returned by
// ListCampaignsResponse_CampaignInfo.ValidateAll() if the designated
// constraints aren't met.
type ListCampaignsResponse_CampaignInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCampaignsResponse_CampaignInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCampaignsResponse_CampaignInfoMultiError) AllErrors() []error { return m }

// ListCampaignsResponse_CampaignInfoValidationError is the validation error
// returned by ListCampaignsResponse_CampaignInfo.Validate if the designated
// constraints aren't met.
type ListCampaignsResponse_CampaignInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCampaignsResponse_CampaignInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCampaignsResponse_CampaignInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCampaignsResponse_CampaignInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCampaignsResponse_CampaignInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCampaignsResponse_CampaignInfoValidationError) ErrorName() string {
	return "ListCampaignsResponse_CampaignInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ListCampaignsResponse_CampaignInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCampaignsResponse_CampaignInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCampaignsResponse_CampaignInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCampaignsResponse_CampaignInfoValidationError{}

// Validate checks the field values on ListEventsResponse_Event with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEventsResponse_Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEventsResponse_Event with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEventsResponse_EventMultiError, or nil if none found.
func (m *ListEventsResponse_Event) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEventsResponse_Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Country

	// no validation rules for CampaignName

	// no validation rules for CampaignId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEventsResponse_EventValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEventsResponse_EventValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEventsResponse_EventValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EventType

	for idx, item := range m.GetCommissionPlans() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEventsResponse_EventValidationError{
						field:  fmt.Sprintf("CommissionPlans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEventsResponse_EventValidationError{
						field:  fmt.Sprintf("CommissionPlans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEventsResponse_EventValidationError{
					field:  fmt.Sprintf("CommissionPlans[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Currency

	// no validation rules for Amount

	// no validation rules for AmountUsd

	// no validation rules for AmountReportingCurrency

	// no validation rules for UserId

	// no validation rules for EventId

	// no validation rules for AffiliateId

	// no validation rules for AffiliateName

	// no validation rules for RetailerOperatorName

	// no validation rules for CompanyOperatorName

	// no validation rules for OperatorName

	if len(errors) > 0 {
		return ListEventsResponse_EventMultiError(errors)
	}

	return nil
}

// ListEventsResponse_EventMultiError is an error wrapping multiple validation
// errors returned by ListEventsResponse_Event.ValidateAll() if the designated
// constraints aren't met.
type ListEventsResponse_EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEventsResponse_EventMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEventsResponse_EventMultiError) AllErrors() []error { return m }

// ListEventsResponse_EventValidationError is the validation error returned by
// ListEventsResponse_Event.Validate if the designated constraints aren't met.
type ListEventsResponse_EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventsResponse_EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventsResponse_EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventsResponse_EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventsResponse_EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventsResponse_EventValidationError) ErrorName() string {
	return "ListEventsResponse_EventValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventsResponse_EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventsResponse_Event.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventsResponse_EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventsResponse_EventValidationError{}

// Validate checks the field values on ListEventsResponse_Event_CommissionPlan
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListEventsResponse_Event_CommissionPlan) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListEventsResponse_Event_CommissionPlan with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListEventsResponse_Event_CommissionPlanMultiError, or nil if none found.
func (m *ListEventsResponse_Event_CommissionPlan) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEventsResponse_Event_CommissionPlan) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommissionPlanId

	// no validation rules for CommissionPlanName

	if len(errors) > 0 {
		return ListEventsResponse_Event_CommissionPlanMultiError(errors)
	}

	return nil
}

// ListEventsResponse_Event_CommissionPlanMultiError is an error wrapping
// multiple validation errors returned by
// ListEventsResponse_Event_CommissionPlan.ValidateAll() if the designated
// constraints aren't met.
type ListEventsResponse_Event_CommissionPlanMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEventsResponse_Event_CommissionPlanMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEventsResponse_Event_CommissionPlanMultiError) AllErrors() []error { return m }

// ListEventsResponse_Event_CommissionPlanValidationError is the validation
// error returned by ListEventsResponse_Event_CommissionPlan.Validate if the
// designated constraints aren't met.
type ListEventsResponse_Event_CommissionPlanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventsResponse_Event_CommissionPlanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventsResponse_Event_CommissionPlanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventsResponse_Event_CommissionPlanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventsResponse_Event_CommissionPlanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventsResponse_Event_CommissionPlanValidationError) ErrorName() string {
	return "ListEventsResponse_Event_CommissionPlanValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventsResponse_Event_CommissionPlanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventsResponse_Event_CommissionPlan.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventsResponse_Event_CommissionPlanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventsResponse_Event_CommissionPlanValidationError{}

// Validate checks the field values on ListCommissionsResponse_Commission with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListCommissionsResponse_Commission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommissionsResponse_Commission
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListCommissionsResponse_CommissionMultiError, or nil if none found.
func (m *ListCommissionsResponse_Commission) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommissionsResponse_Commission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommissionId

	// no validation rules for Country

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCommissionsResponse_CommissionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCommissionsResponse_CommissionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCommissionsResponse_CommissionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for Paid

	// no validation rules for CommissionPlanId

	// no validation rules for CommissionPlanName

	// no validation rules for CommissionSubtype

	// no validation rules for ReportingCurrency

	// no validation rules for RevenueUsd

	// no validation rules for RevenueReportingCurrency

	// no validation rules for CommissionUsd

	// no validation rules for CommissionReportingCurrency

	// no validation rules for AdjustAmountUsd

	// no validation rules for AdjustAmountReportingCurrency

	// no validation rules for AffiliateId

	// no validation rules for AffiliateName

	// no validation rules for UserId

	// no validation rules for RetailerOperatorName

	// no validation rules for CompanyOperatorName

	// no validation rules for OperatorName

	if len(errors) > 0 {
		return ListCommissionsResponse_CommissionMultiError(errors)
	}

	return nil
}

// ListCommissionsResponse_CommissionMultiError is an error wrapping multiple
// validation errors returned by
// ListCommissionsResponse_Commission.ValidateAll() if the designated
// constraints aren't met.
type ListCommissionsResponse_CommissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommissionsResponse_CommissionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommissionsResponse_CommissionMultiError) AllErrors() []error { return m }

// ListCommissionsResponse_CommissionValidationError is the validation error
// returned by ListCommissionsResponse_Commission.Validate if the designated
// constraints aren't met.
type ListCommissionsResponse_CommissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommissionsResponse_CommissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommissionsResponse_CommissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommissionsResponse_CommissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommissionsResponse_CommissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommissionsResponse_CommissionValidationError) ErrorName() string {
	return "ListCommissionsResponse_CommissionValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommissionsResponse_CommissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommissionsResponse_Commission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommissionsResponse_CommissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommissionsResponse_CommissionValidationError{}

// Validate checks the field values on ListUsersResponse_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUsersResponse_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersResponse_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersResponse_UserMultiError, or nil if none found.
func (m *ListUsersResponse_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersResponse_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Country

	// no validation rules for AffiliateId

	// no validation rules for AffiliateName

	// no validation rules for AffiliateCompanyName

	// no validation rules for ReportingCurrency

	// no validation rules for CampaignUrl

	if all {
		switch v := interface{}(m.GetRegisteredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "RegisteredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "RegisteredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegisteredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersResponse_UserValidationError{
				field:  "RegisteredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFtdAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "FtdAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "FtdAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFtdAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersResponse_UserValidationError{
				field:  "FtdAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FtdAmountUsd

	// no validation rules for FtdAmountReportingCurrency

	// no validation rules for DepositCount

	// no validation rules for DepositAmountUsd

	// no validation rules for DepositAmountReportingCurrency

	// no validation rules for WithdrawalCount

	// no validation rules for WithdrawalAmountUsd

	// no validation rules for WithdrawalAmountReportingCurrency

	// no validation rules for NetDepositAmountUsd

	// no validation rules for NetDepositAmountReportingCurrency

	// no validation rules for BetCount

	// no validation rules for BetAmountUsd

	// no validation rules for BetAmountReportingCurrency

	// no validation rules for WinAmountUsd

	// no validation rules for WinAmountReportingCurrency

	// no validation rules for GgrUsd

	// no validation rules for GgrReportingCurrency

	// no validation rules for NgrUsd

	// no validation rules for NgrReportingCurrency

	// no validation rules for CommissionUsd

	// no validation rules for CommissionReportingCurrency

	// no validation rules for Roi

	if len(errors) > 0 {
		return ListUsersResponse_UserMultiError(errors)
	}

	return nil
}

// ListUsersResponse_UserMultiError is an error wrapping multiple validation
// errors returned by ListUsersResponse_User.ValidateAll() if the designated
// constraints aren't met.
type ListUsersResponse_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersResponse_UserMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersResponse_UserMultiError) AllErrors() []error { return m }

// ListUsersResponse_UserValidationError is the validation error returned by
// ListUsersResponse_User.Validate if the designated constraints aren't met.
type ListUsersResponse_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponse_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponse_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponse_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponse_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponse_UserValidationError) ErrorName() string {
	return "ListUsersResponse_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponse_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponse_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponse_UserValidationError{}
