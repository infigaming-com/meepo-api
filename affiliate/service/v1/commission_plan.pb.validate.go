// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: affiliate/service/v1/commission_plan.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateCommissionPlanRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommissionPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommissionPlanRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommissionPlanRequestMultiError, or nil if none found.
func (m *CreateCommissionPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommissionPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommissionPlanRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommissionPlanRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommissionPlanRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Title

	// no validation rules for Status

	// no validation rules for BaseCurrency

	if all {
		switch v := interface{}(m.GetPlanConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommissionPlanRequestValidationError{
					field:  "PlanConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommissionPlanRequestValidationError{
					field:  "PlanConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlanConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommissionPlanRequestValidationError{
				field:  "PlanConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommissionPlanRequestMultiError(errors)
	}

	return nil
}

// CreateCommissionPlanRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCommissionPlanRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateCommissionPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommissionPlanRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommissionPlanRequestMultiError) AllErrors() []error { return m }

// CreateCommissionPlanRequestValidationError is the validation error returned
// by CreateCommissionPlanRequest.Validate if the designated constraints
// aren't met.
type CreateCommissionPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommissionPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommissionPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommissionPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommissionPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommissionPlanRequestValidationError) ErrorName() string {
	return "CreateCommissionPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommissionPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommissionPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommissionPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommissionPlanRequestValidationError{}

// Validate checks the field values on CreateCommissionPlanResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommissionPlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommissionPlanResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommissionPlanResponseMultiError, or nil if none found.
func (m *CreateCommissionPlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommissionPlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateCommissionPlanResponseMultiError(errors)
	}

	return nil
}

// CreateCommissionPlanResponseMultiError is an error wrapping multiple
// validation errors returned by CreateCommissionPlanResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateCommissionPlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommissionPlanResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommissionPlanResponseMultiError) AllErrors() []error { return m }

// CreateCommissionPlanResponseValidationError is the validation error returned
// by CreateCommissionPlanResponse.Validate if the designated constraints
// aren't met.
type CreateCommissionPlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommissionPlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommissionPlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommissionPlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommissionPlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommissionPlanResponseValidationError) ErrorName() string {
	return "CreateCommissionPlanResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommissionPlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommissionPlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommissionPlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommissionPlanResponseValidationError{}

// Validate checks the field values on UpdateCommissionPlanRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommissionPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommissionPlanRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommissionPlanRequestMultiError, or nil if none found.
func (m *UpdateCommissionPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommissionPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCommissionPlanRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCommissionPlanRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCommissionPlanRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Title

	// no validation rules for Status

	// no validation rules for BaseCurrency

	if all {
		switch v := interface{}(m.GetPlanConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCommissionPlanRequestValidationError{
					field:  "PlanConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCommissionPlanRequestValidationError{
					field:  "PlanConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlanConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCommissionPlanRequestValidationError{
				field:  "PlanConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CommissionPlanId

	if len(errors) > 0 {
		return UpdateCommissionPlanRequestMultiError(errors)
	}

	return nil
}

// UpdateCommissionPlanRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCommissionPlanRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateCommissionPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommissionPlanRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommissionPlanRequestMultiError) AllErrors() []error { return m }

// UpdateCommissionPlanRequestValidationError is the validation error returned
// by UpdateCommissionPlanRequest.Validate if the designated constraints
// aren't met.
type UpdateCommissionPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommissionPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommissionPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommissionPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommissionPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommissionPlanRequestValidationError) ErrorName() string {
	return "UpdateCommissionPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommissionPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommissionPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommissionPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommissionPlanRequestValidationError{}

// Validate checks the field values on UpdateCommissionPlanResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommissionPlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommissionPlanResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommissionPlanResponseMultiError, or nil if none found.
func (m *UpdateCommissionPlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommissionPlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCommissionPlanResponseMultiError(errors)
	}

	return nil
}

// UpdateCommissionPlanResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateCommissionPlanResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateCommissionPlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommissionPlanResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommissionPlanResponseMultiError) AllErrors() []error { return m }

// UpdateCommissionPlanResponseValidationError is the validation error returned
// by UpdateCommissionPlanResponse.Validate if the designated constraints
// aren't met.
type UpdateCommissionPlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommissionPlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommissionPlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommissionPlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommissionPlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommissionPlanResponseValidationError) ErrorName() string {
	return "UpdateCommissionPlanResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommissionPlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommissionPlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommissionPlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommissionPlanResponseValidationError{}

// Validate checks the field values on GetCommissionPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommissionPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommissionPlanRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommissionPlanRequestMultiError, or nil if none found.
func (m *GetCommissionPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommissionPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommissionPlanRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommissionPlanRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommissionPlanRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CommissionPlanId

	if len(errors) > 0 {
		return GetCommissionPlanRequestMultiError(errors)
	}

	return nil
}

// GetCommissionPlanRequestMultiError is an error wrapping multiple validation
// errors returned by GetCommissionPlanRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCommissionPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommissionPlanRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommissionPlanRequestMultiError) AllErrors() []error { return m }

// GetCommissionPlanRequestValidationError is the validation error returned by
// GetCommissionPlanRequest.Validate if the designated constraints aren't met.
type GetCommissionPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommissionPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommissionPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommissionPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommissionPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommissionPlanRequestValidationError) ErrorName() string {
	return "GetCommissionPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommissionPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommissionPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommissionPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommissionPlanRequestValidationError{}

// Validate checks the field values on GetCommissionPlanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommissionPlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommissionPlanResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommissionPlanResponseMultiError, or nil if none found.
func (m *GetCommissionPlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommissionPlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommissionPlanResponseValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommissionPlanResponseValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommissionPlanResponseValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Title

	// no validation rules for Status

	// no validation rules for BaseCurrency

	if all {
		switch v := interface{}(m.GetPlanConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommissionPlanResponseValidationError{
					field:  "PlanConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommissionPlanResponseValidationError{
					field:  "PlanConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlanConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommissionPlanResponseValidationError{
				field:  "PlanConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCommissionPlanResponseMultiError(errors)
	}

	return nil
}

// GetCommissionPlanResponseMultiError is an error wrapping multiple validation
// errors returned by GetCommissionPlanResponse.ValidateAll() if the
// designated constraints aren't met.
type GetCommissionPlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommissionPlanResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommissionPlanResponseMultiError) AllErrors() []error { return m }

// GetCommissionPlanResponseValidationError is the validation error returned by
// GetCommissionPlanResponse.Validate if the designated constraints aren't met.
type GetCommissionPlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommissionPlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommissionPlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommissionPlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommissionPlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommissionPlanResponseValidationError) ErrorName() string {
	return "GetCommissionPlanResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommissionPlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommissionPlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommissionPlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommissionPlanResponseValidationError{}

// Validate checks the field values on ListCommissionPlansRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommissionPlansRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommissionPlansRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommissionPlansRequestMultiError, or nil if none found.
func (m *ListCommissionPlansRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommissionPlansRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCommissionPlansRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCommissionPlansRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCommissionPlansRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListCommissionPlansRequestMultiError(errors)
	}

	return nil
}

// ListCommissionPlansRequestMultiError is an error wrapping multiple
// validation errors returned by ListCommissionPlansRequest.ValidateAll() if
// the designated constraints aren't met.
type ListCommissionPlansRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommissionPlansRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommissionPlansRequestMultiError) AllErrors() []error { return m }

// ListCommissionPlansRequestValidationError is the validation error returned
// by ListCommissionPlansRequest.Validate if the designated constraints aren't met.
type ListCommissionPlansRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommissionPlansRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommissionPlansRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommissionPlansRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommissionPlansRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommissionPlansRequestValidationError) ErrorName() string {
	return "ListCommissionPlansRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommissionPlansRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommissionPlansRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommissionPlansRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommissionPlansRequestValidationError{}

// Validate checks the field values on ListCommissionPlansResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommissionPlansResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommissionPlansResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommissionPlansResponseMultiError, or nil if none found.
func (m *ListCommissionPlansResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommissionPlansResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCommissionPlans() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCommissionPlansResponseValidationError{
						field:  fmt.Sprintf("CommissionPlans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCommissionPlansResponseValidationError{
						field:  fmt.Sprintf("CommissionPlans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommissionPlansResponseValidationError{
					field:  fmt.Sprintf("CommissionPlans[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for ActiveCount

	// no validation rules for PausedCount

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListCommissionPlansResponseMultiError(errors)
	}

	return nil
}

// ListCommissionPlansResponseMultiError is an error wrapping multiple
// validation errors returned by ListCommissionPlansResponse.ValidateAll() if
// the designated constraints aren't met.
type ListCommissionPlansResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommissionPlansResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommissionPlansResponseMultiError) AllErrors() []error { return m }

// ListCommissionPlansResponseValidationError is the validation error returned
// by ListCommissionPlansResponse.Validate if the designated constraints
// aren't met.
type ListCommissionPlansResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommissionPlansResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommissionPlansResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommissionPlansResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommissionPlansResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommissionPlansResponseValidationError) ErrorName() string {
	return "ListCommissionPlansResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommissionPlansResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommissionPlansResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommissionPlansResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommissionPlansResponseValidationError{}

// Validate checks the field values on CommissionPlan with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommissionPlan) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommissionPlan with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommissionPlanMultiError,
// or nil if none found.
func (m *CommissionPlan) ValidateAll() error {
	return m.validate(true)
}

func (m *CommissionPlan) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommissionPlanId

	// no validation rules for Title

	// no validation rules for Status

	// no validation rules for Source

	// no validation rules for AssignedCount

	// no validation rules for BaseCurrency

	// no validation rules for SourceOperatorName

	if len(errors) > 0 {
		return CommissionPlanMultiError(errors)
	}

	return nil
}

// CommissionPlanMultiError is an error wrapping multiple validation errors
// returned by CommissionPlan.ValidateAll() if the designated constraints
// aren't met.
type CommissionPlanMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommissionPlanMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommissionPlanMultiError) AllErrors() []error { return m }

// CommissionPlanValidationError is the validation error returned by
// CommissionPlan.Validate if the designated constraints aren't met.
type CommissionPlanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommissionPlanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommissionPlanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommissionPlanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommissionPlanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommissionPlanValidationError) ErrorName() string { return "CommissionPlanValidationError" }

// Error satisfies the builtin error interface
func (e CommissionPlanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommissionPlan.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommissionPlanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommissionPlanValidationError{}

// Validate checks the field values on DeleteCommissionPlanRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommissionPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommissionPlanRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommissionPlanRequestMultiError, or nil if none found.
func (m *DeleteCommissionPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommissionPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteCommissionPlanRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteCommissionPlanRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteCommissionPlanRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CommissionPlanId

	if m.AlternativeCommissionPlanId != nil {
		// no validation rules for AlternativeCommissionPlanId
	}

	if len(errors) > 0 {
		return DeleteCommissionPlanRequestMultiError(errors)
	}

	return nil
}

// DeleteCommissionPlanRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCommissionPlanRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteCommissionPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommissionPlanRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommissionPlanRequestMultiError) AllErrors() []error { return m }

// DeleteCommissionPlanRequestValidationError is the validation error returned
// by DeleteCommissionPlanRequest.Validate if the designated constraints
// aren't met.
type DeleteCommissionPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommissionPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommissionPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommissionPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommissionPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommissionPlanRequestValidationError) ErrorName() string {
	return "DeleteCommissionPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommissionPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommissionPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommissionPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommissionPlanRequestValidationError{}

// Validate checks the field values on DeleteCommissionPlanResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommissionPlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommissionPlanResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommissionPlanResponseMultiError, or nil if none found.
func (m *DeleteCommissionPlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommissionPlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCommissionPlanResponseMultiError(errors)
	}

	return nil
}

// DeleteCommissionPlanResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteCommissionPlanResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteCommissionPlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommissionPlanResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommissionPlanResponseMultiError) AllErrors() []error { return m }

// DeleteCommissionPlanResponseValidationError is the validation error returned
// by DeleteCommissionPlanResponse.Validate if the designated constraints
// aren't met.
type DeleteCommissionPlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommissionPlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommissionPlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommissionPlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommissionPlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommissionPlanResponseValidationError) ErrorName() string {
	return "DeleteCommissionPlanResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommissionPlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommissionPlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommissionPlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommissionPlanResponseValidationError{}

// Validate checks the field values on CommissionPlanConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommissionPlanConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommissionPlanConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommissionPlanConfigMultiError, or nil if none found.
func (m *CommissionPlanConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *CommissionPlanConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCpa()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommissionPlanConfigValidationError{
					field:  "Cpa",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommissionPlanConfigValidationError{
					field:  "Cpa",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCpa()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommissionPlanConfigValidationError{
				field:  "Cpa",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRevshare()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommissionPlanConfigValidationError{
					field:  "Revshare",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommissionPlanConfigValidationError{
					field:  "Revshare",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRevshare()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommissionPlanConfigValidationError{
				field:  "Revshare",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCpl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommissionPlanConfigValidationError{
					field:  "Cpl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommissionPlanConfigValidationError{
					field:  "Cpl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCpl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommissionPlanConfigValidationError{
				field:  "Cpl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCpc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommissionPlanConfigValidationError{
					field:  "Cpc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommissionPlanConfigValidationError{
					field:  "Cpc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCpc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommissionPlanConfigValidationError{
				field:  "Cpc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFlatFee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommissionPlanConfigValidationError{
					field:  "FlatFee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommissionPlanConfigValidationError{
					field:  "FlatFee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFlatFee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommissionPlanConfigValidationError{
				field:  "FlatFee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommissionPlanConfigMultiError(errors)
	}

	return nil
}

// CommissionPlanConfigMultiError is an error wrapping multiple validation
// errors returned by CommissionPlanConfig.ValidateAll() if the designated
// constraints aren't met.
type CommissionPlanConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommissionPlanConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommissionPlanConfigMultiError) AllErrors() []error { return m }

// CommissionPlanConfigValidationError is the validation error returned by
// CommissionPlanConfig.Validate if the designated constraints aren't met.
type CommissionPlanConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommissionPlanConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommissionPlanConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommissionPlanConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommissionPlanConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommissionPlanConfigValidationError) ErrorName() string {
	return "CommissionPlanConfigValidationError"
}

// Error satisfies the builtin error interface
func (e CommissionPlanConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommissionPlanConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommissionPlanConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommissionPlanConfigValidationError{}

// Validate checks the field values on CPAConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CPAConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CPAConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CPAConfigMultiError, or nil
// if none found.
func (m *CPAConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *CPAConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for CommissionType

	if m.Flat != nil {

		if all {
			switch v := interface{}(m.GetFlat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CPAConfigValidationError{
						field:  "Flat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CPAConfigValidationError{
						field:  "Flat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFlat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CPAConfigValidationError{
					field:  "Flat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.FlatByCountries != nil {

		if all {
			switch v := interface{}(m.GetFlatByCountries()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CPAConfigValidationError{
						field:  "FlatByCountries",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CPAConfigValidationError{
						field:  "FlatByCountries",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFlatByCountries()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CPAConfigValidationError{
					field:  "FlatByCountries",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Progressive != nil {

		if all {
			switch v := interface{}(m.GetProgressive()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CPAConfigValidationError{
						field:  "Progressive",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CPAConfigValidationError{
						field:  "Progressive",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProgressive()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CPAConfigValidationError{
					field:  "Progressive",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ProgressiveByCountries != nil {

		if all {
			switch v := interface{}(m.GetProgressiveByCountries()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CPAConfigValidationError{
						field:  "ProgressiveByCountries",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CPAConfigValidationError{
						field:  "ProgressiveByCountries",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProgressiveByCountries()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CPAConfigValidationError{
					field:  "ProgressiveByCountries",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Qualification != nil {

		if all {
			switch v := interface{}(m.GetQualification()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CPAConfigValidationError{
						field:  "Qualification",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CPAConfigValidationError{
						field:  "Qualification",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQualification()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CPAConfigValidationError{
					field:  "Qualification",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.AdvancedOptions != nil {

		if all {
			switch v := interface{}(m.GetAdvancedOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CPAConfigValidationError{
						field:  "AdvancedOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CPAConfigValidationError{
						field:  "AdvancedOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAdvancedOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CPAConfigValidationError{
					field:  "AdvancedOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CPAConfigMultiError(errors)
	}

	return nil
}

// CPAConfigMultiError is an error wrapping multiple validation errors returned
// by CPAConfig.ValidateAll() if the designated constraints aren't met.
type CPAConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CPAConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CPAConfigMultiError) AllErrors() []error { return m }

// CPAConfigValidationError is the validation error returned by
// CPAConfig.Validate if the designated constraints aren't met.
type CPAConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CPAConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CPAConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CPAConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CPAConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CPAConfigValidationError) ErrorName() string { return "CPAConfigValidationError" }

// Error satisfies the builtin error interface
func (e CPAConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCPAConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CPAConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CPAConfigValidationError{}

// Validate checks the field values on FlatCommission with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FlatCommission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlatCommission with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FlatCommissionMultiError,
// or nil if none found.
func (m *FlatCommission) ValidateAll() error {
	return m.validate(true)
}

func (m *FlatCommission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Commission

	if len(errors) > 0 {
		return FlatCommissionMultiError(errors)
	}

	return nil
}

// FlatCommissionMultiError is an error wrapping multiple validation errors
// returned by FlatCommission.ValidateAll() if the designated constraints
// aren't met.
type FlatCommissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlatCommissionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlatCommissionMultiError) AllErrors() []error { return m }

// FlatCommissionValidationError is the validation error returned by
// FlatCommission.Validate if the designated constraints aren't met.
type FlatCommissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlatCommissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlatCommissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlatCommissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlatCommissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlatCommissionValidationError) ErrorName() string { return "FlatCommissionValidationError" }

// Error satisfies the builtin error interface
func (e FlatCommissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlatCommission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlatCommissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlatCommissionValidationError{}

// Validate checks the field values on FlatByCountriesCommission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FlatByCountriesCommission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlatByCountriesCommission with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FlatByCountriesCommissionMultiError, or nil if none found.
func (m *FlatByCountriesCommission) ValidateAll() error {
	return m.validate(true)
}

func (m *FlatByCountriesCommission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCountryGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FlatByCountriesCommissionValidationError{
						field:  fmt.Sprintf("CountryGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FlatByCountriesCommissionValidationError{
						field:  fmt.Sprintf("CountryGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FlatByCountriesCommissionValidationError{
					field:  fmt.Sprintf("CountryGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.OtherCountriesCommission != nil {
		// no validation rules for OtherCountriesCommission
	}

	if len(errors) > 0 {
		return FlatByCountriesCommissionMultiError(errors)
	}

	return nil
}

// FlatByCountriesCommissionMultiError is an error wrapping multiple validation
// errors returned by FlatByCountriesCommission.ValidateAll() if the
// designated constraints aren't met.
type FlatByCountriesCommissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlatByCountriesCommissionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlatByCountriesCommissionMultiError) AllErrors() []error { return m }

// FlatByCountriesCommissionValidationError is the validation error returned by
// FlatByCountriesCommission.Validate if the designated constraints aren't met.
type FlatByCountriesCommissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlatByCountriesCommissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlatByCountriesCommissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlatByCountriesCommissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlatByCountriesCommissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlatByCountriesCommissionValidationError) ErrorName() string {
	return "FlatByCountriesCommissionValidationError"
}

// Error satisfies the builtin error interface
func (e FlatByCountriesCommissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlatByCountriesCommission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlatByCountriesCommissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlatByCountriesCommissionValidationError{}

// Validate checks the field values on CountryCommissionGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountryCommissionGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountryCommissionGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountryCommissionGroupMultiError, or nil if none found.
func (m *CountryCommissionGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *CountryCommissionGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Commission

	if len(errors) > 0 {
		return CountryCommissionGroupMultiError(errors)
	}

	return nil
}

// CountryCommissionGroupMultiError is an error wrapping multiple validation
// errors returned by CountryCommissionGroup.ValidateAll() if the designated
// constraints aren't met.
type CountryCommissionGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountryCommissionGroupMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountryCommissionGroupMultiError) AllErrors() []error { return m }

// CountryCommissionGroupValidationError is the validation error returned by
// CountryCommissionGroup.Validate if the designated constraints aren't met.
type CountryCommissionGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountryCommissionGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountryCommissionGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountryCommissionGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountryCommissionGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountryCommissionGroupValidationError) ErrorName() string {
	return "CountryCommissionGroupValidationError"
}

// Error satisfies the builtin error interface
func (e CountryCommissionGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountryCommissionGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountryCommissionGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountryCommissionGroupValidationError{}

// Validate checks the field values on ProgressiveCommission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProgressiveCommission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProgressiveCommission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProgressiveCommissionMultiError, or nil if none found.
func (m *ProgressiveCommission) ValidateAll() error {
	return m.validate(true)
}

func (m *ProgressiveCommission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Metric

	for idx, item := range m.GetRanges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProgressiveCommissionValidationError{
						field:  fmt.Sprintf("Ranges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProgressiveCommissionValidationError{
						field:  fmt.Sprintf("Ranges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProgressiveCommissionValidationError{
					field:  fmt.Sprintf("Ranges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProgressiveCommissionMultiError(errors)
	}

	return nil
}

// ProgressiveCommissionMultiError is an error wrapping multiple validation
// errors returned by ProgressiveCommission.ValidateAll() if the designated
// constraints aren't met.
type ProgressiveCommissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProgressiveCommissionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProgressiveCommissionMultiError) AllErrors() []error { return m }

// ProgressiveCommissionValidationError is the validation error returned by
// ProgressiveCommission.Validate if the designated constraints aren't met.
type ProgressiveCommissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProgressiveCommissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProgressiveCommissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProgressiveCommissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProgressiveCommissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProgressiveCommissionValidationError) ErrorName() string {
	return "ProgressiveCommissionValidationError"
}

// Error satisfies the builtin error interface
func (e ProgressiveCommissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProgressiveCommission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProgressiveCommissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProgressiveCommissionValidationError{}

// Validate checks the field values on ProgressiveCommissionRange with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProgressiveCommissionRange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProgressiveCommissionRange with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProgressiveCommissionRangeMultiError, or nil if none found.
func (m *ProgressiveCommissionRange) ValidateAll() error {
	return m.validate(true)
}

func (m *ProgressiveCommissionRange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for From

	// no validation rules for Commission

	if m.To != nil {
		// no validation rules for To
	}

	if len(errors) > 0 {
		return ProgressiveCommissionRangeMultiError(errors)
	}

	return nil
}

// ProgressiveCommissionRangeMultiError is an error wrapping multiple
// validation errors returned by ProgressiveCommissionRange.ValidateAll() if
// the designated constraints aren't met.
type ProgressiveCommissionRangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProgressiveCommissionRangeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProgressiveCommissionRangeMultiError) AllErrors() []error { return m }

// ProgressiveCommissionRangeValidationError is the validation error returned
// by ProgressiveCommissionRange.Validate if the designated constraints aren't met.
type ProgressiveCommissionRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProgressiveCommissionRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProgressiveCommissionRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProgressiveCommissionRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProgressiveCommissionRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProgressiveCommissionRangeValidationError) ErrorName() string {
	return "ProgressiveCommissionRangeValidationError"
}

// Error satisfies the builtin error interface
func (e ProgressiveCommissionRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProgressiveCommissionRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProgressiveCommissionRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProgressiveCommissionRangeValidationError{}

// Validate checks the field values on ProgressiveByCountriesCommission with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ProgressiveByCountriesCommission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProgressiveByCountriesCommission with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProgressiveByCountriesCommissionMultiError, or nil if none found.
func (m *ProgressiveByCountriesCommission) ValidateAll() error {
	return m.validate(true)
}

func (m *ProgressiveByCountriesCommission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Metric

	for idx, item := range m.GetCountryGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProgressiveByCountriesCommissionValidationError{
						field:  fmt.Sprintf("CountryGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProgressiveByCountriesCommissionValidationError{
						field:  fmt.Sprintf("CountryGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProgressiveByCountriesCommissionValidationError{
					field:  fmt.Sprintf("CountryGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOtherCountriesRanges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProgressiveByCountriesCommissionValidationError{
						field:  fmt.Sprintf("OtherCountriesRanges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProgressiveByCountriesCommissionValidationError{
						field:  fmt.Sprintf("OtherCountriesRanges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProgressiveByCountriesCommissionValidationError{
					field:  fmt.Sprintf("OtherCountriesRanges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProgressiveByCountriesCommissionMultiError(errors)
	}

	return nil
}

// ProgressiveByCountriesCommissionMultiError is an error wrapping multiple
// validation errors returned by
// ProgressiveByCountriesCommission.ValidateAll() if the designated
// constraints aren't met.
type ProgressiveByCountriesCommissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProgressiveByCountriesCommissionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProgressiveByCountriesCommissionMultiError) AllErrors() []error { return m }

// ProgressiveByCountriesCommissionValidationError is the validation error
// returned by ProgressiveByCountriesCommission.Validate if the designated
// constraints aren't met.
type ProgressiveByCountriesCommissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProgressiveByCountriesCommissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProgressiveByCountriesCommissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProgressiveByCountriesCommissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProgressiveByCountriesCommissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProgressiveByCountriesCommissionValidationError) ErrorName() string {
	return "ProgressiveByCountriesCommissionValidationError"
}

// Error satisfies the builtin error interface
func (e ProgressiveByCountriesCommissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProgressiveByCountriesCommission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProgressiveByCountriesCommissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProgressiveByCountriesCommissionValidationError{}

// Validate checks the field values on CountryProgressiveGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountryProgressiveGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountryProgressiveGroup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountryProgressiveGroupMultiError, or nil if none found.
func (m *CountryProgressiveGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *CountryProgressiveGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRanges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CountryProgressiveGroupValidationError{
						field:  fmt.Sprintf("Ranges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CountryProgressiveGroupValidationError{
						field:  fmt.Sprintf("Ranges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CountryProgressiveGroupValidationError{
					field:  fmt.Sprintf("Ranges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CountryProgressiveGroupMultiError(errors)
	}

	return nil
}

// CountryProgressiveGroupMultiError is an error wrapping multiple validation
// errors returned by CountryProgressiveGroup.ValidateAll() if the designated
// constraints aren't met.
type CountryProgressiveGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountryProgressiveGroupMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountryProgressiveGroupMultiError) AllErrors() []error { return m }

// CountryProgressiveGroupValidationError is the validation error returned by
// CountryProgressiveGroup.Validate if the designated constraints aren't met.
type CountryProgressiveGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountryProgressiveGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountryProgressiveGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountryProgressiveGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountryProgressiveGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountryProgressiveGroupValidationError) ErrorName() string {
	return "CountryProgressiveGroupValidationError"
}

// Error satisfies the builtin error interface
func (e CountryProgressiveGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountryProgressiveGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountryProgressiveGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountryProgressiveGroupValidationError{}

// Validate checks the field values on Qualification with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Qualification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Qualification with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QualificationMultiError, or
// nil if none found.
func (m *Qualification) ValidateAll() error {
	return m.validate(true)
}

func (m *Qualification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.MinFtdAmount != nil {
		// no validation rules for MinFtdAmount
	}

	if m.MinDepositsCount != nil {
		// no validation rules for MinDepositsCount
	}

	if m.MinDepositsAmount != nil {
		// no validation rules for MinDepositsAmount
	}

	if m.MinBetsCount != nil {
		// no validation rules for MinBetsCount
	}

	if m.MinBetsAmount != nil {
		// no validation rules for MinBetsAmount
	}

	if m.TimeLimitAfterRegistrationDays != nil {
		// no validation rules for TimeLimitAfterRegistrationDays
	}

	if m.TimeLimitAfterFtdDays != nil {
		// no validation rules for TimeLimitAfterFtdDays
	}

	if len(errors) > 0 {
		return QualificationMultiError(errors)
	}

	return nil
}

// QualificationMultiError is an error wrapping multiple validation errors
// returned by Qualification.ValidateAll() if the designated constraints
// aren't met.
type QualificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QualificationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QualificationMultiError) AllErrors() []error { return m }

// QualificationValidationError is the validation error returned by
// Qualification.Validate if the designated constraints aren't met.
type QualificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QualificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QualificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QualificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QualificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QualificationValidationError) ErrorName() string { return "QualificationValidationError" }

// Error satisfies the builtin error interface
func (e QualificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQualification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QualificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QualificationValidationError{}

// Validate checks the field values on AdvancedOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdvancedOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdvancedOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdvancedOptionsMultiError, or nil if none found.
func (m *AdvancedOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *AdvancedOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.HoldPeriodDays != nil {
		// no validation rules for HoldPeriodDays
	}

	if len(errors) > 0 {
		return AdvancedOptionsMultiError(errors)
	}

	return nil
}

// AdvancedOptionsMultiError is an error wrapping multiple validation errors
// returned by AdvancedOptions.ValidateAll() if the designated constraints
// aren't met.
type AdvancedOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdvancedOptionsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdvancedOptionsMultiError) AllErrors() []error { return m }

// AdvancedOptionsValidationError is the validation error returned by
// AdvancedOptions.Validate if the designated constraints aren't met.
type AdvancedOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdvancedOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdvancedOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdvancedOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdvancedOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdvancedOptionsValidationError) ErrorName() string { return "AdvancedOptionsValidationError" }

// Error satisfies the builtin error interface
func (e AdvancedOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdvancedOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdvancedOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdvancedOptionsValidationError{}

// Validate checks the field values on RevShareConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RevShareConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevShareConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RevShareConfigMultiError,
// or nil if none found.
func (m *RevShareConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *RevShareConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for BasedOn

	// no validation rules for NegativeCarryover

	// no validation rules for CommissionType

	if m.Flat != nil {

		if all {
			switch v := interface{}(m.GetFlat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RevShareConfigValidationError{
						field:  "Flat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RevShareConfigValidationError{
						field:  "Flat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFlat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RevShareConfigValidationError{
					field:  "Flat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.FlatByCountries != nil {

		if all {
			switch v := interface{}(m.GetFlatByCountries()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RevShareConfigValidationError{
						field:  "FlatByCountries",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RevShareConfigValidationError{
						field:  "FlatByCountries",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFlatByCountries()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RevShareConfigValidationError{
					field:  "FlatByCountries",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Progressive != nil {

		if all {
			switch v := interface{}(m.GetProgressive()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RevShareConfigValidationError{
						field:  "Progressive",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RevShareConfigValidationError{
						field:  "Progressive",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProgressive()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RevShareConfigValidationError{
					field:  "Progressive",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ProgressiveByCountries != nil {

		if all {
			switch v := interface{}(m.GetProgressiveByCountries()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RevShareConfigValidationError{
						field:  "ProgressiveByCountries",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RevShareConfigValidationError{
						field:  "ProgressiveByCountries",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProgressiveByCountries()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RevShareConfigValidationError{
					field:  "ProgressiveByCountries",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Qualification != nil {

		if all {
			switch v := interface{}(m.GetQualification()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RevShareConfigValidationError{
						field:  "Qualification",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RevShareConfigValidationError{
						field:  "Qualification",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQualification()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RevShareConfigValidationError{
					field:  "Qualification",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RevShareConfigMultiError(errors)
	}

	return nil
}

// RevShareConfigMultiError is an error wrapping multiple validation errors
// returned by RevShareConfig.ValidateAll() if the designated constraints
// aren't met.
type RevShareConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevShareConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevShareConfigMultiError) AllErrors() []error { return m }

// RevShareConfigValidationError is the validation error returned by
// RevShareConfig.Validate if the designated constraints aren't met.
type RevShareConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevShareConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevShareConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevShareConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevShareConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevShareConfigValidationError) ErrorName() string { return "RevShareConfigValidationError" }

// Error satisfies the builtin error interface
func (e RevShareConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevShareConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevShareConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevShareConfigValidationError{}

// Validate checks the field values on FlatRateCommission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FlatRateCommission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlatRateCommission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FlatRateCommissionMultiError, or nil if none found.
func (m *FlatRateCommission) ValidateAll() error {
	return m.validate(true)
}

func (m *FlatRateCommission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rate

	if len(errors) > 0 {
		return FlatRateCommissionMultiError(errors)
	}

	return nil
}

// FlatRateCommissionMultiError is an error wrapping multiple validation errors
// returned by FlatRateCommission.ValidateAll() if the designated constraints
// aren't met.
type FlatRateCommissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlatRateCommissionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlatRateCommissionMultiError) AllErrors() []error { return m }

// FlatRateCommissionValidationError is the validation error returned by
// FlatRateCommission.Validate if the designated constraints aren't met.
type FlatRateCommissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlatRateCommissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlatRateCommissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlatRateCommissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlatRateCommissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlatRateCommissionValidationError) ErrorName() string {
	return "FlatRateCommissionValidationError"
}

// Error satisfies the builtin error interface
func (e FlatRateCommissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlatRateCommission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlatRateCommissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlatRateCommissionValidationError{}

// Validate checks the field values on FlatByCountriesRateCommission with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FlatByCountriesRateCommission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlatByCountriesRateCommission with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FlatByCountriesRateCommissionMultiError, or nil if none found.
func (m *FlatByCountriesRateCommission) ValidateAll() error {
	return m.validate(true)
}

func (m *FlatByCountriesRateCommission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCountryGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FlatByCountriesRateCommissionValidationError{
						field:  fmt.Sprintf("CountryGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FlatByCountriesRateCommissionValidationError{
						field:  fmt.Sprintf("CountryGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FlatByCountriesRateCommissionValidationError{
					field:  fmt.Sprintf("CountryGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.OtherCountriesRate != nil {
		// no validation rules for OtherCountriesRate
	}

	if len(errors) > 0 {
		return FlatByCountriesRateCommissionMultiError(errors)
	}

	return nil
}

// FlatByCountriesRateCommissionMultiError is an error wrapping multiple
// validation errors returned by FlatByCountriesRateCommission.ValidateAll()
// if the designated constraints aren't met.
type FlatByCountriesRateCommissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlatByCountriesRateCommissionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlatByCountriesRateCommissionMultiError) AllErrors() []error { return m }

// FlatByCountriesRateCommissionValidationError is the validation error
// returned by FlatByCountriesRateCommission.Validate if the designated
// constraints aren't met.
type FlatByCountriesRateCommissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlatByCountriesRateCommissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlatByCountriesRateCommissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlatByCountriesRateCommissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlatByCountriesRateCommissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlatByCountriesRateCommissionValidationError) ErrorName() string {
	return "FlatByCountriesRateCommissionValidationError"
}

// Error satisfies the builtin error interface
func (e FlatByCountriesRateCommissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlatByCountriesRateCommission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlatByCountriesRateCommissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlatByCountriesRateCommissionValidationError{}

// Validate checks the field values on CountryRateGroup with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CountryRateGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountryRateGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountryRateGroupMultiError, or nil if none found.
func (m *CountryRateGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *CountryRateGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rate

	if len(errors) > 0 {
		return CountryRateGroupMultiError(errors)
	}

	return nil
}

// CountryRateGroupMultiError is an error wrapping multiple validation errors
// returned by CountryRateGroup.ValidateAll() if the designated constraints
// aren't met.
type CountryRateGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountryRateGroupMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountryRateGroupMultiError) AllErrors() []error { return m }

// CountryRateGroupValidationError is the validation error returned by
// CountryRateGroup.Validate if the designated constraints aren't met.
type CountryRateGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountryRateGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountryRateGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountryRateGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountryRateGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountryRateGroupValidationError) ErrorName() string { return "CountryRateGroupValidationError" }

// Error satisfies the builtin error interface
func (e CountryRateGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountryRateGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountryRateGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountryRateGroupValidationError{}

// Validate checks the field values on ProgressiveRateCommission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProgressiveRateCommission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProgressiveRateCommission with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProgressiveRateCommissionMultiError, or nil if none found.
func (m *ProgressiveRateCommission) ValidateAll() error {
	return m.validate(true)
}

func (m *ProgressiveRateCommission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Metric

	for idx, item := range m.GetRanges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProgressiveRateCommissionValidationError{
						field:  fmt.Sprintf("Ranges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProgressiveRateCommissionValidationError{
						field:  fmt.Sprintf("Ranges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProgressiveRateCommissionValidationError{
					field:  fmt.Sprintf("Ranges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProgressiveRateCommissionMultiError(errors)
	}

	return nil
}

// ProgressiveRateCommissionMultiError is an error wrapping multiple validation
// errors returned by ProgressiveRateCommission.ValidateAll() if the
// designated constraints aren't met.
type ProgressiveRateCommissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProgressiveRateCommissionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProgressiveRateCommissionMultiError) AllErrors() []error { return m }

// ProgressiveRateCommissionValidationError is the validation error returned by
// ProgressiveRateCommission.Validate if the designated constraints aren't met.
type ProgressiveRateCommissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProgressiveRateCommissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProgressiveRateCommissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProgressiveRateCommissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProgressiveRateCommissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProgressiveRateCommissionValidationError) ErrorName() string {
	return "ProgressiveRateCommissionValidationError"
}

// Error satisfies the builtin error interface
func (e ProgressiveRateCommissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProgressiveRateCommission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProgressiveRateCommissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProgressiveRateCommissionValidationError{}

// Validate checks the field values on RateRange with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RateRange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RateRange with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RateRangeMultiError, or nil
// if none found.
func (m *RateRange) ValidateAll() error {
	return m.validate(true)
}

func (m *RateRange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for From

	// no validation rules for Rate

	if m.To != nil {
		// no validation rules for To
	}

	if len(errors) > 0 {
		return RateRangeMultiError(errors)
	}

	return nil
}

// RateRangeMultiError is an error wrapping multiple validation errors returned
// by RateRange.ValidateAll() if the designated constraints aren't met.
type RateRangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RateRangeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RateRangeMultiError) AllErrors() []error { return m }

// RateRangeValidationError is the validation error returned by
// RateRange.Validate if the designated constraints aren't met.
type RateRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RateRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RateRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RateRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RateRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RateRangeValidationError) ErrorName() string { return "RateRangeValidationError" }

// Error satisfies the builtin error interface
func (e RateRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRateRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RateRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RateRangeValidationError{}

// Validate checks the field values on ProgressiveByCountriesRateCommission
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ProgressiveByCountriesRateCommission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProgressiveByCountriesRateCommission
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ProgressiveByCountriesRateCommissionMultiError, or nil if none found.
func (m *ProgressiveByCountriesRateCommission) ValidateAll() error {
	return m.validate(true)
}

func (m *ProgressiveByCountriesRateCommission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Metric

	for idx, item := range m.GetCountryGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProgressiveByCountriesRateCommissionValidationError{
						field:  fmt.Sprintf("CountryGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProgressiveByCountriesRateCommissionValidationError{
						field:  fmt.Sprintf("CountryGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProgressiveByCountriesRateCommissionValidationError{
					field:  fmt.Sprintf("CountryGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOtherCountriesRanges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProgressiveByCountriesRateCommissionValidationError{
						field:  fmt.Sprintf("OtherCountriesRanges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProgressiveByCountriesRateCommissionValidationError{
						field:  fmt.Sprintf("OtherCountriesRanges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProgressiveByCountriesRateCommissionValidationError{
					field:  fmt.Sprintf("OtherCountriesRanges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProgressiveByCountriesRateCommissionMultiError(errors)
	}

	return nil
}

// ProgressiveByCountriesRateCommissionMultiError is an error wrapping multiple
// validation errors returned by
// ProgressiveByCountriesRateCommission.ValidateAll() if the designated
// constraints aren't met.
type ProgressiveByCountriesRateCommissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProgressiveByCountriesRateCommissionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProgressiveByCountriesRateCommissionMultiError) AllErrors() []error { return m }

// ProgressiveByCountriesRateCommissionValidationError is the validation error
// returned by ProgressiveByCountriesRateCommission.Validate if the designated
// constraints aren't met.
type ProgressiveByCountriesRateCommissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProgressiveByCountriesRateCommissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProgressiveByCountriesRateCommissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProgressiveByCountriesRateCommissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProgressiveByCountriesRateCommissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProgressiveByCountriesRateCommissionValidationError) ErrorName() string {
	return "ProgressiveByCountriesRateCommissionValidationError"
}

// Error satisfies the builtin error interface
func (e ProgressiveByCountriesRateCommissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProgressiveByCountriesRateCommission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProgressiveByCountriesRateCommissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProgressiveByCountriesRateCommissionValidationError{}

// Validate checks the field values on CountryProgressiveRateGroup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountryProgressiveRateGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountryProgressiveRateGroup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountryProgressiveRateGroupMultiError, or nil if none found.
func (m *CountryProgressiveRateGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *CountryProgressiveRateGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRanges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CountryProgressiveRateGroupValidationError{
						field:  fmt.Sprintf("Ranges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CountryProgressiveRateGroupValidationError{
						field:  fmt.Sprintf("Ranges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CountryProgressiveRateGroupValidationError{
					field:  fmt.Sprintf("Ranges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CountryProgressiveRateGroupMultiError(errors)
	}

	return nil
}

// CountryProgressiveRateGroupMultiError is an error wrapping multiple
// validation errors returned by CountryProgressiveRateGroup.ValidateAll() if
// the designated constraints aren't met.
type CountryProgressiveRateGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountryProgressiveRateGroupMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountryProgressiveRateGroupMultiError) AllErrors() []error { return m }

// CountryProgressiveRateGroupValidationError is the validation error returned
// by CountryProgressiveRateGroup.Validate if the designated constraints
// aren't met.
type CountryProgressiveRateGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountryProgressiveRateGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountryProgressiveRateGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountryProgressiveRateGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountryProgressiveRateGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountryProgressiveRateGroupValidationError) ErrorName() string {
	return "CountryProgressiveRateGroupValidationError"
}

// Error satisfies the builtin error interface
func (e CountryProgressiveRateGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountryProgressiveRateGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountryProgressiveRateGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountryProgressiveRateGroupValidationError{}

// Validate checks the field values on CPLConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CPLConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CPLConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CPLConfigMultiError, or nil
// if none found.
func (m *CPLConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *CPLConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for CommissionType

	if m.Flat != nil {

		if all {
			switch v := interface{}(m.GetFlat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CPLConfigValidationError{
						field:  "Flat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CPLConfigValidationError{
						field:  "Flat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFlat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CPLConfigValidationError{
					field:  "Flat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.FlatByCountries != nil {

		if all {
			switch v := interface{}(m.GetFlatByCountries()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CPLConfigValidationError{
						field:  "FlatByCountries",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CPLConfigValidationError{
						field:  "FlatByCountries",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFlatByCountries()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CPLConfigValidationError{
					field:  "FlatByCountries",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Progressive != nil {

		if all {
			switch v := interface{}(m.GetProgressive()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CPLConfigValidationError{
						field:  "Progressive",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CPLConfigValidationError{
						field:  "Progressive",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProgressive()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CPLConfigValidationError{
					field:  "Progressive",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ProgressiveByCountries != nil {

		if all {
			switch v := interface{}(m.GetProgressiveByCountries()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CPLConfigValidationError{
						field:  "ProgressiveByCountries",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CPLConfigValidationError{
						field:  "ProgressiveByCountries",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProgressiveByCountries()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CPLConfigValidationError{
					field:  "ProgressiveByCountries",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Qualification != nil {

		if all {
			switch v := interface{}(m.GetQualification()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CPLConfigValidationError{
						field:  "Qualification",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CPLConfigValidationError{
						field:  "Qualification",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQualification()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CPLConfigValidationError{
					field:  "Qualification",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.AdvancedOptions != nil {

		if all {
			switch v := interface{}(m.GetAdvancedOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CPLConfigValidationError{
						field:  "AdvancedOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CPLConfigValidationError{
						field:  "AdvancedOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAdvancedOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CPLConfigValidationError{
					field:  "AdvancedOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CPLConfigMultiError(errors)
	}

	return nil
}

// CPLConfigMultiError is an error wrapping multiple validation errors returned
// by CPLConfig.ValidateAll() if the designated constraints aren't met.
type CPLConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CPLConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CPLConfigMultiError) AllErrors() []error { return m }

// CPLConfigValidationError is the validation error returned by
// CPLConfig.Validate if the designated constraints aren't met.
type CPLConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CPLConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CPLConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CPLConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CPLConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CPLConfigValidationError) ErrorName() string { return "CPLConfigValidationError" }

// Error satisfies the builtin error interface
func (e CPLConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCPLConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CPLConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CPLConfigValidationError{}

// Validate checks the field values on CPCConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CPCConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CPCConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CPCConfigMultiError, or nil
// if none found.
func (m *CPCConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *CPCConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for CommissionType

	if m.Flat != nil {

		if all {
			switch v := interface{}(m.GetFlat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CPCConfigValidationError{
						field:  "Flat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CPCConfigValidationError{
						field:  "Flat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFlat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CPCConfigValidationError{
					field:  "Flat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.FlatByCountries != nil {

		if all {
			switch v := interface{}(m.GetFlatByCountries()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CPCConfigValidationError{
						field:  "FlatByCountries",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CPCConfigValidationError{
						field:  "FlatByCountries",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFlatByCountries()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CPCConfigValidationError{
					field:  "FlatByCountries",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CPCConfigMultiError(errors)
	}

	return nil
}

// CPCConfigMultiError is an error wrapping multiple validation errors returned
// by CPCConfig.ValidateAll() if the designated constraints aren't met.
type CPCConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CPCConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CPCConfigMultiError) AllErrors() []error { return m }

// CPCConfigValidationError is the validation error returned by
// CPCConfig.Validate if the designated constraints aren't met.
type CPCConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CPCConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CPCConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CPCConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CPCConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CPCConfigValidationError) ErrorName() string { return "CPCConfigValidationError" }

// Error satisfies the builtin error interface
func (e CPCConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCPCConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CPCConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CPCConfigValidationError{}

// Validate checks the field values on FlatFeeConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FlatFeeConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlatFeeConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FlatFeeConfigMultiError, or
// nil if none found.
func (m *FlatFeeConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *FlatFeeConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for Period

	// no validation rules for Amount

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FlatFeeConfigValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FlatFeeConfigValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FlatFeeConfigValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FlatFeeConfigMultiError(errors)
	}

	return nil
}

// FlatFeeConfigMultiError is an error wrapping multiple validation errors
// returned by FlatFeeConfig.ValidateAll() if the designated constraints
// aren't met.
type FlatFeeConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlatFeeConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlatFeeConfigMultiError) AllErrors() []error { return m }

// FlatFeeConfigValidationError is the validation error returned by
// FlatFeeConfig.Validate if the designated constraints aren't met.
type FlatFeeConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlatFeeConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlatFeeConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlatFeeConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlatFeeConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlatFeeConfigValidationError) ErrorName() string { return "FlatFeeConfigValidationError" }

// Error satisfies the builtin error interface
func (e FlatFeeConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlatFeeConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlatFeeConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlatFeeConfigValidationError{}
