// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNSPECIFIED.String() && e.Code == 500
}

func ErrorUnspecified(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UNSPECIFIED.String(), fmt.Sprintf(format, args...))
}

func IsCreateCommissionPlanFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CREATE_COMMISSION_PLAN_FAILED.String() && e.Code == 500
}

func ErrorCreateCommissionPlanFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CREATE_COMMISSION_PLAN_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateCommissionPlanFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_COMMISSION_PLAN_FAILED.String() && e.Code == 500
}

func ErrorUpdateCommissionPlanFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_COMMISSION_PLAN_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsDeleteCommissionPlanFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DELETE_COMMISSION_PLAN_FAILED.String() && e.Code == 500
}

func ErrorDeleteCommissionPlanFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DELETE_COMMISSION_PLAN_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsCreateCommissionPlanPermissionDenied(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CREATE_COMMISSION_PLAN_PERMISSION_DENIED.String() && e.Code == 500
}

func ErrorCreateCommissionPlanPermissionDenied(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CREATE_COMMISSION_PLAN_PERMISSION_DENIED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateCommissionPlanPermissionDenied(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_COMMISSION_PLAN_PERMISSION_DENIED.String() && e.Code == 500
}

func ErrorUpdateCommissionPlanPermissionDenied(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_COMMISSION_PLAN_PERMISSION_DENIED.String(), fmt.Sprintf(format, args...))
}

func IsDeleteCommissionPlanPermissionDenied(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DELETE_COMMISSION_PLAN_PERMISSION_DENIED.String() && e.Code == 500
}

func ErrorDeleteCommissionPlanPermissionDenied(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DELETE_COMMISSION_PLAN_PERMISSION_DENIED.String(), fmt.Sprintf(format, args...))
}

func IsCommissionPlanNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_COMMISSION_PLAN_NOT_FOUND.String() && e.Code == 500
}

func ErrorCommissionPlanNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_COMMISSION_PLAN_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsGetCommissionPlanFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_COMMISSION_PLAN_FAILED.String() && e.Code == 500
}

func ErrorGetCommissionPlanFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_COMMISSION_PLAN_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetCommissionPlanPermissionDenied(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_COMMISSION_PLAN_PERMISSION_DENIED.String() && e.Code == 500
}

func ErrorGetCommissionPlanPermissionDenied(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_COMMISSION_PLAN_PERMISSION_DENIED.String(), fmt.Sprintf(format, args...))
}

func IsListCommissionPlansFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LIST_COMMISSION_PLANS_FAILED.String() && e.Code == 500
}

func ErrorListCommissionPlansFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LIST_COMMISSION_PLANS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUserRoleInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_ROLE_INVALID.String() && e.Code == 500
}

func ErrorUserRoleInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_ROLE_INVALID.String(), fmt.Sprintf(format, args...))
}

func IsInvalidCommissionPlanConfig(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_COMMISSION_PLAN_CONFIG.String() && e.Code == 500
}

func ErrorInvalidCommissionPlanConfig(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_COMMISSION_PLAN_CONFIG.String(), fmt.Sprintf(format, args...))
}

func IsCreateAffiliateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CREATE_AFFILIATE_FAILED.String() && e.Code == 500
}

func ErrorCreateAffiliateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CREATE_AFFILIATE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetAffiliateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_AFFILIATE_FAILED.String() && e.Code == 500
}

func ErrorGetAffiliateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_AFFILIATE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAffiliateNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AFFILIATE_NOT_FOUND.String() && e.Code == 500
}

func ErrorAffiliateNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_AFFILIATE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsDeleteAffiliateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DELETE_AFFILIATE_FAILED.String() && e.Code == 500
}

func ErrorDeleteAffiliateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DELETE_AFFILIATE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsListAffiliatesFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LIST_AFFILIATES_FAILED.String() && e.Code == 500
}

func ErrorListAffiliatesFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LIST_AFFILIATES_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateAffiliateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_AFFILIATE_FAILED.String() && e.Code == 500
}

func ErrorUpdateAffiliateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_AFFILIATE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsConvertChannelConfigFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CONVERT_CHANNEL_CONFIG_FAILED.String() && e.Code == 500
}

func ErrorConvertChannelConfigFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CONVERT_CHANNEL_CONFIG_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsCreateCampaignFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CREATE_CAMPAIGN_FAILED.String() && e.Code == 500
}

func ErrorCreateCampaignFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CREATE_CAMPAIGN_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsCampaignNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CAMPAIGN_NOT_FOUND.String() && e.Code == 500
}

func ErrorCampaignNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CAMPAIGN_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsGetCampaignFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_CAMPAIGN_FAILED.String() && e.Code == 500
}

func ErrorGetCampaignFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_CAMPAIGN_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsDeleteCampaignFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DELETE_CAMPAIGN_FAILED.String() && e.Code == 500
}

func ErrorDeleteCampaignFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DELETE_CAMPAIGN_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsListCampaignsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LIST_CAMPAIGNS_FAILED.String() && e.Code == 500
}

func ErrorListCampaignsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LIST_CAMPAIGNS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateCampaignFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_CAMPAIGN_FAILED.String() && e.Code == 500
}

func ErrorUpdateCampaignFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_CAMPAIGN_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsProcessUserRegistrationFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PROCESS_USER_REGISTRATION_FAILED.String() && e.Code == 500
}

func ErrorProcessUserRegistrationFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_PROCESS_USER_REGISTRATION_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsProcessUserDepositFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PROCESS_USER_DEPOSIT_FAILED.String() && e.Code == 500
}

func ErrorProcessUserDepositFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_PROCESS_USER_DEPOSIT_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsProcessUserWithdrawalFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PROCESS_USER_WITHDRAWAL_FAILED.String() && e.Code == 500
}

func ErrorProcessUserWithdrawalFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_PROCESS_USER_WITHDRAWAL_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsListEventsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LIST_EVENTS_FAILED.String() && e.Code == 500
}

func ErrorListEventsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LIST_EVENTS_FAILED.String(), fmt.Sprintf(format, args...))
}
