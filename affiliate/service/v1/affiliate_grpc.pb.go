// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: affiliate/service/v1/affiliate.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Affiliate_CreateCommissionPlan_FullMethodName   = "/api.affiliate.service.v1.Affiliate/CreateCommissionPlan"
	Affiliate_UpdateCommissionPlan_FullMethodName   = "/api.affiliate.service.v1.Affiliate/UpdateCommissionPlan"
	Affiliate_GetCommissionPlan_FullMethodName      = "/api.affiliate.service.v1.Affiliate/GetCommissionPlan"
	Affiliate_ListCommissionPlans_FullMethodName    = "/api.affiliate.service.v1.Affiliate/ListCommissionPlans"
	Affiliate_DeleteCommissionPlan_FullMethodName   = "/api.affiliate.service.v1.Affiliate/DeleteCommissionPlan"
	Affiliate_ListAllCommissionPlans_FullMethodName = "/api.affiliate.service.v1.Affiliate/ListAllCommissionPlans"
	Affiliate_CreateAffiliate_FullMethodName        = "/api.affiliate.service.v1.Affiliate/CreateAffiliate"
	Affiliate_UpdateAffiliate_FullMethodName        = "/api.affiliate.service.v1.Affiliate/UpdateAffiliate"
	Affiliate_GetAffiliate_FullMethodName           = "/api.affiliate.service.v1.Affiliate/GetAffiliate"
	Affiliate_ListAffiliates_FullMethodName         = "/api.affiliate.service.v1.Affiliate/ListAffiliates"
	Affiliate_DeleteAffiliate_FullMethodName        = "/api.affiliate.service.v1.Affiliate/DeleteAffiliate"
	Affiliate_CreateCampaign_FullMethodName         = "/api.affiliate.service.v1.Affiliate/CreateCampaign"
	Affiliate_UpdateCampaign_FullMethodName         = "/api.affiliate.service.v1.Affiliate/UpdateCampaign"
	Affiliate_ListCampaigns_FullMethodName          = "/api.affiliate.service.v1.Affiliate/ListCampaigns"
	Affiliate_DeleteCampaign_FullMethodName         = "/api.affiliate.service.v1.Affiliate/DeleteCampaign"
	Affiliate_ListEvents_FullMethodName             = "/api.affiliate.service.v1.Affiliate/ListEvents"
	Affiliate_ListCommissions_FullMethodName        = "/api.affiliate.service.v1.Affiliate/ListCommissions"
	Affiliate_ListUsers_FullMethodName              = "/api.affiliate.service.v1.Affiliate/ListUsers"
)

// AffiliateClient is the client API for Affiliate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AffiliateClient interface {
	CreateCommissionPlan(ctx context.Context, in *CreateCommissionPlanRequest, opts ...grpc.CallOption) (*CreateCommissionPlanResponse, error)
	UpdateCommissionPlan(ctx context.Context, in *UpdateCommissionPlanRequest, opts ...grpc.CallOption) (*UpdateCommissionPlanResponse, error)
	GetCommissionPlan(ctx context.Context, in *GetCommissionPlanRequest, opts ...grpc.CallOption) (*GetCommissionPlanResponse, error)
	ListCommissionPlans(ctx context.Context, in *ListCommissionPlansRequest, opts ...grpc.CallOption) (*ListCommissionPlansResponse, error)
	DeleteCommissionPlan(ctx context.Context, in *DeleteCommissionPlanRequest, opts ...grpc.CallOption) (*DeleteCommissionPlanResponse, error)
	ListAllCommissionPlans(ctx context.Context, in *ListAllCommissionPlansRequest, opts ...grpc.CallOption) (*ListAllCommissionPlansResponse, error)
	CreateAffiliate(ctx context.Context, in *CreateAffiliateRequest, opts ...grpc.CallOption) (*CreateAffiliateResponse, error)
	UpdateAffiliate(ctx context.Context, in *UpdateAffiliateRequest, opts ...grpc.CallOption) (*UpdateAffiliateResponse, error)
	GetAffiliate(ctx context.Context, in *GetAffiliateRequest, opts ...grpc.CallOption) (*GetAffiliateResponse, error)
	ListAffiliates(ctx context.Context, in *ListAffiliatesRequest, opts ...grpc.CallOption) (*ListAffiliatesResponse, error)
	DeleteAffiliate(ctx context.Context, in *DeleteAffiliateRequest, opts ...grpc.CallOption) (*DeleteAffiliateResponse, error)
	CreateCampaign(ctx context.Context, in *CreateCampaignRequest, opts ...grpc.CallOption) (*CreateCampaignResponse, error)
	UpdateCampaign(ctx context.Context, in *UpdateCampaignRequest, opts ...grpc.CallOption) (*UpdateCampaignResponse, error)
	ListCampaigns(ctx context.Context, in *ListCampaignsRequest, opts ...grpc.CallOption) (*ListCampaignsResponse, error)
	DeleteCampaign(ctx context.Context, in *DeleteCampaignRequest, opts ...grpc.CallOption) (*DeleteCampaignResponse, error)
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	ListCommissions(ctx context.Context, in *ListCommissionsRequest, opts ...grpc.CallOption) (*ListCommissionsResponse, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
}

type affiliateClient struct {
	cc grpc.ClientConnInterface
}

func NewAffiliateClient(cc grpc.ClientConnInterface) AffiliateClient {
	return &affiliateClient{cc}
}

func (c *affiliateClient) CreateCommissionPlan(ctx context.Context, in *CreateCommissionPlanRequest, opts ...grpc.CallOption) (*CreateCommissionPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCommissionPlanResponse)
	err := c.cc.Invoke(ctx, Affiliate_CreateCommissionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affiliateClient) UpdateCommissionPlan(ctx context.Context, in *UpdateCommissionPlanRequest, opts ...grpc.CallOption) (*UpdateCommissionPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCommissionPlanResponse)
	err := c.cc.Invoke(ctx, Affiliate_UpdateCommissionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affiliateClient) GetCommissionPlan(ctx context.Context, in *GetCommissionPlanRequest, opts ...grpc.CallOption) (*GetCommissionPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommissionPlanResponse)
	err := c.cc.Invoke(ctx, Affiliate_GetCommissionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affiliateClient) ListCommissionPlans(ctx context.Context, in *ListCommissionPlansRequest, opts ...grpc.CallOption) (*ListCommissionPlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommissionPlansResponse)
	err := c.cc.Invoke(ctx, Affiliate_ListCommissionPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affiliateClient) DeleteCommissionPlan(ctx context.Context, in *DeleteCommissionPlanRequest, opts ...grpc.CallOption) (*DeleteCommissionPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCommissionPlanResponse)
	err := c.cc.Invoke(ctx, Affiliate_DeleteCommissionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affiliateClient) ListAllCommissionPlans(ctx context.Context, in *ListAllCommissionPlansRequest, opts ...grpc.CallOption) (*ListAllCommissionPlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllCommissionPlansResponse)
	err := c.cc.Invoke(ctx, Affiliate_ListAllCommissionPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affiliateClient) CreateAffiliate(ctx context.Context, in *CreateAffiliateRequest, opts ...grpc.CallOption) (*CreateAffiliateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAffiliateResponse)
	err := c.cc.Invoke(ctx, Affiliate_CreateAffiliate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affiliateClient) UpdateAffiliate(ctx context.Context, in *UpdateAffiliateRequest, opts ...grpc.CallOption) (*UpdateAffiliateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAffiliateResponse)
	err := c.cc.Invoke(ctx, Affiliate_UpdateAffiliate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affiliateClient) GetAffiliate(ctx context.Context, in *GetAffiliateRequest, opts ...grpc.CallOption) (*GetAffiliateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAffiliateResponse)
	err := c.cc.Invoke(ctx, Affiliate_GetAffiliate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affiliateClient) ListAffiliates(ctx context.Context, in *ListAffiliatesRequest, opts ...grpc.CallOption) (*ListAffiliatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAffiliatesResponse)
	err := c.cc.Invoke(ctx, Affiliate_ListAffiliates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affiliateClient) DeleteAffiliate(ctx context.Context, in *DeleteAffiliateRequest, opts ...grpc.CallOption) (*DeleteAffiliateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAffiliateResponse)
	err := c.cc.Invoke(ctx, Affiliate_DeleteAffiliate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affiliateClient) CreateCampaign(ctx context.Context, in *CreateCampaignRequest, opts ...grpc.CallOption) (*CreateCampaignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCampaignResponse)
	err := c.cc.Invoke(ctx, Affiliate_CreateCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affiliateClient) UpdateCampaign(ctx context.Context, in *UpdateCampaignRequest, opts ...grpc.CallOption) (*UpdateCampaignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCampaignResponse)
	err := c.cc.Invoke(ctx, Affiliate_UpdateCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affiliateClient) ListCampaigns(ctx context.Context, in *ListCampaignsRequest, opts ...grpc.CallOption) (*ListCampaignsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCampaignsResponse)
	err := c.cc.Invoke(ctx, Affiliate_ListCampaigns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affiliateClient) DeleteCampaign(ctx context.Context, in *DeleteCampaignRequest, opts ...grpc.CallOption) (*DeleteCampaignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCampaignResponse)
	err := c.cc.Invoke(ctx, Affiliate_DeleteCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affiliateClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, Affiliate_ListEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affiliateClient) ListCommissions(ctx context.Context, in *ListCommissionsRequest, opts ...grpc.CallOption) (*ListCommissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommissionsResponse)
	err := c.cc.Invoke(ctx, Affiliate_ListCommissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affiliateClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, Affiliate_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AffiliateServer is the server API for Affiliate service.
// All implementations must embed UnimplementedAffiliateServer
// for forward compatibility.
type AffiliateServer interface {
	CreateCommissionPlan(context.Context, *CreateCommissionPlanRequest) (*CreateCommissionPlanResponse, error)
	UpdateCommissionPlan(context.Context, *UpdateCommissionPlanRequest) (*UpdateCommissionPlanResponse, error)
	GetCommissionPlan(context.Context, *GetCommissionPlanRequest) (*GetCommissionPlanResponse, error)
	ListCommissionPlans(context.Context, *ListCommissionPlansRequest) (*ListCommissionPlansResponse, error)
	DeleteCommissionPlan(context.Context, *DeleteCommissionPlanRequest) (*DeleteCommissionPlanResponse, error)
	ListAllCommissionPlans(context.Context, *ListAllCommissionPlansRequest) (*ListAllCommissionPlansResponse, error)
	CreateAffiliate(context.Context, *CreateAffiliateRequest) (*CreateAffiliateResponse, error)
	UpdateAffiliate(context.Context, *UpdateAffiliateRequest) (*UpdateAffiliateResponse, error)
	GetAffiliate(context.Context, *GetAffiliateRequest) (*GetAffiliateResponse, error)
	ListAffiliates(context.Context, *ListAffiliatesRequest) (*ListAffiliatesResponse, error)
	DeleteAffiliate(context.Context, *DeleteAffiliateRequest) (*DeleteAffiliateResponse, error)
	CreateCampaign(context.Context, *CreateCampaignRequest) (*CreateCampaignResponse, error)
	UpdateCampaign(context.Context, *UpdateCampaignRequest) (*UpdateCampaignResponse, error)
	ListCampaigns(context.Context, *ListCampaignsRequest) (*ListCampaignsResponse, error)
	DeleteCampaign(context.Context, *DeleteCampaignRequest) (*DeleteCampaignResponse, error)
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	ListCommissions(context.Context, *ListCommissionsRequest) (*ListCommissionsResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	mustEmbedUnimplementedAffiliateServer()
}

// UnimplementedAffiliateServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAffiliateServer struct{}

func (UnimplementedAffiliateServer) CreateCommissionPlan(context.Context, *CreateCommissionPlanRequest) (*CreateCommissionPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommissionPlan not implemented")
}
func (UnimplementedAffiliateServer) UpdateCommissionPlan(context.Context, *UpdateCommissionPlanRequest) (*UpdateCommissionPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommissionPlan not implemented")
}
func (UnimplementedAffiliateServer) GetCommissionPlan(context.Context, *GetCommissionPlanRequest) (*GetCommissionPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommissionPlan not implemented")
}
func (UnimplementedAffiliateServer) ListCommissionPlans(context.Context, *ListCommissionPlansRequest) (*ListCommissionPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommissionPlans not implemented")
}
func (UnimplementedAffiliateServer) DeleteCommissionPlan(context.Context, *DeleteCommissionPlanRequest) (*DeleteCommissionPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommissionPlan not implemented")
}
func (UnimplementedAffiliateServer) ListAllCommissionPlans(context.Context, *ListAllCommissionPlansRequest) (*ListAllCommissionPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllCommissionPlans not implemented")
}
func (UnimplementedAffiliateServer) CreateAffiliate(context.Context, *CreateAffiliateRequest) (*CreateAffiliateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAffiliate not implemented")
}
func (UnimplementedAffiliateServer) UpdateAffiliate(context.Context, *UpdateAffiliateRequest) (*UpdateAffiliateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAffiliate not implemented")
}
func (UnimplementedAffiliateServer) GetAffiliate(context.Context, *GetAffiliateRequest) (*GetAffiliateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAffiliate not implemented")
}
func (UnimplementedAffiliateServer) ListAffiliates(context.Context, *ListAffiliatesRequest) (*ListAffiliatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAffiliates not implemented")
}
func (UnimplementedAffiliateServer) DeleteAffiliate(context.Context, *DeleteAffiliateRequest) (*DeleteAffiliateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAffiliate not implemented")
}
func (UnimplementedAffiliateServer) CreateCampaign(context.Context, *CreateCampaignRequest) (*CreateCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCampaign not implemented")
}
func (UnimplementedAffiliateServer) UpdateCampaign(context.Context, *UpdateCampaignRequest) (*UpdateCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCampaign not implemented")
}
func (UnimplementedAffiliateServer) ListCampaigns(context.Context, *ListCampaignsRequest) (*ListCampaignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCampaigns not implemented")
}
func (UnimplementedAffiliateServer) DeleteCampaign(context.Context, *DeleteCampaignRequest) (*DeleteCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCampaign not implemented")
}
func (UnimplementedAffiliateServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedAffiliateServer) ListCommissions(context.Context, *ListCommissionsRequest) (*ListCommissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommissions not implemented")
}
func (UnimplementedAffiliateServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedAffiliateServer) mustEmbedUnimplementedAffiliateServer() {}
func (UnimplementedAffiliateServer) testEmbeddedByValue()                   {}

// UnsafeAffiliateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AffiliateServer will
// result in compilation errors.
type UnsafeAffiliateServer interface {
	mustEmbedUnimplementedAffiliateServer()
}

func RegisterAffiliateServer(s grpc.ServiceRegistrar, srv AffiliateServer) {
	// If the following call pancis, it indicates UnimplementedAffiliateServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Affiliate_ServiceDesc, srv)
}

func _Affiliate_CreateCommissionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommissionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffiliateServer).CreateCommissionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Affiliate_CreateCommissionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffiliateServer).CreateCommissionPlan(ctx, req.(*CreateCommissionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Affiliate_UpdateCommissionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommissionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffiliateServer).UpdateCommissionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Affiliate_UpdateCommissionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffiliateServer).UpdateCommissionPlan(ctx, req.(*UpdateCommissionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Affiliate_GetCommissionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommissionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffiliateServer).GetCommissionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Affiliate_GetCommissionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffiliateServer).GetCommissionPlan(ctx, req.(*GetCommissionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Affiliate_ListCommissionPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommissionPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffiliateServer).ListCommissionPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Affiliate_ListCommissionPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffiliateServer).ListCommissionPlans(ctx, req.(*ListCommissionPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Affiliate_DeleteCommissionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommissionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffiliateServer).DeleteCommissionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Affiliate_DeleteCommissionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffiliateServer).DeleteCommissionPlan(ctx, req.(*DeleteCommissionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Affiliate_ListAllCommissionPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllCommissionPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffiliateServer).ListAllCommissionPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Affiliate_ListAllCommissionPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffiliateServer).ListAllCommissionPlans(ctx, req.(*ListAllCommissionPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Affiliate_CreateAffiliate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAffiliateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffiliateServer).CreateAffiliate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Affiliate_CreateAffiliate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffiliateServer).CreateAffiliate(ctx, req.(*CreateAffiliateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Affiliate_UpdateAffiliate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAffiliateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffiliateServer).UpdateAffiliate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Affiliate_UpdateAffiliate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffiliateServer).UpdateAffiliate(ctx, req.(*UpdateAffiliateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Affiliate_GetAffiliate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAffiliateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffiliateServer).GetAffiliate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Affiliate_GetAffiliate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffiliateServer).GetAffiliate(ctx, req.(*GetAffiliateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Affiliate_ListAffiliates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAffiliatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffiliateServer).ListAffiliates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Affiliate_ListAffiliates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffiliateServer).ListAffiliates(ctx, req.(*ListAffiliatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Affiliate_DeleteAffiliate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAffiliateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffiliateServer).DeleteAffiliate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Affiliate_DeleteAffiliate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffiliateServer).DeleteAffiliate(ctx, req.(*DeleteAffiliateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Affiliate_CreateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffiliateServer).CreateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Affiliate_CreateCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffiliateServer).CreateCampaign(ctx, req.(*CreateCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Affiliate_UpdateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffiliateServer).UpdateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Affiliate_UpdateCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffiliateServer).UpdateCampaign(ctx, req.(*UpdateCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Affiliate_ListCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCampaignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffiliateServer).ListCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Affiliate_ListCampaigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffiliateServer).ListCampaigns(ctx, req.(*ListCampaignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Affiliate_DeleteCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffiliateServer).DeleteCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Affiliate_DeleteCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffiliateServer).DeleteCampaign(ctx, req.(*DeleteCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Affiliate_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffiliateServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Affiliate_ListEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffiliateServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Affiliate_ListCommissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffiliateServer).ListCommissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Affiliate_ListCommissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffiliateServer).ListCommissions(ctx, req.(*ListCommissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Affiliate_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffiliateServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Affiliate_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffiliateServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Affiliate_ServiceDesc is the grpc.ServiceDesc for Affiliate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Affiliate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.affiliate.service.v1.Affiliate",
	HandlerType: (*AffiliateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCommissionPlan",
			Handler:    _Affiliate_CreateCommissionPlan_Handler,
		},
		{
			MethodName: "UpdateCommissionPlan",
			Handler:    _Affiliate_UpdateCommissionPlan_Handler,
		},
		{
			MethodName: "GetCommissionPlan",
			Handler:    _Affiliate_GetCommissionPlan_Handler,
		},
		{
			MethodName: "ListCommissionPlans",
			Handler:    _Affiliate_ListCommissionPlans_Handler,
		},
		{
			MethodName: "DeleteCommissionPlan",
			Handler:    _Affiliate_DeleteCommissionPlan_Handler,
		},
		{
			MethodName: "ListAllCommissionPlans",
			Handler:    _Affiliate_ListAllCommissionPlans_Handler,
		},
		{
			MethodName: "CreateAffiliate",
			Handler:    _Affiliate_CreateAffiliate_Handler,
		},
		{
			MethodName: "UpdateAffiliate",
			Handler:    _Affiliate_UpdateAffiliate_Handler,
		},
		{
			MethodName: "GetAffiliate",
			Handler:    _Affiliate_GetAffiliate_Handler,
		},
		{
			MethodName: "ListAffiliates",
			Handler:    _Affiliate_ListAffiliates_Handler,
		},
		{
			MethodName: "DeleteAffiliate",
			Handler:    _Affiliate_DeleteAffiliate_Handler,
		},
		{
			MethodName: "CreateCampaign",
			Handler:    _Affiliate_CreateCampaign_Handler,
		},
		{
			MethodName: "UpdateCampaign",
			Handler:    _Affiliate_UpdateCampaign_Handler,
		},
		{
			MethodName: "ListCampaigns",
			Handler:    _Affiliate_ListCampaigns_Handler,
		},
		{
			MethodName: "DeleteCampaign",
			Handler:    _Affiliate_DeleteCampaign_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _Affiliate_ListEvents_Handler,
		},
		{
			MethodName: "ListCommissions",
			Handler:    _Affiliate_ListCommissions_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Affiliate_ListUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "affiliate/service/v1/affiliate.proto",
}
