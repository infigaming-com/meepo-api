// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: system/service/v1/system.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FileInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileInfoMultiError, or nil
// if none found.
func (m *FileInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *FileInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FilePath

	// no validation rules for Hash

	if len(errors) > 0 {
		return FileInfoMultiError(errors)
	}

	return nil
}

// FileInfoMultiError is an error wrapping multiple validation errors returned
// by FileInfo.ValidateAll() if the designated constraints aren't met.
type FileInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileInfoMultiError) AllErrors() []error { return m }

// FileInfoValidationError is the validation error returned by
// FileInfo.Validate if the designated constraints aren't met.
type FileInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileInfoValidationError) ErrorName() string { return "FileInfoValidationError" }

// Error satisfies the builtin error interface
func (e FileInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileInfoValidationError{}

// Validate checks the field values on AddIntegrityReportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddIntegrityReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddIntegrityReportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddIntegrityReportRequestMultiError, or nil if none found.
func (m *AddIntegrityReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddIntegrityReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LabelApp

	// no validation rules for PodName

	// no validation rules for PodNamespace

	for idx, item := range m.GetFileInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddIntegrityReportRequestValidationError{
						field:  fmt.Sprintf("FileInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddIntegrityReportRequestValidationError{
						field:  fmt.Sprintf("FileInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddIntegrityReportRequestValidationError{
					field:  fmt.Sprintf("FileInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddIntegrityReportRequestMultiError(errors)
	}

	return nil
}

// AddIntegrityReportRequestMultiError is an error wrapping multiple validation
// errors returned by AddIntegrityReportRequest.ValidateAll() if the
// designated constraints aren't met.
type AddIntegrityReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddIntegrityReportRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddIntegrityReportRequestMultiError) AllErrors() []error { return m }

// AddIntegrityReportRequestValidationError is the validation error returned by
// AddIntegrityReportRequest.Validate if the designated constraints aren't met.
type AddIntegrityReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddIntegrityReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddIntegrityReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddIntegrityReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddIntegrityReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddIntegrityReportRequestValidationError) ErrorName() string {
	return "AddIntegrityReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddIntegrityReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddIntegrityReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddIntegrityReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddIntegrityReportRequestValidationError{}

// Validate checks the field values on AddIntegrityReportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddIntegrityReportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddIntegrityReportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddIntegrityReportResponseMultiError, or nil if none found.
func (m *AddIntegrityReportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddIntegrityReportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddIntegrityReportResponseMultiError(errors)
	}

	return nil
}

// AddIntegrityReportResponseMultiError is an error wrapping multiple
// validation errors returned by AddIntegrityReportResponse.ValidateAll() if
// the designated constraints aren't met.
type AddIntegrityReportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddIntegrityReportResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddIntegrityReportResponseMultiError) AllErrors() []error { return m }

// AddIntegrityReportResponseValidationError is the validation error returned
// by AddIntegrityReportResponse.Validate if the designated constraints aren't met.
type AddIntegrityReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddIntegrityReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddIntegrityReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddIntegrityReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddIntegrityReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddIntegrityReportResponseValidationError) ErrorName() string {
	return "AddIntegrityReportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddIntegrityReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddIntegrityReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddIntegrityReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddIntegrityReportResponseValidationError{}

// Validate checks the field values on ListIntegrityStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIntegrityStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIntegrityStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIntegrityStatusRequestMultiError, or nil if none found.
func (m *ListIntegrityStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIntegrityStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListIntegrityStatusRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListIntegrityStatusRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListIntegrityStatusRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListIntegrityStatusRequestMultiError(errors)
	}

	return nil
}

// ListIntegrityStatusRequestMultiError is an error wrapping multiple
// validation errors returned by ListIntegrityStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type ListIntegrityStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIntegrityStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIntegrityStatusRequestMultiError) AllErrors() []error { return m }

// ListIntegrityStatusRequestValidationError is the validation error returned
// by ListIntegrityStatusRequest.Validate if the designated constraints aren't met.
type ListIntegrityStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIntegrityStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIntegrityStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIntegrityStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIntegrityStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIntegrityStatusRequestValidationError) ErrorName() string {
	return "ListIntegrityStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListIntegrityStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIntegrityStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIntegrityStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIntegrityStatusRequestValidationError{}

// Validate checks the field values on ListIntegrityStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIntegrityStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIntegrityStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIntegrityStatusResponseMultiError, or nil if none found.
func (m *ListIntegrityStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIntegrityStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIntegrityStatuses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListIntegrityStatusResponseValidationError{
						field:  fmt.Sprintf("IntegrityStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListIntegrityStatusResponseValidationError{
						field:  fmt.Sprintf("IntegrityStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIntegrityStatusResponseValidationError{
					field:  fmt.Sprintf("IntegrityStatuses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListIntegrityStatusResponseMultiError(errors)
	}

	return nil
}

// ListIntegrityStatusResponseMultiError is an error wrapping multiple
// validation errors returned by ListIntegrityStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type ListIntegrityStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIntegrityStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIntegrityStatusResponseMultiError) AllErrors() []error { return m }

// ListIntegrityStatusResponseValidationError is the validation error returned
// by ListIntegrityStatusResponse.Validate if the designated constraints
// aren't met.
type ListIntegrityStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIntegrityStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIntegrityStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIntegrityStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIntegrityStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIntegrityStatusResponseValidationError) ErrorName() string {
	return "ListIntegrityStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListIntegrityStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIntegrityStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIntegrityStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIntegrityStatusResponseValidationError{}

// Validate checks the field values on ListReportExportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReportExportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReportExportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReportExportRequestMultiError, or nil if none found.
func (m *ListReportExportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReportExportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.OperatorContext != nil {

		if all {
			switch v := interface{}(m.GetOperatorContext()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListReportExportRequestValidationError{
						field:  "OperatorContext",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListReportExportRequestValidationError{
						field:  "OperatorContext",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListReportExportRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListReportExportRequestMultiError(errors)
	}

	return nil
}

// ListReportExportRequestMultiError is an error wrapping multiple validation
// errors returned by ListReportExportRequest.ValidateAll() if the designated
// constraints aren't met.
type ListReportExportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReportExportRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReportExportRequestMultiError) AllErrors() []error { return m }

// ListReportExportRequestValidationError is the validation error returned by
// ListReportExportRequest.Validate if the designated constraints aren't met.
type ListReportExportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReportExportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReportExportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReportExportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReportExportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReportExportRequestValidationError) ErrorName() string {
	return "ListReportExportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListReportExportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReportExportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReportExportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReportExportRequestValidationError{}

// Validate checks the field values on ListReportExportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReportExportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReportExportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReportExportResponseMultiError, or nil if none found.
func (m *ListReportExportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReportExportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTasks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListReportExportResponseValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListReportExportResponseValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListReportExportResponseValidationError{
					field:  fmt.Sprintf("Tasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListReportExportResponseMultiError(errors)
	}

	return nil
}

// ListReportExportResponseMultiError is an error wrapping multiple validation
// errors returned by ListReportExportResponse.ValidateAll() if the designated
// constraints aren't met.
type ListReportExportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReportExportResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReportExportResponseMultiError) AllErrors() []error { return m }

// ListReportExportResponseValidationError is the validation error returned by
// ListReportExportResponse.Validate if the designated constraints aren't met.
type ListReportExportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReportExportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReportExportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReportExportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReportExportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReportExportResponseValidationError) ErrorName() string {
	return "ListReportExportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListReportExportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReportExportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReportExportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReportExportResponseValidationError{}

// Validate checks the field values on CreateReportExportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReportExportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReportExportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReportExportRequestMultiError, or nil if none found.
func (m *CreateReportExportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReportExportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for UserId

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for FileUrl

	// no validation rules for FileSize

	// no validation rules for FileFormat

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReportExportRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReportExportRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReportExportRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReportExportRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReportExportRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReportExportRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateReportExportRequestMultiError(errors)
	}

	return nil
}

// CreateReportExportRequestMultiError is an error wrapping multiple validation
// errors returned by CreateReportExportRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateReportExportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReportExportRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReportExportRequestMultiError) AllErrors() []error { return m }

// CreateReportExportRequestValidationError is the validation error returned by
// CreateReportExportRequest.Validate if the designated constraints aren't met.
type CreateReportExportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReportExportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReportExportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReportExportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReportExportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReportExportRequestValidationError) ErrorName() string {
	return "CreateReportExportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReportExportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReportExportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReportExportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReportExportRequestValidationError{}

// Validate checks the field values on CreateReportExportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReportExportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReportExportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReportExportResponseMultiError, or nil if none found.
func (m *CreateReportExportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReportExportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateReportExportResponseMultiError(errors)
	}

	return nil
}

// CreateReportExportResponseMultiError is an error wrapping multiple
// validation errors returned by CreateReportExportResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateReportExportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReportExportResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReportExportResponseMultiError) AllErrors() []error { return m }

// CreateReportExportResponseValidationError is the validation error returned
// by CreateReportExportResponse.Validate if the designated constraints aren't met.
type CreateReportExportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReportExportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReportExportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReportExportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReportExportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReportExportResponseValidationError) ErrorName() string {
	return "CreateReportExportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReportExportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReportExportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReportExportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReportExportResponseValidationError{}

// Validate checks the field values on UpdateReportExportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReportExportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReportExportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReportExportRequestMultiError, or nil if none found.
func (m *UpdateReportExportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReportExportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for Status

	// no validation rules for FileUrl

	// no validation rules for FileSize

	// no validation rules for FileFormat

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateReportExportRequestValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateReportExportRequestValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateReportExportRequestValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateReportExportRequestMultiError(errors)
	}

	return nil
}

// UpdateReportExportRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateReportExportRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateReportExportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReportExportRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReportExportRequestMultiError) AllErrors() []error { return m }

// UpdateReportExportRequestValidationError is the validation error returned by
// UpdateReportExportRequest.Validate if the designated constraints aren't met.
type UpdateReportExportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReportExportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReportExportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReportExportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReportExportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReportExportRequestValidationError) ErrorName() string {
	return "UpdateReportExportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReportExportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReportExportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReportExportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReportExportRequestValidationError{}

// Validate checks the field values on UpdateReportExportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReportExportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReportExportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReportExportResponseMultiError, or nil if none found.
func (m *UpdateReportExportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReportExportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateReportExportResponseMultiError(errors)
	}

	return nil
}

// UpdateReportExportResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateReportExportResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateReportExportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReportExportResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReportExportResponseMultiError) AllErrors() []error { return m }

// UpdateReportExportResponseValidationError is the validation error returned
// by UpdateReportExportResponse.Validate if the designated constraints aren't met.
type UpdateReportExportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReportExportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReportExportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReportExportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReportExportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReportExportResponseValidationError) ErrorName() string {
	return "UpdateReportExportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReportExportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReportExportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReportExportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReportExportResponseValidationError{}

// Validate checks the field values on SetIntegrityConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetIntegrityConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetIntegrityConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetIntegrityConfigRequestMultiError, or nil if none found.
func (m *SetIntegrityConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetIntegrityConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetIntegrityConfigRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetIntegrityConfigRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetIntegrityConfigRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LabelApp

	// no validation rules for PodNamespace

	for idx, item := range m.GetFileInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetIntegrityConfigRequestValidationError{
						field:  fmt.Sprintf("FileInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetIntegrityConfigRequestValidationError{
						field:  fmt.Sprintf("FileInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetIntegrityConfigRequestValidationError{
					field:  fmt.Sprintf("FileInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SetIntegrityConfigRequestMultiError(errors)
	}

	return nil
}

// SetIntegrityConfigRequestMultiError is an error wrapping multiple validation
// errors returned by SetIntegrityConfigRequest.ValidateAll() if the
// designated constraints aren't met.
type SetIntegrityConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetIntegrityConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetIntegrityConfigRequestMultiError) AllErrors() []error { return m }

// SetIntegrityConfigRequestValidationError is the validation error returned by
// SetIntegrityConfigRequest.Validate if the designated constraints aren't met.
type SetIntegrityConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetIntegrityConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetIntegrityConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetIntegrityConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetIntegrityConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetIntegrityConfigRequestValidationError) ErrorName() string {
	return "SetIntegrityConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetIntegrityConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetIntegrityConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetIntegrityConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetIntegrityConfigRequestValidationError{}

// Validate checks the field values on SetIntegrityConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetIntegrityConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetIntegrityConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetIntegrityConfigResponseMultiError, or nil if none found.
func (m *SetIntegrityConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetIntegrityConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetIntegrityConfigResponseMultiError(errors)
	}

	return nil
}

// SetIntegrityConfigResponseMultiError is an error wrapping multiple
// validation errors returned by SetIntegrityConfigResponse.ValidateAll() if
// the designated constraints aren't met.
type SetIntegrityConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetIntegrityConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetIntegrityConfigResponseMultiError) AllErrors() []error { return m }

// SetIntegrityConfigResponseValidationError is the validation error returned
// by SetIntegrityConfigResponse.Validate if the designated constraints aren't met.
type SetIntegrityConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetIntegrityConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetIntegrityConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetIntegrityConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetIntegrityConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetIntegrityConfigResponseValidationError) ErrorName() string {
	return "SetIntegrityConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetIntegrityConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetIntegrityConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetIntegrityConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetIntegrityConfigResponseValidationError{}

// Validate checks the field values on
// ListIntegrityStatusResponse_IntegrityStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListIntegrityStatusResponse_IntegrityStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListIntegrityStatusResponse_IntegrityStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListIntegrityStatusResponse_IntegrityStatusMultiError, or nil if none found.
func (m *ListIntegrityStatusResponse_IntegrityStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIntegrityStatusResponse_IntegrityStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LabelApp

	// no validation rules for PodName

	// no validation rules for PodNamespace

	for idx, item := range m.GetFileInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListIntegrityStatusResponse_IntegrityStatusValidationError{
						field:  fmt.Sprintf("FileInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListIntegrityStatusResponse_IntegrityStatusValidationError{
						field:  fmt.Sprintf("FileInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIntegrityStatusResponse_IntegrityStatusValidationError{
					field:  fmt.Sprintf("FileInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListIntegrityStatusResponse_IntegrityStatusValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListIntegrityStatusResponse_IntegrityStatusValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListIntegrityStatusResponse_IntegrityStatusValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListIntegrityStatusResponse_IntegrityStatusMultiError(errors)
	}

	return nil
}

// ListIntegrityStatusResponse_IntegrityStatusMultiError is an error wrapping
// multiple validation errors returned by
// ListIntegrityStatusResponse_IntegrityStatus.ValidateAll() if the designated
// constraints aren't met.
type ListIntegrityStatusResponse_IntegrityStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIntegrityStatusResponse_IntegrityStatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIntegrityStatusResponse_IntegrityStatusMultiError) AllErrors() []error { return m }

// ListIntegrityStatusResponse_IntegrityStatusValidationError is the validation
// error returned by ListIntegrityStatusResponse_IntegrityStatus.Validate if
// the designated constraints aren't met.
type ListIntegrityStatusResponse_IntegrityStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIntegrityStatusResponse_IntegrityStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIntegrityStatusResponse_IntegrityStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIntegrityStatusResponse_IntegrityStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIntegrityStatusResponse_IntegrityStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIntegrityStatusResponse_IntegrityStatusValidationError) ErrorName() string {
	return "ListIntegrityStatusResponse_IntegrityStatusValidationError"
}

// Error satisfies the builtin error interface
func (e ListIntegrityStatusResponse_IntegrityStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIntegrityStatusResponse_IntegrityStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIntegrityStatusResponse_IntegrityStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIntegrityStatusResponse_IntegrityStatusValidationError{}

// Validate checks the field values on
// ListIntegrityStatusResponse_IntegrityStatus_FileInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListIntegrityStatusResponse_IntegrityStatus_FileInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListIntegrityStatusResponse_IntegrityStatus_FileInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListIntegrityStatusResponse_IntegrityStatus_FileInfoMultiError, or nil if
// none found.
func (m *ListIntegrityStatusResponse_IntegrityStatus_FileInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIntegrityStatusResponse_IntegrityStatus_FileInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FilePath

	// no validation rules for Hash

	// no validation rules for ExpectedHash

	// no validation rules for IsMatch

	if len(errors) > 0 {
		return ListIntegrityStatusResponse_IntegrityStatus_FileInfoMultiError(errors)
	}

	return nil
}

// ListIntegrityStatusResponse_IntegrityStatus_FileInfoMultiError is an error
// wrapping multiple validation errors returned by
// ListIntegrityStatusResponse_IntegrityStatus_FileInfo.ValidateAll() if the
// designated constraints aren't met.
type ListIntegrityStatusResponse_IntegrityStatus_FileInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIntegrityStatusResponse_IntegrityStatus_FileInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIntegrityStatusResponse_IntegrityStatus_FileInfoMultiError) AllErrors() []error { return m }

// ListIntegrityStatusResponse_IntegrityStatus_FileInfoValidationError is the
// validation error returned by
// ListIntegrityStatusResponse_IntegrityStatus_FileInfo.Validate if the
// designated constraints aren't met.
type ListIntegrityStatusResponse_IntegrityStatus_FileInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIntegrityStatusResponse_IntegrityStatus_FileInfoValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListIntegrityStatusResponse_IntegrityStatus_FileInfoValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListIntegrityStatusResponse_IntegrityStatus_FileInfoValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListIntegrityStatusResponse_IntegrityStatus_FileInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIntegrityStatusResponse_IntegrityStatus_FileInfoValidationError) ErrorName() string {
	return "ListIntegrityStatusResponse_IntegrityStatus_FileInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ListIntegrityStatusResponse_IntegrityStatus_FileInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIntegrityStatusResponse_IntegrityStatus_FileInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIntegrityStatusResponse_IntegrityStatus_FileInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIntegrityStatusResponse_IntegrityStatus_FileInfoValidationError{}

// Validate checks the field values on ListReportExportResponse_ReportExport
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListReportExportResponse_ReportExport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReportExportResponse_ReportExport
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListReportExportResponse_ReportExportMultiError, or nil if none found.
func (m *ListReportExportResponse_ReportExport) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReportExportResponse_ReportExport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for UserId

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for FileUrl

	// no validation rules for FileSize

	// no validation rules for FileFormat

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListReportExportResponse_ReportExportValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListReportExportResponse_ReportExportValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListReportExportResponse_ReportExportValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListReportExportResponse_ReportExportMultiError(errors)
	}

	return nil
}

// ListReportExportResponse_ReportExportMultiError is an error wrapping
// multiple validation errors returned by
// ListReportExportResponse_ReportExport.ValidateAll() if the designated
// constraints aren't met.
type ListReportExportResponse_ReportExportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReportExportResponse_ReportExportMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReportExportResponse_ReportExportMultiError) AllErrors() []error { return m }

// ListReportExportResponse_ReportExportValidationError is the validation error
// returned by ListReportExportResponse_ReportExport.Validate if the
// designated constraints aren't met.
type ListReportExportResponse_ReportExportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReportExportResponse_ReportExportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReportExportResponse_ReportExportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReportExportResponse_ReportExportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReportExportResponse_ReportExportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReportExportResponse_ReportExportValidationError) ErrorName() string {
	return "ListReportExportResponse_ReportExportValidationError"
}

// Error satisfies the builtin error interface
func (e ListReportExportResponse_ReportExportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReportExportResponse_ReportExport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReportExportResponse_ReportExportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReportExportResponse_ReportExportValidationError{}
