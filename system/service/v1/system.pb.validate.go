// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: system/service/v1/system.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IntegrityFileInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IntegrityFileInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrityFileInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntegrityFileInfoMultiError, or nil if none found.
func (m *IntegrityFileInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrityFileInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FilePath

	// no validation rules for Hash

	if len(errors) > 0 {
		return IntegrityFileInfoMultiError(errors)
	}

	return nil
}

// IntegrityFileInfoMultiError is an error wrapping multiple validation errors
// returned by IntegrityFileInfo.ValidateAll() if the designated constraints
// aren't met.
type IntegrityFileInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrityFileInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrityFileInfoMultiError) AllErrors() []error { return m }

// IntegrityFileInfoValidationError is the validation error returned by
// IntegrityFileInfo.Validate if the designated constraints aren't met.
type IntegrityFileInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrityFileInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrityFileInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrityFileInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrityFileInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrityFileInfoValidationError) ErrorName() string {
	return "IntegrityFileInfoValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrityFileInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrityFileInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrityFileInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrityFileInfoValidationError{}

// Validate checks the field values on AddIntegrityReportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddIntegrityReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddIntegrityReportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddIntegrityReportRequestMultiError, or nil if none found.
func (m *AddIntegrityReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddIntegrityReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LabelApp

	// no validation rules for PodName

	// no validation rules for PodNamespace

	for idx, item := range m.GetFileInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddIntegrityReportRequestValidationError{
						field:  fmt.Sprintf("FileInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddIntegrityReportRequestValidationError{
						field:  fmt.Sprintf("FileInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddIntegrityReportRequestValidationError{
					field:  fmt.Sprintf("FileInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddIntegrityReportRequestMultiError(errors)
	}

	return nil
}

// AddIntegrityReportRequestMultiError is an error wrapping multiple validation
// errors returned by AddIntegrityReportRequest.ValidateAll() if the
// designated constraints aren't met.
type AddIntegrityReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddIntegrityReportRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddIntegrityReportRequestMultiError) AllErrors() []error { return m }

// AddIntegrityReportRequestValidationError is the validation error returned by
// AddIntegrityReportRequest.Validate if the designated constraints aren't met.
type AddIntegrityReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddIntegrityReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddIntegrityReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddIntegrityReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddIntegrityReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddIntegrityReportRequestValidationError) ErrorName() string {
	return "AddIntegrityReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddIntegrityReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddIntegrityReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddIntegrityReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddIntegrityReportRequestValidationError{}

// Validate checks the field values on AddIntegrityReportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddIntegrityReportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddIntegrityReportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddIntegrityReportResponseMultiError, or nil if none found.
func (m *AddIntegrityReportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddIntegrityReportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddIntegrityReportResponseMultiError(errors)
	}

	return nil
}

// AddIntegrityReportResponseMultiError is an error wrapping multiple
// validation errors returned by AddIntegrityReportResponse.ValidateAll() if
// the designated constraints aren't met.
type AddIntegrityReportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddIntegrityReportResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddIntegrityReportResponseMultiError) AllErrors() []error { return m }

// AddIntegrityReportResponseValidationError is the validation error returned
// by AddIntegrityReportResponse.Validate if the designated constraints aren't met.
type AddIntegrityReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddIntegrityReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddIntegrityReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddIntegrityReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddIntegrityReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddIntegrityReportResponseValidationError) ErrorName() string {
	return "AddIntegrityReportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddIntegrityReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddIntegrityReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddIntegrityReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddIntegrityReportResponseValidationError{}

// Validate checks the field values on ListIntegrityStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIntegrityStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIntegrityStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIntegrityStatusRequestMultiError, or nil if none found.
func (m *ListIntegrityStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIntegrityStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListIntegrityStatusRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListIntegrityStatusRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListIntegrityStatusRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListIntegrityStatusRequestMultiError(errors)
	}

	return nil
}

// ListIntegrityStatusRequestMultiError is an error wrapping multiple
// validation errors returned by ListIntegrityStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type ListIntegrityStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIntegrityStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIntegrityStatusRequestMultiError) AllErrors() []error { return m }

// ListIntegrityStatusRequestValidationError is the validation error returned
// by ListIntegrityStatusRequest.Validate if the designated constraints aren't met.
type ListIntegrityStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIntegrityStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIntegrityStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIntegrityStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIntegrityStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIntegrityStatusRequestValidationError) ErrorName() string {
	return "ListIntegrityStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListIntegrityStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIntegrityStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIntegrityStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIntegrityStatusRequestValidationError{}

// Validate checks the field values on ListIntegrityStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIntegrityStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIntegrityStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIntegrityStatusResponseMultiError, or nil if none found.
func (m *ListIntegrityStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIntegrityStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIntegrityStatuses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListIntegrityStatusResponseValidationError{
						field:  fmt.Sprintf("IntegrityStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListIntegrityStatusResponseValidationError{
						field:  fmt.Sprintf("IntegrityStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIntegrityStatusResponseValidationError{
					field:  fmt.Sprintf("IntegrityStatuses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListIntegrityStatusResponseMultiError(errors)
	}

	return nil
}

// ListIntegrityStatusResponseMultiError is an error wrapping multiple
// validation errors returned by ListIntegrityStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type ListIntegrityStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIntegrityStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIntegrityStatusResponseMultiError) AllErrors() []error { return m }

// ListIntegrityStatusResponseValidationError is the validation error returned
// by ListIntegrityStatusResponse.Validate if the designated constraints
// aren't met.
type ListIntegrityStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIntegrityStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIntegrityStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIntegrityStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIntegrityStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIntegrityStatusResponseValidationError) ErrorName() string {
	return "ListIntegrityStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListIntegrityStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIntegrityStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIntegrityStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIntegrityStatusResponseValidationError{}

// Validate checks the field values on SetIntegrityFileInfoConfigRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SetIntegrityFileInfoConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetIntegrityFileInfoConfigRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SetIntegrityFileInfoConfigRequestMultiError, or nil if none found.
func (m *SetIntegrityFileInfoConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetIntegrityFileInfoConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetIntegrityFileInfoConfigRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetIntegrityFileInfoConfigRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetIntegrityFileInfoConfigRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LabelApp

	// no validation rules for PodNamespace

	for idx, item := range m.GetFileInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetIntegrityFileInfoConfigRequestValidationError{
						field:  fmt.Sprintf("FileInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetIntegrityFileInfoConfigRequestValidationError{
						field:  fmt.Sprintf("FileInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetIntegrityFileInfoConfigRequestValidationError{
					field:  fmt.Sprintf("FileInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SetIntegrityFileInfoConfigRequestMultiError(errors)
	}

	return nil
}

// SetIntegrityFileInfoConfigRequestMultiError is an error wrapping multiple
// validation errors returned by
// SetIntegrityFileInfoConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type SetIntegrityFileInfoConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetIntegrityFileInfoConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetIntegrityFileInfoConfigRequestMultiError) AllErrors() []error { return m }

// SetIntegrityFileInfoConfigRequestValidationError is the validation error
// returned by SetIntegrityFileInfoConfigRequest.Validate if the designated
// constraints aren't met.
type SetIntegrityFileInfoConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetIntegrityFileInfoConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetIntegrityFileInfoConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetIntegrityFileInfoConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetIntegrityFileInfoConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetIntegrityFileInfoConfigRequestValidationError) ErrorName() string {
	return "SetIntegrityFileInfoConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetIntegrityFileInfoConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetIntegrityFileInfoConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetIntegrityFileInfoConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetIntegrityFileInfoConfigRequestValidationError{}

// Validate checks the field values on SetIntegrityFileInfoConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SetIntegrityFileInfoConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetIntegrityFileInfoConfigResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SetIntegrityFileInfoConfigResponseMultiError, or nil if none found.
func (m *SetIntegrityFileInfoConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetIntegrityFileInfoConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetIntegrityFileInfoConfigResponseMultiError(errors)
	}

	return nil
}

// SetIntegrityFileInfoConfigResponseMultiError is an error wrapping multiple
// validation errors returned by
// SetIntegrityFileInfoConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type SetIntegrityFileInfoConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetIntegrityFileInfoConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetIntegrityFileInfoConfigResponseMultiError) AllErrors() []error { return m }

// SetIntegrityFileInfoConfigResponseValidationError is the validation error
// returned by SetIntegrityFileInfoConfigResponse.Validate if the designated
// constraints aren't met.
type SetIntegrityFileInfoConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetIntegrityFileInfoConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetIntegrityFileInfoConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetIntegrityFileInfoConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetIntegrityFileInfoConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetIntegrityFileInfoConfigResponseValidationError) ErrorName() string {
	return "SetIntegrityFileInfoConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetIntegrityFileInfoConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetIntegrityFileInfoConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetIntegrityFileInfoConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetIntegrityFileInfoConfigResponseValidationError{}

// Validate checks the field values on
// ListIntegrityStatusResponse_IntegrityStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListIntegrityStatusResponse_IntegrityStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListIntegrityStatusResponse_IntegrityStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListIntegrityStatusResponse_IntegrityStatusMultiError, or nil if none found.
func (m *ListIntegrityStatusResponse_IntegrityStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIntegrityStatusResponse_IntegrityStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LabelApp

	// no validation rules for PodName

	// no validation rules for PodNamespace

	for idx, item := range m.GetFileInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListIntegrityStatusResponse_IntegrityStatusValidationError{
						field:  fmt.Sprintf("FileInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListIntegrityStatusResponse_IntegrityStatusValidationError{
						field:  fmt.Sprintf("FileInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIntegrityStatusResponse_IntegrityStatusValidationError{
					field:  fmt.Sprintf("FileInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListIntegrityStatusResponse_IntegrityStatusValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListIntegrityStatusResponse_IntegrityStatusValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListIntegrityStatusResponse_IntegrityStatusValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListIntegrityStatusResponse_IntegrityStatusMultiError(errors)
	}

	return nil
}

// ListIntegrityStatusResponse_IntegrityStatusMultiError is an error wrapping
// multiple validation errors returned by
// ListIntegrityStatusResponse_IntegrityStatus.ValidateAll() if the designated
// constraints aren't met.
type ListIntegrityStatusResponse_IntegrityStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIntegrityStatusResponse_IntegrityStatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIntegrityStatusResponse_IntegrityStatusMultiError) AllErrors() []error { return m }

// ListIntegrityStatusResponse_IntegrityStatusValidationError is the validation
// error returned by ListIntegrityStatusResponse_IntegrityStatus.Validate if
// the designated constraints aren't met.
type ListIntegrityStatusResponse_IntegrityStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIntegrityStatusResponse_IntegrityStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIntegrityStatusResponse_IntegrityStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIntegrityStatusResponse_IntegrityStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIntegrityStatusResponse_IntegrityStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIntegrityStatusResponse_IntegrityStatusValidationError) ErrorName() string {
	return "ListIntegrityStatusResponse_IntegrityStatusValidationError"
}

// Error satisfies the builtin error interface
func (e ListIntegrityStatusResponse_IntegrityStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIntegrityStatusResponse_IntegrityStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIntegrityStatusResponse_IntegrityStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIntegrityStatusResponse_IntegrityStatusValidationError{}
