// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: system/service/v1/system.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IntegrityFileInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IntegrityFileInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrityFileInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntegrityFileInfoMultiError, or nil if none found.
func (m *IntegrityFileInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrityFileInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FilePath

	// no validation rules for Hash

	if len(errors) > 0 {
		return IntegrityFileInfoMultiError(errors)
	}

	return nil
}

// IntegrityFileInfoMultiError is an error wrapping multiple validation errors
// returned by IntegrityFileInfo.ValidateAll() if the designated constraints
// aren't met.
type IntegrityFileInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrityFileInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrityFileInfoMultiError) AllErrors() []error { return m }

// IntegrityFileInfoValidationError is the validation error returned by
// IntegrityFileInfo.Validate if the designated constraints aren't met.
type IntegrityFileInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrityFileInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrityFileInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrityFileInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrityFileInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrityFileInfoValidationError) ErrorName() string {
	return "IntegrityFileInfoValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrityFileInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrityFileInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrityFileInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrityFileInfoValidationError{}

// Validate checks the field values on AddIntegrityReportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddIntegrityReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddIntegrityReportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddIntegrityReportRequestMultiError, or nil if none found.
func (m *AddIntegrityReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddIntegrityReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LabelApp

	// no validation rules for PodName

	// no validation rules for PodNamespace

	for idx, item := range m.GetFileInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddIntegrityReportRequestValidationError{
						field:  fmt.Sprintf("FileInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddIntegrityReportRequestValidationError{
						field:  fmt.Sprintf("FileInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddIntegrityReportRequestValidationError{
					field:  fmt.Sprintf("FileInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddIntegrityReportRequestMultiError(errors)
	}

	return nil
}

// AddIntegrityReportRequestMultiError is an error wrapping multiple validation
// errors returned by AddIntegrityReportRequest.ValidateAll() if the
// designated constraints aren't met.
type AddIntegrityReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddIntegrityReportRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddIntegrityReportRequestMultiError) AllErrors() []error { return m }

// AddIntegrityReportRequestValidationError is the validation error returned by
// AddIntegrityReportRequest.Validate if the designated constraints aren't met.
type AddIntegrityReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddIntegrityReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddIntegrityReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddIntegrityReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddIntegrityReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddIntegrityReportRequestValidationError) ErrorName() string {
	return "AddIntegrityReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddIntegrityReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddIntegrityReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddIntegrityReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddIntegrityReportRequestValidationError{}

// Validate checks the field values on AddIntegrityReportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddIntegrityReportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddIntegrityReportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddIntegrityReportResponseMultiError, or nil if none found.
func (m *AddIntegrityReportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddIntegrityReportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddIntegrityReportResponseMultiError(errors)
	}

	return nil
}

// AddIntegrityReportResponseMultiError is an error wrapping multiple
// validation errors returned by AddIntegrityReportResponse.ValidateAll() if
// the designated constraints aren't met.
type AddIntegrityReportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddIntegrityReportResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddIntegrityReportResponseMultiError) AllErrors() []error { return m }

// AddIntegrityReportResponseValidationError is the validation error returned
// by AddIntegrityReportResponse.Validate if the designated constraints aren't met.
type AddIntegrityReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddIntegrityReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddIntegrityReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddIntegrityReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddIntegrityReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddIntegrityReportResponseValidationError) ErrorName() string {
	return "AddIntegrityReportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddIntegrityReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddIntegrityReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddIntegrityReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddIntegrityReportResponseValidationError{}

// Validate checks the field values on ListIntegrityStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIntegrityStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIntegrityStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIntegrityStatusRequestMultiError, or nil if none found.
func (m *ListIntegrityStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIntegrityStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListIntegrityStatusRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListIntegrityStatusRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListIntegrityStatusRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListIntegrityStatusRequestMultiError(errors)
	}

	return nil
}

// ListIntegrityStatusRequestMultiError is an error wrapping multiple
// validation errors returned by ListIntegrityStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type ListIntegrityStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIntegrityStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIntegrityStatusRequestMultiError) AllErrors() []error { return m }

// ListIntegrityStatusRequestValidationError is the validation error returned
// by ListIntegrityStatusRequest.Validate if the designated constraints aren't met.
type ListIntegrityStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIntegrityStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIntegrityStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIntegrityStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIntegrityStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIntegrityStatusRequestValidationError) ErrorName() string {
	return "ListIntegrityStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListIntegrityStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIntegrityStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIntegrityStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIntegrityStatusRequestValidationError{}

// Validate checks the field values on ListIntegrityStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIntegrityStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIntegrityStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIntegrityStatusResponseMultiError, or nil if none found.
func (m *ListIntegrityStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIntegrityStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIntegrityStatuses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListIntegrityStatusResponseValidationError{
						field:  fmt.Sprintf("IntegrityStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListIntegrityStatusResponseValidationError{
						field:  fmt.Sprintf("IntegrityStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIntegrityStatusResponseValidationError{
					field:  fmt.Sprintf("IntegrityStatuses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListIntegrityStatusResponseMultiError(errors)
	}

	return nil
}

// ListIntegrityStatusResponseMultiError is an error wrapping multiple
// validation errors returned by ListIntegrityStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type ListIntegrityStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIntegrityStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIntegrityStatusResponseMultiError) AllErrors() []error { return m }

// ListIntegrityStatusResponseValidationError is the validation error returned
// by ListIntegrityStatusResponse.Validate if the designated constraints
// aren't met.
type ListIntegrityStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIntegrityStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIntegrityStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIntegrityStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIntegrityStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIntegrityStatusResponseValidationError) ErrorName() string {
	return "ListIntegrityStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListIntegrityStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIntegrityStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIntegrityStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIntegrityStatusResponseValidationError{}

// Validate checks the field values on ListAsynTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAsynTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAsynTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAsynTaskRequestMultiError, or nil if none found.
func (m *ListAsynTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAsynTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Type != nil {
		// no validation rules for Type
	}

	if len(errors) > 0 {
		return ListAsynTaskRequestMultiError(errors)
	}

	return nil
}

// ListAsynTaskRequestMultiError is an error wrapping multiple validation
// errors returned by ListAsynTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAsynTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAsynTaskRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAsynTaskRequestMultiError) AllErrors() []error { return m }

// ListAsynTaskRequestValidationError is the validation error returned by
// ListAsynTaskRequest.Validate if the designated constraints aren't met.
type ListAsynTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAsynTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAsynTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAsynTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAsynTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAsynTaskRequestValidationError) ErrorName() string {
	return "ListAsynTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAsynTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAsynTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAsynTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAsynTaskRequestValidationError{}

// Validate checks the field values on ListAsynTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAsynTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAsynTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAsynTaskResponseMultiError, or nil if none found.
func (m *ListAsynTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAsynTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTasks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAsynTaskResponseValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAsynTaskResponseValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAsynTaskResponseValidationError{
					field:  fmt.Sprintf("Tasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAsynTaskResponseMultiError(errors)
	}

	return nil
}

// ListAsynTaskResponseMultiError is an error wrapping multiple validation
// errors returned by ListAsynTaskResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAsynTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAsynTaskResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAsynTaskResponseMultiError) AllErrors() []error { return m }

// ListAsynTaskResponseValidationError is the validation error returned by
// ListAsynTaskResponse.Validate if the designated constraints aren't met.
type ListAsynTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAsynTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAsynTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAsynTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAsynTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAsynTaskResponseValidationError) ErrorName() string {
	return "ListAsynTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAsynTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAsynTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAsynTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAsynTaskResponseValidationError{}

// Validate checks the field values on CreateAsynTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAsynTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAsynTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAsynTaskRequestMultiError, or nil if none found.
func (m *CreateAsynTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAsynTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for UserId

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAsynTaskRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAsynTaskRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAsynTaskRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPayload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAsynTaskRequestValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAsynTaskRequestValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAsynTaskRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAsynTaskRequestMultiError(errors)
	}

	return nil
}

// CreateAsynTaskRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAsynTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAsynTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAsynTaskRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAsynTaskRequestMultiError) AllErrors() []error { return m }

// CreateAsynTaskRequestValidationError is the validation error returned by
// CreateAsynTaskRequest.Validate if the designated constraints aren't met.
type CreateAsynTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAsynTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAsynTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAsynTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAsynTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAsynTaskRequestValidationError) ErrorName() string {
	return "CreateAsynTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAsynTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAsynTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAsynTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAsynTaskRequestValidationError{}

// Validate checks the field values on CreateAsynTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAsynTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAsynTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAsynTaskResponseMultiError, or nil if none found.
func (m *CreateAsynTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAsynTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateAsynTaskResponseMultiError(errors)
	}

	return nil
}

// CreateAsynTaskResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAsynTaskResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAsynTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAsynTaskResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAsynTaskResponseMultiError) AllErrors() []error { return m }

// CreateAsynTaskResponseValidationError is the validation error returned by
// CreateAsynTaskResponse.Validate if the designated constraints aren't met.
type CreateAsynTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAsynTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAsynTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAsynTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAsynTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAsynTaskResponseValidationError) ErrorName() string {
	return "CreateAsynTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAsynTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAsynTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAsynTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAsynTaskResponseValidationError{}

// Validate checks the field values on UpdateAsynTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAsynTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAsynTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAsynTaskRequestMultiError, or nil if none found.
func (m *UpdateAsynTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAsynTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for Process

	if len(errors) > 0 {
		return UpdateAsynTaskRequestMultiError(errors)
	}

	return nil
}

// UpdateAsynTaskRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAsynTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAsynTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAsynTaskRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAsynTaskRequestMultiError) AllErrors() []error { return m }

// UpdateAsynTaskRequestValidationError is the validation error returned by
// UpdateAsynTaskRequest.Validate if the designated constraints aren't met.
type UpdateAsynTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAsynTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAsynTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAsynTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAsynTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAsynTaskRequestValidationError) ErrorName() string {
	return "UpdateAsynTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAsynTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAsynTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAsynTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAsynTaskRequestValidationError{}

// Validate checks the field values on UpdateAsynTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAsynTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAsynTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAsynTaskResponseMultiError, or nil if none found.
func (m *UpdateAsynTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAsynTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAsynTaskResponseMultiError(errors)
	}

	return nil
}

// UpdateAsynTaskResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAsynTaskResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAsynTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAsynTaskResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAsynTaskResponseMultiError) AllErrors() []error { return m }

// UpdateAsynTaskResponseValidationError is the validation error returned by
// UpdateAsynTaskResponse.Validate if the designated constraints aren't met.
type UpdateAsynTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAsynTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAsynTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAsynTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAsynTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAsynTaskResponseValidationError) ErrorName() string {
	return "UpdateAsynTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAsynTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAsynTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAsynTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAsynTaskResponseValidationError{}

// Validate checks the field values on
// ListIntegrityStatusResponse_IntegrityStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListIntegrityStatusResponse_IntegrityStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListIntegrityStatusResponse_IntegrityStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListIntegrityStatusResponse_IntegrityStatusMultiError, or nil if none found.
func (m *ListIntegrityStatusResponse_IntegrityStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIntegrityStatusResponse_IntegrityStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LabelApp

	// no validation rules for PodName

	// no validation rules for PodNamespace

	for idx, item := range m.GetFileInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListIntegrityStatusResponse_IntegrityStatusValidationError{
						field:  fmt.Sprintf("FileInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListIntegrityStatusResponse_IntegrityStatusValidationError{
						field:  fmt.Sprintf("FileInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIntegrityStatusResponse_IntegrityStatusValidationError{
					field:  fmt.Sprintf("FileInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListIntegrityStatusResponse_IntegrityStatusMultiError(errors)
	}

	return nil
}

// ListIntegrityStatusResponse_IntegrityStatusMultiError is an error wrapping
// multiple validation errors returned by
// ListIntegrityStatusResponse_IntegrityStatus.ValidateAll() if the designated
// constraints aren't met.
type ListIntegrityStatusResponse_IntegrityStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIntegrityStatusResponse_IntegrityStatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIntegrityStatusResponse_IntegrityStatusMultiError) AllErrors() []error { return m }

// ListIntegrityStatusResponse_IntegrityStatusValidationError is the validation
// error returned by ListIntegrityStatusResponse_IntegrityStatus.Validate if
// the designated constraints aren't met.
type ListIntegrityStatusResponse_IntegrityStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIntegrityStatusResponse_IntegrityStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIntegrityStatusResponse_IntegrityStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIntegrityStatusResponse_IntegrityStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIntegrityStatusResponse_IntegrityStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIntegrityStatusResponse_IntegrityStatusValidationError) ErrorName() string {
	return "ListIntegrityStatusResponse_IntegrityStatusValidationError"
}

// Error satisfies the builtin error interface
func (e ListIntegrityStatusResponse_IntegrityStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIntegrityStatusResponse_IntegrityStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIntegrityStatusResponse_IntegrityStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIntegrityStatusResponse_IntegrityStatusValidationError{}

// Validate checks the field values on ListAsynTaskResponse_AsynTask with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAsynTaskResponse_AsynTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAsynTaskResponse_AsynTask with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListAsynTaskResponse_AsynTaskMultiError, or nil if none found.
func (m *ListAsynTaskResponse_AsynTask) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAsynTaskResponse_AsynTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for UserId

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetPayload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAsynTaskResponse_AsynTaskValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAsynTaskResponse_AsynTaskValidationError{
					field:  "Payload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAsynTaskResponse_AsynTaskValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAsynTaskResponse_AsynTaskMultiError(errors)
	}

	return nil
}

// ListAsynTaskResponse_AsynTaskMultiError is an error wrapping multiple
// validation errors returned by ListAsynTaskResponse_AsynTask.ValidateAll()
// if the designated constraints aren't met.
type ListAsynTaskResponse_AsynTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAsynTaskResponse_AsynTaskMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAsynTaskResponse_AsynTaskMultiError) AllErrors() []error { return m }

// ListAsynTaskResponse_AsynTaskValidationError is the validation error
// returned by ListAsynTaskResponse_AsynTask.Validate if the designated
// constraints aren't met.
type ListAsynTaskResponse_AsynTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAsynTaskResponse_AsynTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAsynTaskResponse_AsynTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAsynTaskResponse_AsynTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAsynTaskResponse_AsynTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAsynTaskResponse_AsynTaskValidationError) ErrorName() string {
	return "ListAsynTaskResponse_AsynTaskValidationError"
}

// Error satisfies the builtin error interface
func (e ListAsynTaskResponse_AsynTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAsynTaskResponse_AsynTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAsynTaskResponse_AsynTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAsynTaskResponse_AsynTaskValidationError{}
