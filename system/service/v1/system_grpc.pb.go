// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: system/service/v1/system.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	System_AddIntegrityReport_FullMethodName  = "/system.service.v1.System/AddIntegrityReport"
	System_ListIntegrityStatus_FullMethodName = "/system.service.v1.System/ListIntegrityStatus"
	System_SetIntegrityConfig_FullMethodName  = "/system.service.v1.System/SetIntegrityConfig"
	System_ListReportExport_FullMethodName    = "/system.service.v1.System/ListReportExport"
	System_CreateReportExport_FullMethodName  = "/system.service.v1.System/CreateReportExport"
	System_UpdateReportExport_FullMethodName  = "/system.service.v1.System/UpdateReportExport"
	System_ListSev_FullMethodName             = "/system.service.v1.System/ListSev"
	System_ExportSev_FullMethodName           = "/system.service.v1.System/ExportSev"
)

// SystemClient is the client API for System service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemClient interface {
	AddIntegrityReport(ctx context.Context, in *AddIntegrityReportRequest, opts ...grpc.CallOption) (*AddIntegrityReportResponse, error)
	ListIntegrityStatus(ctx context.Context, in *ListIntegrityStatusRequest, opts ...grpc.CallOption) (*ListIntegrityStatusResponse, error)
	SetIntegrityConfig(ctx context.Context, in *SetIntegrityConfigRequest, opts ...grpc.CallOption) (*SetIntegrityConfigResponse, error)
	ListReportExport(ctx context.Context, in *ListReportExportRequest, opts ...grpc.CallOption) (*ListReportExportResponse, error)
	CreateReportExport(ctx context.Context, in *CreateReportExportRequest, opts ...grpc.CallOption) (*CreateReportExportResponse, error)
	UpdateReportExport(ctx context.Context, in *UpdateReportExportRequest, opts ...grpc.CallOption) (*UpdateReportExportResponse, error)
	ListSev(ctx context.Context, in *ListSevRequest, opts ...grpc.CallOption) (*ListSevResponse, error)
	ExportSev(ctx context.Context, in *ExportSevRequest, opts ...grpc.CallOption) (*ExportSevResponse, error)
}

type systemClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemClient(cc grpc.ClientConnInterface) SystemClient {
	return &systemClient{cc}
}

func (c *systemClient) AddIntegrityReport(ctx context.Context, in *AddIntegrityReportRequest, opts ...grpc.CallOption) (*AddIntegrityReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddIntegrityReportResponse)
	err := c.cc.Invoke(ctx, System_AddIntegrityReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ListIntegrityStatus(ctx context.Context, in *ListIntegrityStatusRequest, opts ...grpc.CallOption) (*ListIntegrityStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIntegrityStatusResponse)
	err := c.cc.Invoke(ctx, System_ListIntegrityStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) SetIntegrityConfig(ctx context.Context, in *SetIntegrityConfigRequest, opts ...grpc.CallOption) (*SetIntegrityConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetIntegrityConfigResponse)
	err := c.cc.Invoke(ctx, System_SetIntegrityConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ListReportExport(ctx context.Context, in *ListReportExportRequest, opts ...grpc.CallOption) (*ListReportExportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReportExportResponse)
	err := c.cc.Invoke(ctx, System_ListReportExport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) CreateReportExport(ctx context.Context, in *CreateReportExportRequest, opts ...grpc.CallOption) (*CreateReportExportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReportExportResponse)
	err := c.cc.Invoke(ctx, System_CreateReportExport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) UpdateReportExport(ctx context.Context, in *UpdateReportExportRequest, opts ...grpc.CallOption) (*UpdateReportExportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateReportExportResponse)
	err := c.cc.Invoke(ctx, System_UpdateReportExport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ListSev(ctx context.Context, in *ListSevRequest, opts ...grpc.CallOption) (*ListSevResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSevResponse)
	err := c.cc.Invoke(ctx, System_ListSev_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemClient) ExportSev(ctx context.Context, in *ExportSevRequest, opts ...grpc.CallOption) (*ExportSevResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportSevResponse)
	err := c.cc.Invoke(ctx, System_ExportSev_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServer is the server API for System service.
// All implementations must embed UnimplementedSystemServer
// for forward compatibility.
type SystemServer interface {
	AddIntegrityReport(context.Context, *AddIntegrityReportRequest) (*AddIntegrityReportResponse, error)
	ListIntegrityStatus(context.Context, *ListIntegrityStatusRequest) (*ListIntegrityStatusResponse, error)
	SetIntegrityConfig(context.Context, *SetIntegrityConfigRequest) (*SetIntegrityConfigResponse, error)
	ListReportExport(context.Context, *ListReportExportRequest) (*ListReportExportResponse, error)
	CreateReportExport(context.Context, *CreateReportExportRequest) (*CreateReportExportResponse, error)
	UpdateReportExport(context.Context, *UpdateReportExportRequest) (*UpdateReportExportResponse, error)
	ListSev(context.Context, *ListSevRequest) (*ListSevResponse, error)
	ExportSev(context.Context, *ExportSevRequest) (*ExportSevResponse, error)
	mustEmbedUnimplementedSystemServer()
}

// UnimplementedSystemServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSystemServer struct{}

func (UnimplementedSystemServer) AddIntegrityReport(context.Context, *AddIntegrityReportRequest) (*AddIntegrityReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIntegrityReport not implemented")
}
func (UnimplementedSystemServer) ListIntegrityStatus(context.Context, *ListIntegrityStatusRequest) (*ListIntegrityStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntegrityStatus not implemented")
}
func (UnimplementedSystemServer) SetIntegrityConfig(context.Context, *SetIntegrityConfigRequest) (*SetIntegrityConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIntegrityConfig not implemented")
}
func (UnimplementedSystemServer) ListReportExport(context.Context, *ListReportExportRequest) (*ListReportExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReportExport not implemented")
}
func (UnimplementedSystemServer) CreateReportExport(context.Context, *CreateReportExportRequest) (*CreateReportExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReportExport not implemented")
}
func (UnimplementedSystemServer) UpdateReportExport(context.Context, *UpdateReportExportRequest) (*UpdateReportExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReportExport not implemented")
}
func (UnimplementedSystemServer) ListSev(context.Context, *ListSevRequest) (*ListSevResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSev not implemented")
}
func (UnimplementedSystemServer) ExportSev(context.Context, *ExportSevRequest) (*ExportSevResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSev not implemented")
}
func (UnimplementedSystemServer) mustEmbedUnimplementedSystemServer() {}
func (UnimplementedSystemServer) testEmbeddedByValue()                {}

// UnsafeSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemServer will
// result in compilation errors.
type UnsafeSystemServer interface {
	mustEmbedUnimplementedSystemServer()
}

func RegisterSystemServer(s grpc.ServiceRegistrar, srv SystemServer) {
	// If the following call pancis, it indicates UnimplementedSystemServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&System_ServiceDesc, srv)
}

func _System_AddIntegrityReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIntegrityReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).AddIntegrityReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_AddIntegrityReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).AddIntegrityReport(ctx, req.(*AddIntegrityReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ListIntegrityStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntegrityStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ListIntegrityStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_ListIntegrityStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ListIntegrityStatus(ctx, req.(*ListIntegrityStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_SetIntegrityConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIntegrityConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).SetIntegrityConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_SetIntegrityConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).SetIntegrityConfig(ctx, req.(*SetIntegrityConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ListReportExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReportExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ListReportExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_ListReportExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ListReportExport(ctx, req.(*ListReportExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_CreateReportExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReportExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).CreateReportExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_CreateReportExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).CreateReportExport(ctx, req.(*CreateReportExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_UpdateReportExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReportExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).UpdateReportExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_UpdateReportExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).UpdateReportExport(ctx, req.(*UpdateReportExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ListSev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSevRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ListSev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_ListSev_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ListSev(ctx, req.(*ListSevRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _System_ExportSev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportSevRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).ExportSev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: System_ExportSev_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).ExportSev(ctx, req.(*ExportSevRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// System_ServiceDesc is the grpc.ServiceDesc for System service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var System_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "system.service.v1.System",
	HandlerType: (*SystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddIntegrityReport",
			Handler:    _System_AddIntegrityReport_Handler,
		},
		{
			MethodName: "ListIntegrityStatus",
			Handler:    _System_ListIntegrityStatus_Handler,
		},
		{
			MethodName: "SetIntegrityConfig",
			Handler:    _System_SetIntegrityConfig_Handler,
		},
		{
			MethodName: "ListReportExport",
			Handler:    _System_ListReportExport_Handler,
		},
		{
			MethodName: "CreateReportExport",
			Handler:    _System_CreateReportExport_Handler,
		},
		{
			MethodName: "UpdateReportExport",
			Handler:    _System_UpdateReportExport_Handler,
		},
		{
			MethodName: "ListSev",
			Handler:    _System_ListSev_Handler,
		},
		{
			MethodName: "ExportSev",
			Handler:    _System_ExportSev_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system/service/v1/system.proto",
}
