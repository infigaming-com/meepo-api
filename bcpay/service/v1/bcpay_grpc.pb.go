// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: bcpay/service/v1/bcpay.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Bcpay_GetBankAccount_FullMethodName       = "/api.bcpay.service.v1.Bcpay/GetBankAccount"
	Bcpay_CreateWithdraw_FullMethodName       = "/api.bcpay.service.v1.Bcpay/CreateWithdraw"
	Bcpay_GetMerchant_FullMethodName          = "/api.bcpay.service.v1.Bcpay/GetMerchant"
	Bcpay_BankAccountList_FullMethodName      = "/api.bcpay.service.v1.Bcpay/BankAccountList"
	Bcpay_AddBankAccount_FullMethodName       = "/api.bcpay.service.v1.Bcpay/AddBankAccount"
	Bcpay_UpdateBankAccount_FullMethodName    = "/api.bcpay.service.v1.Bcpay/UpdateBankAccount"
	Bcpay_TransactionList_FullMethodName      = "/api.bcpay.service.v1.Bcpay/TransactionList"
	Bcpay_AuditTransaction_FullMethodName     = "/api.bcpay.service.v1.Bcpay/AuditTransaction"
	Bcpay_AddNoteToTransaction_FullMethodName = "/api.bcpay.service.v1.Bcpay/AddNoteToTransaction"
)

// BcpayClient is the client API for Bcpay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// User service provides authentication and user management functionality.
type BcpayClient interface {
	GetBankAccount(ctx context.Context, in *GetBankAccountRequest, opts ...grpc.CallOption) (*GetBankAccountResponse, error)
	CreateWithdraw(ctx context.Context, in *CreateWithdrawRequest, opts ...grpc.CallOption) (*CreateWithdrawResponse, error)
	GetMerchant(ctx context.Context, in *GetMerchantRequest, opts ...grpc.CallOption) (*GetMerchantResponse, error)
	BankAccountList(ctx context.Context, in *BankAccountListRequest, opts ...grpc.CallOption) (*BankAccountListResponse, error)
	AddBankAccount(ctx context.Context, in *AddBankAccountRequest, opts ...grpc.CallOption) (*AddBankAccountResponse, error)
	UpdateBankAccount(ctx context.Context, in *UpdateBankAccountRequest, opts ...grpc.CallOption) (*UpdateBankAccountResponse, error)
	TransactionList(ctx context.Context, in *TransactionListRequest, opts ...grpc.CallOption) (*TransactionListResponse, error)
	AuditTransaction(ctx context.Context, in *AuditTransactionRequest, opts ...grpc.CallOption) (*AuditTransactionResponse, error)
	AddNoteToTransaction(ctx context.Context, in *AddNoteToTransactionRequest, opts ...grpc.CallOption) (*AddNoteToTransactionResponse, error)
}

type bcpayClient struct {
	cc grpc.ClientConnInterface
}

func NewBcpayClient(cc grpc.ClientConnInterface) BcpayClient {
	return &bcpayClient{cc}
}

func (c *bcpayClient) GetBankAccount(ctx context.Context, in *GetBankAccountRequest, opts ...grpc.CallOption) (*GetBankAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBankAccountResponse)
	err := c.cc.Invoke(ctx, Bcpay_GetBankAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcpayClient) CreateWithdraw(ctx context.Context, in *CreateWithdrawRequest, opts ...grpc.CallOption) (*CreateWithdrawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWithdrawResponse)
	err := c.cc.Invoke(ctx, Bcpay_CreateWithdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcpayClient) GetMerchant(ctx context.Context, in *GetMerchantRequest, opts ...grpc.CallOption) (*GetMerchantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMerchantResponse)
	err := c.cc.Invoke(ctx, Bcpay_GetMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcpayClient) BankAccountList(ctx context.Context, in *BankAccountListRequest, opts ...grpc.CallOption) (*BankAccountListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BankAccountListResponse)
	err := c.cc.Invoke(ctx, Bcpay_BankAccountList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcpayClient) AddBankAccount(ctx context.Context, in *AddBankAccountRequest, opts ...grpc.CallOption) (*AddBankAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBankAccountResponse)
	err := c.cc.Invoke(ctx, Bcpay_AddBankAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcpayClient) UpdateBankAccount(ctx context.Context, in *UpdateBankAccountRequest, opts ...grpc.CallOption) (*UpdateBankAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBankAccountResponse)
	err := c.cc.Invoke(ctx, Bcpay_UpdateBankAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcpayClient) TransactionList(ctx context.Context, in *TransactionListRequest, opts ...grpc.CallOption) (*TransactionListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionListResponse)
	err := c.cc.Invoke(ctx, Bcpay_TransactionList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcpayClient) AuditTransaction(ctx context.Context, in *AuditTransactionRequest, opts ...grpc.CallOption) (*AuditTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuditTransactionResponse)
	err := c.cc.Invoke(ctx, Bcpay_AuditTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcpayClient) AddNoteToTransaction(ctx context.Context, in *AddNoteToTransactionRequest, opts ...grpc.CallOption) (*AddNoteToTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddNoteToTransactionResponse)
	err := c.cc.Invoke(ctx, Bcpay_AddNoteToTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BcpayServer is the server API for Bcpay service.
// All implementations must embed UnimplementedBcpayServer
// for forward compatibility.
//
// User service provides authentication and user management functionality.
type BcpayServer interface {
	GetBankAccount(context.Context, *GetBankAccountRequest) (*GetBankAccountResponse, error)
	CreateWithdraw(context.Context, *CreateWithdrawRequest) (*CreateWithdrawResponse, error)
	GetMerchant(context.Context, *GetMerchantRequest) (*GetMerchantResponse, error)
	BankAccountList(context.Context, *BankAccountListRequest) (*BankAccountListResponse, error)
	AddBankAccount(context.Context, *AddBankAccountRequest) (*AddBankAccountResponse, error)
	UpdateBankAccount(context.Context, *UpdateBankAccountRequest) (*UpdateBankAccountResponse, error)
	TransactionList(context.Context, *TransactionListRequest) (*TransactionListResponse, error)
	AuditTransaction(context.Context, *AuditTransactionRequest) (*AuditTransactionResponse, error)
	AddNoteToTransaction(context.Context, *AddNoteToTransactionRequest) (*AddNoteToTransactionResponse, error)
	mustEmbedUnimplementedBcpayServer()
}

// UnimplementedBcpayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBcpayServer struct{}

func (UnimplementedBcpayServer) GetBankAccount(context.Context, *GetBankAccountRequest) (*GetBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankAccount not implemented")
}
func (UnimplementedBcpayServer) CreateWithdraw(context.Context, *CreateWithdrawRequest) (*CreateWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithdraw not implemented")
}
func (UnimplementedBcpayServer) GetMerchant(context.Context, *GetMerchantRequest) (*GetMerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchant not implemented")
}
func (UnimplementedBcpayServer) BankAccountList(context.Context, *BankAccountListRequest) (*BankAccountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankAccountList not implemented")
}
func (UnimplementedBcpayServer) AddBankAccount(context.Context, *AddBankAccountRequest) (*AddBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBankAccount not implemented")
}
func (UnimplementedBcpayServer) UpdateBankAccount(context.Context, *UpdateBankAccountRequest) (*UpdateBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBankAccount not implemented")
}
func (UnimplementedBcpayServer) TransactionList(context.Context, *TransactionListRequest) (*TransactionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionList not implemented")
}
func (UnimplementedBcpayServer) AuditTransaction(context.Context, *AuditTransactionRequest) (*AuditTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditTransaction not implemented")
}
func (UnimplementedBcpayServer) AddNoteToTransaction(context.Context, *AddNoteToTransactionRequest) (*AddNoteToTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNoteToTransaction not implemented")
}
func (UnimplementedBcpayServer) mustEmbedUnimplementedBcpayServer() {}
func (UnimplementedBcpayServer) testEmbeddedByValue()               {}

// UnsafeBcpayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BcpayServer will
// result in compilation errors.
type UnsafeBcpayServer interface {
	mustEmbedUnimplementedBcpayServer()
}

func RegisterBcpayServer(s grpc.ServiceRegistrar, srv BcpayServer) {
	// If the following call pancis, it indicates UnimplementedBcpayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Bcpay_ServiceDesc, srv)
}

func _Bcpay_GetBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcpayServer).GetBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bcpay_GetBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcpayServer).GetBankAccount(ctx, req.(*GetBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bcpay_CreateWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcpayServer).CreateWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bcpay_CreateWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcpayServer).CreateWithdraw(ctx, req.(*CreateWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bcpay_GetMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcpayServer).GetMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bcpay_GetMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcpayServer).GetMerchant(ctx, req.(*GetMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bcpay_BankAccountList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankAccountListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcpayServer).BankAccountList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bcpay_BankAccountList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcpayServer).BankAccountList(ctx, req.(*BankAccountListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bcpay_AddBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcpayServer).AddBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bcpay_AddBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcpayServer).AddBankAccount(ctx, req.(*AddBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bcpay_UpdateBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcpayServer).UpdateBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bcpay_UpdateBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcpayServer).UpdateBankAccount(ctx, req.(*UpdateBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bcpay_TransactionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcpayServer).TransactionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bcpay_TransactionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcpayServer).TransactionList(ctx, req.(*TransactionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bcpay_AuditTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcpayServer).AuditTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bcpay_AuditTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcpayServer).AuditTransaction(ctx, req.(*AuditTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bcpay_AddNoteToTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNoteToTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcpayServer).AddNoteToTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bcpay_AddNoteToTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcpayServer).AddNoteToTransaction(ctx, req.(*AddNoteToTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bcpay_ServiceDesc is the grpc.ServiceDesc for Bcpay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bcpay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.bcpay.service.v1.Bcpay",
	HandlerType: (*BcpayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBankAccount",
			Handler:    _Bcpay_GetBankAccount_Handler,
		},
		{
			MethodName: "CreateWithdraw",
			Handler:    _Bcpay_CreateWithdraw_Handler,
		},
		{
			MethodName: "GetMerchant",
			Handler:    _Bcpay_GetMerchant_Handler,
		},
		{
			MethodName: "BankAccountList",
			Handler:    _Bcpay_BankAccountList_Handler,
		},
		{
			MethodName: "AddBankAccount",
			Handler:    _Bcpay_AddBankAccount_Handler,
		},
		{
			MethodName: "UpdateBankAccount",
			Handler:    _Bcpay_UpdateBankAccount_Handler,
		},
		{
			MethodName: "TransactionList",
			Handler:    _Bcpay_TransactionList_Handler,
		},
		{
			MethodName: "AuditTransaction",
			Handler:    _Bcpay_AuditTransaction_Handler,
		},
		{
			MethodName: "AddNoteToTransaction",
			Handler:    _Bcpay_AddNoteToTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bcpay/service/v1/bcpay.proto",
}
