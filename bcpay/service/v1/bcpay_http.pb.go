// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: bcpay/service/v1/bcpay.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBcpayCreateWithdraw = "/api.bcpay.service.v1.Bcpay/CreateWithdraw"
const OperationBcpayGetBankAccount = "/api.bcpay.service.v1.Bcpay/GetBankAccount"

type BcpayHTTPServer interface {
	CreateWithdraw(context.Context, *CreateWithdrawRequest) (*CreateWithdrawResponse, error)
	GetBankAccount(context.Context, *GetBankAccountRequest) (*GetBankAccountResponse, error)
}

func RegisterBcpayHTTPServer(s *http.Server, srv BcpayHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/bcpay/bankaccount/get", _Bcpay_GetBankAccount0_HTTP_Handler(srv))
	r.POST("/v1/bcpay/withdraw/add", _Bcpay_CreateWithdraw0_HTTP_Handler(srv))
}

func _Bcpay_GetBankAccount0_HTTP_Handler(srv BcpayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBankAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBcpayGetBankAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBankAccount(ctx, req.(*GetBankAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBankAccountResponse)
		return ctx.Result(200, reply)
	}
}

func _Bcpay_CreateWithdraw0_HTTP_Handler(srv BcpayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateWithdrawRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBcpayCreateWithdraw)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateWithdraw(ctx, req.(*CreateWithdrawRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateWithdrawResponse)
		return ctx.Result(200, reply)
	}
}

type BcpayHTTPClient interface {
	CreateWithdraw(ctx context.Context, req *CreateWithdrawRequest, opts ...http.CallOption) (rsp *CreateWithdrawResponse, err error)
	GetBankAccount(ctx context.Context, req *GetBankAccountRequest, opts ...http.CallOption) (rsp *GetBankAccountResponse, err error)
}

type BcpayHTTPClientImpl struct {
	cc *http.Client
}

func NewBcpayHTTPClient(client *http.Client) BcpayHTTPClient {
	return &BcpayHTTPClientImpl{client}
}

func (c *BcpayHTTPClientImpl) CreateWithdraw(ctx context.Context, in *CreateWithdrawRequest, opts ...http.CallOption) (*CreateWithdrawResponse, error) {
	var out CreateWithdrawResponse
	pattern := "/v1/bcpay/withdraw/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBcpayCreateWithdraw))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BcpayHTTPClientImpl) GetBankAccount(ctx context.Context, in *GetBankAccountRequest, opts ...http.CallOption) (*GetBankAccountResponse, error) {
	var out GetBankAccountResponse
	pattern := "/v1/bcpay/bankaccount/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBcpayGetBankAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
