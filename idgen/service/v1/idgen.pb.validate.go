// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: idgen/service/v1/idgen.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GenerateIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateIdRequestMultiError, or nil if none found.
func (m *GenerateIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizType

	if len(errors) > 0 {
		return GenerateIdRequestMultiError(errors)
	}

	return nil
}

// GenerateIdRequestMultiError is an error wrapping multiple validation errors
// returned by GenerateIdRequest.ValidateAll() if the designated constraints
// aren't met.
type GenerateIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateIdRequestMultiError) AllErrors() []error { return m }

// GenerateIdRequestValidationError is the validation error returned by
// GenerateIdRequest.Validate if the designated constraints aren't met.
type GenerateIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateIdRequestValidationError) ErrorName() string {
	return "GenerateIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateIdRequestValidationError{}

// Validate checks the field values on GenerateIdReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateIdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateIdReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateIdReplyMultiError, or nil if none found.
func (m *GenerateIdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateIdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GenerateIdReplyMultiError(errors)
	}

	return nil
}

// GenerateIdReplyMultiError is an error wrapping multiple validation errors
// returned by GenerateIdReply.ValidateAll() if the designated constraints
// aren't met.
type GenerateIdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateIdReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateIdReplyMultiError) AllErrors() []error { return m }

// GenerateIdReplyValidationError is the validation error returned by
// GenerateIdReply.Validate if the designated constraints aren't met.
type GenerateIdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateIdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateIdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateIdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateIdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateIdReplyValidationError) ErrorName() string { return "GenerateIdReplyValidationError" }

// Error satisfies the builtin error interface
func (e GenerateIdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateIdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateIdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateIdReplyValidationError{}

// Validate checks the field values on BatchGenerateIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchGenerateIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchGenerateIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchGenerateIdRequestMultiError, or nil if none found.
func (m *BatchGenerateIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchGenerateIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizType

	// no validation rules for Count

	if len(errors) > 0 {
		return BatchGenerateIdRequestMultiError(errors)
	}

	return nil
}

// BatchGenerateIdRequestMultiError is an error wrapping multiple validation
// errors returned by BatchGenerateIdRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchGenerateIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchGenerateIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchGenerateIdRequestMultiError) AllErrors() []error { return m }

// BatchGenerateIdRequestValidationError is the validation error returned by
// BatchGenerateIdRequest.Validate if the designated constraints aren't met.
type BatchGenerateIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchGenerateIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchGenerateIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchGenerateIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchGenerateIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchGenerateIdRequestValidationError) ErrorName() string {
	return "BatchGenerateIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchGenerateIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchGenerateIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchGenerateIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchGenerateIdRequestValidationError{}

// Validate checks the field values on BatchGenerateIdReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchGenerateIdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchGenerateIdReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchGenerateIdReplyMultiError, or nil if none found.
func (m *BatchGenerateIdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchGenerateIdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchGenerateIdReplyMultiError(errors)
	}

	return nil
}

// BatchGenerateIdReplyMultiError is an error wrapping multiple validation
// errors returned by BatchGenerateIdReply.ValidateAll() if the designated
// constraints aren't met.
type BatchGenerateIdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchGenerateIdReplyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchGenerateIdReplyMultiError) AllErrors() []error { return m }

// BatchGenerateIdReplyValidationError is the validation error returned by
// BatchGenerateIdReply.Validate if the designated constraints aren't met.
type BatchGenerateIdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchGenerateIdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchGenerateIdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchGenerateIdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchGenerateIdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchGenerateIdReplyValidationError) ErrorName() string {
	return "BatchGenerateIdReplyValidationError"
}

// Error satisfies the builtin error interface
func (e BatchGenerateIdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchGenerateIdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchGenerateIdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchGenerateIdReplyValidationError{}
