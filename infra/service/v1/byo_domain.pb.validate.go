// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: infra/service/v1/byo_domain.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ValidationRecord with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ValidationRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidationRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidationRecordMultiError, or nil if none found.
func (m *ValidationRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidationRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Value

	// no validation rules for Description

	if len(errors) > 0 {
		return ValidationRecordMultiError(errors)
	}

	return nil
}

// ValidationRecordMultiError is an error wrapping multiple validation errors
// returned by ValidationRecord.ValidateAll() if the designated constraints
// aren't met.
type ValidationRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidationRecordMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidationRecordMultiError) AllErrors() []error { return m }

// ValidationRecordValidationError is the validation error returned by
// ValidationRecord.Validate if the designated constraints aren't met.
type ValidationRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidationRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidationRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidationRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidationRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidationRecordValidationError) ErrorName() string { return "ValidationRecordValidationError" }

// Error satisfies the builtin error interface
func (e ValidationRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidationRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidationRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidationRecordValidationError{}

// Validate checks the field values on ByoDomainInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ByoDomainInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ByoDomainInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ByoDomainInfoMultiError, or
// nil if none found.
func (m *ByoDomainInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ByoDomainInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ByoDomain

	// no validation rules for Domain

	// no validation rules for AcmeChallengeType

	// no validation rules for Status

	// no validation rules for ValidationStatus

	for idx, item := range m.GetValidationRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ByoDomainInfoValidationError{
						field:  fmt.Sprintf("ValidationRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ByoDomainInfoValidationError{
						field:  fmt.Sprintf("ValidationRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ByoDomainInfoValidationError{
					field:  fmt.Sprintf("ValidationRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ByoDomainInfoMultiError(errors)
	}

	return nil
}

// ByoDomainInfoMultiError is an error wrapping multiple validation errors
// returned by ByoDomainInfo.ValidateAll() if the designated constraints
// aren't met.
type ByoDomainInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ByoDomainInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ByoDomainInfoMultiError) AllErrors() []error { return m }

// ByoDomainInfoValidationError is the validation error returned by
// ByoDomainInfo.Validate if the designated constraints aren't met.
type ByoDomainInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ByoDomainInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ByoDomainInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ByoDomainInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ByoDomainInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ByoDomainInfoValidationError) ErrorName() string { return "ByoDomainInfoValidationError" }

// Error satisfies the builtin error interface
func (e ByoDomainInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sByoDomainInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ByoDomainInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ByoDomainInfoValidationError{}

// Validate checks the field values on AddByoDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddByoDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddByoDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddByoDomainRequestMultiError, or nil if none found.
func (m *AddByoDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddByoDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ByoDomain

	// no validation rules for Domain

	// no validation rules for AcmeChallengeType

	if len(errors) > 0 {
		return AddByoDomainRequestMultiError(errors)
	}

	return nil
}

// AddByoDomainRequestMultiError is an error wrapping multiple validation
// errors returned by AddByoDomainRequest.ValidateAll() if the designated
// constraints aren't met.
type AddByoDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddByoDomainRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddByoDomainRequestMultiError) AllErrors() []error { return m }

// AddByoDomainRequestValidationError is the validation error returned by
// AddByoDomainRequest.Validate if the designated constraints aren't met.
type AddByoDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddByoDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddByoDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddByoDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddByoDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddByoDomainRequestValidationError) ErrorName() string {
	return "AddByoDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddByoDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddByoDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddByoDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddByoDomainRequestValidationError{}

// Validate checks the field values on AddByoDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddByoDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddByoDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddByoDomainResponseMultiError, or nil if none found.
func (m *AddByoDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddByoDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetByoDomain()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddByoDomainResponseValidationError{
					field:  "ByoDomain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddByoDomainResponseValidationError{
					field:  "ByoDomain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetByoDomain()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddByoDomainResponseValidationError{
				field:  "ByoDomain",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddByoDomainResponseMultiError(errors)
	}

	return nil
}

// AddByoDomainResponseMultiError is an error wrapping multiple validation
// errors returned by AddByoDomainResponse.ValidateAll() if the designated
// constraints aren't met.
type AddByoDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddByoDomainResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddByoDomainResponseMultiError) AllErrors() []error { return m }

// AddByoDomainResponseValidationError is the validation error returned by
// AddByoDomainResponse.Validate if the designated constraints aren't met.
type AddByoDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddByoDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddByoDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddByoDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddByoDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddByoDomainResponseValidationError) ErrorName() string {
	return "AddByoDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddByoDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddByoDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddByoDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddByoDomainResponseValidationError{}

// Validate checks the field values on DeleteByoDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteByoDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteByoDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteByoDomainRequestMultiError, or nil if none found.
func (m *DeleteByoDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteByoDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteByoDomainRequestMultiError(errors)
	}

	return nil
}

// DeleteByoDomainRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteByoDomainRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteByoDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteByoDomainRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteByoDomainRequestMultiError) AllErrors() []error { return m }

// DeleteByoDomainRequestValidationError is the validation error returned by
// DeleteByoDomainRequest.Validate if the designated constraints aren't met.
type DeleteByoDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteByoDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteByoDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteByoDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteByoDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteByoDomainRequestValidationError) ErrorName() string {
	return "DeleteByoDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteByoDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteByoDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteByoDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteByoDomainRequestValidationError{}

// Validate checks the field values on DeleteByoDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteByoDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteByoDomainResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteByoDomainResponseMultiError, or nil if none found.
func (m *DeleteByoDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteByoDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteByoDomainResponseMultiError(errors)
	}

	return nil
}

// DeleteByoDomainResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteByoDomainResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteByoDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteByoDomainResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteByoDomainResponseMultiError) AllErrors() []error { return m }

// DeleteByoDomainResponseValidationError is the validation error returned by
// DeleteByoDomainResponse.Validate if the designated constraints aren't met.
type DeleteByoDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteByoDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteByoDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteByoDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteByoDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteByoDomainResponseValidationError) ErrorName() string {
	return "DeleteByoDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteByoDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteByoDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteByoDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteByoDomainResponseValidationError{}

// Validate checks the field values on GetByoDomainsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetByoDomainsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByoDomainsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByoDomainsRequestMultiError, or nil if none found.
func (m *GetByoDomainsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByoDomainsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDomains() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetByoDomainsRequestValidationError{
						field:  fmt.Sprintf("Domains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetByoDomainsRequestValidationError{
						field:  fmt.Sprintf("Domains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetByoDomainsRequestValidationError{
					field:  fmt.Sprintf("Domains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetByoDomainsRequestMultiError(errors)
	}

	return nil
}

// GetByoDomainsRequestMultiError is an error wrapping multiple validation
// errors returned by GetByoDomainsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetByoDomainsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByoDomainsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByoDomainsRequestMultiError) AllErrors() []error { return m }

// GetByoDomainsRequestValidationError is the validation error returned by
// GetByoDomainsRequest.Validate if the designated constraints aren't met.
type GetByoDomainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByoDomainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByoDomainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByoDomainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByoDomainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByoDomainsRequestValidationError) ErrorName() string {
	return "GetByoDomainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetByoDomainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByoDomainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByoDomainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByoDomainsRequestValidationError{}

// Validate checks the field values on GetByoDomainsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetByoDomainsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByoDomainsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByoDomainsResponseMultiError, or nil if none found.
func (m *GetByoDomainsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByoDomainsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetByoDomains() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetByoDomainsResponseValidationError{
						field:  fmt.Sprintf("ByoDomains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetByoDomainsResponseValidationError{
						field:  fmt.Sprintf("ByoDomains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetByoDomainsResponseValidationError{
					field:  fmt.Sprintf("ByoDomains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetByoDomainsResponseMultiError(errors)
	}

	return nil
}

// GetByoDomainsResponseMultiError is an error wrapping multiple validation
// errors returned by GetByoDomainsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetByoDomainsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByoDomainsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByoDomainsResponseMultiError) AllErrors() []error { return m }

// GetByoDomainsResponseValidationError is the validation error returned by
// GetByoDomainsResponse.Validate if the designated constraints aren't met.
type GetByoDomainsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByoDomainsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByoDomainsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByoDomainsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByoDomainsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByoDomainsResponseValidationError) ErrorName() string {
	return "GetByoDomainsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetByoDomainsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByoDomainsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByoDomainsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByoDomainsResponseValidationError{}

// Validate checks the field values on GetByoDomainsRequest_Domain with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetByoDomainsRequest_Domain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByoDomainsRequest_Domain with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByoDomainsRequest_DomainMultiError, or nil if none found.
func (m *GetByoDomainsRequest_Domain) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByoDomainsRequest_Domain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for Id

	if len(errors) > 0 {
		return GetByoDomainsRequest_DomainMultiError(errors)
	}

	return nil
}

// GetByoDomainsRequest_DomainMultiError is an error wrapping multiple
// validation errors returned by GetByoDomainsRequest_Domain.ValidateAll() if
// the designated constraints aren't met.
type GetByoDomainsRequest_DomainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByoDomainsRequest_DomainMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByoDomainsRequest_DomainMultiError) AllErrors() []error { return m }

// GetByoDomainsRequest_DomainValidationError is the validation error returned
// by GetByoDomainsRequest_Domain.Validate if the designated constraints
// aren't met.
type GetByoDomainsRequest_DomainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByoDomainsRequest_DomainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByoDomainsRequest_DomainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByoDomainsRequest_DomainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByoDomainsRequest_DomainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByoDomainsRequest_DomainValidationError) ErrorName() string {
	return "GetByoDomainsRequest_DomainValidationError"
}

// Error satisfies the builtin error interface
func (e GetByoDomainsRequest_DomainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByoDomainsRequest_Domain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByoDomainsRequest_DomainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByoDomainsRequest_DomainValidationError{}
