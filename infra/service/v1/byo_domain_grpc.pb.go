// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: infra/service/v1/byo_domain.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ByoDomain_AddByoDomain_FullMethodName    = "/api.infra.service.v1.ByoDomain/AddByoDomain"
	ByoDomain_DeleteByoDomain_FullMethodName = "/api.infra.service.v1.ByoDomain/DeleteByoDomain"
	ByoDomain_GetByoDomains_FullMethodName   = "/api.infra.service.v1.ByoDomain/GetByoDomains"
)

// ByoDomainClient is the client API for ByoDomain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ByoDomainClient interface {
	AddByoDomain(ctx context.Context, in *AddByoDomainRequest, opts ...grpc.CallOption) (*AddByoDomainResponse, error)
	DeleteByoDomain(ctx context.Context, in *DeleteByoDomainRequest, opts ...grpc.CallOption) (*DeleteByoDomainResponse, error)
	GetByoDomains(ctx context.Context, in *GetByoDomainsRequest, opts ...grpc.CallOption) (*GetByoDomainsResponse, error)
}

type byoDomainClient struct {
	cc grpc.ClientConnInterface
}

func NewByoDomainClient(cc grpc.ClientConnInterface) ByoDomainClient {
	return &byoDomainClient{cc}
}

func (c *byoDomainClient) AddByoDomain(ctx context.Context, in *AddByoDomainRequest, opts ...grpc.CallOption) (*AddByoDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddByoDomainResponse)
	err := c.cc.Invoke(ctx, ByoDomain_AddByoDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *byoDomainClient) DeleteByoDomain(ctx context.Context, in *DeleteByoDomainRequest, opts ...grpc.CallOption) (*DeleteByoDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteByoDomainResponse)
	err := c.cc.Invoke(ctx, ByoDomain_DeleteByoDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *byoDomainClient) GetByoDomains(ctx context.Context, in *GetByoDomainsRequest, opts ...grpc.CallOption) (*GetByoDomainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetByoDomainsResponse)
	err := c.cc.Invoke(ctx, ByoDomain_GetByoDomains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ByoDomainServer is the server API for ByoDomain service.
// All implementations must embed UnimplementedByoDomainServer
// for forward compatibility.
type ByoDomainServer interface {
	AddByoDomain(context.Context, *AddByoDomainRequest) (*AddByoDomainResponse, error)
	DeleteByoDomain(context.Context, *DeleteByoDomainRequest) (*DeleteByoDomainResponse, error)
	GetByoDomains(context.Context, *GetByoDomainsRequest) (*GetByoDomainsResponse, error)
	mustEmbedUnimplementedByoDomainServer()
}

// UnimplementedByoDomainServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedByoDomainServer struct{}

func (UnimplementedByoDomainServer) AddByoDomain(context.Context, *AddByoDomainRequest) (*AddByoDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddByoDomain not implemented")
}
func (UnimplementedByoDomainServer) DeleteByoDomain(context.Context, *DeleteByoDomainRequest) (*DeleteByoDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByoDomain not implemented")
}
func (UnimplementedByoDomainServer) GetByoDomains(context.Context, *GetByoDomainsRequest) (*GetByoDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByoDomains not implemented")
}
func (UnimplementedByoDomainServer) mustEmbedUnimplementedByoDomainServer() {}
func (UnimplementedByoDomainServer) testEmbeddedByValue()                   {}

// UnsafeByoDomainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ByoDomainServer will
// result in compilation errors.
type UnsafeByoDomainServer interface {
	mustEmbedUnimplementedByoDomainServer()
}

func RegisterByoDomainServer(s grpc.ServiceRegistrar, srv ByoDomainServer) {
	// If the following call pancis, it indicates UnimplementedByoDomainServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ByoDomain_ServiceDesc, srv)
}

func _ByoDomain_AddByoDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddByoDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ByoDomainServer).AddByoDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ByoDomain_AddByoDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ByoDomainServer).AddByoDomain(ctx, req.(*AddByoDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ByoDomain_DeleteByoDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByoDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ByoDomainServer).DeleteByoDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ByoDomain_DeleteByoDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ByoDomainServer).DeleteByoDomain(ctx, req.(*DeleteByoDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ByoDomain_GetByoDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByoDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ByoDomainServer).GetByoDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ByoDomain_GetByoDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ByoDomainServer).GetByoDomains(ctx, req.(*GetByoDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ByoDomain_ServiceDesc is the grpc.ServiceDesc for ByoDomain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ByoDomain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.infra.service.v1.ByoDomain",
	HandlerType: (*ByoDomainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddByoDomain",
			Handler:    _ByoDomain_AddByoDomain_Handler,
		},
		{
			MethodName: "DeleteByoDomain",
			Handler:    _ByoDomain_DeleteByoDomain_Handler,
		},
		{
			MethodName: "GetByoDomains",
			Handler:    _ByoDomain_GetByoDomains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infra/service/v1/byo_domain.proto",
}
