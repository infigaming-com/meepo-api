// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: websocket/service/v1/websocket.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PushClientMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushClientMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushClientMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushClientMessageRequestMultiError, or nil if none found.
func (m *PushClientMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushClientMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for Message

	if len(errors) > 0 {
		return PushClientMessageRequestMultiError(errors)
	}

	return nil
}

// PushClientMessageRequestMultiError is an error wrapping multiple validation
// errors returned by PushClientMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type PushClientMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushClientMessageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushClientMessageRequestMultiError) AllErrors() []error { return m }

// PushClientMessageRequestValidationError is the validation error returned by
// PushClientMessageRequest.Validate if the designated constraints aren't met.
type PushClientMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushClientMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushClientMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushClientMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushClientMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushClientMessageRequestValidationError) ErrorName() string {
	return "PushClientMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PushClientMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushClientMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushClientMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushClientMessageRequestValidationError{}

// Validate checks the field values on PushClientMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushClientMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushClientMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushClientMessageResponseMultiError, or nil if none found.
func (m *PushClientMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PushClientMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PushClientMessageResponseMultiError(errors)
	}

	return nil
}

// PushClientMessageResponseMultiError is an error wrapping multiple validation
// errors returned by PushClientMessageResponse.ValidateAll() if the
// designated constraints aren't met.
type PushClientMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushClientMessageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushClientMessageResponseMultiError) AllErrors() []error { return m }

// PushClientMessageResponseValidationError is the validation error returned by
// PushClientMessageResponse.Validate if the designated constraints aren't met.
type PushClientMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushClientMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushClientMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushClientMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushClientMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushClientMessageResponseValidationError) ErrorName() string {
	return "PushClientMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PushClientMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushClientMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushClientMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushClientMessageResponseValidationError{}

// Validate checks the field values on PushUserMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushUserMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushUserMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushUserMessageRequestMultiError, or nil if none found.
func (m *PushUserMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushUserMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Message

	if len(errors) > 0 {
		return PushUserMessageRequestMultiError(errors)
	}

	return nil
}

// PushUserMessageRequestMultiError is an error wrapping multiple validation
// errors returned by PushUserMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type PushUserMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushUserMessageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushUserMessageRequestMultiError) AllErrors() []error { return m }

// PushUserMessageRequestValidationError is the validation error returned by
// PushUserMessageRequest.Validate if the designated constraints aren't met.
type PushUserMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushUserMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushUserMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushUserMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushUserMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushUserMessageRequestValidationError) ErrorName() string {
	return "PushUserMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PushUserMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushUserMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushUserMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushUserMessageRequestValidationError{}

// Validate checks the field values on PushUserMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushUserMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushUserMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushUserMessageResponseMultiError, or nil if none found.
func (m *PushUserMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PushUserMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PushUserMessageResponseMultiError(errors)
	}

	return nil
}

// PushUserMessageResponseMultiError is an error wrapping multiple validation
// errors returned by PushUserMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type PushUserMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushUserMessageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushUserMessageResponseMultiError) AllErrors() []error { return m }

// PushUserMessageResponseValidationError is the validation error returned by
// PushUserMessageResponse.Validate if the designated constraints aren't met.
type PushUserMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushUserMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushUserMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushUserMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushUserMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushUserMessageResponseValidationError) ErrorName() string {
	return "PushUserMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PushUserMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushUserMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushUserMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushUserMessageResponseValidationError{}

// Validate checks the field values on PushOperatorMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushOperatorMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushOperatorMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushOperatorMessageRequestMultiError, or nil if none found.
func (m *PushOperatorMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushOperatorMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for Message

	if len(errors) > 0 {
		return PushOperatorMessageRequestMultiError(errors)
	}

	return nil
}

// PushOperatorMessageRequestMultiError is an error wrapping multiple
// validation errors returned by PushOperatorMessageRequest.ValidateAll() if
// the designated constraints aren't met.
type PushOperatorMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushOperatorMessageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushOperatorMessageRequestMultiError) AllErrors() []error { return m }

// PushOperatorMessageRequestValidationError is the validation error returned
// by PushOperatorMessageRequest.Validate if the designated constraints aren't met.
type PushOperatorMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushOperatorMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushOperatorMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushOperatorMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushOperatorMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushOperatorMessageRequestValidationError) ErrorName() string {
	return "PushOperatorMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PushOperatorMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushOperatorMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushOperatorMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushOperatorMessageRequestValidationError{}

// Validate checks the field values on PushOperatorMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PushOperatorMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushOperatorMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushOperatorMessageResponseMultiError, or nil if none found.
func (m *PushOperatorMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PushOperatorMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PushOperatorMessageResponseMultiError(errors)
	}

	return nil
}

// PushOperatorMessageResponseMultiError is an error wrapping multiple
// validation errors returned by PushOperatorMessageResponse.ValidateAll() if
// the designated constraints aren't met.
type PushOperatorMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushOperatorMessageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushOperatorMessageResponseMultiError) AllErrors() []error { return m }

// PushOperatorMessageResponseValidationError is the validation error returned
// by PushOperatorMessageResponse.Validate if the designated constraints
// aren't met.
type PushOperatorMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushOperatorMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushOperatorMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushOperatorMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushOperatorMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushOperatorMessageResponseValidationError) ErrorName() string {
	return "PushOperatorMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PushOperatorMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushOperatorMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushOperatorMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushOperatorMessageResponseValidationError{}
