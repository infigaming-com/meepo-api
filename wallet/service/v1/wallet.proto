syntax = "proto3";

package api.wallet.service.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "common/common.proto";

option go_package = "github.com/infigaming-com/meepo-api/wallet/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.wallet.service.v1";

service Wallet {
	// GetUserBalances returns the balances of all currencies of the user
	rpc GetUserBalances (GetUserBalancesRequest) returns (GetUserBalancesResponse) {
		option (google.api.http) = {
			post: "/v1/wallet/balances/list"
			body: "*"
		};
	}

	// GetUserBalance returns the balance of specific currency of the user
	rpc GetUserBalance (GetUserBalanceRequest) returns (GetUserBalanceResponse) {
	}

	rpc Credit (CreditRequest) returns (CreditResponse) {}

	rpc Debit (DebitRequest) returns (DebitResponse) {}

	rpc GameDebit (GameDebitRequest) returns (GameDebitResponse) {}

	rpc GameCredit (GameCreditRequest) returns (GameCreditResponse) {}

	// Freeze is used to freeze the balance of the user
	rpc Freeze (FreezeRequest) returns (FreezeResponse) {}

	// Settle is used to settle the frozen balance of the user
	rpc Settle (SettleRequest) returns (SettleResponse) {}

	// Rollback is used to rollback the frozen balance of the user or game transactions
	rpc Rollback (RollbackRequest) returns (RollbackResponse) {}

	rpc GetWallets (GetWalletsRequest) returns (GetWalletsResponse) {}

	// ListWalletBalanceTransactions provides balance transactions for a specific user.
	// It's called by ListWalletBalanceTransactions in backoffice service for the information in user transactions page.
	rpc ListWalletBalanceTransactions (ListWalletBalanceTransactionsRequest) returns (ListWalletBalanceTransactionsResponse) {}

	rpc GetWalletBalanceTransactionsByIds (GetWalletBalanceTransactionsByIdsRequest) returns (GetWalletBalanceTransactionsByIdsResponse) {}

	rpc GetWalletCreditTransactions (GetWalletCreditTransactionsRequest) returns (GetWalletCreditTransactionsResponse) {}

	rpc GetExchangeRates (GetExchangeRatesRequest) returns (GetExchangeRatesResponse) {}

	// GetUserTransactionSummary returns the summary of user's transactions 
	// It returns the total deposit, withdraw, deposit minus withdraw, valid bet
	rpc GetUserTransactionSummary (GetUserTransactionSummaryRequest) returns (GetUserTransactionSummaryResponse) {}

	// GetUserOverview returns data for the overview of user's wallet
	rpc GetBackofficeUserOverviewFromWallet (GetBackofficeUserOverviewFromWalletRequest) returns (GetBackofficeUserOverviewFromWalletResponse) {}

	rpc GetOverviewDashboardFromWallet (GetOverviewDashboardFromWalletRequest) returns (GetOverviewDashboardFromWalletResponse) {}

	rpc AddCurrency (AddCurrencyRequest) returns (AddCurrencyResponse) {}

	rpc UpdateCurrency (UpdateCurrencyRequest) returns (UpdateCurrencyResponse) {}

	rpc GetCurrencies (GetCurrenciesRequest) returns (GetCurrenciesResponse) {
		option (google.api.http) = {
			post: "/v1/wallet/currencies/get"
			body: "*"
		};
	}

	rpc ListCurrencies (ListCurrenciesRequest) returns (ListCurrenciesResponse) {}

	rpc UpdateOperatorCurrency (UpdateOperatorCurrencyRequest) returns (UpdateOperatorCurrencyResponse) {}

	rpc UpdateUserCurrency (UpdateUserCurrencyRequest) returns (UpdateUserCurrencyResponse) {}

	// List Operator Balances based on filter
	rpc ListOperatorBalances (ListOperatorBalancesRequest) returns (ListOperatorBalancesResponse) {}
	
	// Transfer cash from operator to its company operator
	rpc OperatorTransfer (OperatorTransferRequest) returns (OperatorTransferResponse) {}

	// Swap cash between two balances of the same company's operator
	rpc OperatorSwap (OperatorSwapRequest) returns (OperatorSwapResponse) {}

	// Freeze cash of a balance of an operator
	rpc OperatorFreeze (OperatorFreezeRequest) returns (OperatorFreezeResponse) {}
	
	// Rollback frozen cash of an operator
	rpc OperatorRollback (OperatorRollbackRequest) returns (OperatorRollbackResponse) {}

	// Settle frozen cash of an operator
	rpc OperatorSettle (OperatorSettleRequest) returns (OperatorSettleResponse) {}

	// GetOperatorBalances gets the balances of an operator
	rpc GetOperatorBalances(GetOperatorBalancesRequest) returns (GetOperatorBalancesResponse) {}

	// List Operator Balance Transactions based on filter
	rpc ListOperatorBalanceTransactions (ListOperatorBalanceTransactionsRequest) returns (ListOperatorBalanceTransactionsResponse) {}

	// OperatorDebit is used to debit cash from an operator's balance
	rpc OperatorDebit (OperatorDebitRequest) returns (OperatorDebitResponse) {}

	// UpdateOperatorBalance updates an operator balanceï¼Œ now only support update the enabled status
	rpc UpdateOperatorBalance(UpdateOperatorBalanceRequest) returns (UpdateOperatorBalanceResponse) {}

	// GetOperatorTransactionSummary returns the summary of operator's transactions 
	rpc GetOperatorTransactionSummary(GetOperatorTransactionSummaryRequest) returns (GetOperatorTransactionSummaryResponse) {}
}

message GetUserBalancesRequest {
	int64 user_id = 1;
}

message GetUserBalancesResponse {
	message Balance {
		string currency = 1;
		string cash = 2;
		string operator_bonus = 3;
		string provider_bonus = 4;
	}
	repeated Balance balances = 1;
}

message GetUserBalanceRequest {
	int64 user_id = 1;
	string currency = 2;
	// optional target currency
	string settlement_currency = 3;
}

message GetUserBalanceResponse {
	// optional exchange rate between currency and target currency
	string exchange_rate = 1;
	string cash = 2;
	string operator_bonus = 3;
	string provider_bonus = 4;
}

// Transaction types for different operations
// Expected values:
// Credit operations:
//   - "payment_deposit"    - Payment deposit transaction
//   - "game_win"          - Game win transaction
//
// Debit operations:
//   - "payment_withdraw"   - Payment withdraw transaction
//   - "game_bet"          - Game bet transaction
//   - "payment_withdraw_freeze" - Payment withdraw freeze transaction
//
// Settlement operations:
//   - "payment_withdraw_settle" - Payment withdraw settlement
//
// Rollback operations:
//   - "game_bet_rollback"            - Game bet transaction rollback
//   - "game_win_rollback"            - Game win transaction rollback
//   - "payment_withdraw_rollback" - Payment withdraw transaction rollback

message CreditRequest {
	message Ratio {
		string cash = 1;
		string operator_bonus = 2;
	}

	int64 user_id = 1;
	string currency = 2;
	// Valid credit transaction types:
	//   - "payment_deposit"    - Payment deposit transaction
	string transaction_type = 3;
	int64 transaction_id = 4;
	string cash = 5;
	api.common.OperatorContext operator_context = 6;
}

message CreditResponse {
	int64 transaction_id = 1;
}

message DebitRequest {
	int64 user_id = 1;
	string currency = 2;
	// Valid debit transaction types:
	//   - "payment_withdraw"   - Payment withdraw transaction
	string transaction_type = 3;
	int64 transaction_id = 4;
	string cash = 5;
	api.common.OperatorContext operator_context = 6;
}

message DebitResponse {
	int64 transaction_id = 1;
}

message GameDebitRequest {
	int64 user_id = 1;
	string currency = 2;
	string settlement_currency = 3;
	string exchange_rate = 4;
	// Valid game debit transaction types:
	//   - "game_bet"          - Game bet transaction
	string transaction_type = 5;
	int64 transaction_id = 6;
	string amount = 7;
	string turnover = 8;
	api.common.OperatorContext operator_context = 9;
}

message GameDebitResponse {
	int64 transaction_id = 1;
	string exchange_rate = 2;
	string cash = 3;
	string operator_bonus = 4;
	string provider_bonus = 5;
	string cash_amount = 6;
	string operator_bonus_amount = 7;
	string provider_bonus_amount = 8;
	string cash_amount_usd = 9;
	string operator_bonus_amount_usd = 10;
	string provider_bonus_amount_usd = 11;
}

message GameCreditRequest {
	int64 user_id = 1;
	string currency = 2;
	string settlement_currency = 3;
	string exchange_rate = 4;
	string transaction_type = 5;
	int64 transaction_id = 6;
	int64 original_transaction_id = 7;
	string amount = 8;
	api.common.OperatorContext operator_context = 9;
}

message GameCreditResponse {
	int64 transaction_id = 1;
	string exchange_rate = 2;
	string cash = 3;
	string operator_bonus = 4;
	string provider_bonus = 5;
	string cash_amount = 6;
	string operator_bonus_amount = 7;
	string provider_bonus_amount = 8;
	string cash_amount_usd = 9;
	string operator_bonus_amount_usd = 10;
	string provider_bonus_amount_usd = 11;
}

message FreezeRequest {
	int64 user_id = 1;
	string currency = 2;
	// Valid freeze transaction types:
	//   - "payment_withdraw_freeze"   - Payment withdraw freeze transaction
	string transaction_type = 3;
	int64 transaction_id = 4;
	string cash = 5;
	api.common.OperatorContext operator_context = 6;
}

message FreezeResponse {
	int64 transaction_id = 1;
}

message SettleRequest {
	// Valid settle transaction types:
	//   - "payment_withdraw_settle"   - Payment withdraw settle transaction
	string transaction_type = 1;
	int64 transaction_id = 2;
	int64 original_transaction_id = 3;
}

message SettleResponse {
	int64 transaction_id = 1;
}

message RollbackRequest {
	// Valid rollback transaction types:
	//   - "game_bet_rollback"            - Game bet transaction rollback
	//   - "game_win_rollback"            - Game win transaction rollback
	//   - "payment_withdraw_rollback" - Payment withdraw transaction rollback
	string transaction_type = 1;
	int64 transaction_id = 2;
	int64 original_transaction_id = 3;
}

message RollbackResponse {
	int64 transaction_id = 1;
	string cash = 2;
	string operator_bonus = 3;
	string provider_bonus = 4;
	string cash_amount = 5;
	string operator_bonus_amount = 6;
	string provider_bonus_amount = 7;
	string cash_amount_usd = 8;
	string operator_bonus_amount_usd = 9;
	string provider_bonus_amount_usd = 10;
}

message GetWalletsRequest {
	int64 user_id = 1;
	repeated string currencies = 2;
	api.common.OperatorContext operator_context = 3;
}

message GetWalletsResponse {
	message TotalAssets {
		string balance = 1;
		string deposit = 2;
		string withdraw = 3;
		string deposit_minus_withdraw = 4;
		string valid_turnover = 5;
	}
	message Credit {
		google.protobuf.Timestamp created_at = 1;
		int64 transaction_id = 2;
		string cash = 3;
		string original_cash = 4;
		string bonus = 5;
		string original_bonus = 6;
		string turnover_threshold = 7;
		string turnover = 8;
		string cash_turnover = 9;
		string bonus_turnover = 10;
		string turnover_multiplier = 11;
	}
	message Wallet {
		string currency = 1;
		string cash = 2;
		string original_cash = 3;
		string bonus = 4;
		string original_bonus = 5;
		string turnover_threshold = 6;
		string turnover = 7;
		string cash_turnover = 8;
		string bonus_turnover = 9;
		string turnover_multiplier = 10;
		repeated Credit credits = 11;
	}
	TotalAssets total_assets = 1;
	repeated Wallet wallets = 2;
}

message ListWalletBalanceTransactionsRequest {
	int64 user_id = 1;
	// Transaction types for different operations
	// Expected values:
	// Credit operations:
	//   - "payment_deposit"    - Payment deposit transaction
	//   - "game_win"          - Game win transaction
	//
	// Debit operations:
	//   - "payment_withdraw"   - Payment withdraw transaction
	//   - "game_bet"          - Game bet transaction
	//   - "payment_withdraw_freeze" - Payment withdraw freeze transaction
	//
	// Settlement operations:
	//   - "payment_withdraw_settle" - Payment withdraw settlement
	//
	// Rollback operations:
	//   - "game_bet_rollback"            - Game bet transaction rollback
	//   - "game_win_rollback"            - Game win transaction rollback
	//   - "payment_withdraw_rollback" - Payment withdraw transaction rollback
	optional string transaction_type = 2;
	optional string currency = 3;
	optional google.protobuf.Timestamp start_time = 4;
	optional google.protobuf.Timestamp end_time = 5;
	optional int32 page = 6;
	optional int32 page_size = 7;
	api.common.OperatorContext operator_context = 8;
}

message ListWalletBalanceTransactionsResponse {
	message BalanceTransaction {
		google.protobuf.Timestamp created_at = 1;
		int64 transaction_id = 2;
		// Transaction types for different operations
		// Expected values:
		// Credit operations:
		//   - "payment_deposit"    - Payment deposit transaction
		//   - "game_win"          - Game win transaction
		//
		// Debit operations:
		//   - "payment_withdraw"   - Payment withdraw transaction
		//   - "game_bet"          - Game bet transaction
		//   - "payment_withdraw_freeze" - Payment withdraw freeze transaction
		//
		// Settlement operations:
		//   - "payment_withdraw_settle" - Payment withdraw settlement
		//
		// Rollback operations:
		//   - "game_bet_rollback"            - Game bet transaction rollback
		//   - "game_win_rollback"            - Game win transaction rollback
		//   - "payment_withdraw_rollback" - Payment withdraw transaction rollback
		string transaction_type = 3;
		int32 vip_level = 4;
		string change_balance = 5;
		string before_balance = 6;
		string after_balance = 7;
		string currency = 8;
		int64 related_transaction_id = 9;
	}
	repeated BalanceTransaction balance_transactions = 1;
	int32 total = 2;
	int32 page = 3;
	int32 page_size = 4;
}

message GetWalletBalanceTransactionsByIdsRequest {
	repeated int64 transaction_ids = 1;
	api.common.OperatorContext operator_context = 2;
}

message GetWalletBalanceTransactionsByIdsResponse {
	message BalanceTransaction {
		int64 id = 1;
		int64 user_id = 2;
		string settlement_currency = 3;
		string currency = 4;
		string exchange_rate = 5;
		string transaction_type = 6;
		int64 external_transaction_id = 7;
		int64 related_transaction_id = 8;
		string original_cash = 9;
		string original_cash_usd = 10;
		string cash = 11;
		string cash_usd = 12;
		string cash_amount = 13;
		string cash_amount_usd = 14;
		string original_operator_bonus = 15;
		string original_operator_bonus_usd = 16;
		string operator_bonus = 17;
		string operator_bonus_usd = 18;
		string operator_bonus_amount = 19;
		string operator_bonus_amount_usd = 20;
		string original_provider_bonus = 21;
		string original_provider_bonus_usd = 22;
		string provider_bonus = 23;
		string provider_bonus_usd = 24;
		string provider_bonus_amount = 25;
		string provider_bonus_amount_usd = 26;
		google.protobuf.Timestamp created_at = 27;
		google.protobuf.Timestamp updated_at = 28;
	}
	repeated BalanceTransaction balance_transactions = 1;
}

message GetWalletCreditTransactionsRequest {
	int64 credit_id = 1;
	optional int64 page = 2;
	optional int64 page_size = 3;
	api.common.OperatorContext operator_context = 4;
}

message GetWalletCreditTransactionsResponse {
	message CreditTransaction {
		string type = 1;
		google.protobuf.Timestamp created_at = 2;
		string cash = 3;
		string bonus = 4;
	}
	repeated CreditTransaction credit_transactions = 1;
	int64 page = 2;
	int64 page_size = 3;
	int64 total = 4;
}

message GetExchangeRatesRequest {
	repeated string currencies = 1;
}

message GetExchangeRatesResponse {
	// map key is source currency, value is target currency rate
	map<string, string> exchange_rates = 1;
}

message GetUserTransactionSummaryRequest {
	int64 user_id = 1;
	optional string currency = 2;
	optional google.protobuf.Timestamp start_time = 3;
	optional google.protobuf.Timestamp end_time = 4;
	api.common.OperatorContext operator_context = 5;
}

message GetUserTransactionSummaryResponse {
	string currency = 1;
	string total_deposit = 2;
	string total_withdraw = 3;
	string deposit_minus_withdraw = 4;
	string total_valid_bet = 5;
	int32 total_deposit_count = 6;
	int32 total_withdraw_count = 7;
	int32 today_withdraw_count = 8;
}

message GetBackofficeUserOverviewFromWalletRequest {
	int64 user_id = 1;
	optional google.protobuf.Timestamp start_time = 2;
	optional google.protobuf.Timestamp end_time = 3;
	api.common.OperatorContext operator_context = 4;
}

message GetBackofficeUserOverviewFromWalletResponse {
	string balance = 1;
	string deposit_minus_withdraw = 2;
	string turnover = 3;
	string cash_turnover = 4;
	string bonus_turnover = 5;
	string deposit = 6;
	string last_deposit = 7;
	int32 deposit_count = 8;
	string withdraw = 9;
	string last_withdraw = 10;
	int32 withdraw_count = 11;
	string bonus = 12; // Not available for now, only return 0
	string valid_turnover = 13; // Not available for now, only return 0
	string average_bet_amount = 14;
	string ggr = 15;
	string ggr_percentage = 16; // Round to 2 decimal places
	string manually_added_balance = 17; // Not available for now, only return 0
	string bonus_claimed = 18; // Not available for now, only return 0
	string ngr = 19;
	string ggr_to_ngr_percentage = 20; // Round to 2 decimal places
	string turnover_multiplier = 21; // Round to 2 decimal places
	string deposit_to_withdraw_ratio = 22; // Round to 2 decimal places
	string rtp = 23; // Round to 2 decimal places
}

message GetOverviewDashboardFromWalletRequest {
	api.common.OperatorContext operator_context = 1;
}

message GetOverviewDashboardFromWalletResponse {
	message GGR {
		string today = 1;
		string yesterday = 2;
	}
	message NGR {
		string today = 1;
		string yesterday = 2;
	}
	message Deposit {
		string today = 1;
		string yesterday = 2;
	}
	message Withdraw {
		string today = 1;
		string yesterday = 2;
	}
	message DepositMinusWithdraw {
		string today = 1;
		string yesterday = 2;
	}
	GGR ggr = 1;
	NGR ngr = 2;
	Deposit deposit = 3;
	Withdraw withdraw = 4;
	DepositMinusWithdraw deposit_minus_withdraw = 5;
}

message Currency {
	string currency = 1;
	bool enabled = 2;
	bool hidden = 3;
	string type = 4;
	string symbol = 5;
	string icon = 6;
	int32 decimal_places = 7;
}

message AddCurrencyRequest {
	Currency currency = 1;
	api.common.OperatorContext operator_context = 2;
}

message AddCurrencyResponse {}

message UpdateCurrencyRequest {
	string currency = 1;
	optional bool enabled = 2;
	optional bool hidden = 3;
	optional string type = 4;
	optional string symbol = 5;
	optional string icon = 6;
	optional int32 decimal_places = 7;
}

message UpdateCurrencyResponse {}

message GetCurrenciesRequest {
	repeated string currencies = 1;
}

message GetCurrenciesResponse {
	repeated Currency currencies = 1;
}

message ListCurrenciesRequest {
	repeated string currencies = 1;
	optional bool enabled = 2;
	optional bool hidden = 3;
}

message ListCurrenciesResponse {
	repeated Currency currencies = 1;
	int32 total = 2;
	int32 total_enabled = 3;
	int32 total_hidden = 4;
}

message UpdateOperatorCurrencyRequest {
	int64 operator_id = 1;
	string currency = 2;
	optional bool enabled = 3;
	optional bool hidden = 4;
	optional string type = 5;
	optional string symbol = 6;
	optional string icon = 7;
	optional int32 decimal_places = 8;
	api.common.OperatorContext operator_context = 9;
}

message UpdateOperatorCurrencyResponse {}

message UpdateUserCurrencyRequest {
	int64 user_id = 1;
	string currency = 2;
	bool enabled = 3;
	api.common.OperatorContext operator_context = 4;
}

message UpdateUserCurrencyResponse {}

message ListOperatorBalancesRequest {
	repeated int64 retailer_operator_ids = 1;
	repeated int64 company_operator_ids = 2;
	repeated int64 operator_ids = 3;
	repeated string currencies = 4;
	api.common.OperatorContext operator_context = 5;
	optional int32 page = 6;
	optional int32 page_size = 7; // default 20
}

message OperatorBalance {
	api.common.OperatorContext operator_context = 1;
	string retailer_operator_name = 2;
	string company_operator_name = 3;
	string operator_name = 4;
	string currency = 5;
	string protocol = 6; // placeholder for future use
	string cash = 7;
	string cash_usd = 8;
	bool enabled = 9;
}

message ListOperatorBalancesResponse {
	repeated OperatorBalance operator_balances = 1;
	string total_cash_usd = 2;
	int32 total = 3;
	int32 page = 4;
	int32 page_size = 5;
}

message OperatorTransferRequest {
	api.common.OperatorContext operator_context = 1;
	api.common.OperatorContext target_operator_context = 2;
	string currency = 3;
	string reporting_currency = 4;
	string target_currency = 5;
	string target_reporting_currency = 6;
	string transaction_type = 7;
	string cash_amount = 8;
}

message OperatorTransferResponse {
	string operator_cash = 1;
	string operator_balance_currency = 2;
	string target_operator_cash = 3;
	string target_operator_balance_currency = 4;
}

message OperatorSwapRequest {
	api.common.OperatorContext operator_context = 1;
	api.common.OperatorContext target_operator_context = 2;
	string currency = 3;
	string reporting_currency = 4;
	string target_currency = 5;
	string target_reporting_currency = 6;
	string transaction_type = 7;
	string cash_amount = 8;
}

message OperatorSwapResponse {
	string currency_balance_cash = 1;
	string currency_balance_cash_usd = 2;
	string currency_balance_cash_reporting_currency = 3;
	string target_currency_balance_cash = 4;
	string target_currency_balance_cash_usd = 5;
	string target_currency_balance_cash_reporting_currency = 6;
}

message OperatorFreezeRequest {
	api.common.OperatorContext operator_context = 1;
	string currency = 2;
	string reporting_currency = 3;
	string transaction_type = 4;
	optional int64 external_transaction_id = 5;
	string cash_amount = 6;
	string memo = 7;
}

message OperatorFreezeResponse {
	int64 transaction_id = 1;
	string cash = 2;
}

message OperatorRollbackRequest {
	api.common.OperatorContext operator_context = 1;
	optional int64 external_transaction_id = 2;
	int64 original_transaction_id = 3;
	string transaction_type = 4;
	string memo = 5;
}

message OperatorRollbackResponse {
	int64 transaction_id = 1;
	string cash = 2;
	string cash_amount = 3;
	string cash_amount_usd = 4;
	string cash_amount_reporting_currency = 5;
}

message OperatorSettleRequest {
	api.common.OperatorContext operator_context = 1;
	string currency = 2;
	string reporting_currency = 3;
	optional int64 external_transaction_id = 4;
	int64 original_transaction_id = 5;
	string transaction_type = 6;
	string memo = 7;
}

message OperatorSettleResponse {
	int64 transaction_id = 1;
	string cash = 2;
	string cash_amount = 3;
	string cash_amount_usd = 4;
	string cash_amount_reporting_currency = 5;
}

message GetOperatorBalancesRequest {
	api.common.OperatorContext operator_context = 1;
}

message GetOperatorBalancesResponse {
	repeated OperatorBalance operator_balances = 1;
	string total_cash_usd = 2;
}

message ListOperatorBalanceTransactionsRequest {
	repeated int64 retailer_operator_ids = 1;
	repeated int64 company_operator_ids = 2;
	repeated int64 operator_ids = 3;
	repeated string currencies = 4;
	repeated string transaction_types = 5;
	optional int64 transaction_id = 6;
	optional google.protobuf.Timestamp start_time = 7;
	optional google.protobuf.Timestamp end_time = 8;
	api.common.OperatorContext operator_context = 9;
	string target_operator_type = 10;
	optional int32 page = 11;
	optional int32 page_size = 12;
}

message OperatorBalanceTransaction {
	int64 transaction_id = 1;
	api.common.OperatorContext operator_context = 2;
	string retailer_operator_name = 3;
	string company_operator_name = 4;
	string operator_name = 5;
	string currency = 6;
	string before_balance = 7;
	string after_balance = 8;
	string cash_amount = 9;
	string transaction_type = 10;
	string status = 11;
	string memo = 12;
	string fee_amount = 13;
	google.protobuf.Timestamp created_at = 14;
	google.protobuf.Timestamp updated_at = 15;
}

message ListOperatorBalanceTransactionsResponse {
	repeated OperatorBalanceTransaction transactions = 1;
	int32 total = 2;
	int32 page = 3;
	int32 page_size = 4;
}

message OperatorDebitRequest {
	api.common.OperatorContext operator_context = 1;
	string currency = 2;
	string reporting_currency = 3;
	string transaction_type = 4;
	optional int64 external_transaction_id = 5;
	string cash_amount = 6;
}

message OperatorDebitResponse {
	int64 transaction_id = 1;
	string cash = 2;
}

message UpdateOperatorBalanceRequest {
	api.common.OperatorContext initial_operator_context = 1;
	api.common.OperatorContext target_operator_context = 2;
	string currency = 3;
	bool enabled = 4;
}

message UpdateOperatorBalanceResponse {
	bool enabled = 1;
}

message GetOperatorTransactionSummaryRequest {
	api.common.OperatorContext operator_context = 1;
	optional string currency = 2;
	optional int64 start_time = 3;
	optional int64 end_time = 4;	
}

message GetOperatorTransactionSummaryResponse {
	string total_withdraw_usd = 1;
	string total_deposit_usd = 2;
	string total_transfer_out_usd = 3;
	string total_transfer_in_usd = 4;
	string total_swap_out_usd = 5;
	string total_swap_in_usd = 6;
	string total_freeze_usd = 7;
	string total_rollback_usd = 8;
}