syntax = "proto3";

package api.wallet.service.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/infigaming-com/meepo-api/wallet/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.wallet.service.v1";

service Wallet {
	rpc AddUser (AddUserRequest) returns (AddUserResponse) {}

	rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {}
	
	rpc AddOrUpdateOperatorsCurrency (AddOrUpdateOperatorsCurrencyRequest) returns (AddOrUpdateOperatorsCurrencyResponse) {}
	
	rpc UpdateUserCurrency (UpdateUserCurrencyRequest) returns (UpdateUserCurrencyResponse) {
		option (google.api.http) = {
			post: "/v1/wallet/currencies/update"
			body: "*"
		};
	}
	
	// GetUserBalances returns the balances of all currencies of the user
	rpc GetUserBalances (GetUserBalancesRequest) returns (GetUserBalancesResponse) {
		option (google.api.http) = {
			post: "/v1/wallet/balances/list"
			body: "*"
		};
	}

	// GetUserBalance returns the balance of specific currency of the user
	rpc GetUserBalance (GetUserBalanceRequest) returns (GetUserBalanceResponse) {
		option (google.api.http) = {
			post: "/v1/wallet/balances/get"
			body: "*"
		};
	}

	rpc Credit (CreditRequest) returns (CreditResponse) {}

	rpc Debit (DebitRequest) returns (DebitResponse) {}

	rpc GameDebit (GameDebitRequest) returns (GameDebitResponse) {}

	rpc GameCredit (GameCreditRequest) returns (GameCreditResponse) {}

	// Freeze is used to freeze the balance of the user
	rpc Freeze (FreezeRequest) returns (FreezeResponse) {}

	// Settle is used to settle the frozen balance of the user
	rpc Settle (SettleRequest) returns (SettleResponse) {}

	// Rollback is used to rollback the frozen balance of the user or game transactions
	rpc Rollback (RollbackRequest) returns (RollbackResponse) {}

	rpc GetWallets (GetWalletsRequest) returns (GetWalletsResponse) {}

	// ListWalletBalanceTransactions provides balance transactions for a specific user.
	// It's called by ListWalletBalanceTransactions in backoffice service for the information in user transactions page.
	rpc ListWalletBalanceTransactions (ListWalletBalanceTransactionsRequest) returns (ListWalletBalanceTransactionsResponse) {}

	rpc GetWalletCreditTransactions (GetWalletCreditTransactionsRequest) returns (GetWalletCreditTransactionsResponse) {}

	rpc GetExchangeRates (GetExchangeRatesRequest) returns (GetExchangeRatesResponse) {}
}

message AddUserRequest {
	int64 user_id = 1;
	int64 operator_id = 2;
}

message AddUserResponse {}

message UpdateUserRequest {
	int64 user_id = 1;
	bool enabled = 3;
}

message UpdateUserResponse {}

message AddOrUpdateOperatorsCurrencyRequest {
	repeated int64 operator_ids = 1;
	string currency = 2;
	bool enabled = 3;
	bool hidden = 4;
}

message AddOrUpdateOperatorsCurrencyResponse {}

message UpdateUserCurrencyRequest {
	int64 user_id = 1;
	string currency = 2;
	bool enabled = 3;
}

message UpdateUserCurrencyResponse {}

message GetUserBalancesRequest {
	int64 user_id = 1;
}

message GetUserBalancesResponse {
	message Balance {
		string currency = 1;
		string cash = 2;
		string operator_bonus = 3;
		string provider_bonus = 4;
	}
	repeated Balance balances = 1;
}

message GetUserBalanceRequest {
	int64 user_id = 1;
	string currency = 2;
	// optional target currency
	string settlement_currency = 3;
}

message GetUserBalanceResponse {
	// optional exchange rate between currency and target currency
	string exchange_rate = 1;
	int64 cash = 2;
	int64 operator_bonus = 3;
	int64 provider_bonus = 4;
}

// Transaction types for different operations
// Expected values:
// Credit operations:
//   - "payment_deposit"    - Payment deposit transaction
//   - "game_win"          - Game win transaction
//
// Debit operations:
//   - "payment_withdraw"   - Payment withdraw transaction
//   - "game_bet"          - Game bet transaction
//   - "payment_withdraw_freeze" - Payment withdraw freeze transaction
//
// Settlement operations:
//   - "payment_withdraw_settle" - Payment withdraw settlement
//
// Rollback operations:
//   - "game_bet_rollback"            - Game bet transaction rollback
//   - "game_win_rollback"            - Game win transaction rollback
//   - "payment_withdraw_rollback" - Payment withdraw transaction rollback

message CreditRequest {
	message Ratio {
		int64 cash = 1;
		int64 operator_bonus = 2;
	}

	int64 user_id = 1;
	string currency = 2;
	// Valid credit transaction types:
	//   - "payment_deposit"    - Payment deposit transaction
	string transaction_type = 3;
	int64 transaction_id = 4;
	int64 cash = 5;
}

message CreditResponse {
	int64 transaction_id = 1;
}

message DebitRequest {
	int64 user_id = 1;
	string currency = 2;
	// Valid debit transaction types:
	//   - "payment_withdraw"   - Payment withdraw transaction
	string transaction_type = 3;
	int64 transaction_id = 4;
	int64 cash = 5;
}

message DebitResponse {
	int64 transaction_id = 1;
}

message GameDebitRequest {
	int64 user_id = 1;
	string currency = 2;
	string settlement_currency = 3;
	string exchange_rate = 4;
	// Valid game debit transaction types:
	//   - "game_bet"          - Game bet transaction
	string transaction_type = 5;
	int64 transaction_id = 6;
	int64 amount = 7;
	int64 turnover = 8;
}

message GameDebitResponse {
	int64 transaction_id = 1;
	string exchange_rate = 2;
	int64 cash = 3;
	int64 operator_bonus = 4;
	int64 provider_bonus = 5;
}

message GameCreditRequest {
	int64 user_id = 1;
	string currency = 2;
	string settlement_currency = 3;
	string exchange_rate = 4;
	string transaction_type = 5;
	int64 transaction_id = 6;
	int64 original_transaction_id = 7;
	int64 amount = 8;
}

message GameCreditResponse {
	int64 transaction_id = 1;
	string exchange_rate = 2;
	int64 cash = 3;
	int64 operator_bonus = 4;
	int64 provider_bonus = 5;
}

message FreezeRequest {
	int64 user_id = 1;
	string currency = 2;
	// Valid freeze transaction types:
	//   - "payment_withdraw_freeze"   - Payment withdraw freeze transaction
	string transaction_type = 3;
	int64 transaction_id = 4;
	int64 cash = 5;
}

message FreezeResponse {
	int64 transaction_id = 1;
}

message SettleRequest {
	int64 user_id = 1;
	string currency = 2;
	// Valid settle transaction types:
	//   - "payment_withdraw_settle"   - Payment withdraw settle transaction
	string transaction_type = 3;
	int64 transaction_id = 4;
	int64 original_transaction_id = 5;
}

message SettleResponse {
	int64 transaction_id = 1;
}

message RollbackRequest {
	int64 user_id = 1;
	string currency = 2;
	// Valid rollback transaction types:
	//   - "game_bet_rollback"            - Game bet transaction rollback
	//   - "game_win_rollback"            - Game win transaction rollback
	//   - "payment_withdraw_rollback" - Payment withdraw transaction rollback
	string transaction_type = 3;
	int64 transaction_id = 4;
	int64 original_transaction_id = 5;
}

message RollbackResponse {
	int64 transaction_id = 1;
	int64 cash = 2;
	int64 operator_bonus = 3;
	int64 provider_bonus = 4;
}

message GetWalletsRequest {
	int64 user_id = 1;
	repeated string currencies = 2;
}

message GetWalletsResponse {
	message TotalAssets {
		string balance = 1;
		string deposit = 2;
		string withdraw = 3;
		string deposit_minus_withdraw = 4;
		string valid_turnover = 5;
	}
	message Credit {
		google.protobuf.Timestamp created_at = 1;
		int64 transaction_id = 2;
		string cash = 3;
		string bonus = 4;
		string turnover_threshold = 5;
		string turnover = 6;
		string cash_turnover = 7;
		string bonus_turnover = 8;
	}
	message Wallet {
		string currency = 1;
		string cash = 2;
		string bonus = 3;
		string turnover_threshold = 4;
		string turnover = 5;
		string cash_turnover = 6;
		string bonus_turnover = 7;
		repeated Credit credits = 8;
	}
	TotalAssets total_assets = 1;
	repeated Wallet wallets = 2;
}

message ListWalletBalanceTransactionsRequest {
	int64 user_id = 1;
	int64 transaction_id = 2;
	// Transaction types for different operations
	// Expected values:
	// Credit operations:
	//   - "payment_deposit"    - Payment deposit transaction
	//   - "game_win"          - Game win transaction
	//
	// Debit operations:
	//   - "payment_withdraw"   - Payment withdraw transaction
	//   - "game_bet"          - Game bet transaction
	//   - "payment_withdraw_freeze" - Payment withdraw freeze transaction
	//
	// Settlement operations:
	//   - "payment_withdraw_settle" - Payment withdraw settlement
	//
	// Rollback operations:
	//   - "game_bet_rollback"            - Game bet transaction rollback
	//   - "game_win_rollback"            - Game win transaction rollback
	//   - "payment_withdraw_rollback" - Payment withdraw transaction rollback
	optional string transaction_type = 3;
	optional string currency = 4;
	optional google.protobuf.Timestamp start_time = 5;
	optional google.protobuf.Timestamp end_time = 6;
	optional int32 page = 7;
	optional int32 page_size = 8;
}

message ListWalletBalanceTransactionsResponse {
	message BalanceTransaction {
		google.protobuf.Timestamp created_at = 1;
		// Transaction types for different operations
		// Expected values:
		// Credit operations:
		//   - "payment_deposit"    - Payment deposit transaction
		//   - "game_win"          - Game win transaction
		//
		// Debit operations:
		//   - "payment_withdraw"   - Payment withdraw transaction
		//   - "game_bet"          - Game bet transaction
		//   - "payment_withdraw_freeze" - Payment withdraw freeze transaction
		//
		// Settlement operations:
		//   - "payment_withdraw_settle" - Payment withdraw settlement
		//
		// Rollback operations:
		//   - "game_bet_rollback"            - Game bet transaction rollback
		//   - "game_win_rollback"            - Game win transaction rollback
		//   - "payment_withdraw_rollback" - Payment withdraw transaction rollback
		string transaction_type = 2;
		int32 vip_level = 3;
		string change_balance = 4;
		string before_balance = 5;
		string after_balance = 6;
		string currency = 7;
	}
	repeated BalanceTransaction balance_transactions = 1;
	int32 total = 2;
	int32 page = 3;
	int32 page_size = 4;
}

message GetWalletCreditTransactionsRequest {
	int64 credit_id = 1;
	optional int64 page = 2;
	optional int64 page_size = 3;
}

message GetWalletCreditTransactionsResponse {
	message CreditTransaction {
		string type = 1;
		google.protobuf.Timestamp created_at = 2;
		string cash = 3;
		string bonus = 4;
	}
	repeated CreditTransaction credit_transactions = 1;
	int64 page = 2;
	int64 page_size = 3;
	int64 total = 4;
}

message GetExchangeRatesRequest {
	repeated string currencies = 1;
}

message GetExchangeRatesResponse {
	// map key is source currency, value is target currency rate
	map<string, string> exchange_rates = 1;
}
