// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: wallet/service/v1/wallet_event.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EventRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventRequestMultiError, or
// nil if none found.
func (m *EventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubscriptionId

	// no validation rules for EventData

	if len(errors) > 0 {
		return EventRequestMultiError(errors)
	}

	return nil
}

// EventRequestMultiError is an error wrapping multiple validation errors
// returned by EventRequest.ValidateAll() if the designated constraints aren't met.
type EventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventRequestMultiError) AllErrors() []error { return m }

// EventRequestValidationError is the validation error returned by
// EventRequest.Validate if the designated constraints aren't met.
type EventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventRequestValidationError) ErrorName() string { return "EventRequestValidationError" }

// Error satisfies the builtin error interface
func (e EventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventRequestValidationError{}

// Validate checks the field values on EventResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventResponseMultiError, or
// nil if none found.
func (m *EventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EventResponseMultiError(errors)
	}

	return nil
}

// EventResponseMultiError is an error wrapping multiple validation errors
// returned by EventResponse.ValidateAll() if the designated constraints
// aren't met.
type EventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventResponseMultiError) AllErrors() []error { return m }

// EventResponseValidationError is the validation error returned by
// EventResponse.Validate if the designated constraints aren't met.
type EventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventResponseValidationError) ErrorName() string { return "EventResponseValidationError" }

// Error satisfies the builtin error interface
func (e EventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventResponseValidationError{}

// Validate checks the field values on OperatorBalanceUpdateEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OperatorBalanceUpdateEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperatorBalanceUpdateEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperatorBalanceUpdateEventMultiError, or nil if none found.
func (m *OperatorBalanceUpdateEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *OperatorBalanceUpdateEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	// no validation rules for TransactionType

	// no validation rules for RealOperatorId

	// no validation rules for OperatorId

	// no validation rules for CompanyOperatorId

	// no validation rules for RetailerOperatorId

	// no validation rules for SystemOperatorId

	// no validation rules for OperatorType

	// no validation rules for SettlementCurrency

	// no validation rules for BeforeBalance

	// no validation rules for AfterBalance

	// no validation rules for Amount

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return OperatorBalanceUpdateEventMultiError(errors)
	}

	return nil
}

// OperatorBalanceUpdateEventMultiError is an error wrapping multiple
// validation errors returned by OperatorBalanceUpdateEvent.ValidateAll() if
// the designated constraints aren't met.
type OperatorBalanceUpdateEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperatorBalanceUpdateEventMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperatorBalanceUpdateEventMultiError) AllErrors() []error { return m }

// OperatorBalanceUpdateEventValidationError is the validation error returned
// by OperatorBalanceUpdateEvent.Validate if the designated constraints aren't met.
type OperatorBalanceUpdateEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperatorBalanceUpdateEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperatorBalanceUpdateEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperatorBalanceUpdateEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperatorBalanceUpdateEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperatorBalanceUpdateEventValidationError) ErrorName() string {
	return "OperatorBalanceUpdateEventValidationError"
}

// Error satisfies the builtin error interface
func (e OperatorBalanceUpdateEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperatorBalanceUpdateEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperatorBalanceUpdateEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperatorBalanceUpdateEventValidationError{}
