// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNSPECIFIED.String() && e.Code == 500
}

func ErrorUnspecified(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UNSPECIFIED.String(), fmt.Sprintf(format, args...))
}

func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsUserDisabled(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_DISABLED.String() && e.Code == 401
}

func ErrorUserDisabled(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_USER_DISABLED.String(), fmt.Sprintf(format, args...))
}

func IsGetOperatorCurrenciesFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_OPERATOR_CURRENCIES_FAILED.String() && e.Code == 500
}

func ErrorGetOperatorCurrenciesFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_OPERATOR_CURRENCIES_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_USER_FAILED.String() && e.Code == 500
}

func ErrorAddUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddBalancesFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_BALANCES_FAILED.String() && e.Code == 500
}

func ErrorAddBalancesFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_BALANCES_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_USER_FAILED.String() && e.Code == 500
}

func ErrorGetUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsLockUserWithUserIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LOCK_USER_WITH_USER_ID_FAILED.String() && e.Code == 500
}

func ErrorLockUserWithUserIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LOCK_USER_WITH_USER_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_USER_FAILED.String() && e.Code == 500
}

func ErrorUpdateUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateBalancesFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_BALANCES_FAILED.String() && e.Code == 500
}

func ErrorUpdateBalancesFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_BALANCES_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateBalanceFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_BALANCE_FAILED.String() && e.Code == 500
}

func ErrorUpdateBalanceFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_BALANCE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetUsersWithOperatorIdsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_USERS_WITH_OPERATOR_IDS_FAILED.String() && e.Code == 500
}

func ErrorGetUsersWithOperatorIdsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_USERS_WITH_OPERATOR_IDS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsLockBalanceWithUserIdAndCurrencyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LOCK_BALANCE_WITH_USER_ID_AND_CURRENCY_FAILED.String() && e.Code == 500
}

func ErrorLockBalanceWithUserIdAndCurrencyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LOCK_BALANCE_WITH_USER_ID_AND_CURRENCY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetBalanceWithUserIdAndCurrencyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_BALANCE_WITH_USER_ID_AND_CURRENCY_FAILED.String() && e.Code == 500
}

func ErrorGetBalanceWithUserIdAndCurrencyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_BALANCE_WITH_USER_ID_AND_CURRENCY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsBalanceDisabled(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BALANCE_DISABLED.String() && e.Code == 401
}

func ErrorBalanceDisabled(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_BALANCE_DISABLED.String(), fmt.Sprintf(format, args...))
}

func IsGenerateCreditIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GENERATE_CREDIT_ID_FAILED.String() && e.Code == 500
}

func ErrorGenerateCreditIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GENERATE_CREDIT_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsLockCreditWithUserIdAndCurrencyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LOCK_CREDIT_WITH_USER_ID_AND_CURRENCY_FAILED.String() && e.Code == 500
}

func ErrorLockCreditWithUserIdAndCurrencyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LOCK_CREDIT_WITH_USER_ID_AND_CURRENCY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddCreditFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_CREDIT_FAILED.String() && e.Code == 500
}

func ErrorAddCreditFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_CREDIT_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsInvalidTransactionType(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_TRANSACTION_TYPE.String() && e.Code == 400
}

func ErrorInvalidTransactionType(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INVALID_TRANSACTION_TYPE.String(), fmt.Sprintf(format, args...))
}
