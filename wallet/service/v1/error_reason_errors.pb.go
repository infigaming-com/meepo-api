// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNSPECIFIED.String() && e.Code == 500
}

func ErrorUnspecified(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UNSPECIFIED.String(), fmt.Sprintf(format, args...))
}

func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 500
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsUserDisabled(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_DISABLED.String() && e.Code == 500
}

func ErrorUserDisabled(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_DISABLED.String(), fmt.Sprintf(format, args...))
}

func IsGetOperatorCurrenciesFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_OPERATOR_CURRENCIES_FAILED.String() && e.Code == 500
}

func ErrorGetOperatorCurrenciesFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_OPERATOR_CURRENCIES_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_USER_FAILED.String() && e.Code == 500
}

func ErrorAddUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddBalancesFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_BALANCES_FAILED.String() && e.Code == 500
}

func ErrorAddBalancesFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_BALANCES_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_USER_FAILED.String() && e.Code == 500
}

func ErrorGetUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsLockUserWithUserIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LOCK_USER_WITH_USER_ID_FAILED.String() && e.Code == 500
}

func ErrorLockUserWithUserIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LOCK_USER_WITH_USER_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_USER_FAILED.String() && e.Code == 500
}

func ErrorUpdateUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateBalancesFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_BALANCES_FAILED.String() && e.Code == 500
}

func ErrorUpdateBalancesFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_BALANCES_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateBalanceFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_BALANCE_FAILED.String() && e.Code == 500
}

func ErrorUpdateBalanceFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_BALANCE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetUsersWithOperatorIdsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_USERS_WITH_OPERATOR_IDS_FAILED.String() && e.Code == 500
}

func ErrorGetUsersWithOperatorIdsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_USERS_WITH_OPERATOR_IDS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsLockBalanceWithUserIdAndCurrencyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LOCK_BALANCE_WITH_USER_ID_AND_CURRENCY_FAILED.String() && e.Code == 500
}

func ErrorLockBalanceWithUserIdAndCurrencyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LOCK_BALANCE_WITH_USER_ID_AND_CURRENCY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetBalanceWithUserIdAndCurrencyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_BALANCE_WITH_USER_ID_AND_CURRENCY_FAILED.String() && e.Code == 500
}

func ErrorGetBalanceWithUserIdAndCurrencyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_BALANCE_WITH_USER_ID_AND_CURRENCY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetBalancesWithUserIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_BALANCES_WITH_USER_ID_FAILED.String() && e.Code == 500
}

func ErrorGetBalancesWithUserIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_BALANCES_WITH_USER_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsBalanceDisabled(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BALANCE_DISABLED.String() && e.Code == 500
}

func ErrorBalanceDisabled(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_BALANCE_DISABLED.String(), fmt.Sprintf(format, args...))
}

func IsGenerateCreditIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GENERATE_CREDIT_ID_FAILED.String() && e.Code == 500
}

func ErrorGenerateCreditIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GENERATE_CREDIT_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsLockCreditWithUserIdAndCurrencyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LOCK_CREDIT_WITH_USER_ID_AND_CURRENCY_FAILED.String() && e.Code == 500
}

func ErrorLockCreditWithUserIdAndCurrencyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LOCK_CREDIT_WITH_USER_ID_AND_CURRENCY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddCreditFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_CREDIT_FAILED.String() && e.Code == 500
}

func ErrorAddCreditFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_CREDIT_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsInvalidTransactionType(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_TRANSACTION_TYPE.String() && e.Code == 500
}

func ErrorInvalidTransactionType(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_TRANSACTION_TYPE.String(), fmt.Sprintf(format, args...))
}

func IsGenerateBalanceTransactionIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GENERATE_BALANCE_TRANSACTION_ID_FAILED.String() && e.Code == 500
}

func ErrorGenerateBalanceTransactionIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GENERATE_BALANCE_TRANSACTION_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGenerateCreditTransactionIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GENERATE_CREDIT_TRANSACTION_ID_FAILED.String() && e.Code == 500
}

func ErrorGenerateCreditTransactionIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GENERATE_CREDIT_TRANSACTION_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetCreditTransactionFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_CREDIT_TRANSACTION_FAILED.String() && e.Code == 500
}

func ErrorGetCreditTransactionFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_CREDIT_TRANSACTION_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddBalanceTransactionFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_BALANCE_TRANSACTION_FAILED.String() && e.Code == 500
}

func ErrorAddBalanceTransactionFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_BALANCE_TRANSACTION_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddCreditTransactionFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_CREDIT_TRANSACTION_FAILED.String() && e.Code == 500
}

func ErrorAddCreditTransactionFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_CREDIT_TRANSACTION_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetCreditsWithUserIdAndCurrencyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_CREDITS_WITH_USER_ID_AND_CURRENCY_FAILED.String() && e.Code == 500
}

func ErrorGetCreditsWithUserIdAndCurrencyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_CREDITS_WITH_USER_ID_AND_CURRENCY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsInsufficientBalance(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INSUFFICIENT_BALANCE.String() && e.Code == 500
}

func ErrorInsufficientBalance(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INSUFFICIENT_BALANCE.String(), fmt.Sprintf(format, args...))
}

func IsGetRatesFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_RATES_FAILED.String() && e.Code == 500
}

func ErrorGetRatesFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_RATES_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateCreditFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_CREDIT_FAILED.String() && e.Code == 500
}

func ErrorUpdateCreditFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_CREDIT_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetCreditTransactionsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_CREDIT_TRANSACTIONS_FAILED.String() && e.Code == 500
}

func ErrorGetCreditTransactionsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_CREDIT_TRANSACTIONS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsNoCreditTransactionFoundForGameBet(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NO_CREDIT_TRANSACTION_FOUND_FOR_GAME_BET.String() && e.Code == 500
}

func ErrorNoCreditTransactionFoundForGameBet(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_NO_CREDIT_TRANSACTION_FOUND_FOR_GAME_BET.String(), fmt.Sprintf(format, args...))
}

func IsGetCurrenciesFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_CURRENCIES_FAILED.String() && e.Code == 500
}

func ErrorGetCurrenciesFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_CURRENCIES_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetBalanceTransactionFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_BALANCE_TRANSACTION_FAILED.String() && e.Code == 500
}

func ErrorGetBalanceTransactionFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_BALANCE_TRANSACTION_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateBalanceTransactionFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_BALANCE_TRANSACTION_FAILED.String() && e.Code == 500
}

func ErrorUpdateBalanceTransactionFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_BALANCE_TRANSACTION_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateCreditTransactionFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_CREDIT_TRANSACTION_FAILED.String() && e.Code == 500
}

func ErrorUpdateCreditTransactionFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_CREDIT_TRANSACTION_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetCreditsByIdsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_CREDITS_BY_IDS_FAILED.String() && e.Code == 500
}

func ErrorGetCreditsByIdsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_CREDITS_BY_IDS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetCreditByIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_CREDIT_BY_ID_FAILED.String() && e.Code == 500
}

func ErrorGetCreditByIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_CREDIT_BY_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetExchangeRateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_EXCHANGE_RATE_FAILED.String() && e.Code == 500
}

func ErrorGetExchangeRateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_EXCHANGE_RATE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetBalanceTransactionSummaryFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_BALANCE_TRANSACTION_SUMMARY_FAILED.String() && e.Code == 500
}

func ErrorGetBalanceTransactionSummaryFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_BALANCE_TRANSACTION_SUMMARY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsInvalidCurrencyAmount(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_CURRENCY_AMOUNT.String() && e.Code == 500
}

func ErrorInvalidCurrencyAmount(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_CURRENCY_AMOUNT.String(), fmt.Sprintf(format, args...))
}

func IsInvalidExchangeRate(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_EXCHANGE_RATE.String() && e.Code == 500
}

func ErrorInvalidExchangeRate(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_EXCHANGE_RATE.String(), fmt.Sprintf(format, args...))
}
