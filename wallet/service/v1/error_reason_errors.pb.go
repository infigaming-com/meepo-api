// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNSPECIFIED.String() && e.Code == 500
}

func ErrorUnspecified(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UNSPECIFIED.String(), fmt.Sprintf(format, args...))
}

func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 500
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsUserDisabled(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_DISABLED.String() && e.Code == 500
}

func ErrorUserDisabled(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_DISABLED.String(), fmt.Sprintf(format, args...))
}

func IsGetOperatorCurrenciesFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_OPERATOR_CURRENCIES_FAILED.String() && e.Code == 500
}

func ErrorGetOperatorCurrenciesFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_OPERATOR_CURRENCIES_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_USER_FAILED.String() && e.Code == 500
}

func ErrorAddUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddBalancesFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_BALANCES_FAILED.String() && e.Code == 500
}

func ErrorAddBalancesFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_BALANCES_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_USER_FAILED.String() && e.Code == 500
}

func ErrorGetUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsLockUserWithUserIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LOCK_USER_WITH_USER_ID_FAILED.String() && e.Code == 500
}

func ErrorLockUserWithUserIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LOCK_USER_WITH_USER_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_USER_FAILED.String() && e.Code == 500
}

func ErrorUpdateUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateBalancesFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_BALANCES_FAILED.String() && e.Code == 500
}

func ErrorUpdateBalancesFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_BALANCES_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateBalanceFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_BALANCE_FAILED.String() && e.Code == 500
}

func ErrorUpdateBalanceFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_BALANCE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetUsersWithOperatorIdsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_USERS_WITH_OPERATOR_IDS_FAILED.String() && e.Code == 500
}

func ErrorGetUsersWithOperatorIdsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_USERS_WITH_OPERATOR_IDS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsLockBalanceWithUserIdAndCurrencyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LOCK_BALANCE_WITH_USER_ID_AND_CURRENCY_FAILED.String() && e.Code == 500
}

func ErrorLockBalanceWithUserIdAndCurrencyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LOCK_BALANCE_WITH_USER_ID_AND_CURRENCY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetBalanceWithUserIdAndCurrencyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_BALANCE_WITH_USER_ID_AND_CURRENCY_FAILED.String() && e.Code == 500
}

func ErrorGetBalanceWithUserIdAndCurrencyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_BALANCE_WITH_USER_ID_AND_CURRENCY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetBalancesWithUserIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_BALANCES_WITH_USER_ID_FAILED.String() && e.Code == 500
}

func ErrorGetBalancesWithUserIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_BALANCES_WITH_USER_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsBalanceDisabled(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BALANCE_DISABLED.String() && e.Code == 500
}

func ErrorBalanceDisabled(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_BALANCE_DISABLED.String(), fmt.Sprintf(format, args...))
}

func IsGenerateCreditIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GENERATE_CREDIT_ID_FAILED.String() && e.Code == 500
}

func ErrorGenerateCreditIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GENERATE_CREDIT_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsLockCreditWithUserIdAndCurrencyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LOCK_CREDIT_WITH_USER_ID_AND_CURRENCY_FAILED.String() && e.Code == 500
}

func ErrorLockCreditWithUserIdAndCurrencyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LOCK_CREDIT_WITH_USER_ID_AND_CURRENCY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddCreditFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_CREDIT_FAILED.String() && e.Code == 500
}

func ErrorAddCreditFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_CREDIT_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsInvalidTransactionType(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_TRANSACTION_TYPE.String() && e.Code == 500
}

func ErrorInvalidTransactionType(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_TRANSACTION_TYPE.String(), fmt.Sprintf(format, args...))
}

func IsGenerateBalanceTransactionIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GENERATE_BALANCE_TRANSACTION_ID_FAILED.String() && e.Code == 500
}

func ErrorGenerateBalanceTransactionIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GENERATE_BALANCE_TRANSACTION_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGenerateCreditTransactionIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GENERATE_CREDIT_TRANSACTION_ID_FAILED.String() && e.Code == 500
}

func ErrorGenerateCreditTransactionIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GENERATE_CREDIT_TRANSACTION_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetCreditTransactionFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_CREDIT_TRANSACTION_FAILED.String() && e.Code == 500
}

func ErrorGetCreditTransactionFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_CREDIT_TRANSACTION_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddBalanceTransactionFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_BALANCE_TRANSACTION_FAILED.String() && e.Code == 500
}

func ErrorAddBalanceTransactionFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_BALANCE_TRANSACTION_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddCreditTransactionFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_CREDIT_TRANSACTION_FAILED.String() && e.Code == 500
}

func ErrorAddCreditTransactionFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_CREDIT_TRANSACTION_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetCreditsWithUserIdAndCurrencyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_CREDITS_WITH_USER_ID_AND_CURRENCY_FAILED.String() && e.Code == 500
}

func ErrorGetCreditsWithUserIdAndCurrencyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_CREDITS_WITH_USER_ID_AND_CURRENCY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsInsufficientBalance(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INSUFFICIENT_BALANCE.String() && e.Code == 500
}

func ErrorInsufficientBalance(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INSUFFICIENT_BALANCE.String(), fmt.Sprintf(format, args...))
}

func IsGetRatesFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_RATES_FAILED.String() && e.Code == 500
}

func ErrorGetRatesFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_RATES_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateCreditFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_CREDIT_FAILED.String() && e.Code == 500
}

func ErrorUpdateCreditFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_CREDIT_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetCreditTransactionsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_CREDIT_TRANSACTIONS_FAILED.String() && e.Code == 500
}

func ErrorGetCreditTransactionsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_CREDIT_TRANSACTIONS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsNoCreditTransactionFoundForGameBet(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NO_CREDIT_TRANSACTION_FOUND_FOR_GAME_BET.String() && e.Code == 500
}

func ErrorNoCreditTransactionFoundForGameBet(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_NO_CREDIT_TRANSACTION_FOUND_FOR_GAME_BET.String(), fmt.Sprintf(format, args...))
}

func IsGetCurrenciesFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_CURRENCIES_FAILED.String() && e.Code == 500
}

func ErrorGetCurrenciesFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_CURRENCIES_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetBalanceTransactionFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_BALANCE_TRANSACTION_FAILED.String() && e.Code == 500
}

func ErrorGetBalanceTransactionFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_BALANCE_TRANSACTION_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateBalanceTransactionFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_BALANCE_TRANSACTION_FAILED.String() && e.Code == 500
}

func ErrorUpdateBalanceTransactionFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_BALANCE_TRANSACTION_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateCreditTransactionFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_CREDIT_TRANSACTION_FAILED.String() && e.Code == 500
}

func ErrorUpdateCreditTransactionFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_CREDIT_TRANSACTION_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetCreditsByIdsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_CREDITS_BY_IDS_FAILED.String() && e.Code == 500
}

func ErrorGetCreditsByIdsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_CREDITS_BY_IDS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetCreditByIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_CREDIT_BY_ID_FAILED.String() && e.Code == 500
}

func ErrorGetCreditByIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_CREDIT_BY_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetExchangeRateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_EXCHANGE_RATE_FAILED.String() && e.Code == 500
}

func ErrorGetExchangeRateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_EXCHANGE_RATE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetBalanceTransactionSummaryFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_BALANCE_TRANSACTION_SUMMARY_FAILED.String() && e.Code == 500
}

func ErrorGetBalanceTransactionSummaryFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_BALANCE_TRANSACTION_SUMMARY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsInvalidCurrencyAmount(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_CURRENCY_AMOUNT.String() && e.Code == 500
}

func ErrorInvalidCurrencyAmount(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_CURRENCY_AMOUNT.String(), fmt.Sprintf(format, args...))
}

func IsLockOperatorCurrencyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LOCK_OPERATOR_CURRENCY_FAILED.String() && e.Code == 500
}

func ErrorLockOperatorCurrencyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LOCK_OPERATOR_CURRENCY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetOperatorCurrencyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_OPERATOR_CURRENCY_FAILED.String() && e.Code == 500
}

func ErrorGetOperatorCurrencyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_OPERATOR_CURRENCY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateOperatorCurrencyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_OPERATOR_CURRENCY_FAILED.String() && e.Code == 500
}

func ErrorUpdateOperatorCurrencyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_OPERATOR_CURRENCY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetOperatorIdsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_OPERATOR_IDS_FAILED.String() && e.Code == 500
}

func ErrorGetOperatorIdsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_OPERATOR_IDS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetUserIdsByOperatorIdsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_USER_IDS_BY_OPERATOR_IDS_FAILED.String() && e.Code == 500
}

func ErrorGetUserIdsByOperatorIdsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_USER_IDS_BY_OPERATOR_IDS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddOperatorCurrencyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_OPERATOR_CURRENCY_FAILED.String() && e.Code == 500
}

func ErrorAddOperatorCurrencyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_OPERATOR_CURRENCY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetOperatorCurrenciesByOperatorIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_OPERATOR_CURRENCIES_BY_OPERATOR_ID_FAILED.String() && e.Code == 500
}

func ErrorGetOperatorCurrenciesByOperatorIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_OPERATOR_CURRENCIES_BY_OPERATOR_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetUserOperatorIdsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_USER_OPERATOR_IDS_FAILED.String() && e.Code == 500
}

func ErrorGetUserOperatorIdsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_USER_OPERATOR_IDS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsSystemOperatorCurrencyNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SYSTEM_OPERATOR_CURRENCY_NOT_FOUND.String() && e.Code == 500
}

func ErrorSystemOperatorCurrencyNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SYSTEM_OPERATOR_CURRENCY_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsSystemOperatorCurrencyAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SYSTEM_OPERATOR_CURRENCY_ALREADY_EXISTS.String() && e.Code == 500
}

func ErrorSystemOperatorCurrencyAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SYSTEM_OPERATOR_CURRENCY_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

func IsGetParentOperatorIdsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_PARENT_OPERATOR_IDS_FAILED.String() && e.Code == 500
}

func ErrorGetParentOperatorIdsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_PARENT_OPERATOR_IDS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsReportingCurrencyNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REPORTING_CURRENCY_NOT_FOUND.String() && e.Code == 500
}

func ErrorReportingCurrencyNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_REPORTING_CURRENCY_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsAddOperatorBalancesFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_OPERATOR_BALANCES_FAILED.String() && e.Code == 500
}

func ErrorAddOperatorBalancesFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_OPERATOR_BALANCES_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsLockOperatorBalanceWithRealOperatorIdAndCurrencyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LOCK_OPERATOR_BALANCE_WITH_REAL_OPERATOR_ID_AND_CURRENCY_FAILED.String() && e.Code == 500
}

func ErrorLockOperatorBalanceWithRealOperatorIdAndCurrencyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LOCK_OPERATOR_BALANCE_WITH_REAL_OPERATOR_ID_AND_CURRENCY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsCheckOperatorBalanceTransactionIdempotencyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CHECK_OPERATOR_BALANCE_TRANSACTION_IDEMPOTENCY_FAILED.String() && e.Code == 500
}

func ErrorCheckOperatorBalanceTransactionIdempotencyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CHECK_OPERATOR_BALANCE_TRANSACTION_IDEMPOTENCY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetOperatorBalanceFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_OPERATOR_BALANCE_FAILED.String() && e.Code == 500
}

func ErrorGetOperatorBalanceFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_OPERATOR_BALANCE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsOperatorBalanceDisabled(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OPERATOR_BALANCE_DISABLED.String() && e.Code == 500
}

func ErrorOperatorBalanceDisabled(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OPERATOR_BALANCE_DISABLED.String(), fmt.Sprintf(format, args...))
}

func IsGenerateOperatorBalanceTransactionIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GENERATE_OPERATOR_BALANCE_TRANSACTION_ID_FAILED.String() && e.Code == 500
}

func ErrorGenerateOperatorBalanceTransactionIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GENERATE_OPERATOR_BALANCE_TRANSACTION_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddOperatorBalanceTransactionFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_OPERATOR_BALANCE_TRANSACTION_FAILED.String() && e.Code == 500
}

func ErrorAddOperatorBalanceTransactionFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_OPERATOR_BALANCE_TRANSACTION_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateOperatorBalanceFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_OPERATOR_BALANCE_FAILED.String() && e.Code == 500
}

func ErrorUpdateOperatorBalanceFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_OPERATOR_BALANCE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsCheckBalanceTransactionIdempotencyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CHECK_BALANCE_TRANSACTION_IDEMPOTENCY_FAILED.String() && e.Code == 500
}

func ErrorCheckBalanceTransactionIdempotencyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CHECK_BALANCE_TRANSACTION_IDEMPOTENCY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsInsufficientOperatorBalance(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INSUFFICIENT_OPERATOR_BALANCE.String() && e.Code == 500
}

func ErrorInsufficientOperatorBalance(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INSUFFICIENT_OPERATOR_BALANCE.String(), fmt.Sprintf(format, args...))
}

func IsPublishOperatorBalanceUpdateEventFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PUBLISH_OPERATOR_BALANCE_UPDATE_EVENT_FAILED.String() && e.Code == 500
}

func ErrorPublishOperatorBalanceUpdateEventFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_PUBLISH_OPERATOR_BALANCE_UPDATE_EVENT_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetOperatorBalanceTransactionFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_OPERATOR_BALANCE_TRANSACTION_FAILED.String() && e.Code == 500
}

func ErrorGetOperatorBalanceTransactionFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_OPERATOR_BALANCE_TRANSACTION_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsOperatorBalanceTransactionNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OPERATOR_BALANCE_TRANSACTION_NOT_FOUND.String() && e.Code == 500
}

func ErrorOperatorBalanceTransactionNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OPERATOR_BALANCE_TRANSACTION_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsRelatedOperatorBalanceTransactionAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RELATED_OPERATOR_BALANCE_TRANSACTION_ALREADY_EXISTS.String() && e.Code == 500
}

func ErrorRelatedOperatorBalanceTransactionAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_RELATED_OPERATOR_BALANCE_TRANSACTION_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

func IsUpdateOperatorBalanceTransactionFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_OPERATOR_BALANCE_TRANSACTION_FAILED.String() && e.Code == 500
}

func ErrorUpdateOperatorBalanceTransactionFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_OPERATOR_BALANCE_TRANSACTION_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsInvalidOperatorTransfer(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_OPERATOR_TRANSFER.String() && e.Code == 500
}

func ErrorInvalidOperatorTransfer(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_OPERATOR_TRANSFER.String(), fmt.Sprintf(format, args...))
}

func IsInvalidOperatorSwap(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_OPERATOR_SWAP.String() && e.Code == 500
}

func ErrorInvalidOperatorSwap(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_OPERATOR_SWAP.String(), fmt.Sprintf(format, args...))
}

func IsQueryOperatorBalancesFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_QUERY_OPERATOR_BALANCES_FAILED.String() && e.Code == 500
}

func ErrorQueryOperatorBalancesFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_QUERY_OPERATOR_BALANCES_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUserInfoNotFoundInContext(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_INFO_NOT_FOUND_IN_CONTEXT.String() && e.Code == 500
}

func ErrorUserInfoNotFoundInContext(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_INFO_NOT_FOUND_IN_CONTEXT.String(), fmt.Sprintf(format, args...))
}

func IsOperatorPermissionDenied(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OPERATOR_PERMISSION_DENIED.String() && e.Code == 500
}

func ErrorOperatorPermissionDenied(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OPERATOR_PERMISSION_DENIED.String(), fmt.Sprintf(format, args...))
}

func IsUserNotInOperatorContext(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_IN_OPERATOR_CONTEXT.String() && e.Code == 500
}

func ErrorUserNotInOperatorContext(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_NOT_IN_OPERATOR_CONTEXT.String(), fmt.Sprintf(format, args...))
}

func IsInvalidTransferCurrency(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_TRANSFER_CURRENCY.String() && e.Code == 500
}

func ErrorInvalidTransferCurrency(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_TRANSFER_CURRENCY.String(), fmt.Sprintf(format, args...))
}

func IsQueryOperatorBalanceTransactionsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_QUERY_OPERATOR_BALANCE_TRANSACTIONS_FAILED.String() && e.Code == 500
}

func ErrorQueryOperatorBalanceTransactionsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_QUERY_OPERATOR_BALANCE_TRANSACTIONS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsOperatorBalanceNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OPERATOR_BALANCE_NOT_FOUND.String() && e.Code == 500
}

func ErrorOperatorBalanceNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OPERATOR_BALANCE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsGetReportingCurrencyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_REPORTING_CURRENCY_FAILED.String() && e.Code == 500
}

func ErrorGetReportingCurrencyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_REPORTING_CURRENCY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddOperatorCurrencyConfigFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_OPERATOR_CURRENCY_CONFIG_FAILED.String() && e.Code == 500
}

func ErrorAddOperatorCurrencyConfigFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_OPERATOR_CURRENCY_CONFIG_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetOperatorCurrencyConfigFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_OPERATOR_CURRENCY_CONFIG_FAILED.String() && e.Code == 500
}

func ErrorGetOperatorCurrencyConfigFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_OPERATOR_CURRENCY_CONFIG_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsSetDepositRewardSequencesFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SET_DEPOSIT_REWARD_SEQUENCES_FAILED.String() && e.Code == 500
}

func ErrorSetDepositRewardSequencesFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SET_DEPOSIT_REWARD_SEQUENCES_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddUserDepositStatsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_USER_DEPOSIT_STATS_FAILED.String() && e.Code == 500
}

func ErrorAddUserDepositStatsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_USER_DEPOSIT_STATS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsDeleteDepositRewardSequenceFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DELETE_DEPOSIT_REWARD_SEQUENCE_FAILED.String() && e.Code == 500
}

func ErrorDeleteDepositRewardSequenceFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DELETE_DEPOSIT_REWARD_SEQUENCE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsInvalidOperatorMode(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_OPERATOR_MODE.String() && e.Code == 500
}

func ErrorInvalidOperatorMode(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_OPERATOR_MODE.String(), fmt.Sprintf(format, args...))
}

func IsInvalidDepositRewardConfig(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_DEPOSIT_REWARD_CONFIG.String() && e.Code == 500
}

func ErrorInvalidDepositRewardConfig(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_DEPOSIT_REWARD_CONFIG.String(), fmt.Sprintf(format, args...))
}

func IsInvalidOperatorContext(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_OPERATOR_CONTEXT.String() && e.Code == 500
}

func ErrorInvalidOperatorContext(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_OPERATOR_CONTEXT.String(), fmt.Sprintf(format, args...))
}

func IsGetOperatorMinSequencesFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_OPERATOR_MIN_SEQUENCES_FAILED.String() && e.Code == 500
}

func ErrorGetOperatorMinSequencesFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_OPERATOR_MIN_SEQUENCES_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsCreateOperatorCurrencyConfigFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CREATE_OPERATOR_CURRENCY_CONFIG_FAILED.String() && e.Code == 500
}

func ErrorCreateOperatorCurrencyConfigFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CREATE_OPERATOR_CURRENCY_CONFIG_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateOperatorCurrencyConfigFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_OPERATOR_CURRENCY_CONFIG_FAILED.String() && e.Code == 500
}

func ErrorUpdateOperatorCurrencyConfigFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_OPERATOR_CURRENCY_CONFIG_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetOperatorDeductionOrderConfigFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_OPERATOR_DEDUCTION_ORDER_CONFIG_FAILED.String() && e.Code == 500
}

func ErrorGetOperatorDeductionOrderConfigFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_OPERATOR_DEDUCTION_ORDER_CONFIG_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsCreateOperatorDeductionOrderConfigFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CREATE_OPERATOR_DEDUCTION_ORDER_CONFIG_FAILED.String() && e.Code == 500
}

func ErrorCreateOperatorDeductionOrderConfigFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CREATE_OPERATOR_DEDUCTION_ORDER_CONFIG_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateOperatorDeductionOrderConfigFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_OPERATOR_DEDUCTION_ORDER_CONFIG_FAILED.String() && e.Code == 500
}

func ErrorUpdateOperatorDeductionOrderConfigFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_OPERATOR_DEDUCTION_ORDER_CONFIG_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsListOperatorCurrencyConfigsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LIST_OPERATOR_CURRENCY_CONFIGS_FAILED.String() && e.Code == 500
}

func ErrorListOperatorCurrencyConfigsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LIST_OPERATOR_CURRENCY_CONFIGS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsOperatorDeductionOrderConfigNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OPERATOR_DEDUCTION_ORDER_CONFIG_NOT_FOUND.String() && e.Code == 500
}

func ErrorOperatorDeductionOrderConfigNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OPERATOR_DEDUCTION_ORDER_CONFIG_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsOperatorCurrencyConfigNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OPERATOR_CURRENCY_CONFIG_NOT_FOUND.String() && e.Code == 500
}

func ErrorOperatorCurrencyConfigNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OPERATOR_CURRENCY_CONFIG_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsOperatorCurrencyDepositConfigNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OPERATOR_CURRENCY_DEPOSIT_CONFIG_NOT_FOUND.String() && e.Code == 500
}

func ErrorOperatorCurrencyDepositConfigNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OPERATOR_CURRENCY_DEPOSIT_CONFIG_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsGetOperatorCurrencyDepositConfigFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_OPERATOR_CURRENCY_DEPOSIT_CONFIG_FAILED.String() && e.Code == 500
}

func ErrorGetOperatorCurrencyDepositConfigFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_OPERATOR_CURRENCY_DEPOSIT_CONFIG_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetUserDepositStatsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_USER_DEPOSIT_STATS_FAILED.String() && e.Code == 500
}

func ErrorGetUserDepositStatsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_USER_DEPOSIT_STATS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUserDepositStatsNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_DEPOSIT_STATS_NOT_FOUND.String() && e.Code == 500
}

func ErrorUserDepositStatsNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_DEPOSIT_STATS_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsInvalidOperatorDeductionOrderConfig(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_OPERATOR_DEDUCTION_ORDER_CONFIG.String() && e.Code == 500
}

func ErrorInvalidOperatorDeductionOrderConfig(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_OPERATOR_DEDUCTION_ORDER_CONFIG.String(), fmt.Sprintf(format, args...))
}

func IsBonusTransferFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BONUS_TRANSFER_FAILED.String() && e.Code == 500
}

func ErrorBonusTransferFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_BONUS_TRANSFER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsInsufficientBonusBalance(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INSUFFICIENT_BONUS_BALANCE.String() && e.Code == 500
}

func ErrorInsufficientBonusBalance(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INSUFFICIENT_BONUS_BALANCE.String(), fmt.Sprintf(format, args...))
}

func IsCreditOwnershipMismatch(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CREDIT_OWNERSHIP_MISMATCH.String() && e.Code == 500
}

func ErrorCreditOwnershipMismatch(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CREDIT_OWNERSHIP_MISMATCH.String(), fmt.Sprintf(format, args...))
}

func IsWithdrawalLimitExceeded(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_WITHDRAWAL_LIMIT_EXCEEDED.String() && e.Code == 500
}

func ErrorWithdrawalLimitExceeded(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_WITHDRAWAL_LIMIT_EXCEEDED.String(), fmt.Sprintf(format, args...))
}

func IsOperatorWithdrawRollbackExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OPERATOR_WITHDRAW_ROLLBACK_EXISTS.String() && e.Code == 500
}

func ErrorOperatorWithdrawRollbackExists(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OPERATOR_WITHDRAW_ROLLBACK_EXISTS.String(), fmt.Sprintf(format, args...))
}

func IsResponsibleGamblingConfigNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RESPONSIBLE_GAMBLING_CONFIG_NOT_FOUND.String() && e.Code == 500
}

func ErrorResponsibleGamblingConfigNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_RESPONSIBLE_GAMBLING_CONFIG_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsGetResponsibleGamblingConfigFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_RESPONSIBLE_GAMBLING_CONFIG_FAILED.String() && e.Code == 500
}

func ErrorGetResponsibleGamblingConfigFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_RESPONSIBLE_GAMBLING_CONFIG_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsSetResponsibleGamblingConfigFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SET_RESPONSIBLE_GAMBLING_CONFIG_FAILED.String() && e.Code == 500
}

func ErrorSetResponsibleGamblingConfigFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SET_RESPONSIBLE_GAMBLING_CONFIG_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsDeleteResponsibleGamblingConfigFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DELETE_RESPONSIBLE_GAMBLING_CONFIG_FAILED.String() && e.Code == 500
}

func ErrorDeleteResponsibleGamblingConfigFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DELETE_RESPONSIBLE_GAMBLING_CONFIG_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsInvalidGamblingConfiglimitType(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_GAMBLING_CONFIGLIMIT_TYPE.String() && e.Code == 500
}

func ErrorInvalidGamblingConfiglimitType(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_GAMBLING_CONFIGLIMIT_TYPE.String(), fmt.Sprintf(format, args...))
}

func IsCreateDeleteTaskFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CREATE_DELETE_TASK_FAILED.String() && e.Code == 500
}

func ErrorCreateDeleteTaskFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CREATE_DELETE_TASK_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsScheduleDeleteTaskFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SCHEDULE_DELETE_TASK_FAILED.String() && e.Code == 500
}

func ErrorScheduleDeleteTaskFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SCHEDULE_DELETE_TASK_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddResponsibleGamblingConfigFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_RESPONSIBLE_GAMBLING_CONFIG_FAILED.String() && e.Code == 500
}

func ErrorAddResponsibleGamblingConfigFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_RESPONSIBLE_GAMBLING_CONFIG_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetUserCreditsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_USER_CREDITS_FAILED.String() && e.Code == 500
}

func ErrorGetUserCreditsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_USER_CREDITS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsLockBalanceFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LOCK_BALANCE_FAILED.String() && e.Code == 500
}

func ErrorLockBalanceFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LOCK_BALANCE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsLockCreditFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LOCK_CREDIT_FAILED.String() && e.Code == 500
}

func ErrorLockCreditFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LOCK_CREDIT_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetOperatorContextFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_OPERATOR_CONTEXT_FAILED.String() && e.Code == 500
}

func ErrorGetOperatorContextFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_OPERATOR_CONTEXT_FAILED.String(), fmt.Sprintf(format, args...))
}
