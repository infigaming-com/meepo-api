// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: wallet/service/v1/wallet.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddUserRequestMultiError,
// or nil if none found.
func (m *AddUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return AddUserRequestMultiError(errors)
	}

	return nil
}

// AddUserRequestMultiError is an error wrapping multiple validation errors
// returned by AddUserRequest.ValidateAll() if the designated constraints
// aren't met.
type AddUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserRequestMultiError) AllErrors() []error { return m }

// AddUserRequestValidationError is the validation error returned by
// AddUserRequest.Validate if the designated constraints aren't met.
type AddUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserRequestValidationError) ErrorName() string { return "AddUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserRequestValidationError{}

// Validate checks the field values on AddUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserResponseMultiError, or nil if none found.
func (m *AddUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddUserResponseMultiError(errors)
	}

	return nil
}

// AddUserResponseMultiError is an error wrapping multiple validation errors
// returned by AddUserResponse.ValidateAll() if the designated constraints
// aren't met.
type AddUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserResponseMultiError) AllErrors() []error { return m }

// AddUserResponseValidationError is the validation error returned by
// AddUserResponse.Validate if the designated constraints aren't met.
type AddUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserResponseValidationError) ErrorName() string { return "AddUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserResponseValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Enabled

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserResponseMultiError, or nil if none found.
func (m *UpdateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserResponseMultiError(errors)
	}

	return nil
}

// UpdateUserResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserResponseMultiError) AllErrors() []error { return m }

// UpdateUserResponseValidationError is the validation error returned by
// UpdateUserResponse.Validate if the designated constraints aren't met.
type UpdateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserResponseValidationError) ErrorName() string {
	return "UpdateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserResponseValidationError{}

// Validate checks the field values on AddOrUpdateOperatorsCurrencyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddOrUpdateOperatorsCurrencyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateOperatorsCurrencyRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddOrUpdateOperatorsCurrencyRequestMultiError, or nil if none found.
func (m *AddOrUpdateOperatorsCurrencyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateOperatorsCurrencyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	// no validation rules for Enabled

	// no validation rules for Hidden

	if len(errors) > 0 {
		return AddOrUpdateOperatorsCurrencyRequestMultiError(errors)
	}

	return nil
}

// AddOrUpdateOperatorsCurrencyRequestMultiError is an error wrapping multiple
// validation errors returned by
// AddOrUpdateOperatorsCurrencyRequest.ValidateAll() if the designated
// constraints aren't met.
type AddOrUpdateOperatorsCurrencyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateOperatorsCurrencyRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateOperatorsCurrencyRequestMultiError) AllErrors() []error { return m }

// AddOrUpdateOperatorsCurrencyRequestValidationError is the validation error
// returned by AddOrUpdateOperatorsCurrencyRequest.Validate if the designated
// constraints aren't met.
type AddOrUpdateOperatorsCurrencyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateOperatorsCurrencyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateOperatorsCurrencyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateOperatorsCurrencyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateOperatorsCurrencyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateOperatorsCurrencyRequestValidationError) ErrorName() string {
	return "AddOrUpdateOperatorsCurrencyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdateOperatorsCurrencyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateOperatorsCurrencyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateOperatorsCurrencyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateOperatorsCurrencyRequestValidationError{}

// Validate checks the field values on AddOrUpdateOperatorsCurrencyResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AddOrUpdateOperatorsCurrencyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateOperatorsCurrencyResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddOrUpdateOperatorsCurrencyResponseMultiError, or nil if none found.
func (m *AddOrUpdateOperatorsCurrencyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateOperatorsCurrencyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddOrUpdateOperatorsCurrencyResponseMultiError(errors)
	}

	return nil
}

// AddOrUpdateOperatorsCurrencyResponseMultiError is an error wrapping multiple
// validation errors returned by
// AddOrUpdateOperatorsCurrencyResponse.ValidateAll() if the designated
// constraints aren't met.
type AddOrUpdateOperatorsCurrencyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateOperatorsCurrencyResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateOperatorsCurrencyResponseMultiError) AllErrors() []error { return m }

// AddOrUpdateOperatorsCurrencyResponseValidationError is the validation error
// returned by AddOrUpdateOperatorsCurrencyResponse.Validate if the designated
// constraints aren't met.
type AddOrUpdateOperatorsCurrencyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateOperatorsCurrencyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateOperatorsCurrencyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateOperatorsCurrencyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateOperatorsCurrencyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateOperatorsCurrencyResponseValidationError) ErrorName() string {
	return "AddOrUpdateOperatorsCurrencyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdateOperatorsCurrencyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateOperatorsCurrencyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateOperatorsCurrencyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateOperatorsCurrencyResponseValidationError{}

// Validate checks the field values on UpdateUserCurrencyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserCurrencyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserCurrencyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserCurrencyRequestMultiError, or nil if none found.
func (m *UpdateUserCurrencyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserCurrencyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Currency

	// no validation rules for Enabled

	if len(errors) > 0 {
		return UpdateUserCurrencyRequestMultiError(errors)
	}

	return nil
}

// UpdateUserCurrencyRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserCurrencyRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateUserCurrencyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserCurrencyRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserCurrencyRequestMultiError) AllErrors() []error { return m }

// UpdateUserCurrencyRequestValidationError is the validation error returned by
// UpdateUserCurrencyRequest.Validate if the designated constraints aren't met.
type UpdateUserCurrencyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserCurrencyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserCurrencyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserCurrencyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserCurrencyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserCurrencyRequestValidationError) ErrorName() string {
	return "UpdateUserCurrencyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserCurrencyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserCurrencyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserCurrencyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserCurrencyRequestValidationError{}

// Validate checks the field values on UpdateUserCurrencyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserCurrencyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserCurrencyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserCurrencyResponseMultiError, or nil if none found.
func (m *UpdateUserCurrencyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserCurrencyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserCurrencyResponseMultiError(errors)
	}

	return nil
}

// UpdateUserCurrencyResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateUserCurrencyResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateUserCurrencyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserCurrencyResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserCurrencyResponseMultiError) AllErrors() []error { return m }

// UpdateUserCurrencyResponseValidationError is the validation error returned
// by UpdateUserCurrencyResponse.Validate if the designated constraints aren't met.
type UpdateUserCurrencyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserCurrencyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserCurrencyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserCurrencyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserCurrencyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserCurrencyResponseValidationError) ErrorName() string {
	return "UpdateUserCurrencyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserCurrencyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserCurrencyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserCurrencyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserCurrencyResponseValidationError{}

// Validate checks the field values on GetUserBalancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserBalancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserBalancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserBalancesRequestMultiError, or nil if none found.
func (m *GetUserBalancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserBalancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserBalancesRequestMultiError(errors)
	}

	return nil
}

// GetUserBalancesRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserBalancesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserBalancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserBalancesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserBalancesRequestMultiError) AllErrors() []error { return m }

// GetUserBalancesRequestValidationError is the validation error returned by
// GetUserBalancesRequest.Validate if the designated constraints aren't met.
type GetUserBalancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserBalancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserBalancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserBalancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserBalancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserBalancesRequestValidationError) ErrorName() string {
	return "GetUserBalancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserBalancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserBalancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserBalancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserBalancesRequestValidationError{}

// Validate checks the field values on GetUserBalancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserBalancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserBalancesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserBalancesResponseMultiError, or nil if none found.
func (m *GetUserBalancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserBalancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBalances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserBalancesResponseValidationError{
						field:  fmt.Sprintf("Balances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserBalancesResponseValidationError{
						field:  fmt.Sprintf("Balances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserBalancesResponseValidationError{
					field:  fmt.Sprintf("Balances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserBalancesResponseMultiError(errors)
	}

	return nil
}

// GetUserBalancesResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserBalancesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserBalancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserBalancesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserBalancesResponseMultiError) AllErrors() []error { return m }

// GetUserBalancesResponseValidationError is the validation error returned by
// GetUserBalancesResponse.Validate if the designated constraints aren't met.
type GetUserBalancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserBalancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserBalancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserBalancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserBalancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserBalancesResponseValidationError) ErrorName() string {
	return "GetUserBalancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserBalancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserBalancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserBalancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserBalancesResponseValidationError{}

// Validate checks the field values on GetUserBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserBalanceRequestMultiError, or nil if none found.
func (m *GetUserBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Currency

	// no validation rules for SettlementCurrency

	if len(errors) > 0 {
		return GetUserBalanceRequestMultiError(errors)
	}

	return nil
}

// GetUserBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserBalanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserBalanceRequestMultiError) AllErrors() []error { return m }

// GetUserBalanceRequestValidationError is the validation error returned by
// GetUserBalanceRequest.Validate if the designated constraints aren't met.
type GetUserBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserBalanceRequestValidationError) ErrorName() string {
	return "GetUserBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserBalanceRequestValidationError{}

// Validate checks the field values on GetUserBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserBalanceResponseMultiError, or nil if none found.
func (m *GetUserBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExchangeRate

	// no validation rules for Cash

	// no validation rules for OperatorBonus

	// no validation rules for ProviderBonus

	if len(errors) > 0 {
		return GetUserBalanceResponseMultiError(errors)
	}

	return nil
}

// GetUserBalanceResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserBalanceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserBalanceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserBalanceResponseMultiError) AllErrors() []error { return m }

// GetUserBalanceResponseValidationError is the validation error returned by
// GetUserBalanceResponse.Validate if the designated constraints aren't met.
type GetUserBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserBalanceResponseValidationError) ErrorName() string {
	return "GetUserBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserBalanceResponseValidationError{}

// Validate checks the field values on CreditRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreditRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreditRequestMultiError, or
// nil if none found.
func (m *CreditRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Currency

	// no validation rules for TransactionType

	// no validation rules for TransactionId

	// no validation rules for Cash

	if len(errors) > 0 {
		return CreditRequestMultiError(errors)
	}

	return nil
}

// CreditRequestMultiError is an error wrapping multiple validation errors
// returned by CreditRequest.ValidateAll() if the designated constraints
// aren't met.
type CreditRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditRequestMultiError) AllErrors() []error { return m }

// CreditRequestValidationError is the validation error returned by
// CreditRequest.Validate if the designated constraints aren't met.
type CreditRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditRequestValidationError) ErrorName() string { return "CreditRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreditRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditRequestValidationError{}

// Validate checks the field values on CreditResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreditResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreditResponseMultiError,
// or nil if none found.
func (m *CreditResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	if len(errors) > 0 {
		return CreditResponseMultiError(errors)
	}

	return nil
}

// CreditResponseMultiError is an error wrapping multiple validation errors
// returned by CreditResponse.ValidateAll() if the designated constraints
// aren't met.
type CreditResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditResponseMultiError) AllErrors() []error { return m }

// CreditResponseValidationError is the validation error returned by
// CreditResponse.Validate if the designated constraints aren't met.
type CreditResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditResponseValidationError) ErrorName() string { return "CreditResponseValidationError" }

// Error satisfies the builtin error interface
func (e CreditResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditResponseValidationError{}

// Validate checks the field values on DebitRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DebitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DebitRequestMultiError, or
// nil if none found.
func (m *DebitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DebitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Currency

	// no validation rules for TransactionType

	// no validation rules for TransactionId

	// no validation rules for Cash

	if len(errors) > 0 {
		return DebitRequestMultiError(errors)
	}

	return nil
}

// DebitRequestMultiError is an error wrapping multiple validation errors
// returned by DebitRequest.ValidateAll() if the designated constraints aren't met.
type DebitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebitRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebitRequestMultiError) AllErrors() []error { return m }

// DebitRequestValidationError is the validation error returned by
// DebitRequest.Validate if the designated constraints aren't met.
type DebitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebitRequestValidationError) ErrorName() string { return "DebitRequestValidationError" }

// Error satisfies the builtin error interface
func (e DebitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebitRequestValidationError{}

// Validate checks the field values on DebitResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DebitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebitResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DebitResponseMultiError, or
// nil if none found.
func (m *DebitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DebitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	if len(errors) > 0 {
		return DebitResponseMultiError(errors)
	}

	return nil
}

// DebitResponseMultiError is an error wrapping multiple validation errors
// returned by DebitResponse.ValidateAll() if the designated constraints
// aren't met.
type DebitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebitResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebitResponseMultiError) AllErrors() []error { return m }

// DebitResponseValidationError is the validation error returned by
// DebitResponse.Validate if the designated constraints aren't met.
type DebitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebitResponseValidationError) ErrorName() string { return "DebitResponseValidationError" }

// Error satisfies the builtin error interface
func (e DebitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebitResponseValidationError{}

// Validate checks the field values on GameDebitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GameDebitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameDebitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameDebitRequestMultiError, or nil if none found.
func (m *GameDebitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GameDebitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Currency

	// no validation rules for SettlementCurrency

	// no validation rules for ExchangeRate

	// no validation rules for TransactionType

	// no validation rules for TransactionId

	// no validation rules for Amount

	// no validation rules for Turnover

	if len(errors) > 0 {
		return GameDebitRequestMultiError(errors)
	}

	return nil
}

// GameDebitRequestMultiError is an error wrapping multiple validation errors
// returned by GameDebitRequest.ValidateAll() if the designated constraints
// aren't met.
type GameDebitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameDebitRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameDebitRequestMultiError) AllErrors() []error { return m }

// GameDebitRequestValidationError is the validation error returned by
// GameDebitRequest.Validate if the designated constraints aren't met.
type GameDebitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameDebitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameDebitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameDebitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameDebitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameDebitRequestValidationError) ErrorName() string { return "GameDebitRequestValidationError" }

// Error satisfies the builtin error interface
func (e GameDebitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameDebitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameDebitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameDebitRequestValidationError{}

// Validate checks the field values on GameDebitResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GameDebitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameDebitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameDebitResponseMultiError, or nil if none found.
func (m *GameDebitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GameDebitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	// no validation rules for ExchangeRate

	// no validation rules for Cash

	// no validation rules for OperatorBonus

	// no validation rules for ProviderBonus

	if len(errors) > 0 {
		return GameDebitResponseMultiError(errors)
	}

	return nil
}

// GameDebitResponseMultiError is an error wrapping multiple validation errors
// returned by GameDebitResponse.ValidateAll() if the designated constraints
// aren't met.
type GameDebitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameDebitResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameDebitResponseMultiError) AllErrors() []error { return m }

// GameDebitResponseValidationError is the validation error returned by
// GameDebitResponse.Validate if the designated constraints aren't met.
type GameDebitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameDebitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameDebitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameDebitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameDebitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameDebitResponseValidationError) ErrorName() string {
	return "GameDebitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GameDebitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameDebitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameDebitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameDebitResponseValidationError{}

// Validate checks the field values on GameCreditRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GameCreditRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameCreditRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameCreditRequestMultiError, or nil if none found.
func (m *GameCreditRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GameCreditRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Currency

	// no validation rules for SettlementCurrency

	// no validation rules for ExchangeRate

	// no validation rules for TransactionType

	// no validation rules for TransactionId

	// no validation rules for OriginalTransactionId

	// no validation rules for Amount

	if len(errors) > 0 {
		return GameCreditRequestMultiError(errors)
	}

	return nil
}

// GameCreditRequestMultiError is an error wrapping multiple validation errors
// returned by GameCreditRequest.ValidateAll() if the designated constraints
// aren't met.
type GameCreditRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameCreditRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameCreditRequestMultiError) AllErrors() []error { return m }

// GameCreditRequestValidationError is the validation error returned by
// GameCreditRequest.Validate if the designated constraints aren't met.
type GameCreditRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameCreditRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameCreditRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameCreditRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameCreditRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameCreditRequestValidationError) ErrorName() string {
	return "GameCreditRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GameCreditRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameCreditRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameCreditRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameCreditRequestValidationError{}

// Validate checks the field values on GameCreditResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GameCreditResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameCreditResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameCreditResponseMultiError, or nil if none found.
func (m *GameCreditResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GameCreditResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	// no validation rules for ExchangeRate

	// no validation rules for Cash

	// no validation rules for OperatorBonus

	// no validation rules for ProviderBonus

	if len(errors) > 0 {
		return GameCreditResponseMultiError(errors)
	}

	return nil
}

// GameCreditResponseMultiError is an error wrapping multiple validation errors
// returned by GameCreditResponse.ValidateAll() if the designated constraints
// aren't met.
type GameCreditResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameCreditResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameCreditResponseMultiError) AllErrors() []error { return m }

// GameCreditResponseValidationError is the validation error returned by
// GameCreditResponse.Validate if the designated constraints aren't met.
type GameCreditResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameCreditResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameCreditResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameCreditResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameCreditResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameCreditResponseValidationError) ErrorName() string {
	return "GameCreditResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GameCreditResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameCreditResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameCreditResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameCreditResponseValidationError{}

// Validate checks the field values on GetWalletsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetWalletsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWalletsRequestMultiError, or nil if none found.
func (m *GetWalletsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetWalletsRequestMultiError(errors)
	}

	return nil
}

// GetWalletsRequestMultiError is an error wrapping multiple validation errors
// returned by GetWalletsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetWalletsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletsRequestMultiError) AllErrors() []error { return m }

// GetWalletsRequestValidationError is the validation error returned by
// GetWalletsRequest.Validate if the designated constraints aren't met.
type GetWalletsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletsRequestValidationError) ErrorName() string {
	return "GetWalletsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletsRequestValidationError{}

// Validate checks the field values on GetWalletsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWalletsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWalletsResponseMultiError, or nil if none found.
func (m *GetWalletsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTotalAssets()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWalletsResponseValidationError{
					field:  "TotalAssets",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWalletsResponseValidationError{
					field:  "TotalAssets",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTotalAssets()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWalletsResponseValidationError{
				field:  "TotalAssets",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetWallets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWalletsResponseValidationError{
						field:  fmt.Sprintf("Wallets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWalletsResponseValidationError{
						field:  fmt.Sprintf("Wallets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWalletsResponseValidationError{
					field:  fmt.Sprintf("Wallets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWalletsResponseMultiError(errors)
	}

	return nil
}

// GetWalletsResponseMultiError is an error wrapping multiple validation errors
// returned by GetWalletsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetWalletsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletsResponseMultiError) AllErrors() []error { return m }

// GetWalletsResponseValidationError is the validation error returned by
// GetWalletsResponse.Validate if the designated constraints aren't met.
type GetWalletsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletsResponseValidationError) ErrorName() string {
	return "GetWalletsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletsResponseValidationError{}

// Validate checks the field values on GetWalletCreditTransactionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetWalletCreditTransactionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletCreditTransactionsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetWalletCreditTransactionsRequestMultiError, or nil if none found.
func (m *GetWalletCreditTransactionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletCreditTransactionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreditId

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return GetWalletCreditTransactionsRequestMultiError(errors)
	}

	return nil
}

// GetWalletCreditTransactionsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetWalletCreditTransactionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWalletCreditTransactionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletCreditTransactionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletCreditTransactionsRequestMultiError) AllErrors() []error { return m }

// GetWalletCreditTransactionsRequestValidationError is the validation error
// returned by GetWalletCreditTransactionsRequest.Validate if the designated
// constraints aren't met.
type GetWalletCreditTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletCreditTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletCreditTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletCreditTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletCreditTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletCreditTransactionsRequestValidationError) ErrorName() string {
	return "GetWalletCreditTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletCreditTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletCreditTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletCreditTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletCreditTransactionsRequestValidationError{}

// Validate checks the field values on GetWalletCreditTransactionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetWalletCreditTransactionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletCreditTransactionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetWalletCreditTransactionsResponseMultiError, or nil if none found.
func (m *GetWalletCreditTransactionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletCreditTransactionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCreditTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWalletCreditTransactionsResponseValidationError{
						field:  fmt.Sprintf("CreditTransactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWalletCreditTransactionsResponseValidationError{
						field:  fmt.Sprintf("CreditTransactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWalletCreditTransactionsResponseValidationError{
					field:  fmt.Sprintf("CreditTransactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return GetWalletCreditTransactionsResponseMultiError(errors)
	}

	return nil
}

// GetWalletCreditTransactionsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetWalletCreditTransactionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWalletCreditTransactionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletCreditTransactionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletCreditTransactionsResponseMultiError) AllErrors() []error { return m }

// GetWalletCreditTransactionsResponseValidationError is the validation error
// returned by GetWalletCreditTransactionsResponse.Validate if the designated
// constraints aren't met.
type GetWalletCreditTransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletCreditTransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletCreditTransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletCreditTransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletCreditTransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletCreditTransactionsResponseValidationError) ErrorName() string {
	return "GetWalletCreditTransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletCreditTransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletCreditTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletCreditTransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletCreditTransactionsResponseValidationError{}

// Validate checks the field values on GetUserBalancesResponse_Balance with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserBalancesResponse_Balance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserBalancesResponse_Balance with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserBalancesResponse_BalanceMultiError, or nil if none found.
func (m *GetUserBalancesResponse_Balance) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserBalancesResponse_Balance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	// no validation rules for Cash

	// no validation rules for OperatorBonus

	// no validation rules for ProviderBonus

	if len(errors) > 0 {
		return GetUserBalancesResponse_BalanceMultiError(errors)
	}

	return nil
}

// GetUserBalancesResponse_BalanceMultiError is an error wrapping multiple
// validation errors returned by GetUserBalancesResponse_Balance.ValidateAll()
// if the designated constraints aren't met.
type GetUserBalancesResponse_BalanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserBalancesResponse_BalanceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserBalancesResponse_BalanceMultiError) AllErrors() []error { return m }

// GetUserBalancesResponse_BalanceValidationError is the validation error
// returned by GetUserBalancesResponse_Balance.Validate if the designated
// constraints aren't met.
type GetUserBalancesResponse_BalanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserBalancesResponse_BalanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserBalancesResponse_BalanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserBalancesResponse_BalanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserBalancesResponse_BalanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserBalancesResponse_BalanceValidationError) ErrorName() string {
	return "GetUserBalancesResponse_BalanceValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserBalancesResponse_BalanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserBalancesResponse_Balance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserBalancesResponse_BalanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserBalancesResponse_BalanceValidationError{}

// Validate checks the field values on CreditRequest_Ratio with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreditRequest_Ratio) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditRequest_Ratio with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreditRequest_RatioMultiError, or nil if none found.
func (m *CreditRequest_Ratio) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditRequest_Ratio) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cash

	// no validation rules for OperatorBonus

	if len(errors) > 0 {
		return CreditRequest_RatioMultiError(errors)
	}

	return nil
}

// CreditRequest_RatioMultiError is an error wrapping multiple validation
// errors returned by CreditRequest_Ratio.ValidateAll() if the designated
// constraints aren't met.
type CreditRequest_RatioMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditRequest_RatioMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditRequest_RatioMultiError) AllErrors() []error { return m }

// CreditRequest_RatioValidationError is the validation error returned by
// CreditRequest_Ratio.Validate if the designated constraints aren't met.
type CreditRequest_RatioValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditRequest_RatioValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditRequest_RatioValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditRequest_RatioValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditRequest_RatioValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditRequest_RatioValidationError) ErrorName() string {
	return "CreditRequest_RatioValidationError"
}

// Error satisfies the builtin error interface
func (e CreditRequest_RatioValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditRequest_Ratio.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditRequest_RatioValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditRequest_RatioValidationError{}

// Validate checks the field values on GetWalletsResponse_TotalAssets with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWalletsResponse_TotalAssets) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletsResponse_TotalAssets with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetWalletsResponse_TotalAssetsMultiError, or nil if none found.
func (m *GetWalletsResponse_TotalAssets) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletsResponse_TotalAssets) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Balance

	// no validation rules for Deposit

	// no validation rules for Withdraw

	// no validation rules for DepositMinusWithdraw

	// no validation rules for ValidTurnover

	if len(errors) > 0 {
		return GetWalletsResponse_TotalAssetsMultiError(errors)
	}

	return nil
}

// GetWalletsResponse_TotalAssetsMultiError is an error wrapping multiple
// validation errors returned by GetWalletsResponse_TotalAssets.ValidateAll()
// if the designated constraints aren't met.
type GetWalletsResponse_TotalAssetsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletsResponse_TotalAssetsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletsResponse_TotalAssetsMultiError) AllErrors() []error { return m }

// GetWalletsResponse_TotalAssetsValidationError is the validation error
// returned by GetWalletsResponse_TotalAssets.Validate if the designated
// constraints aren't met.
type GetWalletsResponse_TotalAssetsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletsResponse_TotalAssetsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletsResponse_TotalAssetsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletsResponse_TotalAssetsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletsResponse_TotalAssetsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletsResponse_TotalAssetsValidationError) ErrorName() string {
	return "GetWalletsResponse_TotalAssetsValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletsResponse_TotalAssetsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletsResponse_TotalAssets.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletsResponse_TotalAssetsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletsResponse_TotalAssetsValidationError{}

// Validate checks the field values on GetWalletsResponse_Credit with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWalletsResponse_Credit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletsResponse_Credit with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWalletsResponse_CreditMultiError, or nil if none found.
func (m *GetWalletsResponse_Credit) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletsResponse_Credit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for TransactionId

	// no validation rules for Cash

	// no validation rules for Bonus

	// no validation rules for TurnoverThreshold

	// no validation rules for Turnover

	// no validation rules for CashTurnover

	// no validation rules for BonusTurnover

	if len(errors) > 0 {
		return GetWalletsResponse_CreditMultiError(errors)
	}

	return nil
}

// GetWalletsResponse_CreditMultiError is an error wrapping multiple validation
// errors returned by GetWalletsResponse_Credit.ValidateAll() if the
// designated constraints aren't met.
type GetWalletsResponse_CreditMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletsResponse_CreditMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletsResponse_CreditMultiError) AllErrors() []error { return m }

// GetWalletsResponse_CreditValidationError is the validation error returned by
// GetWalletsResponse_Credit.Validate if the designated constraints aren't met.
type GetWalletsResponse_CreditValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletsResponse_CreditValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletsResponse_CreditValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletsResponse_CreditValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletsResponse_CreditValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletsResponse_CreditValidationError) ErrorName() string {
	return "GetWalletsResponse_CreditValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletsResponse_CreditValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletsResponse_Credit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletsResponse_CreditValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletsResponse_CreditValidationError{}

// Validate checks the field values on GetWalletsResponse_Wallet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWalletsResponse_Wallet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletsResponse_Wallet with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWalletsResponse_WalletMultiError, or nil if none found.
func (m *GetWalletsResponse_Wallet) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletsResponse_Wallet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	// no validation rules for Cash

	// no validation rules for Bonus

	// no validation rules for TurnoverThreshold

	// no validation rules for Turnover

	// no validation rules for CashTurnover

	// no validation rules for BonusTurnover

	for idx, item := range m.GetCredits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWalletsResponse_WalletValidationError{
						field:  fmt.Sprintf("Credits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWalletsResponse_WalletValidationError{
						field:  fmt.Sprintf("Credits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWalletsResponse_WalletValidationError{
					field:  fmt.Sprintf("Credits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWalletsResponse_WalletMultiError(errors)
	}

	return nil
}

// GetWalletsResponse_WalletMultiError is an error wrapping multiple validation
// errors returned by GetWalletsResponse_Wallet.ValidateAll() if the
// designated constraints aren't met.
type GetWalletsResponse_WalletMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletsResponse_WalletMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletsResponse_WalletMultiError) AllErrors() []error { return m }

// GetWalletsResponse_WalletValidationError is the validation error returned by
// GetWalletsResponse_Wallet.Validate if the designated constraints aren't met.
type GetWalletsResponse_WalletValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletsResponse_WalletValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletsResponse_WalletValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletsResponse_WalletValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletsResponse_WalletValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletsResponse_WalletValidationError) ErrorName() string {
	return "GetWalletsResponse_WalletValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletsResponse_WalletValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletsResponse_Wallet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletsResponse_WalletValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletsResponse_WalletValidationError{}

// Validate checks the field values on
// GetWalletCreditTransactionsResponse_CreditTransaction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWalletCreditTransactionsResponse_CreditTransaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetWalletCreditTransactionsResponse_CreditTransaction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWalletCreditTransactionsResponse_CreditTransactionMultiError, or nil if
// none found.
func (m *GetWalletCreditTransactionsResponse_CreditTransaction) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletCreditTransactionsResponse_CreditTransaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for CreatedAt

	// no validation rules for Cash

	// no validation rules for Bonus

	if len(errors) > 0 {
		return GetWalletCreditTransactionsResponse_CreditTransactionMultiError(errors)
	}

	return nil
}

// GetWalletCreditTransactionsResponse_CreditTransactionMultiError is an error
// wrapping multiple validation errors returned by
// GetWalletCreditTransactionsResponse_CreditTransaction.ValidateAll() if the
// designated constraints aren't met.
type GetWalletCreditTransactionsResponse_CreditTransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletCreditTransactionsResponse_CreditTransactionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletCreditTransactionsResponse_CreditTransactionMultiError) AllErrors() []error {
	return m
}

// GetWalletCreditTransactionsResponse_CreditTransactionValidationError is the
// validation error returned by
// GetWalletCreditTransactionsResponse_CreditTransaction.Validate if the
// designated constraints aren't met.
type GetWalletCreditTransactionsResponse_CreditTransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletCreditTransactionsResponse_CreditTransactionValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetWalletCreditTransactionsResponse_CreditTransactionValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetWalletCreditTransactionsResponse_CreditTransactionValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetWalletCreditTransactionsResponse_CreditTransactionValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetWalletCreditTransactionsResponse_CreditTransactionValidationError) ErrorName() string {
	return "GetWalletCreditTransactionsResponse_CreditTransactionValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletCreditTransactionsResponse_CreditTransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletCreditTransactionsResponse_CreditTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletCreditTransactionsResponse_CreditTransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletCreditTransactionsResponse_CreditTransactionValidationError{}
