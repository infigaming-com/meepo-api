// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.6
// source: wallet/service/v1/wallet_event.proto

package v1

import (
	common "github.com/infigaming-com/meepo-api/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId string                 `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	EventData      []byte                 `protobuf:"bytes,2,opt,name=event_data,json=eventData,proto3" json:"event_data,omitempty"`
	MessageId      string                 `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EventRequest) Reset() {
	*x = EventRequest{}
	mi := &file_wallet_service_v1_wallet_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequest) ProtoMessage() {}

func (x *EventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_service_v1_wallet_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequest.ProtoReflect.Descriptor instead.
func (*EventRequest) Descriptor() ([]byte, []int) {
	return file_wallet_service_v1_wallet_event_proto_rawDescGZIP(), []int{0}
}

func (x *EventRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *EventRequest) GetEventData() []byte {
	if x != nil {
		return x.EventData
	}
	return nil
}

func (x *EventRequest) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

type EventResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventResponse) Reset() {
	*x = EventResponse{}
	mi := &file_wallet_service_v1_wallet_event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResponse) ProtoMessage() {}

func (x *EventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_service_v1_wallet_event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResponse.ProtoReflect.Descriptor instead.
func (*EventResponse) Descriptor() ([]byte, []int) {
	return file_wallet_service_v1_wallet_event_proto_rawDescGZIP(), []int{1}
}

type BalanceUpdateEvent struct {
	state                                protoimpl.MessageState  `protogen:"open.v1"`
	TransactionId                        int64                   `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	TransactionType                      string                  `protobuf:"bytes,2,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	UserId                               int64                   `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OperatorContext                      *common.OperatorContext `protobuf:"bytes,4,opt,name=operator_context,json=operatorContext,proto3" json:"operator_context,omitempty"`
	Currency                             string                  `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"` // settlement currency
	ReportingCurrency                    string                  `protobuf:"bytes,6,opt,name=reporting_currency,json=reportingCurrency,proto3" json:"reporting_currency,omitempty"`
	BeforeBalance                        string                  `protobuf:"bytes,7,opt,name=before_balance,json=beforeBalance,proto3" json:"before_balance,omitempty"` // cash + operator bonus + provider bonus
	BeforeBalanceUsd                     string                  `protobuf:"bytes,8,opt,name=before_balance_usd,json=beforeBalanceUsd,proto3" json:"before_balance_usd,omitempty"`
	BeforeBalanceReportingCurrency       string                  `protobuf:"bytes,9,opt,name=before_balance_reporting_currency,json=beforeBalanceReportingCurrency,proto3" json:"before_balance_reporting_currency,omitempty"`
	AfterBalance                         string                  `protobuf:"bytes,10,opt,name=after_balance,json=afterBalance,proto3" json:"after_balance,omitempty"` // cash + operator bonus + provider bonus
	AfterBalanceUsd                      string                  `protobuf:"bytes,11,opt,name=after_balance_usd,json=afterBalanceUsd,proto3" json:"after_balance_usd,omitempty"`
	AfterBalanceReportingCurrency        string                  `protobuf:"bytes,12,opt,name=after_balance_reporting_currency,json=afterBalanceReportingCurrency,proto3" json:"after_balance_reporting_currency,omitempty"`
	Amount                               string                  `protobuf:"bytes,13,opt,name=amount,proto3" json:"amount,omitempty"` // cash + operator bonus + provider bonus
	AmountUsd                            string                  `protobuf:"bytes,14,opt,name=amount_usd,json=amountUsd,proto3" json:"amount_usd,omitempty"`
	AmountReportingCurrency              string                  `protobuf:"bytes,15,opt,name=amount_reporting_currency,json=amountReportingCurrency,proto3" json:"amount_reporting_currency,omitempty"`
	CreatedAt                            int64                   `protobuf:"varint,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	BeforeCash                           string                  `protobuf:"bytes,17,opt,name=before_cash,json=beforeCash,proto3" json:"before_cash,omitempty"`
	BeforeCashUsd                        string                  `protobuf:"bytes,18,opt,name=before_cash_usd,json=beforeCashUsd,proto3" json:"before_cash_usd,omitempty"`
	BeforeCashReportingCurrency          string                  `protobuf:"bytes,19,opt,name=before_cash_reporting_currency,json=beforeCashReportingCurrency,proto3" json:"before_cash_reporting_currency,omitempty"`
	BeforeOperatorBonus                  string                  `protobuf:"bytes,20,opt,name=before_operator_bonus,json=beforeOperatorBonus,proto3" json:"before_operator_bonus,omitempty"`
	BeforeOperatorBonusUsd               string                  `protobuf:"bytes,21,opt,name=before_operator_bonus_usd,json=beforeOperatorBonusUsd,proto3" json:"before_operator_bonus_usd,omitempty"`
	BeforeOperatorBonusReportingCurrency string                  `protobuf:"bytes,22,opt,name=before_operator_bonus_reporting_currency,json=beforeOperatorBonusReportingCurrency,proto3" json:"before_operator_bonus_reporting_currency,omitempty"`
	BeforeProviderBonus                  string                  `protobuf:"bytes,23,opt,name=before_provider_bonus,json=beforeProviderBonus,proto3" json:"before_provider_bonus,omitempty"`
	BeforeProviderBonusUsd               string                  `protobuf:"bytes,24,opt,name=before_provider_bonus_usd,json=beforeProviderBonusUsd,proto3" json:"before_provider_bonus_usd,omitempty"`
	BeforeProviderBonusReportingCurrency string                  `protobuf:"bytes,25,opt,name=before_provider_bonus_reporting_currency,json=beforeProviderBonusReportingCurrency,proto3" json:"before_provider_bonus_reporting_currency,omitempty"`
	AfterCash                            string                  `protobuf:"bytes,26,opt,name=after_cash,json=afterCash,proto3" json:"after_cash,omitempty"`
	AfterCashUsd                         string                  `protobuf:"bytes,27,opt,name=after_cash_usd,json=afterCashUsd,proto3" json:"after_cash_usd,omitempty"`
	AfterCashReportingCurrency           string                  `protobuf:"bytes,28,opt,name=after_cash_reporting_currency,json=afterCashReportingCurrency,proto3" json:"after_cash_reporting_currency,omitempty"`
	AfterOperatorBonus                   string                  `protobuf:"bytes,29,opt,name=after_operator_bonus,json=afterOperatorBonus,proto3" json:"after_operator_bonus,omitempty"`
	AfterOperatorBonusUsd                string                  `protobuf:"bytes,30,opt,name=after_operator_bonus_usd,json=afterOperatorBonusUsd,proto3" json:"after_operator_bonus_usd,omitempty"`
	AfterOperatorBonusReportingCurrency  string                  `protobuf:"bytes,31,opt,name=after_operator_bonus_reporting_currency,json=afterOperatorBonusReportingCurrency,proto3" json:"after_operator_bonus_reporting_currency,omitempty"`
	AfterProviderBonus                   string                  `protobuf:"bytes,32,opt,name=after_provider_bonus,json=afterProviderBonus,proto3" json:"after_provider_bonus,omitempty"`
	AfterProviderBonusUsd                string                  `protobuf:"bytes,33,opt,name=after_provider_bonus_usd,json=afterProviderBonusUsd,proto3" json:"after_provider_bonus_usd,omitempty"`
	AfterProviderBonusReportingCurrency  string                  `protobuf:"bytes,34,opt,name=after_provider_bonus_reporting_currency,json=afterProviderBonusReportingCurrency,proto3" json:"after_provider_bonus_reporting_currency,omitempty"`
	CashAmount                           string                  `protobuf:"bytes,35,opt,name=cash_amount,json=cashAmount,proto3" json:"cash_amount,omitempty"`
	CashAmountUsd                        string                  `protobuf:"bytes,36,opt,name=cash_amount_usd,json=cashAmountUsd,proto3" json:"cash_amount_usd,omitempty"`
	CashAmountReportingCurrency          string                  `protobuf:"bytes,37,opt,name=cash_amount_reporting_currency,json=cashAmountReportingCurrency,proto3" json:"cash_amount_reporting_currency,omitempty"`
	OperatorBonusAmount                  string                  `protobuf:"bytes,38,opt,name=operator_bonus_amount,json=operatorBonusAmount,proto3" json:"operator_bonus_amount,omitempty"`
	OperatorBonusAmountUsd               string                  `protobuf:"bytes,39,opt,name=operator_bonus_amount_usd,json=operatorBonusAmountUsd,proto3" json:"operator_bonus_amount_usd,omitempty"`
	OperatorBonusAmountReportingCurrency string                  `protobuf:"bytes,40,opt,name=operator_bonus_amount_reporting_currency,json=operatorBonusAmountReportingCurrency,proto3" json:"operator_bonus_amount_reporting_currency,omitempty"`
	ProviderBonusAmount                  string                  `protobuf:"bytes,41,opt,name=provider_bonus_amount,json=providerBonusAmount,proto3" json:"provider_bonus_amount,omitempty"`
	ProviderBonusAmountUsd               string                  `protobuf:"bytes,42,opt,name=provider_bonus_amount_usd,json=providerBonusAmountUsd,proto3" json:"provider_bonus_amount_usd,omitempty"`
	ProviderBonusAmountReportingCurrency string                  `protobuf:"bytes,43,opt,name=provider_bonus_amount_reporting_currency,json=providerBonusAmountReportingCurrency,proto3" json:"provider_bonus_amount_reporting_currency,omitempty"`
	unknownFields                        protoimpl.UnknownFields
	sizeCache                            protoimpl.SizeCache
}

func (x *BalanceUpdateEvent) Reset() {
	*x = BalanceUpdateEvent{}
	mi := &file_wallet_service_v1_wallet_event_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceUpdateEvent) ProtoMessage() {}

func (x *BalanceUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_service_v1_wallet_event_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceUpdateEvent.ProtoReflect.Descriptor instead.
func (*BalanceUpdateEvent) Descriptor() ([]byte, []int) {
	return file_wallet_service_v1_wallet_event_proto_rawDescGZIP(), []int{2}
}

func (x *BalanceUpdateEvent) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *BalanceUpdateEvent) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *BalanceUpdateEvent) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BalanceUpdateEvent) GetOperatorContext() *common.OperatorContext {
	if x != nil {
		return x.OperatorContext
	}
	return nil
}

func (x *BalanceUpdateEvent) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BalanceUpdateEvent) GetReportingCurrency() string {
	if x != nil {
		return x.ReportingCurrency
	}
	return ""
}

func (x *BalanceUpdateEvent) GetBeforeBalance() string {
	if x != nil {
		return x.BeforeBalance
	}
	return ""
}

func (x *BalanceUpdateEvent) GetBeforeBalanceUsd() string {
	if x != nil {
		return x.BeforeBalanceUsd
	}
	return ""
}

func (x *BalanceUpdateEvent) GetBeforeBalanceReportingCurrency() string {
	if x != nil {
		return x.BeforeBalanceReportingCurrency
	}
	return ""
}

func (x *BalanceUpdateEvent) GetAfterBalance() string {
	if x != nil {
		return x.AfterBalance
	}
	return ""
}

func (x *BalanceUpdateEvent) GetAfterBalanceUsd() string {
	if x != nil {
		return x.AfterBalanceUsd
	}
	return ""
}

func (x *BalanceUpdateEvent) GetAfterBalanceReportingCurrency() string {
	if x != nil {
		return x.AfterBalanceReportingCurrency
	}
	return ""
}

func (x *BalanceUpdateEvent) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *BalanceUpdateEvent) GetAmountUsd() string {
	if x != nil {
		return x.AmountUsd
	}
	return ""
}

func (x *BalanceUpdateEvent) GetAmountReportingCurrency() string {
	if x != nil {
		return x.AmountReportingCurrency
	}
	return ""
}

func (x *BalanceUpdateEvent) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BalanceUpdateEvent) GetBeforeCash() string {
	if x != nil {
		return x.BeforeCash
	}
	return ""
}

func (x *BalanceUpdateEvent) GetBeforeCashUsd() string {
	if x != nil {
		return x.BeforeCashUsd
	}
	return ""
}

func (x *BalanceUpdateEvent) GetBeforeCashReportingCurrency() string {
	if x != nil {
		return x.BeforeCashReportingCurrency
	}
	return ""
}

func (x *BalanceUpdateEvent) GetBeforeOperatorBonus() string {
	if x != nil {
		return x.BeforeOperatorBonus
	}
	return ""
}

func (x *BalanceUpdateEvent) GetBeforeOperatorBonusUsd() string {
	if x != nil {
		return x.BeforeOperatorBonusUsd
	}
	return ""
}

func (x *BalanceUpdateEvent) GetBeforeOperatorBonusReportingCurrency() string {
	if x != nil {
		return x.BeforeOperatorBonusReportingCurrency
	}
	return ""
}

func (x *BalanceUpdateEvent) GetBeforeProviderBonus() string {
	if x != nil {
		return x.BeforeProviderBonus
	}
	return ""
}

func (x *BalanceUpdateEvent) GetBeforeProviderBonusUsd() string {
	if x != nil {
		return x.BeforeProviderBonusUsd
	}
	return ""
}

func (x *BalanceUpdateEvent) GetBeforeProviderBonusReportingCurrency() string {
	if x != nil {
		return x.BeforeProviderBonusReportingCurrency
	}
	return ""
}

func (x *BalanceUpdateEvent) GetAfterCash() string {
	if x != nil {
		return x.AfterCash
	}
	return ""
}

func (x *BalanceUpdateEvent) GetAfterCashUsd() string {
	if x != nil {
		return x.AfterCashUsd
	}
	return ""
}

func (x *BalanceUpdateEvent) GetAfterCashReportingCurrency() string {
	if x != nil {
		return x.AfterCashReportingCurrency
	}
	return ""
}

func (x *BalanceUpdateEvent) GetAfterOperatorBonus() string {
	if x != nil {
		return x.AfterOperatorBonus
	}
	return ""
}

func (x *BalanceUpdateEvent) GetAfterOperatorBonusUsd() string {
	if x != nil {
		return x.AfterOperatorBonusUsd
	}
	return ""
}

func (x *BalanceUpdateEvent) GetAfterOperatorBonusReportingCurrency() string {
	if x != nil {
		return x.AfterOperatorBonusReportingCurrency
	}
	return ""
}

func (x *BalanceUpdateEvent) GetAfterProviderBonus() string {
	if x != nil {
		return x.AfterProviderBonus
	}
	return ""
}

func (x *BalanceUpdateEvent) GetAfterProviderBonusUsd() string {
	if x != nil {
		return x.AfterProviderBonusUsd
	}
	return ""
}

func (x *BalanceUpdateEvent) GetAfterProviderBonusReportingCurrency() string {
	if x != nil {
		return x.AfterProviderBonusReportingCurrency
	}
	return ""
}

func (x *BalanceUpdateEvent) GetCashAmount() string {
	if x != nil {
		return x.CashAmount
	}
	return ""
}

func (x *BalanceUpdateEvent) GetCashAmountUsd() string {
	if x != nil {
		return x.CashAmountUsd
	}
	return ""
}

func (x *BalanceUpdateEvent) GetCashAmountReportingCurrency() string {
	if x != nil {
		return x.CashAmountReportingCurrency
	}
	return ""
}

func (x *BalanceUpdateEvent) GetOperatorBonusAmount() string {
	if x != nil {
		return x.OperatorBonusAmount
	}
	return ""
}

func (x *BalanceUpdateEvent) GetOperatorBonusAmountUsd() string {
	if x != nil {
		return x.OperatorBonusAmountUsd
	}
	return ""
}

func (x *BalanceUpdateEvent) GetOperatorBonusAmountReportingCurrency() string {
	if x != nil {
		return x.OperatorBonusAmountReportingCurrency
	}
	return ""
}

func (x *BalanceUpdateEvent) GetProviderBonusAmount() string {
	if x != nil {
		return x.ProviderBonusAmount
	}
	return ""
}

func (x *BalanceUpdateEvent) GetProviderBonusAmountUsd() string {
	if x != nil {
		return x.ProviderBonusAmountUsd
	}
	return ""
}

func (x *BalanceUpdateEvent) GetProviderBonusAmountReportingCurrency() string {
	if x != nil {
		return x.ProviderBonusAmountReportingCurrency
	}
	return ""
}

type OperatorBalanceUpdateEvent struct {
	state                          protoimpl.MessageState  `protogen:"open.v1"`
	TransactionId                  int64                   `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	TransactionType                string                  `protobuf:"bytes,2,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	OperatorContext                *common.OperatorContext `protobuf:"bytes,3,opt,name=operator_context,json=operatorContext,proto3" json:"operator_context,omitempty"`
	SettlementCurrency             string                  `protobuf:"bytes,4,opt,name=settlement_currency,json=settlementCurrency,proto3" json:"settlement_currency,omitempty"`
	ReportingCurrency              string                  `protobuf:"bytes,5,opt,name=reporting_currency,json=reportingCurrency,proto3" json:"reporting_currency,omitempty"`
	BeforeBalance                  string                  `protobuf:"bytes,6,opt,name=before_balance,json=beforeBalance,proto3" json:"before_balance,omitempty"`
	BeforeBalanceUsd               string                  `protobuf:"bytes,7,opt,name=before_balance_usd,json=beforeBalanceUsd,proto3" json:"before_balance_usd,omitempty"`
	BeforeBalanceReportingCurrency string                  `protobuf:"bytes,8,opt,name=before_balance_reporting_currency,json=beforeBalanceReportingCurrency,proto3" json:"before_balance_reporting_currency,omitempty"`
	AfterBalance                   string                  `protobuf:"bytes,9,opt,name=after_balance,json=afterBalance,proto3" json:"after_balance,omitempty"`
	AfterBalanceUsd                string                  `protobuf:"bytes,10,opt,name=after_balance_usd,json=afterBalanceUsd,proto3" json:"after_balance_usd,omitempty"`
	AfterBalanceReportingCurrency  string                  `protobuf:"bytes,11,opt,name=after_balance_reporting_currency,json=afterBalanceReportingCurrency,proto3" json:"after_balance_reporting_currency,omitempty"`
	Amount                         string                  `protobuf:"bytes,12,opt,name=amount,proto3" json:"amount,omitempty"`
	AmountUsd                      string                  `protobuf:"bytes,13,opt,name=amount_usd,json=amountUsd,proto3" json:"amount_usd,omitempty"`
	AmountReportingCurrency        string                  `protobuf:"bytes,14,opt,name=amount_reporting_currency,json=amountReportingCurrency,proto3" json:"amount_reporting_currency,omitempty"`
	CreatedAt                      int64                   `protobuf:"varint,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *OperatorBalanceUpdateEvent) Reset() {
	*x = OperatorBalanceUpdateEvent{}
	mi := &file_wallet_service_v1_wallet_event_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorBalanceUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorBalanceUpdateEvent) ProtoMessage() {}

func (x *OperatorBalanceUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_service_v1_wallet_event_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorBalanceUpdateEvent.ProtoReflect.Descriptor instead.
func (*OperatorBalanceUpdateEvent) Descriptor() ([]byte, []int) {
	return file_wallet_service_v1_wallet_event_proto_rawDescGZIP(), []int{3}
}

func (x *OperatorBalanceUpdateEvent) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *OperatorBalanceUpdateEvent) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *OperatorBalanceUpdateEvent) GetOperatorContext() *common.OperatorContext {
	if x != nil {
		return x.OperatorContext
	}
	return nil
}

func (x *OperatorBalanceUpdateEvent) GetSettlementCurrency() string {
	if x != nil {
		return x.SettlementCurrency
	}
	return ""
}

func (x *OperatorBalanceUpdateEvent) GetReportingCurrency() string {
	if x != nil {
		return x.ReportingCurrency
	}
	return ""
}

func (x *OperatorBalanceUpdateEvent) GetBeforeBalance() string {
	if x != nil {
		return x.BeforeBalance
	}
	return ""
}

func (x *OperatorBalanceUpdateEvent) GetBeforeBalanceUsd() string {
	if x != nil {
		return x.BeforeBalanceUsd
	}
	return ""
}

func (x *OperatorBalanceUpdateEvent) GetBeforeBalanceReportingCurrency() string {
	if x != nil {
		return x.BeforeBalanceReportingCurrency
	}
	return ""
}

func (x *OperatorBalanceUpdateEvent) GetAfterBalance() string {
	if x != nil {
		return x.AfterBalance
	}
	return ""
}

func (x *OperatorBalanceUpdateEvent) GetAfterBalanceUsd() string {
	if x != nil {
		return x.AfterBalanceUsd
	}
	return ""
}

func (x *OperatorBalanceUpdateEvent) GetAfterBalanceReportingCurrency() string {
	if x != nil {
		return x.AfterBalanceReportingCurrency
	}
	return ""
}

func (x *OperatorBalanceUpdateEvent) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *OperatorBalanceUpdateEvent) GetAmountUsd() string {
	if x != nil {
		return x.AmountUsd
	}
	return ""
}

func (x *OperatorBalanceUpdateEvent) GetAmountReportingCurrency() string {
	if x != nil {
		return x.AmountReportingCurrency
	}
	return ""
}

func (x *OperatorBalanceUpdateEvent) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type UpdateResponsibleGamblingConfigEvent struct {
	state                    protoimpl.MessageState                       `protogen:"open.v1"`
	TargetUserId             int64                                        `protobuf:"varint,1,opt,name=target_user_id,json=targetUserId,proto3" json:"target_user_id,omitempty"`
	InitiatorUserId          int64                                        `protobuf:"varint,2,opt,name=initiator_user_id,json=initiatorUserId,proto3" json:"initiator_user_id,omitempty"`
	InitiatorOperatorContext *common.OperatorContext                      `protobuf:"bytes,3,opt,name=initiator_operator_context,json=initiatorOperatorContext,proto3" json:"initiator_operator_context,omitempty"`
	Action                   string                                       `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"` // set, delete
	Currency                 string                                       `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	BeforeConfig             *UpdateResponsibleGamblingConfigEvent_Config `protobuf:"bytes,6,opt,name=before_config,json=beforeConfig,proto3" json:"before_config,omitempty"`
	AfterConfig              *UpdateResponsibleGamblingConfigEvent_Config `protobuf:"bytes,7,opt,name=after_config,json=afterConfig,proto3" json:"after_config,omitempty"`
	UpdatedAt                int64                                        `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *UpdateResponsibleGamblingConfigEvent) Reset() {
	*x = UpdateResponsibleGamblingConfigEvent{}
	mi := &file_wallet_service_v1_wallet_event_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateResponsibleGamblingConfigEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponsibleGamblingConfigEvent) ProtoMessage() {}

func (x *UpdateResponsibleGamblingConfigEvent) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_service_v1_wallet_event_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponsibleGamblingConfigEvent.ProtoReflect.Descriptor instead.
func (*UpdateResponsibleGamblingConfigEvent) Descriptor() ([]byte, []int) {
	return file_wallet_service_v1_wallet_event_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateResponsibleGamblingConfigEvent) GetTargetUserId() int64 {
	if x != nil {
		return x.TargetUserId
	}
	return 0
}

func (x *UpdateResponsibleGamblingConfigEvent) GetInitiatorUserId() int64 {
	if x != nil {
		return x.InitiatorUserId
	}
	return 0
}

func (x *UpdateResponsibleGamblingConfigEvent) GetInitiatorOperatorContext() *common.OperatorContext {
	if x != nil {
		return x.InitiatorOperatorContext
	}
	return nil
}

func (x *UpdateResponsibleGamblingConfigEvent) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *UpdateResponsibleGamblingConfigEvent) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *UpdateResponsibleGamblingConfigEvent) GetBeforeConfig() *UpdateResponsibleGamblingConfigEvent_Config {
	if x != nil {
		return x.BeforeConfig
	}
	return nil
}

func (x *UpdateResponsibleGamblingConfigEvent) GetAfterConfig() *UpdateResponsibleGamblingConfigEvent_Config {
	if x != nil {
		return x.AfterConfig
	}
	return nil
}

func (x *UpdateResponsibleGamblingConfigEvent) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type UpdateResponsibleGamblingConfigEvent_Config struct {
	state                              protoimpl.MessageState `protogen:"open.v1"`
	DepositLimit                       string                 `protobuf:"bytes,1,opt,name=deposit_limit,json=depositLimit,proto3" json:"deposit_limit,omitempty"`
	WithdrawalLimit                    string                 `protobuf:"bytes,2,opt,name=withdrawal_limit,json=withdrawalLimit,proto3" json:"withdrawal_limit,omitempty"`
	DailyPlayLimit                     string                 `protobuf:"bytes,3,opt,name=daily_play_limit,json=dailyPlayLimit,proto3" json:"daily_play_limit,omitempty"`
	WeeklyPlayLimit                    string                 `protobuf:"bytes,4,opt,name=weekly_play_limit,json=weeklyPlayLimit,proto3" json:"weekly_play_limit,omitempty"`
	MonthlyPlayLimit                   string                 `protobuf:"bytes,5,opt,name=monthly_play_limit,json=monthlyPlayLimit,proto3" json:"monthly_play_limit,omitempty"`
	DailyLossLimit                     string                 `protobuf:"bytes,6,opt,name=daily_loss_limit,json=dailyLossLimit,proto3" json:"daily_loss_limit,omitempty"`
	WeeklyLossLimit                    string                 `protobuf:"bytes,7,opt,name=weekly_loss_limit,json=weeklyLossLimit,proto3" json:"weekly_loss_limit,omitempty"`
	MonthlyLossLimit                   string                 `protobuf:"bytes,8,opt,name=monthly_loss_limit,json=monthlyLossLimit,proto3" json:"monthly_loss_limit,omitempty"`
	DepositLimitDeleteScheduleTime     int64                  `protobuf:"varint,9,opt,name=deposit_limit_delete_schedule_time,json=depositLimitDeleteScheduleTime,proto3" json:"deposit_limit_delete_schedule_time,omitempty"`
	WithdrawalLimitDeleteScheduleTime  int64                  `protobuf:"varint,10,opt,name=withdrawal_limit_delete_schedule_time,json=withdrawalLimitDeleteScheduleTime,proto3" json:"withdrawal_limit_delete_schedule_time,omitempty"`
	DailyPlayLimitDeleteScheduleTime   int64                  `protobuf:"varint,11,opt,name=daily_play_limit_delete_schedule_time,json=dailyPlayLimitDeleteScheduleTime,proto3" json:"daily_play_limit_delete_schedule_time,omitempty"`
	WeeklyPlayLimitDeleteScheduleTime  int64                  `protobuf:"varint,12,opt,name=weekly_play_limit_delete_schedule_time,json=weeklyPlayLimitDeleteScheduleTime,proto3" json:"weekly_play_limit_delete_schedule_time,omitempty"`
	MonthlyPlayLimitDeleteScheduleTime int64                  `protobuf:"varint,13,opt,name=monthly_play_limit_delete_schedule_time,json=monthlyPlayLimitDeleteScheduleTime,proto3" json:"monthly_play_limit_delete_schedule_time,omitempty"`
	DailyLossLimitDeleteScheduleTime   int64                  `protobuf:"varint,14,opt,name=daily_loss_limit_delete_schedule_time,json=dailyLossLimitDeleteScheduleTime,proto3" json:"daily_loss_limit_delete_schedule_time,omitempty"`
	WeeklyLossLimitDeleteScheduleTime  int64                  `protobuf:"varint,15,opt,name=weekly_loss_limit_delete_schedule_time,json=weeklyLossLimitDeleteScheduleTime,proto3" json:"weekly_loss_limit_delete_schedule_time,omitempty"`
	MonthlyLossLimitDeleteScheduleTime int64                  `protobuf:"varint,16,opt,name=monthly_loss_limit_delete_schedule_time,json=monthlyLossLimitDeleteScheduleTime,proto3" json:"monthly_loss_limit_delete_schedule_time,omitempty"`
	unknownFields                      protoimpl.UnknownFields
	sizeCache                          protoimpl.SizeCache
}

func (x *UpdateResponsibleGamblingConfigEvent_Config) Reset() {
	*x = UpdateResponsibleGamblingConfigEvent_Config{}
	mi := &file_wallet_service_v1_wallet_event_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateResponsibleGamblingConfigEvent_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponsibleGamblingConfigEvent_Config) ProtoMessage() {}

func (x *UpdateResponsibleGamblingConfigEvent_Config) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_service_v1_wallet_event_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponsibleGamblingConfigEvent_Config.ProtoReflect.Descriptor instead.
func (*UpdateResponsibleGamblingConfigEvent_Config) Descriptor() ([]byte, []int) {
	return file_wallet_service_v1_wallet_event_proto_rawDescGZIP(), []int{4, 0}
}

func (x *UpdateResponsibleGamblingConfigEvent_Config) GetDepositLimit() string {
	if x != nil {
		return x.DepositLimit
	}
	return ""
}

func (x *UpdateResponsibleGamblingConfigEvent_Config) GetWithdrawalLimit() string {
	if x != nil {
		return x.WithdrawalLimit
	}
	return ""
}

func (x *UpdateResponsibleGamblingConfigEvent_Config) GetDailyPlayLimit() string {
	if x != nil {
		return x.DailyPlayLimit
	}
	return ""
}

func (x *UpdateResponsibleGamblingConfigEvent_Config) GetWeeklyPlayLimit() string {
	if x != nil {
		return x.WeeklyPlayLimit
	}
	return ""
}

func (x *UpdateResponsibleGamblingConfigEvent_Config) GetMonthlyPlayLimit() string {
	if x != nil {
		return x.MonthlyPlayLimit
	}
	return ""
}

func (x *UpdateResponsibleGamblingConfigEvent_Config) GetDailyLossLimit() string {
	if x != nil {
		return x.DailyLossLimit
	}
	return ""
}

func (x *UpdateResponsibleGamblingConfigEvent_Config) GetWeeklyLossLimit() string {
	if x != nil {
		return x.WeeklyLossLimit
	}
	return ""
}

func (x *UpdateResponsibleGamblingConfigEvent_Config) GetMonthlyLossLimit() string {
	if x != nil {
		return x.MonthlyLossLimit
	}
	return ""
}

func (x *UpdateResponsibleGamblingConfigEvent_Config) GetDepositLimitDeleteScheduleTime() int64 {
	if x != nil {
		return x.DepositLimitDeleteScheduleTime
	}
	return 0
}

func (x *UpdateResponsibleGamblingConfigEvent_Config) GetWithdrawalLimitDeleteScheduleTime() int64 {
	if x != nil {
		return x.WithdrawalLimitDeleteScheduleTime
	}
	return 0
}

func (x *UpdateResponsibleGamblingConfigEvent_Config) GetDailyPlayLimitDeleteScheduleTime() int64 {
	if x != nil {
		return x.DailyPlayLimitDeleteScheduleTime
	}
	return 0
}

func (x *UpdateResponsibleGamblingConfigEvent_Config) GetWeeklyPlayLimitDeleteScheduleTime() int64 {
	if x != nil {
		return x.WeeklyPlayLimitDeleteScheduleTime
	}
	return 0
}

func (x *UpdateResponsibleGamblingConfigEvent_Config) GetMonthlyPlayLimitDeleteScheduleTime() int64 {
	if x != nil {
		return x.MonthlyPlayLimitDeleteScheduleTime
	}
	return 0
}

func (x *UpdateResponsibleGamblingConfigEvent_Config) GetDailyLossLimitDeleteScheduleTime() int64 {
	if x != nil {
		return x.DailyLossLimitDeleteScheduleTime
	}
	return 0
}

func (x *UpdateResponsibleGamblingConfigEvent_Config) GetWeeklyLossLimitDeleteScheduleTime() int64 {
	if x != nil {
		return x.WeeklyLossLimitDeleteScheduleTime
	}
	return 0
}

func (x *UpdateResponsibleGamblingConfigEvent_Config) GetMonthlyLossLimitDeleteScheduleTime() int64 {
	if x != nil {
		return x.MonthlyLossLimitDeleteScheduleTime
	}
	return 0
}

var File_wallet_service_v1_wallet_event_proto protoreflect.FileDescriptor

const file_wallet_service_v1_wallet_event_proto_rawDesc = "" +
	"\n" +
	"$wallet/service/v1/wallet_event.proto\x12\x15api.wallet.service.v1\x1a\x13common/common.proto\"u\n" +
	"\fEventRequest\x12'\n" +
	"\x0fsubscription_id\x18\x01 \x01(\tR\x0esubscriptionId\x12\x1d\n" +
	"\n" +
	"event_data\x18\x02 \x01(\fR\teventData\x12\x1d\n" +
	"\n" +
	"message_id\x18\x03 \x01(\tR\tmessageId\"\x0f\n" +
	"\rEventResponse\"\xa0\x12\n" +
	"\x12BalanceUpdateEvent\x12%\n" +
	"\x0etransaction_id\x18\x01 \x01(\x03R\rtransactionId\x12)\n" +
	"\x10transaction_type\x18\x02 \x01(\tR\x0ftransactionType\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\x03R\x06userId\x12F\n" +
	"\x10operator_context\x18\x04 \x01(\v2\x1b.api.common.OperatorContextR\x0foperatorContext\x12\x1a\n" +
	"\bcurrency\x18\x05 \x01(\tR\bcurrency\x12-\n" +
	"\x12reporting_currency\x18\x06 \x01(\tR\x11reportingCurrency\x12%\n" +
	"\x0ebefore_balance\x18\a \x01(\tR\rbeforeBalance\x12,\n" +
	"\x12before_balance_usd\x18\b \x01(\tR\x10beforeBalanceUsd\x12I\n" +
	"!before_balance_reporting_currency\x18\t \x01(\tR\x1ebeforeBalanceReportingCurrency\x12#\n" +
	"\rafter_balance\x18\n" +
	" \x01(\tR\fafterBalance\x12*\n" +
	"\x11after_balance_usd\x18\v \x01(\tR\x0fafterBalanceUsd\x12G\n" +
	" after_balance_reporting_currency\x18\f \x01(\tR\x1dafterBalanceReportingCurrency\x12\x16\n" +
	"\x06amount\x18\r \x01(\tR\x06amount\x12\x1d\n" +
	"\n" +
	"amount_usd\x18\x0e \x01(\tR\tamountUsd\x12:\n" +
	"\x19amount_reporting_currency\x18\x0f \x01(\tR\x17amountReportingCurrency\x12\x1d\n" +
	"\n" +
	"created_at\x18\x10 \x01(\x03R\tcreatedAt\x12\x1f\n" +
	"\vbefore_cash\x18\x11 \x01(\tR\n" +
	"beforeCash\x12&\n" +
	"\x0fbefore_cash_usd\x18\x12 \x01(\tR\rbeforeCashUsd\x12C\n" +
	"\x1ebefore_cash_reporting_currency\x18\x13 \x01(\tR\x1bbeforeCashReportingCurrency\x122\n" +
	"\x15before_operator_bonus\x18\x14 \x01(\tR\x13beforeOperatorBonus\x129\n" +
	"\x19before_operator_bonus_usd\x18\x15 \x01(\tR\x16beforeOperatorBonusUsd\x12V\n" +
	"(before_operator_bonus_reporting_currency\x18\x16 \x01(\tR$beforeOperatorBonusReportingCurrency\x122\n" +
	"\x15before_provider_bonus\x18\x17 \x01(\tR\x13beforeProviderBonus\x129\n" +
	"\x19before_provider_bonus_usd\x18\x18 \x01(\tR\x16beforeProviderBonusUsd\x12V\n" +
	"(before_provider_bonus_reporting_currency\x18\x19 \x01(\tR$beforeProviderBonusReportingCurrency\x12\x1d\n" +
	"\n" +
	"after_cash\x18\x1a \x01(\tR\tafterCash\x12$\n" +
	"\x0eafter_cash_usd\x18\x1b \x01(\tR\fafterCashUsd\x12A\n" +
	"\x1dafter_cash_reporting_currency\x18\x1c \x01(\tR\x1aafterCashReportingCurrency\x120\n" +
	"\x14after_operator_bonus\x18\x1d \x01(\tR\x12afterOperatorBonus\x127\n" +
	"\x18after_operator_bonus_usd\x18\x1e \x01(\tR\x15afterOperatorBonusUsd\x12T\n" +
	"'after_operator_bonus_reporting_currency\x18\x1f \x01(\tR#afterOperatorBonusReportingCurrency\x120\n" +
	"\x14after_provider_bonus\x18  \x01(\tR\x12afterProviderBonus\x127\n" +
	"\x18after_provider_bonus_usd\x18! \x01(\tR\x15afterProviderBonusUsd\x12T\n" +
	"'after_provider_bonus_reporting_currency\x18\" \x01(\tR#afterProviderBonusReportingCurrency\x12\x1f\n" +
	"\vcash_amount\x18# \x01(\tR\n" +
	"cashAmount\x12&\n" +
	"\x0fcash_amount_usd\x18$ \x01(\tR\rcashAmountUsd\x12C\n" +
	"\x1ecash_amount_reporting_currency\x18% \x01(\tR\x1bcashAmountReportingCurrency\x122\n" +
	"\x15operator_bonus_amount\x18& \x01(\tR\x13operatorBonusAmount\x129\n" +
	"\x19operator_bonus_amount_usd\x18' \x01(\tR\x16operatorBonusAmountUsd\x12V\n" +
	"(operator_bonus_amount_reporting_currency\x18( \x01(\tR$operatorBonusAmountReportingCurrency\x122\n" +
	"\x15provider_bonus_amount\x18) \x01(\tR\x13providerBonusAmount\x129\n" +
	"\x19provider_bonus_amount_usd\x18* \x01(\tR\x16providerBonusAmountUsd\x12V\n" +
	"(provider_bonus_amount_reporting_currency\x18+ \x01(\tR$providerBonusAmountReportingCurrency\"\xe2\x05\n" +
	"\x1aOperatorBalanceUpdateEvent\x12%\n" +
	"\x0etransaction_id\x18\x01 \x01(\x03R\rtransactionId\x12)\n" +
	"\x10transaction_type\x18\x02 \x01(\tR\x0ftransactionType\x12F\n" +
	"\x10operator_context\x18\x03 \x01(\v2\x1b.api.common.OperatorContextR\x0foperatorContext\x12/\n" +
	"\x13settlement_currency\x18\x04 \x01(\tR\x12settlementCurrency\x12-\n" +
	"\x12reporting_currency\x18\x05 \x01(\tR\x11reportingCurrency\x12%\n" +
	"\x0ebefore_balance\x18\x06 \x01(\tR\rbeforeBalance\x12,\n" +
	"\x12before_balance_usd\x18\a \x01(\tR\x10beforeBalanceUsd\x12I\n" +
	"!before_balance_reporting_currency\x18\b \x01(\tR\x1ebeforeBalanceReportingCurrency\x12#\n" +
	"\rafter_balance\x18\t \x01(\tR\fafterBalance\x12*\n" +
	"\x11after_balance_usd\x18\n" +
	" \x01(\tR\x0fafterBalanceUsd\x12G\n" +
	" after_balance_reporting_currency\x18\v \x01(\tR\x1dafterBalanceReportingCurrency\x12\x16\n" +
	"\x06amount\x18\f \x01(\tR\x06amount\x12\x1d\n" +
	"\n" +
	"amount_usd\x18\r \x01(\tR\tamountUsd\x12:\n" +
	"\x19amount_reporting_currency\x18\x0e \x01(\tR\x17amountReportingCurrency\x12\x1d\n" +
	"\n" +
	"created_at\x18\x0f \x01(\x03R\tcreatedAt\"\xe9\v\n" +
	"$UpdateResponsibleGamblingConfigEvent\x12$\n" +
	"\x0etarget_user_id\x18\x01 \x01(\x03R\ftargetUserId\x12*\n" +
	"\x11initiator_user_id\x18\x02 \x01(\x03R\x0finitiatorUserId\x12Y\n" +
	"\x1ainitiator_operator_context\x18\x03 \x01(\v2\x1b.api.common.OperatorContextR\x18initiatorOperatorContext\x12\x16\n" +
	"\x06action\x18\x04 \x01(\tR\x06action\x12\x1a\n" +
	"\bcurrency\x18\x05 \x01(\tR\bcurrency\x12g\n" +
	"\rbefore_config\x18\x06 \x01(\v2B.api.wallet.service.v1.UpdateResponsibleGamblingConfigEvent.ConfigR\fbeforeConfig\x12e\n" +
	"\fafter_config\x18\a \x01(\v2B.api.wallet.service.v1.UpdateResponsibleGamblingConfigEvent.ConfigR\vafterConfig\x12\x1d\n" +
	"\n" +
	"updated_at\x18\b \x01(\x03R\tupdatedAt\x1a\xf0\a\n" +
	"\x06Config\x12#\n" +
	"\rdeposit_limit\x18\x01 \x01(\tR\fdepositLimit\x12)\n" +
	"\x10withdrawal_limit\x18\x02 \x01(\tR\x0fwithdrawalLimit\x12(\n" +
	"\x10daily_play_limit\x18\x03 \x01(\tR\x0edailyPlayLimit\x12*\n" +
	"\x11weekly_play_limit\x18\x04 \x01(\tR\x0fweeklyPlayLimit\x12,\n" +
	"\x12monthly_play_limit\x18\x05 \x01(\tR\x10monthlyPlayLimit\x12(\n" +
	"\x10daily_loss_limit\x18\x06 \x01(\tR\x0edailyLossLimit\x12*\n" +
	"\x11weekly_loss_limit\x18\a \x01(\tR\x0fweeklyLossLimit\x12,\n" +
	"\x12monthly_loss_limit\x18\b \x01(\tR\x10monthlyLossLimit\x12J\n" +
	"\"deposit_limit_delete_schedule_time\x18\t \x01(\x03R\x1edepositLimitDeleteScheduleTime\x12P\n" +
	"%withdrawal_limit_delete_schedule_time\x18\n" +
	" \x01(\x03R!withdrawalLimitDeleteScheduleTime\x12O\n" +
	"%daily_play_limit_delete_schedule_time\x18\v \x01(\x03R dailyPlayLimitDeleteScheduleTime\x12Q\n" +
	"&weekly_play_limit_delete_schedule_time\x18\f \x01(\x03R!weeklyPlayLimitDeleteScheduleTime\x12S\n" +
	"'monthly_play_limit_delete_schedule_time\x18\r \x01(\x03R\"monthlyPlayLimitDeleteScheduleTime\x12O\n" +
	"%daily_loss_limit_delete_schedule_time\x18\x0e \x01(\x03R dailyLossLimitDeleteScheduleTime\x12Q\n" +
	"&weekly_loss_limit_delete_schedule_time\x18\x0f \x01(\x03R!weeklyLossLimitDeleteScheduleTime\x12S\n" +
	"'monthly_loss_limit_delete_schedule_time\x18\x10 \x01(\x03R\"monthlyLossLimitDeleteScheduleTime2c\n" +
	"\vWalletEvent\x12T\n" +
	"\x05Event\x12#.api.wallet.service.v1.EventRequest\x1a$.api.wallet.service.v1.EventResponse\"\x00BS\n" +
	"\x15api.wallet.service.v1P\x01Z8github.com/infigaming-com/meepo-api/wallet/service/v1;v1b\x06proto3"

var (
	file_wallet_service_v1_wallet_event_proto_rawDescOnce sync.Once
	file_wallet_service_v1_wallet_event_proto_rawDescData []byte
)

func file_wallet_service_v1_wallet_event_proto_rawDescGZIP() []byte {
	file_wallet_service_v1_wallet_event_proto_rawDescOnce.Do(func() {
		file_wallet_service_v1_wallet_event_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_wallet_service_v1_wallet_event_proto_rawDesc), len(file_wallet_service_v1_wallet_event_proto_rawDesc)))
	})
	return file_wallet_service_v1_wallet_event_proto_rawDescData
}

var file_wallet_service_v1_wallet_event_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_wallet_service_v1_wallet_event_proto_goTypes = []any{
	(*EventRequest)(nil),                                // 0: api.wallet.service.v1.EventRequest
	(*EventResponse)(nil),                               // 1: api.wallet.service.v1.EventResponse
	(*BalanceUpdateEvent)(nil),                          // 2: api.wallet.service.v1.BalanceUpdateEvent
	(*OperatorBalanceUpdateEvent)(nil),                  // 3: api.wallet.service.v1.OperatorBalanceUpdateEvent
	(*UpdateResponsibleGamblingConfigEvent)(nil),        // 4: api.wallet.service.v1.UpdateResponsibleGamblingConfigEvent
	(*UpdateResponsibleGamblingConfigEvent_Config)(nil), // 5: api.wallet.service.v1.UpdateResponsibleGamblingConfigEvent.Config
	(*common.OperatorContext)(nil),                      // 6: api.common.OperatorContext
}
var file_wallet_service_v1_wallet_event_proto_depIdxs = []int32{
	6, // 0: api.wallet.service.v1.BalanceUpdateEvent.operator_context:type_name -> api.common.OperatorContext
	6, // 1: api.wallet.service.v1.OperatorBalanceUpdateEvent.operator_context:type_name -> api.common.OperatorContext
	6, // 2: api.wallet.service.v1.UpdateResponsibleGamblingConfigEvent.initiator_operator_context:type_name -> api.common.OperatorContext
	5, // 3: api.wallet.service.v1.UpdateResponsibleGamblingConfigEvent.before_config:type_name -> api.wallet.service.v1.UpdateResponsibleGamblingConfigEvent.Config
	5, // 4: api.wallet.service.v1.UpdateResponsibleGamblingConfigEvent.after_config:type_name -> api.wallet.service.v1.UpdateResponsibleGamblingConfigEvent.Config
	0, // 5: api.wallet.service.v1.WalletEvent.Event:input_type -> api.wallet.service.v1.EventRequest
	1, // 6: api.wallet.service.v1.WalletEvent.Event:output_type -> api.wallet.service.v1.EventResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_wallet_service_v1_wallet_event_proto_init() }
func file_wallet_service_v1_wallet_event_proto_init() {
	if File_wallet_service_v1_wallet_event_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wallet_service_v1_wallet_event_proto_rawDesc), len(file_wallet_service_v1_wallet_event_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wallet_service_v1_wallet_event_proto_goTypes,
		DependencyIndexes: file_wallet_service_v1_wallet_event_proto_depIdxs,
		MessageInfos:      file_wallet_service_v1_wallet_event_proto_msgTypes,
	}.Build()
	File_wallet_service_v1_wallet_event_proto = out.File
	file_wallet_service_v1_wallet_event_proto_goTypes = nil
	file_wallet_service_v1_wallet_event_proto_depIdxs = nil
}
