// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: operator/service/v1/operator.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Operator_AddOperator_FullMethodName              = "/api.operator.service.v1.Operator/AddOperator"
	Operator_UpdateOperator_FullMethodName           = "/api.operator.service.v1.Operator/UpdateOperator"
	Operator_GetOperator_FullMethodName              = "/api.operator.service.v1.Operator/GetOperator"
	Operator_GetOperatorsByIds_FullMethodName        = "/api.operator.service.v1.Operator/GetOperatorsByIds"
	Operator_AddOrUpdateCurrency_FullMethodName      = "/api.operator.service.v1.Operator/AddOrUpdateCurrency"
	Operator_UpdateOperatorCurrency_FullMethodName   = "/api.operator.service.v1.Operator/UpdateOperatorCurrency"
	Operator_GetOperatorCurrencies_FullMethodName    = "/api.operator.service.v1.Operator/GetOperatorCurrencies"
	Operator_AddOriginOperatorId_FullMethodName      = "/api.operator.service.v1.Operator/AddOriginOperatorId"
	Operator_GetOperatorIdByOrigin_FullMethodName    = "/api.operator.service.v1.Operator/GetOperatorIdByOrigin"
	Operator_DeleteOriginOperatorId_FullMethodName   = "/api.operator.service.v1.Operator/DeleteOriginOperatorId"
	Operator_GetParentOperatorIds_FullMethodName     = "/api.operator.service.v1.Operator/GetParentOperatorIds"
	Operator_ListOperators_FullMethodName            = "/api.operator.service.v1.Operator/ListOperators"
	Operator_ListInvoices_FullMethodName             = "/api.operator.service.v1.Operator/ListInvoices"
	Operator_GetInvoiceDetail_FullMethodName         = "/api.operator.service.v1.Operator/GetInvoiceDetail"
	Operator_ListOperatorRevenueShare_FullMethodName = "/api.operator.service.v1.Operator/ListOperatorRevenueShare"
	Operator_ListThirdPartyFees_FullMethodName       = "/api.operator.service.v1.Operator/ListThirdPartyFees"
	Operator_ListAdjustments_FullMethodName          = "/api.operator.service.v1.Operator/ListAdjustments"
	Operator_ListMonthlyRevenueShare_FullMethodName  = "/api.operator.service.v1.Operator/ListMonthlyRevenueShare"
	Operator_AddAdjustment_FullMethodName            = "/api.operator.service.v1.Operator/AddAdjustment"
	Operator_ListAdjustmentConfigs_FullMethodName    = "/api.operator.service.v1.Operator/ListAdjustmentConfigs"
	Operator_CreateAdjustmentConfig_FullMethodName   = "/api.operator.service.v1.Operator/CreateAdjustmentConfig"
	Operator_UpdateAdjustmentConfig_FullMethodName   = "/api.operator.service.v1.Operator/UpdateAdjustmentConfig"
	Operator_DeleteAdjustmentConfig_FullMethodName   = "/api.operator.service.v1.Operator/DeleteAdjustmentConfig"
	Operator_SendInvoices_FullMethodName             = "/api.operator.service.v1.Operator/SendInvoices"
)

// OperatorClient is the client API for Operator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// User service provides authentication and user management functionality.
type OperatorClient interface {
	AddOperator(ctx context.Context, in *AddOperatorRequest, opts ...grpc.CallOption) (*AddOperatorResponse, error)
	UpdateOperator(ctx context.Context, in *UpdateOperatorRequest, opts ...grpc.CallOption) (*UpdateOperatorResponse, error)
	GetOperator(ctx context.Context, in *GetOperatorRequest, opts ...grpc.CallOption) (*GetOperatorResponse, error)
	GetOperatorsByIds(ctx context.Context, in *GetOperatorsByIdsRequest, opts ...grpc.CallOption) (*GetOperatorsByIdsResponse, error)
	AddOrUpdateCurrency(ctx context.Context, in *AddOrUpdateCurrencyRequest, opts ...grpc.CallOption) (*AddOrUpdateCurrencyResponse, error)
	UpdateOperatorCurrency(ctx context.Context, in *UpdateOperatorCurrencyRequest, opts ...grpc.CallOption) (*UpdateOperatorCurrencyResponse, error)
	GetOperatorCurrencies(ctx context.Context, in *GetOperatorCurrenciesRequest, opts ...grpc.CallOption) (*GetOperatorCurrenciesResponse, error)
	AddOriginOperatorId(ctx context.Context, in *AddOriginOperatorIdRequest, opts ...grpc.CallOption) (*AddOriginOperatorIdResponse, error)
	GetOperatorIdByOrigin(ctx context.Context, in *GetOperatorIdByOriginRequest, opts ...grpc.CallOption) (*GetOperatorIdByOriginResponse, error)
	DeleteOriginOperatorId(ctx context.Context, in *DeleteOriginOperatorIdRequest, opts ...grpc.CallOption) (*DeleteOriginOperatorIdResponse, error)
	// GetParentOperatorIds returns parent operator IDs for the given operator ID.
	// The response contains only the list of parent operator IDs, doesn't include the requested operator_id.
	GetParentOperatorIds(ctx context.Context, in *GetParentOperatorIdsRequest, opts ...grpc.CallOption) (*GetParentOperatorIdsResponse, error)
	// ListOperators returns a list of operators based on the enabled status or all operators if the enabled status is not provided.
	ListOperators(ctx context.Context, in *ListOperatorsRequest, opts ...grpc.CallOption) (*ListOperatorsResponse, error)
	ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error)
	GetInvoiceDetail(ctx context.Context, in *GetInvoiceDetailRequest, opts ...grpc.CallOption) (*GetInvoiceDetailResponse, error)
	ListOperatorRevenueShare(ctx context.Context, in *ListOperatorRevenueShareRequest, opts ...grpc.CallOption) (*ListOperatorRevenueShareResponse, error)
	ListThirdPartyFees(ctx context.Context, in *ListThirdPartyFeesRequest, opts ...grpc.CallOption) (*ListThirdPartyFeesResponse, error)
	ListAdjustments(ctx context.Context, in *ListAdjustmentsRequest, opts ...grpc.CallOption) (*ListAdjustmentsResponse, error)
	ListMonthlyRevenueShare(ctx context.Context, in *ListMonthlyRevenueShareRequest, opts ...grpc.CallOption) (*ListMonthlyRevenueShareResponse, error)
	AddAdjustment(ctx context.Context, in *AddAdjustmentRequest, opts ...grpc.CallOption) (*AddAdjustmentResponse, error)
	ListAdjustmentConfigs(ctx context.Context, in *ListAdjustmentConfigsRequest, opts ...grpc.CallOption) (*ListAdjustmentConfigsResponse, error)
	CreateAdjustmentConfig(ctx context.Context, in *CreateAdjustmentConfigRequest, opts ...grpc.CallOption) (*CreateAdjustmentConfigResponse, error)
	UpdateAdjustmentConfig(ctx context.Context, in *UpdateAdjustmentConfigRequest, opts ...grpc.CallOption) (*UpdateAdjustmentConfigResponse, error)
	DeleteAdjustmentConfig(ctx context.Context, in *DeleteAdjustmentConfigRequest, opts ...grpc.CallOption) (*DeleteAdjustmentConfigResponse, error)
	SendInvoices(ctx context.Context, in *SendInvoicesRequest, opts ...grpc.CallOption) (*SendInvoicesResponse, error)
}

type operatorClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatorClient(cc grpc.ClientConnInterface) OperatorClient {
	return &operatorClient{cc}
}

func (c *operatorClient) AddOperator(ctx context.Context, in *AddOperatorRequest, opts ...grpc.CallOption) (*AddOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOperatorResponse)
	err := c.cc.Invoke(ctx, Operator_AddOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) UpdateOperator(ctx context.Context, in *UpdateOperatorRequest, opts ...grpc.CallOption) (*UpdateOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOperatorResponse)
	err := c.cc.Invoke(ctx, Operator_UpdateOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) GetOperator(ctx context.Context, in *GetOperatorRequest, opts ...grpc.CallOption) (*GetOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperatorResponse)
	err := c.cc.Invoke(ctx, Operator_GetOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) GetOperatorsByIds(ctx context.Context, in *GetOperatorsByIdsRequest, opts ...grpc.CallOption) (*GetOperatorsByIdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperatorsByIdsResponse)
	err := c.cc.Invoke(ctx, Operator_GetOperatorsByIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) AddOrUpdateCurrency(ctx context.Context, in *AddOrUpdateCurrencyRequest, opts ...grpc.CallOption) (*AddOrUpdateCurrencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOrUpdateCurrencyResponse)
	err := c.cc.Invoke(ctx, Operator_AddOrUpdateCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) UpdateOperatorCurrency(ctx context.Context, in *UpdateOperatorCurrencyRequest, opts ...grpc.CallOption) (*UpdateOperatorCurrencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOperatorCurrencyResponse)
	err := c.cc.Invoke(ctx, Operator_UpdateOperatorCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) GetOperatorCurrencies(ctx context.Context, in *GetOperatorCurrenciesRequest, opts ...grpc.CallOption) (*GetOperatorCurrenciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperatorCurrenciesResponse)
	err := c.cc.Invoke(ctx, Operator_GetOperatorCurrencies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) AddOriginOperatorId(ctx context.Context, in *AddOriginOperatorIdRequest, opts ...grpc.CallOption) (*AddOriginOperatorIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOriginOperatorIdResponse)
	err := c.cc.Invoke(ctx, Operator_AddOriginOperatorId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) GetOperatorIdByOrigin(ctx context.Context, in *GetOperatorIdByOriginRequest, opts ...grpc.CallOption) (*GetOperatorIdByOriginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperatorIdByOriginResponse)
	err := c.cc.Invoke(ctx, Operator_GetOperatorIdByOrigin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) DeleteOriginOperatorId(ctx context.Context, in *DeleteOriginOperatorIdRequest, opts ...grpc.CallOption) (*DeleteOriginOperatorIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOriginOperatorIdResponse)
	err := c.cc.Invoke(ctx, Operator_DeleteOriginOperatorId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) GetParentOperatorIds(ctx context.Context, in *GetParentOperatorIdsRequest, opts ...grpc.CallOption) (*GetParentOperatorIdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetParentOperatorIdsResponse)
	err := c.cc.Invoke(ctx, Operator_GetParentOperatorIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) ListOperators(ctx context.Context, in *ListOperatorsRequest, opts ...grpc.CallOption) (*ListOperatorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOperatorsResponse)
	err := c.cc.Invoke(ctx, Operator_ListOperators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvoicesResponse)
	err := c.cc.Invoke(ctx, Operator_ListInvoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) GetInvoiceDetail(ctx context.Context, in *GetInvoiceDetailRequest, opts ...grpc.CallOption) (*GetInvoiceDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoiceDetailResponse)
	err := c.cc.Invoke(ctx, Operator_GetInvoiceDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) ListOperatorRevenueShare(ctx context.Context, in *ListOperatorRevenueShareRequest, opts ...grpc.CallOption) (*ListOperatorRevenueShareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOperatorRevenueShareResponse)
	err := c.cc.Invoke(ctx, Operator_ListOperatorRevenueShare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) ListThirdPartyFees(ctx context.Context, in *ListThirdPartyFeesRequest, opts ...grpc.CallOption) (*ListThirdPartyFeesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListThirdPartyFeesResponse)
	err := c.cc.Invoke(ctx, Operator_ListThirdPartyFees_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) ListAdjustments(ctx context.Context, in *ListAdjustmentsRequest, opts ...grpc.CallOption) (*ListAdjustmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAdjustmentsResponse)
	err := c.cc.Invoke(ctx, Operator_ListAdjustments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) ListMonthlyRevenueShare(ctx context.Context, in *ListMonthlyRevenueShareRequest, opts ...grpc.CallOption) (*ListMonthlyRevenueShareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMonthlyRevenueShareResponse)
	err := c.cc.Invoke(ctx, Operator_ListMonthlyRevenueShare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) AddAdjustment(ctx context.Context, in *AddAdjustmentRequest, opts ...grpc.CallOption) (*AddAdjustmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAdjustmentResponse)
	err := c.cc.Invoke(ctx, Operator_AddAdjustment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) ListAdjustmentConfigs(ctx context.Context, in *ListAdjustmentConfigsRequest, opts ...grpc.CallOption) (*ListAdjustmentConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAdjustmentConfigsResponse)
	err := c.cc.Invoke(ctx, Operator_ListAdjustmentConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) CreateAdjustmentConfig(ctx context.Context, in *CreateAdjustmentConfigRequest, opts ...grpc.CallOption) (*CreateAdjustmentConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAdjustmentConfigResponse)
	err := c.cc.Invoke(ctx, Operator_CreateAdjustmentConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) UpdateAdjustmentConfig(ctx context.Context, in *UpdateAdjustmentConfigRequest, opts ...grpc.CallOption) (*UpdateAdjustmentConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAdjustmentConfigResponse)
	err := c.cc.Invoke(ctx, Operator_UpdateAdjustmentConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) DeleteAdjustmentConfig(ctx context.Context, in *DeleteAdjustmentConfigRequest, opts ...grpc.CallOption) (*DeleteAdjustmentConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAdjustmentConfigResponse)
	err := c.cc.Invoke(ctx, Operator_DeleteAdjustmentConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) SendInvoices(ctx context.Context, in *SendInvoicesRequest, opts ...grpc.CallOption) (*SendInvoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendInvoicesResponse)
	err := c.cc.Invoke(ctx, Operator_SendInvoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperatorServer is the server API for Operator service.
// All implementations must embed UnimplementedOperatorServer
// for forward compatibility.
//
// User service provides authentication and user management functionality.
type OperatorServer interface {
	AddOperator(context.Context, *AddOperatorRequest) (*AddOperatorResponse, error)
	UpdateOperator(context.Context, *UpdateOperatorRequest) (*UpdateOperatorResponse, error)
	GetOperator(context.Context, *GetOperatorRequest) (*GetOperatorResponse, error)
	GetOperatorsByIds(context.Context, *GetOperatorsByIdsRequest) (*GetOperatorsByIdsResponse, error)
	AddOrUpdateCurrency(context.Context, *AddOrUpdateCurrencyRequest) (*AddOrUpdateCurrencyResponse, error)
	UpdateOperatorCurrency(context.Context, *UpdateOperatorCurrencyRequest) (*UpdateOperatorCurrencyResponse, error)
	GetOperatorCurrencies(context.Context, *GetOperatorCurrenciesRequest) (*GetOperatorCurrenciesResponse, error)
	AddOriginOperatorId(context.Context, *AddOriginOperatorIdRequest) (*AddOriginOperatorIdResponse, error)
	GetOperatorIdByOrigin(context.Context, *GetOperatorIdByOriginRequest) (*GetOperatorIdByOriginResponse, error)
	DeleteOriginOperatorId(context.Context, *DeleteOriginOperatorIdRequest) (*DeleteOriginOperatorIdResponse, error)
	// GetParentOperatorIds returns parent operator IDs for the given operator ID.
	// The response contains only the list of parent operator IDs, doesn't include the requested operator_id.
	GetParentOperatorIds(context.Context, *GetParentOperatorIdsRequest) (*GetParentOperatorIdsResponse, error)
	// ListOperators returns a list of operators based on the enabled status or all operators if the enabled status is not provided.
	ListOperators(context.Context, *ListOperatorsRequest) (*ListOperatorsResponse, error)
	ListInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error)
	GetInvoiceDetail(context.Context, *GetInvoiceDetailRequest) (*GetInvoiceDetailResponse, error)
	ListOperatorRevenueShare(context.Context, *ListOperatorRevenueShareRequest) (*ListOperatorRevenueShareResponse, error)
	ListThirdPartyFees(context.Context, *ListThirdPartyFeesRequest) (*ListThirdPartyFeesResponse, error)
	ListAdjustments(context.Context, *ListAdjustmentsRequest) (*ListAdjustmentsResponse, error)
	ListMonthlyRevenueShare(context.Context, *ListMonthlyRevenueShareRequest) (*ListMonthlyRevenueShareResponse, error)
	AddAdjustment(context.Context, *AddAdjustmentRequest) (*AddAdjustmentResponse, error)
	ListAdjustmentConfigs(context.Context, *ListAdjustmentConfigsRequest) (*ListAdjustmentConfigsResponse, error)
	CreateAdjustmentConfig(context.Context, *CreateAdjustmentConfigRequest) (*CreateAdjustmentConfigResponse, error)
	UpdateAdjustmentConfig(context.Context, *UpdateAdjustmentConfigRequest) (*UpdateAdjustmentConfigResponse, error)
	DeleteAdjustmentConfig(context.Context, *DeleteAdjustmentConfigRequest) (*DeleteAdjustmentConfigResponse, error)
	SendInvoices(context.Context, *SendInvoicesRequest) (*SendInvoicesResponse, error)
	mustEmbedUnimplementedOperatorServer()
}

// UnimplementedOperatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOperatorServer struct{}

func (UnimplementedOperatorServer) AddOperator(context.Context, *AddOperatorRequest) (*AddOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOperator not implemented")
}
func (UnimplementedOperatorServer) UpdateOperator(context.Context, *UpdateOperatorRequest) (*UpdateOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOperator not implemented")
}
func (UnimplementedOperatorServer) GetOperator(context.Context, *GetOperatorRequest) (*GetOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperator not implemented")
}
func (UnimplementedOperatorServer) GetOperatorsByIds(context.Context, *GetOperatorsByIdsRequest) (*GetOperatorsByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorsByIds not implemented")
}
func (UnimplementedOperatorServer) AddOrUpdateCurrency(context.Context, *AddOrUpdateCurrencyRequest) (*AddOrUpdateCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdateCurrency not implemented")
}
func (UnimplementedOperatorServer) UpdateOperatorCurrency(context.Context, *UpdateOperatorCurrencyRequest) (*UpdateOperatorCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOperatorCurrency not implemented")
}
func (UnimplementedOperatorServer) GetOperatorCurrencies(context.Context, *GetOperatorCurrenciesRequest) (*GetOperatorCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorCurrencies not implemented")
}
func (UnimplementedOperatorServer) AddOriginOperatorId(context.Context, *AddOriginOperatorIdRequest) (*AddOriginOperatorIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOriginOperatorId not implemented")
}
func (UnimplementedOperatorServer) GetOperatorIdByOrigin(context.Context, *GetOperatorIdByOriginRequest) (*GetOperatorIdByOriginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorIdByOrigin not implemented")
}
func (UnimplementedOperatorServer) DeleteOriginOperatorId(context.Context, *DeleteOriginOperatorIdRequest) (*DeleteOriginOperatorIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOriginOperatorId not implemented")
}
func (UnimplementedOperatorServer) GetParentOperatorIds(context.Context, *GetParentOperatorIdsRequest) (*GetParentOperatorIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParentOperatorIds not implemented")
}
func (UnimplementedOperatorServer) ListOperators(context.Context, *ListOperatorsRequest) (*ListOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperators not implemented")
}
func (UnimplementedOperatorServer) ListInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvoices not implemented")
}
func (UnimplementedOperatorServer) GetInvoiceDetail(context.Context, *GetInvoiceDetailRequest) (*GetInvoiceDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceDetail not implemented")
}
func (UnimplementedOperatorServer) ListOperatorRevenueShare(context.Context, *ListOperatorRevenueShareRequest) (*ListOperatorRevenueShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperatorRevenueShare not implemented")
}
func (UnimplementedOperatorServer) ListThirdPartyFees(context.Context, *ListThirdPartyFeesRequest) (*ListThirdPartyFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListThirdPartyFees not implemented")
}
func (UnimplementedOperatorServer) ListAdjustments(context.Context, *ListAdjustmentsRequest) (*ListAdjustmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdjustments not implemented")
}
func (UnimplementedOperatorServer) ListMonthlyRevenueShare(context.Context, *ListMonthlyRevenueShareRequest) (*ListMonthlyRevenueShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMonthlyRevenueShare not implemented")
}
func (UnimplementedOperatorServer) AddAdjustment(context.Context, *AddAdjustmentRequest) (*AddAdjustmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdjustment not implemented")
}
func (UnimplementedOperatorServer) ListAdjustmentConfigs(context.Context, *ListAdjustmentConfigsRequest) (*ListAdjustmentConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdjustmentConfigs not implemented")
}
func (UnimplementedOperatorServer) CreateAdjustmentConfig(context.Context, *CreateAdjustmentConfigRequest) (*CreateAdjustmentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdjustmentConfig not implemented")
}
func (UnimplementedOperatorServer) UpdateAdjustmentConfig(context.Context, *UpdateAdjustmentConfigRequest) (*UpdateAdjustmentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdjustmentConfig not implemented")
}
func (UnimplementedOperatorServer) DeleteAdjustmentConfig(context.Context, *DeleteAdjustmentConfigRequest) (*DeleteAdjustmentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdjustmentConfig not implemented")
}
func (UnimplementedOperatorServer) SendInvoices(context.Context, *SendInvoicesRequest) (*SendInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvoices not implemented")
}
func (UnimplementedOperatorServer) mustEmbedUnimplementedOperatorServer() {}
func (UnimplementedOperatorServer) testEmbeddedByValue()                  {}

// UnsafeOperatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperatorServer will
// result in compilation errors.
type UnsafeOperatorServer interface {
	mustEmbedUnimplementedOperatorServer()
}

func RegisterOperatorServer(s grpc.ServiceRegistrar, srv OperatorServer) {
	// If the following call pancis, it indicates UnimplementedOperatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Operator_ServiceDesc, srv)
}

func _Operator_AddOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).AddOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_AddOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).AddOperator(ctx, req.(*AddOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_UpdateOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).UpdateOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_UpdateOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).UpdateOperator(ctx, req.(*UpdateOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_GetOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).GetOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_GetOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).GetOperator(ctx, req.(*GetOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_GetOperatorsByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorsByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).GetOperatorsByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_GetOperatorsByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).GetOperatorsByIds(ctx, req.(*GetOperatorsByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_AddOrUpdateCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).AddOrUpdateCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_AddOrUpdateCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).AddOrUpdateCurrency(ctx, req.(*AddOrUpdateCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_UpdateOperatorCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOperatorCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).UpdateOperatorCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_UpdateOperatorCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).UpdateOperatorCurrency(ctx, req.(*UpdateOperatorCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_GetOperatorCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).GetOperatorCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_GetOperatorCurrencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).GetOperatorCurrencies(ctx, req.(*GetOperatorCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_AddOriginOperatorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOriginOperatorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).AddOriginOperatorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_AddOriginOperatorId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).AddOriginOperatorId(ctx, req.(*AddOriginOperatorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_GetOperatorIdByOrigin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorIdByOriginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).GetOperatorIdByOrigin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_GetOperatorIdByOrigin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).GetOperatorIdByOrigin(ctx, req.(*GetOperatorIdByOriginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_DeleteOriginOperatorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOriginOperatorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).DeleteOriginOperatorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_DeleteOriginOperatorId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).DeleteOriginOperatorId(ctx, req.(*DeleteOriginOperatorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_GetParentOperatorIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParentOperatorIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).GetParentOperatorIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_GetParentOperatorIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).GetParentOperatorIds(ctx, req.(*GetParentOperatorIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_ListOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).ListOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_ListOperators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).ListOperators(ctx, req.(*ListOperatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_ListInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).ListInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_ListInvoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).ListInvoices(ctx, req.(*ListInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_GetInvoiceDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).GetInvoiceDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_GetInvoiceDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).GetInvoiceDetail(ctx, req.(*GetInvoiceDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_ListOperatorRevenueShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperatorRevenueShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).ListOperatorRevenueShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_ListOperatorRevenueShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).ListOperatorRevenueShare(ctx, req.(*ListOperatorRevenueShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_ListThirdPartyFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListThirdPartyFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).ListThirdPartyFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_ListThirdPartyFees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).ListThirdPartyFees(ctx, req.(*ListThirdPartyFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_ListAdjustments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdjustmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).ListAdjustments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_ListAdjustments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).ListAdjustments(ctx, req.(*ListAdjustmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_ListMonthlyRevenueShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMonthlyRevenueShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).ListMonthlyRevenueShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_ListMonthlyRevenueShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).ListMonthlyRevenueShare(ctx, req.(*ListMonthlyRevenueShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_AddAdjustment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAdjustmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).AddAdjustment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_AddAdjustment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).AddAdjustment(ctx, req.(*AddAdjustmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_ListAdjustmentConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdjustmentConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).ListAdjustmentConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_ListAdjustmentConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).ListAdjustmentConfigs(ctx, req.(*ListAdjustmentConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_CreateAdjustmentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdjustmentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).CreateAdjustmentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_CreateAdjustmentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).CreateAdjustmentConfig(ctx, req.(*CreateAdjustmentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_UpdateAdjustmentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdjustmentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).UpdateAdjustmentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_UpdateAdjustmentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).UpdateAdjustmentConfig(ctx, req.(*UpdateAdjustmentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_DeleteAdjustmentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdjustmentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).DeleteAdjustmentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_DeleteAdjustmentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).DeleteAdjustmentConfig(ctx, req.(*DeleteAdjustmentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_SendInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).SendInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Operator_SendInvoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).SendInvoices(ctx, req.(*SendInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Operator_ServiceDesc is the grpc.ServiceDesc for Operator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Operator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.operator.service.v1.Operator",
	HandlerType: (*OperatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOperator",
			Handler:    _Operator_AddOperator_Handler,
		},
		{
			MethodName: "UpdateOperator",
			Handler:    _Operator_UpdateOperator_Handler,
		},
		{
			MethodName: "GetOperator",
			Handler:    _Operator_GetOperator_Handler,
		},
		{
			MethodName: "GetOperatorsByIds",
			Handler:    _Operator_GetOperatorsByIds_Handler,
		},
		{
			MethodName: "AddOrUpdateCurrency",
			Handler:    _Operator_AddOrUpdateCurrency_Handler,
		},
		{
			MethodName: "UpdateOperatorCurrency",
			Handler:    _Operator_UpdateOperatorCurrency_Handler,
		},
		{
			MethodName: "GetOperatorCurrencies",
			Handler:    _Operator_GetOperatorCurrencies_Handler,
		},
		{
			MethodName: "AddOriginOperatorId",
			Handler:    _Operator_AddOriginOperatorId_Handler,
		},
		{
			MethodName: "GetOperatorIdByOrigin",
			Handler:    _Operator_GetOperatorIdByOrigin_Handler,
		},
		{
			MethodName: "DeleteOriginOperatorId",
			Handler:    _Operator_DeleteOriginOperatorId_Handler,
		},
		{
			MethodName: "GetParentOperatorIds",
			Handler:    _Operator_GetParentOperatorIds_Handler,
		},
		{
			MethodName: "ListOperators",
			Handler:    _Operator_ListOperators_Handler,
		},
		{
			MethodName: "ListInvoices",
			Handler:    _Operator_ListInvoices_Handler,
		},
		{
			MethodName: "GetInvoiceDetail",
			Handler:    _Operator_GetInvoiceDetail_Handler,
		},
		{
			MethodName: "ListOperatorRevenueShare",
			Handler:    _Operator_ListOperatorRevenueShare_Handler,
		},
		{
			MethodName: "ListThirdPartyFees",
			Handler:    _Operator_ListThirdPartyFees_Handler,
		},
		{
			MethodName: "ListAdjustments",
			Handler:    _Operator_ListAdjustments_Handler,
		},
		{
			MethodName: "ListMonthlyRevenueShare",
			Handler:    _Operator_ListMonthlyRevenueShare_Handler,
		},
		{
			MethodName: "AddAdjustment",
			Handler:    _Operator_AddAdjustment_Handler,
		},
		{
			MethodName: "ListAdjustmentConfigs",
			Handler:    _Operator_ListAdjustmentConfigs_Handler,
		},
		{
			MethodName: "CreateAdjustmentConfig",
			Handler:    _Operator_CreateAdjustmentConfig_Handler,
		},
		{
			MethodName: "UpdateAdjustmentConfig",
			Handler:    _Operator_UpdateAdjustmentConfig_Handler,
		},
		{
			MethodName: "DeleteAdjustmentConfig",
			Handler:    _Operator_DeleteAdjustmentConfig_Handler,
		},
		{
			MethodName: "SendInvoices",
			Handler:    _Operator_SendInvoices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "operator/service/v1/operator.proto",
}
