// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: operator/service/v1/operator.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOperatorAddAdjustment = "/api.operator.service.v1.Operator/AddAdjustment"
const OperationOperatorDeleteAdjustmentConfig = "/api.operator.service.v1.Operator/DeleteAdjustmentConfig"
const OperationOperatorGetInvoiceDetail = "/api.operator.service.v1.Operator/GetInvoiceDetail"
const OperationOperatorListAdjustmentConfigs = "/api.operator.service.v1.Operator/ListAdjustmentConfigs"
const OperationOperatorListAdjustments = "/api.operator.service.v1.Operator/ListAdjustments"
const OperationOperatorListInvovies = "/api.operator.service.v1.Operator/ListInvovies"
const OperationOperatorListMonthlyRevenueShare = "/api.operator.service.v1.Operator/ListMonthlyRevenueShare"
const OperationOperatorListOperatorRevenueShare = "/api.operator.service.v1.Operator/ListOperatorRevenueShare"
const OperationOperatorListThirdPartyFees = "/api.operator.service.v1.Operator/ListThirdPartyFees"
const OperationOperatorUpdateAdjustmentConfig = "/api.operator.service.v1.Operator/UpdateAdjustmentConfig"

type OperatorHTTPServer interface {
	AddAdjustment(context.Context, *AddAdjustmentRequest) (*AddAdjustmentResponse, error)
	DeleteAdjustmentConfig(context.Context, *DeleteAdjustmentConfigRequest) (*DeleteAdjustmentConfigResponse, error)
	GetInvoiceDetail(context.Context, *GetInvoiceDetailRequest) (*GetInvoiceDetailResponse, error)
	ListAdjustmentConfigs(context.Context, *ListAdjustmentConfigsRequest) (*ListAdjustmentConfigsResponse, error)
	ListAdjustments(context.Context, *ListAdjustmentsRequest) (*ListAdjustmentsResponse, error)
	ListInvovies(context.Context, *ListInvoviesRequest) (*ListInvoviesResponse, error)
	ListMonthlyRevenueShare(context.Context, *ListMonthlyRevenueShareRequest) (*ListMonthlyRevenueShareResponse, error)
	ListOperatorRevenueShare(context.Context, *ListOperatorRevenueShareRequest) (*ListOperatorRevenueShareResponse, error)
	ListThirdPartyFees(context.Context, *ListThirdPartyFeesRequest) (*ListThirdPartyFeesResponse, error)
	UpdateAdjustmentConfig(context.Context, *UpdateAdjustmentConfigRequest) (*UpdateAdjustmentConfigResponse, error)
}

func RegisterOperatorHTTPServer(s *http.Server, srv OperatorHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/operator/invovies/list", _Operator_ListInvovies0_HTTP_Handler(srv))
	r.POST("/v1/operator/invoice/detail", _Operator_GetInvoiceDetail0_HTTP_Handler(srv))
	r.POST("/v1/operator/revenue-shares/list", _Operator_ListOperatorRevenueShare0_HTTP_Handler(srv))
	r.POST("/v1/operator/third-party-fees/list", _Operator_ListThirdPartyFees0_HTTP_Handler(srv))
	r.POST("/v1/operator/adjustments/list", _Operator_ListAdjustments0_HTTP_Handler(srv))
	r.POST("/v1/operator/monthly-revenue-shares/list", _Operator_ListMonthlyRevenueShare0_HTTP_Handler(srv))
	r.POST("/v1/operator/adjustment/add", _Operator_AddAdjustment0_HTTP_Handler(srv))
	r.POST("/v1/operator/adjustment-configs/list", _Operator_ListAdjustmentConfigs0_HTTP_Handler(srv))
	r.POST("/v1/operator/adjustment-configs/update", _Operator_UpdateAdjustmentConfig0_HTTP_Handler(srv))
	r.POST("/v1/operator/adjustment-configs/delete", _Operator_DeleteAdjustmentConfig0_HTTP_Handler(srv))
}

func _Operator_ListInvovies0_HTTP_Handler(srv OperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListInvoviesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOperatorListInvovies)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListInvovies(ctx, req.(*ListInvoviesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListInvoviesResponse)
		return ctx.Result(200, reply)
	}
}

func _Operator_GetInvoiceDetail0_HTTP_Handler(srv OperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetInvoiceDetailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOperatorGetInvoiceDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetInvoiceDetail(ctx, req.(*GetInvoiceDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetInvoiceDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _Operator_ListOperatorRevenueShare0_HTTP_Handler(srv OperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOperatorRevenueShareRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOperatorListOperatorRevenueShare)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOperatorRevenueShare(ctx, req.(*ListOperatorRevenueShareRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOperatorRevenueShareResponse)
		return ctx.Result(200, reply)
	}
}

func _Operator_ListThirdPartyFees0_HTTP_Handler(srv OperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListThirdPartyFeesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOperatorListThirdPartyFees)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListThirdPartyFees(ctx, req.(*ListThirdPartyFeesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListThirdPartyFeesResponse)
		return ctx.Result(200, reply)
	}
}

func _Operator_ListAdjustments0_HTTP_Handler(srv OperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAdjustmentsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOperatorListAdjustments)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAdjustments(ctx, req.(*ListAdjustmentsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAdjustmentsResponse)
		return ctx.Result(200, reply)
	}
}

func _Operator_ListMonthlyRevenueShare0_HTTP_Handler(srv OperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMonthlyRevenueShareRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOperatorListMonthlyRevenueShare)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMonthlyRevenueShare(ctx, req.(*ListMonthlyRevenueShareRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMonthlyRevenueShareResponse)
		return ctx.Result(200, reply)
	}
}

func _Operator_AddAdjustment0_HTTP_Handler(srv OperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddAdjustmentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOperatorAddAdjustment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddAdjustment(ctx, req.(*AddAdjustmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddAdjustmentResponse)
		return ctx.Result(200, reply)
	}
}

func _Operator_ListAdjustmentConfigs0_HTTP_Handler(srv OperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAdjustmentConfigsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOperatorListAdjustmentConfigs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAdjustmentConfigs(ctx, req.(*ListAdjustmentConfigsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAdjustmentConfigsResponse)
		return ctx.Result(200, reply)
	}
}

func _Operator_UpdateAdjustmentConfig0_HTTP_Handler(srv OperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAdjustmentConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOperatorUpdateAdjustmentConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAdjustmentConfig(ctx, req.(*UpdateAdjustmentConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAdjustmentConfigResponse)
		return ctx.Result(200, reply)
	}
}

func _Operator_DeleteAdjustmentConfig0_HTTP_Handler(srv OperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAdjustmentConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOperatorDeleteAdjustmentConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAdjustmentConfig(ctx, req.(*DeleteAdjustmentConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAdjustmentConfigResponse)
		return ctx.Result(200, reply)
	}
}

type OperatorHTTPClient interface {
	AddAdjustment(ctx context.Context, req *AddAdjustmentRequest, opts ...http.CallOption) (rsp *AddAdjustmentResponse, err error)
	DeleteAdjustmentConfig(ctx context.Context, req *DeleteAdjustmentConfigRequest, opts ...http.CallOption) (rsp *DeleteAdjustmentConfigResponse, err error)
	GetInvoiceDetail(ctx context.Context, req *GetInvoiceDetailRequest, opts ...http.CallOption) (rsp *GetInvoiceDetailResponse, err error)
	ListAdjustmentConfigs(ctx context.Context, req *ListAdjustmentConfigsRequest, opts ...http.CallOption) (rsp *ListAdjustmentConfigsResponse, err error)
	ListAdjustments(ctx context.Context, req *ListAdjustmentsRequest, opts ...http.CallOption) (rsp *ListAdjustmentsResponse, err error)
	ListInvovies(ctx context.Context, req *ListInvoviesRequest, opts ...http.CallOption) (rsp *ListInvoviesResponse, err error)
	ListMonthlyRevenueShare(ctx context.Context, req *ListMonthlyRevenueShareRequest, opts ...http.CallOption) (rsp *ListMonthlyRevenueShareResponse, err error)
	ListOperatorRevenueShare(ctx context.Context, req *ListOperatorRevenueShareRequest, opts ...http.CallOption) (rsp *ListOperatorRevenueShareResponse, err error)
	ListThirdPartyFees(ctx context.Context, req *ListThirdPartyFeesRequest, opts ...http.CallOption) (rsp *ListThirdPartyFeesResponse, err error)
	UpdateAdjustmentConfig(ctx context.Context, req *UpdateAdjustmentConfigRequest, opts ...http.CallOption) (rsp *UpdateAdjustmentConfigResponse, err error)
}

type OperatorHTTPClientImpl struct {
	cc *http.Client
}

func NewOperatorHTTPClient(client *http.Client) OperatorHTTPClient {
	return &OperatorHTTPClientImpl{client}
}

func (c *OperatorHTTPClientImpl) AddAdjustment(ctx context.Context, in *AddAdjustmentRequest, opts ...http.CallOption) (*AddAdjustmentResponse, error) {
	var out AddAdjustmentResponse
	pattern := "/v1/operator/adjustment/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOperatorAddAdjustment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OperatorHTTPClientImpl) DeleteAdjustmentConfig(ctx context.Context, in *DeleteAdjustmentConfigRequest, opts ...http.CallOption) (*DeleteAdjustmentConfigResponse, error) {
	var out DeleteAdjustmentConfigResponse
	pattern := "/v1/operator/adjustment-configs/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOperatorDeleteAdjustmentConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OperatorHTTPClientImpl) GetInvoiceDetail(ctx context.Context, in *GetInvoiceDetailRequest, opts ...http.CallOption) (*GetInvoiceDetailResponse, error) {
	var out GetInvoiceDetailResponse
	pattern := "/v1/operator/invoice/detail"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOperatorGetInvoiceDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OperatorHTTPClientImpl) ListAdjustmentConfigs(ctx context.Context, in *ListAdjustmentConfigsRequest, opts ...http.CallOption) (*ListAdjustmentConfigsResponse, error) {
	var out ListAdjustmentConfigsResponse
	pattern := "/v1/operator/adjustment-configs/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOperatorListAdjustmentConfigs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OperatorHTTPClientImpl) ListAdjustments(ctx context.Context, in *ListAdjustmentsRequest, opts ...http.CallOption) (*ListAdjustmentsResponse, error) {
	var out ListAdjustmentsResponse
	pattern := "/v1/operator/adjustments/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOperatorListAdjustments))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OperatorHTTPClientImpl) ListInvovies(ctx context.Context, in *ListInvoviesRequest, opts ...http.CallOption) (*ListInvoviesResponse, error) {
	var out ListInvoviesResponse
	pattern := "/v1/operator/invovies/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOperatorListInvovies))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OperatorHTTPClientImpl) ListMonthlyRevenueShare(ctx context.Context, in *ListMonthlyRevenueShareRequest, opts ...http.CallOption) (*ListMonthlyRevenueShareResponse, error) {
	var out ListMonthlyRevenueShareResponse
	pattern := "/v1/operator/monthly-revenue-shares/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOperatorListMonthlyRevenueShare))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OperatorHTTPClientImpl) ListOperatorRevenueShare(ctx context.Context, in *ListOperatorRevenueShareRequest, opts ...http.CallOption) (*ListOperatorRevenueShareResponse, error) {
	var out ListOperatorRevenueShareResponse
	pattern := "/v1/operator/revenue-shares/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOperatorListOperatorRevenueShare))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OperatorHTTPClientImpl) ListThirdPartyFees(ctx context.Context, in *ListThirdPartyFeesRequest, opts ...http.CallOption) (*ListThirdPartyFeesResponse, error) {
	var out ListThirdPartyFeesResponse
	pattern := "/v1/operator/third-party-fees/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOperatorListThirdPartyFees))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OperatorHTTPClientImpl) UpdateAdjustmentConfig(ctx context.Context, in *UpdateAdjustmentConfigRequest, opts ...http.CallOption) (*UpdateAdjustmentConfigResponse, error) {
	var out UpdateAdjustmentConfigResponse
	pattern := "/v1/operator/adjustment-configs/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOperatorUpdateAdjustmentConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
