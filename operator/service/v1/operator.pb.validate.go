// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: operator/service/v1/operator.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOperatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOperatorRequestMultiError, or nil if none found.
func (m *AddOperatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOperatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExternalId

	// no validation rules for UserId

	// no validation rules for Name

	// no validation rules for ApiKey

	// no validation rules for ApiKeySecret

	if len(errors) > 0 {
		return AddOperatorRequestMultiError(errors)
	}

	return nil
}

// AddOperatorRequestMultiError is an error wrapping multiple validation errors
// returned by AddOperatorRequest.ValidateAll() if the designated constraints
// aren't met.
type AddOperatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOperatorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOperatorRequestMultiError) AllErrors() []error { return m }

// AddOperatorRequestValidationError is the validation error returned by
// AddOperatorRequest.Validate if the designated constraints aren't met.
type AddOperatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOperatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOperatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOperatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOperatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOperatorRequestValidationError) ErrorName() string {
	return "AddOperatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOperatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOperatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOperatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOperatorRequestValidationError{}

// Validate checks the field values on AddOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOperatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOperatorResponseMultiError, or nil if none found.
func (m *AddOperatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOperatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddOperatorResponseMultiError(errors)
	}

	return nil
}

// AddOperatorResponseMultiError is an error wrapping multiple validation
// errors returned by AddOperatorResponse.ValidateAll() if the designated
// constraints aren't met.
type AddOperatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOperatorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOperatorResponseMultiError) AllErrors() []error { return m }

// AddOperatorResponseValidationError is the validation error returned by
// AddOperatorResponse.Validate if the designated constraints aren't met.
type AddOperatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOperatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOperatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOperatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOperatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOperatorResponseValidationError) ErrorName() string {
	return "AddOperatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOperatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOperatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOperatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOperatorResponseValidationError{}

// Validate checks the field values on UpdateOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOperatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOperatorRequestMultiError, or nil if none found.
func (m *UpdateOperatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOperatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.ApiKey != nil {
		// no validation rules for ApiKey
	}

	if m.ApiKeySecret != nil {
		// no validation rules for ApiKeySecret
	}

	if len(errors) > 0 {
		return UpdateOperatorRequestMultiError(errors)
	}

	return nil
}

// UpdateOperatorRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOperatorRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOperatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOperatorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOperatorRequestMultiError) AllErrors() []error { return m }

// UpdateOperatorRequestValidationError is the validation error returned by
// UpdateOperatorRequest.Validate if the designated constraints aren't met.
type UpdateOperatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOperatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOperatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOperatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOperatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOperatorRequestValidationError) ErrorName() string {
	return "UpdateOperatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOperatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOperatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOperatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOperatorRequestValidationError{}

// Validate checks the field values on UpdateOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOperatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOperatorResponseMultiError, or nil if none found.
func (m *UpdateOperatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOperatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateOperatorResponseMultiError(errors)
	}

	return nil
}

// UpdateOperatorResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateOperatorResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOperatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOperatorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOperatorResponseMultiError) AllErrors() []error { return m }

// UpdateOperatorResponseValidationError is the validation error returned by
// UpdateOperatorResponse.Validate if the designated constraints aren't met.
type UpdateOperatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOperatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOperatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOperatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOperatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOperatorResponseValidationError) ErrorName() string {
	return "UpdateOperatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOperatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOperatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOperatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOperatorResponseValidationError{}
