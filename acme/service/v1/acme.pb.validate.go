// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: acme/service/v1/acme.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CertificateInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CertificateInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CertificateInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CertificateInfoMultiError, or nil if none found.
func (m *CertificateInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CertificateInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for Status

	// no validation rules for ExpiredAt

	// no validation rules for IssuedAt

	// no validation rules for Issuer

	if len(errors) > 0 {
		return CertificateInfoMultiError(errors)
	}

	return nil
}

// CertificateInfoMultiError is an error wrapping multiple validation errors
// returned by CertificateInfo.ValidateAll() if the designated constraints
// aren't met.
type CertificateInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CertificateInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CertificateInfoMultiError) AllErrors() []error { return m }

// CertificateInfoValidationError is the validation error returned by
// CertificateInfo.Validate if the designated constraints aren't met.
type CertificateInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateInfoValidationError) ErrorName() string { return "CertificateInfoValidationError" }

// Error satisfies the builtin error interface
func (e CertificateInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificateInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateInfoValidationError{}

// Validate checks the field values on IssueCertificateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IssueCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueCertificateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssueCertificateRequestMultiError, or nil if none found.
func (m *IssueCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for Email

	if len(errors) > 0 {
		return IssueCertificateRequestMultiError(errors)
	}

	return nil
}

// IssueCertificateRequestMultiError is an error wrapping multiple validation
// errors returned by IssueCertificateRequest.ValidateAll() if the designated
// constraints aren't met.
type IssueCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueCertificateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueCertificateRequestMultiError) AllErrors() []error { return m }

// IssueCertificateRequestValidationError is the validation error returned by
// IssueCertificateRequest.Validate if the designated constraints aren't met.
type IssueCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueCertificateRequestValidationError) ErrorName() string {
	return "IssueCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IssueCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueCertificateRequestValidationError{}

// Validate checks the field values on IssueCertificateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IssueCertificateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueCertificateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssueCertificateResponseMultiError, or nil if none found.
func (m *IssueCertificateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueCertificateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for Status

	// no validation rules for ExpiredAt

	if len(errors) > 0 {
		return IssueCertificateResponseMultiError(errors)
	}

	return nil
}

// IssueCertificateResponseMultiError is an error wrapping multiple validation
// errors returned by IssueCertificateResponse.ValidateAll() if the designated
// constraints aren't met.
type IssueCertificateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueCertificateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueCertificateResponseMultiError) AllErrors() []error { return m }

// IssueCertificateResponseValidationError is the validation error returned by
// IssueCertificateResponse.Validate if the designated constraints aren't met.
type IssueCertificateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueCertificateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueCertificateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueCertificateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueCertificateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueCertificateResponseValidationError) ErrorName() string {
	return "IssueCertificateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IssueCertificateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueCertificateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueCertificateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueCertificateResponseValidationError{}

// Validate checks the field values on RenewCertificateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenewCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenewCertificateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenewCertificateRequestMultiError, or nil if none found.
func (m *RenewCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenewCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	if len(errors) > 0 {
		return RenewCertificateRequestMultiError(errors)
	}

	return nil
}

// RenewCertificateRequestMultiError is an error wrapping multiple validation
// errors returned by RenewCertificateRequest.ValidateAll() if the designated
// constraints aren't met.
type RenewCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenewCertificateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenewCertificateRequestMultiError) AllErrors() []error { return m }

// RenewCertificateRequestValidationError is the validation error returned by
// RenewCertificateRequest.Validate if the designated constraints aren't met.
type RenewCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenewCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenewCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenewCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenewCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenewCertificateRequestValidationError) ErrorName() string {
	return "RenewCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenewCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenewCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenewCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenewCertificateRequestValidationError{}

// Validate checks the field values on RenewCertificateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenewCertificateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenewCertificateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenewCertificateResponseMultiError, or nil if none found.
func (m *RenewCertificateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenewCertificateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for Status

	// no validation rules for ExpiredAt

	if len(errors) > 0 {
		return RenewCertificateResponseMultiError(errors)
	}

	return nil
}

// RenewCertificateResponseMultiError is an error wrapping multiple validation
// errors returned by RenewCertificateResponse.ValidateAll() if the designated
// constraints aren't met.
type RenewCertificateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenewCertificateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenewCertificateResponseMultiError) AllErrors() []error { return m }

// RenewCertificateResponseValidationError is the validation error returned by
// RenewCertificateResponse.Validate if the designated constraints aren't met.
type RenewCertificateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenewCertificateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenewCertificateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenewCertificateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenewCertificateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenewCertificateResponseValidationError) ErrorName() string {
	return "RenewCertificateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenewCertificateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenewCertificateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenewCertificateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenewCertificateResponseValidationError{}

// Validate checks the field values on RevokeCertificateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeCertificateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeCertificateRequestMultiError, or nil if none found.
func (m *RevokeCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	if len(errors) > 0 {
		return RevokeCertificateRequestMultiError(errors)
	}

	return nil
}

// RevokeCertificateRequestMultiError is an error wrapping multiple validation
// errors returned by RevokeCertificateRequest.ValidateAll() if the designated
// constraints aren't met.
type RevokeCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeCertificateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeCertificateRequestMultiError) AllErrors() []error { return m }

// RevokeCertificateRequestValidationError is the validation error returned by
// RevokeCertificateRequest.Validate if the designated constraints aren't met.
type RevokeCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeCertificateRequestValidationError) ErrorName() string {
	return "RevokeCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeCertificateRequestValidationError{}

// Validate checks the field values on RevokeCertificateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeCertificateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeCertificateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeCertificateResponseMultiError, or nil if none found.
func (m *RevokeCertificateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeCertificateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RevokeCertificateResponseMultiError(errors)
	}

	return nil
}

// RevokeCertificateResponseMultiError is an error wrapping multiple validation
// errors returned by RevokeCertificateResponse.ValidateAll() if the
// designated constraints aren't met.
type RevokeCertificateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeCertificateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeCertificateResponseMultiError) AllErrors() []error { return m }

// RevokeCertificateResponseValidationError is the validation error returned by
// RevokeCertificateResponse.Validate if the designated constraints aren't met.
type RevokeCertificateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeCertificateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeCertificateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeCertificateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeCertificateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeCertificateResponseValidationError) ErrorName() string {
	return "RevokeCertificateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeCertificateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeCertificateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeCertificateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeCertificateResponseValidationError{}

// Validate checks the field values on GetCertificateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCertificateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCertificateRequestMultiError, or nil if none found.
func (m *GetCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	if len(errors) > 0 {
		return GetCertificateRequestMultiError(errors)
	}

	return nil
}

// GetCertificateRequestMultiError is an error wrapping multiple validation
// errors returned by GetCertificateRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCertificateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCertificateRequestMultiError) AllErrors() []error { return m }

// GetCertificateRequestValidationError is the validation error returned by
// GetCertificateRequest.Validate if the designated constraints aren't met.
type GetCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCertificateRequestValidationError) ErrorName() string {
	return "GetCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCertificateRequestValidationError{}

// Validate checks the field values on GetCertificateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCertificateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCertificateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCertificateResponseMultiError, or nil if none found.
func (m *GetCertificateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCertificateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for Status

	// no validation rules for ExpiredAt

	if len(errors) > 0 {
		return GetCertificateResponseMultiError(errors)
	}

	return nil
}

// GetCertificateResponseMultiError is an error wrapping multiple validation
// errors returned by GetCertificateResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCertificateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCertificateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCertificateResponseMultiError) AllErrors() []error { return m }

// GetCertificateResponseValidationError is the validation error returned by
// GetCertificateResponse.Validate if the designated constraints aren't met.
type GetCertificateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCertificateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCertificateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCertificateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCertificateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCertificateResponseValidationError) ErrorName() string {
	return "GetCertificateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCertificateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCertificateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCertificateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCertificateResponseValidationError{}

// Validate checks the field values on ListCertificatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCertificatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCertificatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCertificatesRequestMultiError, or nil if none found.
func (m *ListCertificatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCertificatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.StatusFilter != nil {
		// no validation rules for StatusFilter
	}

	if m.IncludeExpired != nil {
		// no validation rules for IncludeExpired
	}

	if len(errors) > 0 {
		return ListCertificatesRequestMultiError(errors)
	}

	return nil
}

// ListCertificatesRequestMultiError is an error wrapping multiple validation
// errors returned by ListCertificatesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCertificatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCertificatesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCertificatesRequestMultiError) AllErrors() []error { return m }

// ListCertificatesRequestValidationError is the validation error returned by
// ListCertificatesRequest.Validate if the designated constraints aren't met.
type ListCertificatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCertificatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCertificatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCertificatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCertificatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCertificatesRequestValidationError) ErrorName() string {
	return "ListCertificatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCertificatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCertificatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCertificatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCertificatesRequestValidationError{}

// Validate checks the field values on ListCertificatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCertificatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCertificatesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCertificatesResponseMultiError, or nil if none found.
func (m *ListCertificatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCertificatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCertificates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCertificatesResponseValidationError{
						field:  fmt.Sprintf("Certificates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCertificatesResponseValidationError{
						field:  fmt.Sprintf("Certificates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCertificatesResponseValidationError{
					field:  fmt.Sprintf("Certificates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return ListCertificatesResponseMultiError(errors)
	}

	return nil
}

// ListCertificatesResponseMultiError is an error wrapping multiple validation
// errors returned by ListCertificatesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCertificatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCertificatesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCertificatesResponseMultiError) AllErrors() []error { return m }

// ListCertificatesResponseValidationError is the validation error returned by
// ListCertificatesResponse.Validate if the designated constraints aren't met.
type ListCertificatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCertificatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCertificatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCertificatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCertificatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCertificatesResponseValidationError) ErrorName() string {
	return "ListCertificatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCertificatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCertificatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCertificatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCertificatesResponseValidationError{}
