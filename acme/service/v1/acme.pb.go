// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.6
// source: acme/service/v1/acme.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Certificate information
type CertificateInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domain        string                 `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`                           // Domain name
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                           // Certificate status
	ExpiresAt     int64                  `protobuf:"varint,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`   // Certificate expiry date
	IssuedAt      int64                  `protobuf:"varint,4,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`      // Certificate issue date
	Issuer        string                 `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`                           // Certificate issuer (e.g., "ZeroSSL")
	SanDomains    []string               `protobuf:"bytes,6,rep,name=san_domains,json=sanDomains,proto3" json:"san_domains,omitempty"` // Subject Alternative Names
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateInfo) Reset() {
	*x = CertificateInfo{}
	mi := &file_acme_service_v1_acme_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateInfo) ProtoMessage() {}

func (x *CertificateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_acme_service_v1_acme_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateInfo.ProtoReflect.Descriptor instead.
func (*CertificateInfo) Descriptor() ([]byte, []int) {
	return file_acme_service_v1_acme_proto_rawDescGZIP(), []int{0}
}

func (x *CertificateInfo) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CertificateInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CertificateInfo) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *CertificateInfo) GetIssuedAt() int64 {
	if x != nil {
		return x.IssuedAt
	}
	return 0
}

func (x *CertificateInfo) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *CertificateInfo) GetSanDomains() []string {
	if x != nil {
		return x.SanDomains
	}
	return nil
}

// Request to issue a new certificate
type IssueCertificateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domain        string                 `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"` // Domain name (e.g., "acme.mini.bet")
	Email         string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`   // Email for certificate notifications
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssueCertificateRequest) Reset() {
	*x = IssueCertificateRequest{}
	mi := &file_acme_service_v1_acme_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCertificateRequest) ProtoMessage() {}

func (x *IssueCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acme_service_v1_acme_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCertificateRequest.ProtoReflect.Descriptor instead.
func (*IssueCertificateRequest) Descriptor() ([]byte, []int) {
	return file_acme_service_v1_acme_proto_rawDescGZIP(), []int{1}
}

func (x *IssueCertificateRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *IssueCertificateRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// Response for certificate issuance
type IssueCertificateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domain        string                 `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`                         // Domain name
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                         // Certificate status
	ExpiresAt     int64                  `protobuf:"varint,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"` // Certificate expiry date
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssueCertificateResponse) Reset() {
	*x = IssueCertificateResponse{}
	mi := &file_acme_service_v1_acme_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCertificateResponse) ProtoMessage() {}

func (x *IssueCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acme_service_v1_acme_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCertificateResponse.ProtoReflect.Descriptor instead.
func (*IssueCertificateResponse) Descriptor() ([]byte, []int) {
	return file_acme_service_v1_acme_proto_rawDescGZIP(), []int{2}
}

func (x *IssueCertificateResponse) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *IssueCertificateResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IssueCertificateResponse) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

// Request to renew a certificate
type RenewCertificateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domain        string                 `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"` // Domain name to renew
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenewCertificateRequest) Reset() {
	*x = RenewCertificateRequest{}
	mi := &file_acme_service_v1_acme_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenewCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewCertificateRequest) ProtoMessage() {}

func (x *RenewCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acme_service_v1_acme_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewCertificateRequest.ProtoReflect.Descriptor instead.
func (*RenewCertificateRequest) Descriptor() ([]byte, []int) {
	return file_acme_service_v1_acme_proto_rawDescGZIP(), []int{3}
}

func (x *RenewCertificateRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

// Response for certificate renewal
type RenewCertificateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domain        string                 `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`                         // Domain name
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                         // Certificate status
	ExpiresAt     int64                  `protobuf:"varint,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"` // New expiry date
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RenewCertificateResponse) Reset() {
	*x = RenewCertificateResponse{}
	mi := &file_acme_service_v1_acme_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenewCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewCertificateResponse) ProtoMessage() {}

func (x *RenewCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acme_service_v1_acme_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewCertificateResponse.ProtoReflect.Descriptor instead.
func (*RenewCertificateResponse) Descriptor() ([]byte, []int) {
	return file_acme_service_v1_acme_proto_rawDescGZIP(), []int{4}
}

func (x *RenewCertificateResponse) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RenewCertificateResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RenewCertificateResponse) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

// Request to revoke a certificate
type RevokeCertificateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domain        string                 `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"` // Domain name to revoke
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeCertificateRequest) Reset() {
	*x = RevokeCertificateRequest{}
	mi := &file_acme_service_v1_acme_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeCertificateRequest) ProtoMessage() {}

func (x *RevokeCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acme_service_v1_acme_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeCertificateRequest.ProtoReflect.Descriptor instead.
func (*RevokeCertificateRequest) Descriptor() ([]byte, []int) {
	return file_acme_service_v1_acme_proto_rawDescGZIP(), []int{5}
}

func (x *RevokeCertificateRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

// Response for certificate revocation
type RevokeCertificateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeCertificateResponse) Reset() {
	*x = RevokeCertificateResponse{}
	mi := &file_acme_service_v1_acme_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeCertificateResponse) ProtoMessage() {}

func (x *RevokeCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acme_service_v1_acme_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeCertificateResponse.ProtoReflect.Descriptor instead.
func (*RevokeCertificateResponse) Descriptor() ([]byte, []int) {
	return file_acme_service_v1_acme_proto_rawDescGZIP(), []int{6}
}

// Request to get certificate information
type GetCertificateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domain        string                 `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"` // Domain name
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCertificateRequest) Reset() {
	*x = GetCertificateRequest{}
	mi := &file_acme_service_v1_acme_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertificateRequest) ProtoMessage() {}

func (x *GetCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acme_service_v1_acme_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertificateRequest.ProtoReflect.Descriptor instead.
func (*GetCertificateRequest) Descriptor() ([]byte, []int) {
	return file_acme_service_v1_acme_proto_rawDescGZIP(), []int{7}
}

func (x *GetCertificateRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

// Response with certificate information
type GetCertificateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domain        string                 `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`                         // Domain name
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                         // Certificate status
	ExpiresAt     int64                  `protobuf:"varint,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"` // Certificate expiry date
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCertificateResponse) Reset() {
	*x = GetCertificateResponse{}
	mi := &file_acme_service_v1_acme_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertificateResponse) ProtoMessage() {}

func (x *GetCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acme_service_v1_acme_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertificateResponse.ProtoReflect.Descriptor instead.
func (*GetCertificateResponse) Descriptor() ([]byte, []int) {
	return file_acme_service_v1_acme_proto_rawDescGZIP(), []int{8}
}

func (x *GetCertificateResponse) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *GetCertificateResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetCertificateResponse) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

// Request to list all certificates
type ListCertificatesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional filters
	StatusFilter   *string `protobuf:"bytes,1,opt,name=status_filter,json=statusFilter,proto3,oneof" json:"status_filter,omitempty"`        // Filter by status
	IncludeExpired *bool   `protobuf:"varint,2,opt,name=include_expired,json=includeExpired,proto3,oneof" json:"include_expired,omitempty"` // Include expired certificates
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListCertificatesRequest) Reset() {
	*x = ListCertificatesRequest{}
	mi := &file_acme_service_v1_acme_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCertificatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCertificatesRequest) ProtoMessage() {}

func (x *ListCertificatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acme_service_v1_acme_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCertificatesRequest.ProtoReflect.Descriptor instead.
func (*ListCertificatesRequest) Descriptor() ([]byte, []int) {
	return file_acme_service_v1_acme_proto_rawDescGZIP(), []int{9}
}

func (x *ListCertificatesRequest) GetStatusFilter() string {
	if x != nil && x.StatusFilter != nil {
		return *x.StatusFilter
	}
	return ""
}

func (x *ListCertificatesRequest) GetIncludeExpired() bool {
	if x != nil && x.IncludeExpired != nil {
		return *x.IncludeExpired
	}
	return false
}

// Response with list of certificates
type ListCertificatesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Certificates  []*CertificateInfo     `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates,omitempty"`                // List of certificates
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // Total number of certificates
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCertificatesResponse) Reset() {
	*x = ListCertificatesResponse{}
	mi := &file_acme_service_v1_acme_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCertificatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCertificatesResponse) ProtoMessage() {}

func (x *ListCertificatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acme_service_v1_acme_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCertificatesResponse.ProtoReflect.Descriptor instead.
func (*ListCertificatesResponse) Descriptor() ([]byte, []int) {
	return file_acme_service_v1_acme_proto_rawDescGZIP(), []int{10}
}

func (x *ListCertificatesResponse) GetCertificates() []*CertificateInfo {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *ListCertificatesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

var File_acme_service_v1_acme_proto protoreflect.FileDescriptor

const file_acme_service_v1_acme_proto_rawDesc = "" +
	"\n" +
	"\x1aacme/service/v1/acme.proto\x12\x13api.acme.service.v1\"\xb6\x01\n" +
	"\x0fCertificateInfo\x12\x16\n" +
	"\x06domain\x18\x01 \x01(\tR\x06domain\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x1d\n" +
	"\n" +
	"expires_at\x18\x03 \x01(\x03R\texpiresAt\x12\x1b\n" +
	"\tissued_at\x18\x04 \x01(\x03R\bissuedAt\x12\x16\n" +
	"\x06issuer\x18\x05 \x01(\tR\x06issuer\x12\x1f\n" +
	"\vsan_domains\x18\x06 \x03(\tR\n" +
	"sanDomains\"G\n" +
	"\x17IssueCertificateRequest\x12\x16\n" +
	"\x06domain\x18\x01 \x01(\tR\x06domain\x12\x14\n" +
	"\x05email\x18\x02 \x01(\tR\x05email\"i\n" +
	"\x18IssueCertificateResponse\x12\x16\n" +
	"\x06domain\x18\x01 \x01(\tR\x06domain\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x1d\n" +
	"\n" +
	"expires_at\x18\x03 \x01(\x03R\texpiresAt\"1\n" +
	"\x17RenewCertificateRequest\x12\x16\n" +
	"\x06domain\x18\x01 \x01(\tR\x06domain\"i\n" +
	"\x18RenewCertificateResponse\x12\x16\n" +
	"\x06domain\x18\x01 \x01(\tR\x06domain\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x1d\n" +
	"\n" +
	"expires_at\x18\x03 \x01(\x03R\texpiresAt\"2\n" +
	"\x18RevokeCertificateRequest\x12\x16\n" +
	"\x06domain\x18\x01 \x01(\tR\x06domain\"\x1b\n" +
	"\x19RevokeCertificateResponse\"/\n" +
	"\x15GetCertificateRequest\x12\x16\n" +
	"\x06domain\x18\x01 \x01(\tR\x06domain\"g\n" +
	"\x16GetCertificateResponse\x12\x16\n" +
	"\x06domain\x18\x01 \x01(\tR\x06domain\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x1d\n" +
	"\n" +
	"expires_at\x18\x03 \x01(\x03R\texpiresAt\"\x97\x01\n" +
	"\x17ListCertificatesRequest\x12(\n" +
	"\rstatus_filter\x18\x01 \x01(\tH\x00R\fstatusFilter\x88\x01\x01\x12,\n" +
	"\x0finclude_expired\x18\x02 \x01(\bH\x01R\x0eincludeExpired\x88\x01\x01B\x10\n" +
	"\x0e_status_filterB\x12\n" +
	"\x10_include_expired\"\x85\x01\n" +
	"\x18ListCertificatesResponse\x12H\n" +
	"\fcertificates\x18\x01 \x03(\v2$.api.acme.service.v1.CertificateInfoR\fcertificates\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount2\xc2\x04\n" +
	"\x04acme\x12q\n" +
	"\x10IssueCertificate\x12,.api.acme.service.v1.IssueCertificateRequest\x1a-.api.acme.service.v1.IssueCertificateResponse\"\x00\x12q\n" +
	"\x10RenewCertificate\x12,.api.acme.service.v1.RenewCertificateRequest\x1a-.api.acme.service.v1.RenewCertificateResponse\"\x00\x12t\n" +
	"\x11RevokeCertificate\x12-.api.acme.service.v1.RevokeCertificateRequest\x1a..api.acme.service.v1.RevokeCertificateResponse\"\x00\x12k\n" +
	"\x0eGetCertificate\x12*.api.acme.service.v1.GetCertificateRequest\x1a+.api.acme.service.v1.GetCertificateResponse\"\x00\x12q\n" +
	"\x10ListCertificates\x12,.api.acme.service.v1.ListCertificatesRequest\x1a-.api.acme.service.v1.ListCertificatesResponse\"\x00BO\n" +
	"\x13api.acme.service.v1P\x01Z6github.com/infigaming-com/meepo-api/acme/service/v1;v1b\x06proto3"

var (
	file_acme_service_v1_acme_proto_rawDescOnce sync.Once
	file_acme_service_v1_acme_proto_rawDescData []byte
)

func file_acme_service_v1_acme_proto_rawDescGZIP() []byte {
	file_acme_service_v1_acme_proto_rawDescOnce.Do(func() {
		file_acme_service_v1_acme_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_acme_service_v1_acme_proto_rawDesc), len(file_acme_service_v1_acme_proto_rawDesc)))
	})
	return file_acme_service_v1_acme_proto_rawDescData
}

var file_acme_service_v1_acme_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_acme_service_v1_acme_proto_goTypes = []any{
	(*CertificateInfo)(nil),           // 0: api.acme.service.v1.CertificateInfo
	(*IssueCertificateRequest)(nil),   // 1: api.acme.service.v1.IssueCertificateRequest
	(*IssueCertificateResponse)(nil),  // 2: api.acme.service.v1.IssueCertificateResponse
	(*RenewCertificateRequest)(nil),   // 3: api.acme.service.v1.RenewCertificateRequest
	(*RenewCertificateResponse)(nil),  // 4: api.acme.service.v1.RenewCertificateResponse
	(*RevokeCertificateRequest)(nil),  // 5: api.acme.service.v1.RevokeCertificateRequest
	(*RevokeCertificateResponse)(nil), // 6: api.acme.service.v1.RevokeCertificateResponse
	(*GetCertificateRequest)(nil),     // 7: api.acme.service.v1.GetCertificateRequest
	(*GetCertificateResponse)(nil),    // 8: api.acme.service.v1.GetCertificateResponse
	(*ListCertificatesRequest)(nil),   // 9: api.acme.service.v1.ListCertificatesRequest
	(*ListCertificatesResponse)(nil),  // 10: api.acme.service.v1.ListCertificatesResponse
}
var file_acme_service_v1_acme_proto_depIdxs = []int32{
	0,  // 0: api.acme.service.v1.ListCertificatesResponse.certificates:type_name -> api.acme.service.v1.CertificateInfo
	1,  // 1: api.acme.service.v1.acme.IssueCertificate:input_type -> api.acme.service.v1.IssueCertificateRequest
	3,  // 2: api.acme.service.v1.acme.RenewCertificate:input_type -> api.acme.service.v1.RenewCertificateRequest
	5,  // 3: api.acme.service.v1.acme.RevokeCertificate:input_type -> api.acme.service.v1.RevokeCertificateRequest
	7,  // 4: api.acme.service.v1.acme.GetCertificate:input_type -> api.acme.service.v1.GetCertificateRequest
	9,  // 5: api.acme.service.v1.acme.ListCertificates:input_type -> api.acme.service.v1.ListCertificatesRequest
	2,  // 6: api.acme.service.v1.acme.IssueCertificate:output_type -> api.acme.service.v1.IssueCertificateResponse
	4,  // 7: api.acme.service.v1.acme.RenewCertificate:output_type -> api.acme.service.v1.RenewCertificateResponse
	6,  // 8: api.acme.service.v1.acme.RevokeCertificate:output_type -> api.acme.service.v1.RevokeCertificateResponse
	8,  // 9: api.acme.service.v1.acme.GetCertificate:output_type -> api.acme.service.v1.GetCertificateResponse
	10, // 10: api.acme.service.v1.acme.ListCertificates:output_type -> api.acme.service.v1.ListCertificatesResponse
	6,  // [6:11] is the sub-list for method output_type
	1,  // [1:6] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_acme_service_v1_acme_proto_init() }
func file_acme_service_v1_acme_proto_init() {
	if File_acme_service_v1_acme_proto != nil {
		return
	}
	file_acme_service_v1_acme_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_acme_service_v1_acme_proto_rawDesc), len(file_acme_service_v1_acme_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_acme_service_v1_acme_proto_goTypes,
		DependencyIndexes: file_acme_service_v1_acme_proto_depIdxs,
		MessageInfos:      file_acme_service_v1_acme_proto_msgTypes,
	}.Build()
	File_acme_service_v1_acme_proto = out.File
	file_acme_service_v1_acme_proto_goTypes = nil
	file_acme_service_v1_acme_proto_depIdxs = nil
}
