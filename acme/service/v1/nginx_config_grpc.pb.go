// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: acme/service/v1/nginx_config.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NginxConfig_UpdateByoNginxConfig_FullMethodName           = "/api.acme.service.v1.nginx_config/UpdateByoNginxConfig"
	NginxConfig_UpdateBackofficeByoNginxConfig_FullMethodName = "/api.acme.service.v1.nginx_config/UpdateBackofficeByoNginxConfig"
)

// NginxConfigClient is the client API for NginxConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NginxConfigClient interface {
	// UpdateByoNginxConfig updates the nginx config for a byo domain
	UpdateByoNginxConfig(ctx context.Context, in *UpdateByoNginxConfigRequest, opts ...grpc.CallOption) (*UpdateByoNginxConfigResponse, error)
	// UpdateBackofficeByoNginxConfig updates the nginx config for a backoffice byo domain
	UpdateBackofficeByoNginxConfig(ctx context.Context, in *UpdateBackofficeByoNginxConfigRequest, opts ...grpc.CallOption) (*UpdateBackofficeByoNginxConfigResponse, error)
}

type nginxConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewNginxConfigClient(cc grpc.ClientConnInterface) NginxConfigClient {
	return &nginxConfigClient{cc}
}

func (c *nginxConfigClient) UpdateByoNginxConfig(ctx context.Context, in *UpdateByoNginxConfigRequest, opts ...grpc.CallOption) (*UpdateByoNginxConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateByoNginxConfigResponse)
	err := c.cc.Invoke(ctx, NginxConfig_UpdateByoNginxConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nginxConfigClient) UpdateBackofficeByoNginxConfig(ctx context.Context, in *UpdateBackofficeByoNginxConfigRequest, opts ...grpc.CallOption) (*UpdateBackofficeByoNginxConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBackofficeByoNginxConfigResponse)
	err := c.cc.Invoke(ctx, NginxConfig_UpdateBackofficeByoNginxConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NginxConfigServer is the server API for NginxConfig service.
// All implementations must embed UnimplementedNginxConfigServer
// for forward compatibility.
type NginxConfigServer interface {
	// UpdateByoNginxConfig updates the nginx config for a byo domain
	UpdateByoNginxConfig(context.Context, *UpdateByoNginxConfigRequest) (*UpdateByoNginxConfigResponse, error)
	// UpdateBackofficeByoNginxConfig updates the nginx config for a backoffice byo domain
	UpdateBackofficeByoNginxConfig(context.Context, *UpdateBackofficeByoNginxConfigRequest) (*UpdateBackofficeByoNginxConfigResponse, error)
	mustEmbedUnimplementedNginxConfigServer()
}

// UnimplementedNginxConfigServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNginxConfigServer struct{}

func (UnimplementedNginxConfigServer) UpdateByoNginxConfig(context.Context, *UpdateByoNginxConfigRequest) (*UpdateByoNginxConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByoNginxConfig not implemented")
}
func (UnimplementedNginxConfigServer) UpdateBackofficeByoNginxConfig(context.Context, *UpdateBackofficeByoNginxConfigRequest) (*UpdateBackofficeByoNginxConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackofficeByoNginxConfig not implemented")
}
func (UnimplementedNginxConfigServer) mustEmbedUnimplementedNginxConfigServer() {}
func (UnimplementedNginxConfigServer) testEmbeddedByValue()                     {}

// UnsafeNginxConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NginxConfigServer will
// result in compilation errors.
type UnsafeNginxConfigServer interface {
	mustEmbedUnimplementedNginxConfigServer()
}

func RegisterNginxConfigServer(s grpc.ServiceRegistrar, srv NginxConfigServer) {
	// If the following call pancis, it indicates UnimplementedNginxConfigServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NginxConfig_ServiceDesc, srv)
}

func _NginxConfig_UpdateByoNginxConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateByoNginxConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NginxConfigServer).UpdateByoNginxConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NginxConfig_UpdateByoNginxConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NginxConfigServer).UpdateByoNginxConfig(ctx, req.(*UpdateByoNginxConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NginxConfig_UpdateBackofficeByoNginxConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackofficeByoNginxConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NginxConfigServer).UpdateBackofficeByoNginxConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NginxConfig_UpdateBackofficeByoNginxConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NginxConfigServer).UpdateBackofficeByoNginxConfig(ctx, req.(*UpdateBackofficeByoNginxConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NginxConfig_ServiceDesc is the grpc.ServiceDesc for NginxConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NginxConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.acme.service.v1.nginx_config",
	HandlerType: (*NginxConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateByoNginxConfig",
			Handler:    _NginxConfig_UpdateByoNginxConfig_Handler,
		},
		{
			MethodName: "UpdateBackofficeByoNginxConfig",
			Handler:    _NginxConfig_UpdateBackofficeByoNginxConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acme/service/v1/nginx_config.proto",
}
