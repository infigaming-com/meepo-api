// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: acme/service/v1/nginx_config.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Domain with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Domain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Domain with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DomainMultiError, or nil if none found.
func (m *Domain) ValidateAll() error {
	return m.validate(true)
}

func (m *Domain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ByoDomain

	// no validation rules for Domain

	// no validation rules for Template

	if len(errors) > 0 {
		return DomainMultiError(errors)
	}

	return nil
}

// DomainMultiError is an error wrapping multiple validation errors returned by
// Domain.ValidateAll() if the designated constraints aren't met.
type DomainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DomainMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DomainMultiError) AllErrors() []error { return m }

// DomainValidationError is the validation error returned by Domain.Validate if
// the designated constraints aren't met.
type DomainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DomainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DomainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DomainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DomainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DomainValidationError) ErrorName() string { return "DomainValidationError" }

// Error satisfies the builtin error interface
func (e DomainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DomainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DomainValidationError{}

// Validate checks the field values on UpdateByoNginxConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateByoNginxConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateByoNginxConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateByoNginxConfigRequestMultiError, or nil if none found.
func (m *UpdateByoNginxConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateByoNginxConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDomains() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateByoNginxConfigRequestValidationError{
						field:  fmt.Sprintf("Domains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateByoNginxConfigRequestValidationError{
						field:  fmt.Sprintf("Domains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateByoNginxConfigRequestValidationError{
					field:  fmt.Sprintf("Domains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateByoNginxConfigRequestMultiError(errors)
	}

	return nil
}

// UpdateByoNginxConfigRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateByoNginxConfigRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateByoNginxConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateByoNginxConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateByoNginxConfigRequestMultiError) AllErrors() []error { return m }

// UpdateByoNginxConfigRequestValidationError is the validation error returned
// by UpdateByoNginxConfigRequest.Validate if the designated constraints
// aren't met.
type UpdateByoNginxConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateByoNginxConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateByoNginxConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateByoNginxConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateByoNginxConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateByoNginxConfigRequestValidationError) ErrorName() string {
	return "UpdateByoNginxConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateByoNginxConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateByoNginxConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateByoNginxConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateByoNginxConfigRequestValidationError{}

// Validate checks the field values on UpdateByoNginxConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateByoNginxConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateByoNginxConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateByoNginxConfigResponseMultiError, or nil if none found.
func (m *UpdateByoNginxConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateByoNginxConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateByoNginxConfigResponseMultiError(errors)
	}

	return nil
}

// UpdateByoNginxConfigResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateByoNginxConfigResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateByoNginxConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateByoNginxConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateByoNginxConfigResponseMultiError) AllErrors() []error { return m }

// UpdateByoNginxConfigResponseValidationError is the validation error returned
// by UpdateByoNginxConfigResponse.Validate if the designated constraints
// aren't met.
type UpdateByoNginxConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateByoNginxConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateByoNginxConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateByoNginxConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateByoNginxConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateByoNginxConfigResponseValidationError) ErrorName() string {
	return "UpdateByoNginxConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateByoNginxConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateByoNginxConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateByoNginxConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateByoNginxConfigResponseValidationError{}

// Validate checks the field values on UpdateBackofficeByoNginxConfigRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateBackofficeByoNginxConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBackofficeByoNginxConfigRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateBackofficeByoNginxConfigRequestMultiError, or nil if none found.
func (m *UpdateBackofficeByoNginxConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBackofficeByoNginxConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDomains() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateBackofficeByoNginxConfigRequestValidationError{
						field:  fmt.Sprintf("Domains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateBackofficeByoNginxConfigRequestValidationError{
						field:  fmt.Sprintf("Domains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateBackofficeByoNginxConfigRequestValidationError{
					field:  fmt.Sprintf("Domains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateBackofficeByoNginxConfigRequestMultiError(errors)
	}

	return nil
}

// UpdateBackofficeByoNginxConfigRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateBackofficeByoNginxConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBackofficeByoNginxConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBackofficeByoNginxConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBackofficeByoNginxConfigRequestMultiError) AllErrors() []error { return m }

// UpdateBackofficeByoNginxConfigRequestValidationError is the validation error
// returned by UpdateBackofficeByoNginxConfigRequest.Validate if the
// designated constraints aren't met.
type UpdateBackofficeByoNginxConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBackofficeByoNginxConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBackofficeByoNginxConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBackofficeByoNginxConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBackofficeByoNginxConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBackofficeByoNginxConfigRequestValidationError) ErrorName() string {
	return "UpdateBackofficeByoNginxConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBackofficeByoNginxConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBackofficeByoNginxConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBackofficeByoNginxConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBackofficeByoNginxConfigRequestValidationError{}

// Validate checks the field values on UpdateBackofficeByoNginxConfigResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateBackofficeByoNginxConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateBackofficeByoNginxConfigResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateBackofficeByoNginxConfigResponseMultiError, or nil if none found.
func (m *UpdateBackofficeByoNginxConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBackofficeByoNginxConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateBackofficeByoNginxConfigResponseMultiError(errors)
	}

	return nil
}

// UpdateBackofficeByoNginxConfigResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateBackofficeByoNginxConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateBackofficeByoNginxConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBackofficeByoNginxConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBackofficeByoNginxConfigResponseMultiError) AllErrors() []error { return m }

// UpdateBackofficeByoNginxConfigResponseValidationError is the validation
// error returned by UpdateBackofficeByoNginxConfigResponse.Validate if the
// designated constraints aren't met.
type UpdateBackofficeByoNginxConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBackofficeByoNginxConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBackofficeByoNginxConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBackofficeByoNginxConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBackofficeByoNginxConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBackofficeByoNginxConfigResponseValidationError) ErrorName() string {
	return "UpdateBackofficeByoNginxConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBackofficeByoNginxConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBackofficeByoNginxConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBackofficeByoNginxConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBackofficeByoNginxConfigResponseValidationError{}
