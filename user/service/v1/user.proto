syntax = "proto3";

package api.user.service.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
option go_package = "github.com/infigaming-com/meepo-api/user/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.user.service.v1";

// User service provides authentication and user management functionality.
service User {
	// Register a new user with password-based authentication.
	// This endpoint allows users to create a new account using various identity providers.
	rpc Register (RegisterRequest) returns (AuthResponse) {
		option (google.api.http) = {
			post: "/v1/user/auth/register"
			body: "*"
		};
	}
	  
	// Login an existing user with password-based authentication.
	// Users can login using their registered credentials.
	rpc Login (LoginRequest) returns (AuthResponse) {
		option (google.api.http) = {
			post: "/v1/user/auth/login"
			body: "*"
		};
	}

	// Login an existing user with password-based authentication and request info (now adds operator_id and http request info).
	// Users can login using their registered credentials.
	rpc LoginWithInfo (LoginWithInfoRequest) returns (AuthResponse) {
	}
	
	// Register or login using OAuth provider.
	// Supports multiple OAuth providers like Google, Facebook, and Twitter.
	rpc RegisterOrLoginWithOAuth (OAuthRequest) returns (AuthResponse) {
		option (google.api.http) = {
			post: "/v1/user/auth/oauth"
			body: "*"
		};
	}
	
	// Register or login using Telegram authentication.
	// Uses Telegram's login widget for authentication.
	rpc RegisterOrLoginWithTelegram (TelegramAuthRequest) returns (AuthResponse) {
		option (google.api.http) = {
			post: "/v1/user/auth/telegram"
			body: "*"
		};
	}
	
	// Refresh the access token using a refresh token.
	// Used to obtain a new access token when the current one expires.
	rpc RefreshToken (RefreshTokenRequest) returns (RefreshTokenResponse) {
		option (google.api.http) = {
			post: "/v1/user/auth/refresh"
			body: "*"
		};
	}
	  
	// Get user information by userId.
	// Returns basic user information for the specified user.
	rpc GetUser (GetUserRequest) returns (GetUserResponse) {
		option (google.api.http) = {
			post: "/v1/user/get"
			body: "*"
		};
	}

	rpc GetUsersByIds (GetUsersByIdsRequest) returns (GetUsersByIdsResponse) {}

	// Get userIds by operatorIds.
	rpc GetUserIdsByOperatorIds (GetUserIdsByOperatorIdsRequest) returns (GetUserIdsByOperatorIdsResponse) {}
	
	// Logout the current user.
	// Invalidates the current session and refresh token.
	rpc Logout (LogoutRequest) returns (LogoutResponse) {
		option (google.api.http) = {
			post: "/v1/user/auth/logout"
			body: "*"
		};
	}

	rpc IsTokenRevoked (IsTokenRevokedRequest) returns (IsTokenRevokedResponse) {
	}

	// SetOperatorTagConfig sets or updates the follow_parent flag for an operator.
	// It will reverse the follow_parent flag if the record exists.
	// If the record doesn't exist, it will create a new one with follow_parent set to false.
	rpc SetOperatorTagsConfig(SetOperatorTagsConfigRequest) returns (SetOperatorTagsConfigResponse) {
	}

	// SetOperatorTags sets or updates the tags for an operator.
	rpc SetOperatorTags(SetOperatorTagsRequest) returns (SetOperatorTagsResponse) {
	}

	// GetOperatorTagConfig returns follow-parent flag for the given operator ID.
	rpc GetOperatorTagsConfig(GetOperatorTagsConfigRequest) returns (GetOperatorTagsConfigResponse) {}

	// GetOperatorTags retrieves all tags of an operator or parent operator if follow_parent is true.
	rpc GetOperatorTags(GetOperatorTagsRequest) returns (GetOperatorTagsResponse) {
	}

	// GetUserTags retrieves all active tags associated for the current user
	// and also exists in the related operator's tag list.
	rpc GetUserTags (GetUserTagsRequest) returns (GetUserTagsResponse) {
		option (google.api.http) = {
			post: "/v1/user/tags/get"
			body: "*"
		};
	}

	// GetUserTagsById is an internal API to retrieve the tags of given user.
	// It's used by GetUserTags() in user-service for the current user and
	// also by GetUserTags() in backoffice-service for the given user.
	rpc GetUserTagsById (GetUserTagsByIdRequest) returns (GetUserTagsByIdResponse) {
	}

	// SetUserTagsById is an internal API to set the tags of given user.
	// It's used by SetUserTags() in backoffice-service for the given user.
	rpc SetUserTagsById(SetUserTagsByIdRequest) returns (SetUserTagsByIdResponse) {
	}

	rpc CheckPermission (CheckPermissionRequest) returns (CheckPermissionResponse) {
	}

	rpc AddOperator (AddOperatorRequest) returns (AddOperatorResponse) {
	}

	rpc SendEmailVerificationCode(SendEmailVerificationCodeRequest) returns (SendEmailVerificationCodeResponse) {
		option (google.api.http) = {
			post: "/v1/user/email/verification-code/send"
			body: "*"
		};
	}
	
	rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {}

	rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {}

	rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {}

	rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {}
	
	rpc AddComment(AddCommentRequest) returns (AddCommentResponse) {}

	rpc GetCommentsByUserId(GetCommentsByUserIdRequest) returns (GetCommentsByUserIdResponse) {}

	rpc GetUserProfile(GetUserProfileRequest) returns (GetUserProfileResponse) {}

	rpc CreateRole(CreateRoleRequest) returns (CreateRoleResponse) {}

	rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {}

	rpc CreateOperator(CreateOperatorRequest) returns (CreateOperatorResponse) {}

	rpc UpdateRole(UpdateRoleRequest) returns (UpdateRoleResponse) {}

	rpc GetRole(GetRoleRequest) returns (GetRoleResponse) {}

	rpc DeleteRole(DeleteRoleRequest) returns (DeleteRoleResponse) {}

	rpc GetOverviewDashboardFromUser(GetOverviewDashboardFromUserRequest) returns (GetOverviewDashboardFromUserResponse) {}

	rpc GetOperatorIdByOrigin(GetOperatorIdByOriginRequest) returns (GetOperatorIdByOriginResponse) {}

	rpc GetOperatorIdsByOrigin(GetOperatorIdsByOriginRequest) returns (GetOperatorIdsByOriginResponse) {}

	rpc GetOperator(GetOperatorRequest) returns (GetOperatorResponse) {
	}

	rpc GetOperatorsByIds(GetOperatorsByIdsRequest) returns (GetOperatorsByIdsResponse) {
	}

	// ListOperators returns a list of operators based on the enabled status or all operators if the enabled status is not provided.
	rpc ListOperators(ListOperatorsRequest) returns (ListOperatorsResponse) {
	}

	// GetParentOperatorIds returns parent operator IDs for the given operator ID.
	// The response contains only the list of parent operator IDs, doesn't include the requested operator_id.
	rpc GetParentOperatorIds(GetParentOperatorIdsRequest) returns (GetParentOperatorIdsResponse) {
	}

	// GetChildOperatorIds returns direct child operator IDs for the given operator ID.
	rpc GetChildOperatorIds(GetChildOperatorIdsRequest) returns (GetChildOperatorIdsResponse) {
	}

	// CheckEmailExists checks if the email with the hierarchy operator_id list exists in the user table.
	rpc CheckEmailExists(CheckEmailExistsRequest) returns (CheckEmailExistsResponse) {
	}

	// CheckSubdomainExists checks if the subdomain exists in the origin_to_operator table.
	rpc CheckSubdomainExists(CheckSubdomainExistsRequest) returns (CheckSubdomainExistsResponse) {
	}

	// CreateBusiness creates a new business record.
	rpc CreateBusiness(CreateBusinessRequest) returns (CreateBusinessResponse) {
	}
}

// UserInfo contains basic user information.
message UserInfo {
	// Unique identifier for the user.
	int64 user_id = 1;
	// OperatorId.
	int64 operator_id = 2;
	// Username.
	string username = 3;
	// Email.
	string email = 4;
	// Mobile.
	string mobile = 5;
	// Whether the user is enabled.
	bool enabled = 6;
	// First name.
	string firstname = 7;
	// Last name.
	string lastname = 8;
	// Nickname
	string nickname = 9;
	// Avatar
	string avatar = 10;
	// BanGame
	bool ban_game = 11;
	// BanWithdraw
	bool ban_withdraw = 12;
	// role id
	int64 role_id = 13;
}

// AuthType defines the type of authentication method.
enum AuthType {
	// Default value, should not be used.
	AUTH_TYPE_UNSPECIFIED = 0;
	// Password-based authentication.
	AUTH_TYPE_PASSWORD = 1;
	// OAuth-based authentication.
	AUTH_TYPE_OAUTH = 2;
	// Telegram-based authentication.
	AUTH_TYPE_TELEGRAM = 3;
}

// PasswordProvider defines the type of identity used for password authentication.
enum PasswordProvider {
	// Default value, should not be used.
	PASSWORD_PROVIDER_UNSPECIFIED = 0;
	// Username-based authentication.
	PASSWORD_PROVIDER_USERNAME = 1;
	// Email-based authentication.
	PASSWORD_PROVIDER_EMAIL = 2;
	// Mobile number-based authentication.
	PASSWORD_PROVIDER_MOBILE = 3;
}

// OAuthProvider defines the supported OAuth providers.
enum OAuthProvider {
	// Default value, should not be used.
	OAUTH_PROVIDER_UNSPECIFIED = 0;
	// Google OAuth provider.
	OAUTH_PROVIDER_GOOGLE = 1;
	// Facebook OAuth provider.
	OAUTH_PROVIDER_FACEBOOK = 2;
	// Twitter OAuth provider.
	OAUTH_PROVIDER_TWITTER = 3;
}

// RegisterRequest contains the information needed to register a new user.
message RegisterRequest {
	// The type of identity provider to use for registration.
	PasswordProvider password_provider = 1;
	// The identity (username, email, or mobile) to register with.
	string auth_id = 2;
	// The password for the new account.
	string password = 3;
}

// LoginRequest contains the credentials for user login.
message LoginRequest {
	// The type of identity provider to use for login.
	PasswordProvider password_provider = 1;
	// The identity (username, email, or mobile) to login with.
	string auth_id = 2;
	// The password for the account.
	string password = 3;
}

// HttpRequestInfo contains the http request info get from RequestInfoMiddleware.
message HttpRequestInfo {
	string method = 1;
	string path = 2;
	string host = 3;
	string remote_addr = 4;
	string country = 5;
	string origin = 6;
	string referer = 7;
	string user_agent = 8;
	string client_ip = 9;
}

// LoginWithInfoRequest contains the credentials for user login and http request info.
message LoginWithInfoRequest {
	// The type of identity provider to use for login.
	PasswordProvider password_provider = 1;
	// The identity (username, email, or mobile) to login with.
	string auth_id = 2;
	// The password for the account.
	string password = 3;
	// The operator ID to login with.
	int64 operator_id = 4;
	// Http request info.
	HttpRequestInfo http_request_info = 5;
}

// OAuthRequest contains the information needed for OAuth authentication.
message OAuthRequest {
	// The OAuth provider to use for authentication.
	OAuthProvider oauth_provider = 1;
	// The OAuth token received from the provider.
	string token = 2;
}

// TelegramAuthRequest contains the information from Telegram's login widget.
message TelegramAuthRequest {
	// Telegram user Id.
	int64 id = 1;
	// User's first name.
	string first_name = 2;
	// User's last name.
	string last_name = 3;
	// Telegram username.
	string username = 4;
	// URL of the user's profile photo.
	string photo_url = 5;
	// Unix timestamp when the authentication was performed.
	int64 auth_date = 6;
	// Hash for verifying the authentication data.
	string hash = 7;
}

// RefreshTokenRequest contains the refresh token for obtaining a new access token.
message RefreshTokenRequest {
	// The refresh token to use for obtaining a new access token.
	string refresh_token = 1;
}

// AuthResponse contains the authentication tokens and user information.
message AuthResponse {
	// JWT access token for API authentication.
	string access_token = 1;
	// Refresh token for obtaining new access tokens.
	string refresh_token = 2;
	// Number of seconds until the access token expires.
	int64 expires_in = 3;
	// Basic information about the authenticated user.
	UserInfo user_info = 4;
}

// RefreshTokenResponse contains the authentication tokens.
message RefreshTokenResponse {
	// JWT access token for API authentication.
	string access_token = 1;
	// Refresh token for obtaining new access tokens.
	string refresh_token = 2;
	// Number of seconds until the access token expires.
	int64 expires_in = 3;
}

// GetUserRequest contains the userId of the user to retrieve.
message GetUserRequest {
	// The userId of the user to retrieve.
	int64 user_id = 1;
}

// GetUserResponse contains the requested user's information.
message GetUserResponse {
	// Basic information about the requested user.
	UserInfo user_info = 1;
}

message GetUsersByIdsRequest {
	repeated int64 user_ids = 1;
}

message GetUsersByIdsResponse {
	repeated UserInfo users = 1;
}

message GetUserIdsByOperatorIdsRequest {
	repeated int64 operator_ids = 1;
}

message GetUserIdsByOperatorIdsResponse {
	repeated int64 user_ids = 1;
}

// LogoutRequest is an empty message for the logout operation.
message LogoutRequest {}

// LogoutResponse is an empty message for the logout operation.
message LogoutResponse {}

message IsTokenRevokedRequest {
	string token = 1;
}

message IsTokenRevokedResponse {
	bool revoked = 1;
}

// SetOperatorTagsConfigRequest contains the operator ID.
message SetOperatorTagsConfigRequest {
	// The ID of the operator to set tag configuration for.
	int64 operator_id = 1;
	// Whether to follow parent operator's tags.
	bool follow_parent = 2;
}

// SetOperatorTagsConfigResponse is an empty message indicating successful tag configuration.
message SetOperatorTagsConfigResponse {}

// SetOperatorTagsRequest contains the operator ID and tag to add.
message SetOperatorTagsRequest {
	// The ID of the operator to add the tag to.
	int64 operator_id = 1;
	// The tag to add to the operator.
	repeated string tags = 2;
}

// SetOperatorTagsResponse is an empty message indicating successful tag addition.
message SetOperatorTagsResponse {}

// GetOperatorTagsConfigRequest contains the operator ID to retrieve tag configuration.
message GetOperatorTagsConfigRequest {
	// The ID of the operator to get tag configuration for.
	int64 operator_id = 1;
}

// GetOperatorTagsConfigResponse contains the tag configuration settings, now only follow_parent flag.
message GetOperatorTagsConfigResponse {
	// Whether the operator should follow parent operator's tags.
	bool follow_parent = 1;
}

// GetOperatorTagsRequest contains the operator ID to retrieve tags for.
message GetOperatorTagsRequest {
	// The ID of the operator to get tags for.
	int64 operator_id = 1;
}	

// GetOperatorTagsResponse contains the list of tags associated with the operator or parent operator if follow_parent is true.
message GetOperatorTagsResponse {
	// List of tags associated with the operator.
	repeated string tags = 1;
}

// GetUserTagsRequest retrieve tags for the current user.
message GetUserTagsRequest {}

// GetUserTagsResponse contains the list of active tags associated with the user.
message GetUserTagsResponse {
	// List of active tags associated with the user.
	repeated string tags = 1;
}


// GetUserTagsByIdRequest contains the user ID to retrieve tags for.
message GetUserTagsByIdRequest {
	// The ID of the user to get tags for.
	int64 user_id = 1;
}

// GetUserTagsByIdResponse contains the list of active tags associated with the user.
message GetUserTagsByIdResponse {
	// List of active tags associated with the user.
	repeated string tags = 1;
}

message SetUserTagsByIdRequest {
	int64 user_id = 1;
	repeated string tags = 2;
}

message SetUserTagsByIdResponse {}

message CheckPermissionRequest {
	string path = 1;
	int64 role_id = 2;
	int64 operator_id = 3;
}

message CheckPermissionResponse {
	bool allowed = 1;
}

message AddOperatorRequest {
	string operator_id = 1;
}

message AddOperatorResponse {
}

message SendEmailVerificationCodeRequest {
	string email = 1;
	OperatorContext operator_context = 2;
	optional int64 user_id = 3;
}

message SendEmailVerificationCodeResponse {
}
message UpdateUserRequest {
	int64 user_id = 1;
	optional string nickname = 2;
	optional string avatar = 3;
	optional bool ban_login = 4;
	optional bool ban_game = 5;
	optional bool ban_withdraw = 6;
	optional bool enabled = 7;
	optional int64 role_id = 8;
}

message UpdateUserResponse {
}

message ListUsersRequest {
	optional int64 user_id = 1;
	repeated string tags = 2; // not available for now
	optional google.protobuf.Timestamp registration_start_time = 3;
	optional google.protobuf.Timestamp registration_end_time = 4;
	optional int32 vip_level = 5;
	optional int64 retailer_operator_id = 6;
	optional int64 group_operator_id = 7;
	optional int64 operator_id = 8;
	optional string country = 9;
	// optional int32 risk_level_min = 10;
	// optional int32 risk_level_max = 11;
	optional int32 kyc_level = 12;
	// optional bool has_made_deposit = 13;
	optional string deposit_min = 14;
	optional string deposit_max = 15;
	optional string withdrawal_min = 16;
	optional string withdrawal_max = 17;
	optional bool ban_withdraw = 18;
	optional bool ban_game = 19;
	optional bool ban_login = 20;
	optional string user_type = 21;
	optional int64 role_id = 22;
	optional bool online = 23;
	optional bool enabled = 24;
	optional string email = 25;
	optional string mobile = 26;
	optional int32 page = 27;
	optional int32 page_size = 28;
}

message ListUsersResponse {
	message User {
		string retailer = 1;
		string group = 2;
		string operator_name = 3;
		int64 user_id = 4;
		string username = 5;
		string email = 6;
		string mobile = 7;
		int32 vip_level = 8;
		int32 kyc_level = 9;
		string deposit = 10;
		string withdraw = 11;
		repeated string tags = 12;
		bool ban_withdraw = 13;
		bool ban_game = 14;
		bool ban_login = 15;
		bool online = 16;
		google.protobuf.Timestamp last_login_at = 17;
		google.protobuf.Timestamp registered_at = 18;
		// int32 risk_level = 19;
		// string referral_code = 20;
		// string affiliate_code = 21;
		string country = 22;
		// string device = 23;
		// string source = 24;
		string registration_ip = 25;
		bool enabled = 26;
		google.protobuf.Timestamp created_at = 27;
		Role role = 28;
	}
	repeated User users = 1;
	int32 page = 2;
	int32 page_size = 3;
	int32 total = 4;
	int32 total_enabled = 5;
	int32 total_disabled = 6;
}

message CreateUserRequest {
	string username = 1;
	string password = 2;
	string email = 3;
	string mobile = 4;
	OperatorContext operator_context = 5;
	int64 role_id = 6;
}

message CreateUserResponse {
	int64 user_id = 1;
}

message VerifyEmailRequest {
	string email = 1;
	string verification_code = 2;
	OperatorContext operator_context = 3;
}

message VerifyEmailResponse {}
message AddCommentRequest {
	int64 user_id = 1;
	int64 author_user_id = 2;
	string content = 3;
}

message AddCommentResponse {
	int64 comment_id = 1;
}

message GetCommentsByUserIdRequest {
	int64 user_id = 1;
}

message GetCommentsByUserIdResponse {
	message Comment {
		int64 comment_id = 1;
		int64 user_id = 2;
		int64 author_user_id = 4;
		string content = 6;
		int64 created_at = 7;
	}
	repeated Comment comments = 1;
}

message GetUserProfileRequest {
	int64 user_id = 1;
	optional int32 login_page = 2;
	optional int32 login_page_size = 3;
}

message GetUserProfileResponse {
	message IpInfo {
		string ip = 1;
		int32 count = 2;
		string country = 3;
	}
	message RegistrationRecord {
		google.protobuf.Timestamp registered_at = 1;
		IpInfo ip_info = 2;
		string device = 3;
		string method = 4;
		string browser = 5;
		string app = 6; // Not available for now
		string mobile = 7;
		string email = 8;
		string username = 9;
		string source = 10;
	}
	message LoginRecord {
		google.protobuf.Timestamp login_at = 1;
		IpInfo ip_info = 2;
		string device = 3;
		string method = 4;
		string browser = 5;
		string app = 6; // Not available for now
		string email = 7;
		string mobile = 8;
		string username = 9;
	}
	message Comment {
		int64 comment_id = 1;
		string username = 2;
		string author_username = 3;
		string content = 4;
		google.protobuf.Timestamp created_at = 5;
	}
	string nickname = 1;
	int64 user_id = 2;
	int32 vip_level = 3; // Not available for now, only return 1
	bool online = 4;
	bool ban_withdraw = 5;
	bool ban_game = 6;
	bool ban_login = 7;
	RegistrationRecord registration_record = 8;
	repeated LoginRecord login_records = 9;
	repeated string tags = 10;
	repeated Comment comments = 11;
	int32 total_login_count = 12;
	int32 login_page = 13;
	int32 login_page_size = 14;
}

message CreateRoleRequest {
	string name = 1;
	repeated Permission permissions = 2;
	int64 user_id = 3;
}

message Permission {
	string module = 1;
	repeated string actions = 2;
}

message CreateRoleResponse {}

message ListRolesRequest {
	optional int32 page = 1;
	optional int32 page_size = 2;
}

message Role {
	int64 role_id = 1;
	string name = 2;
	repeated Permission permissions = 3;
}

message ListRolesResponse {
	repeated Role roles = 1;
	int32 page = 2;
	int32 page_size = 3;
	int32 total = 4;
}
enum OperatorType {
	OPERATOR_TYPE_UNSPECIFIED = 0;
	OPERATOR_TYPE_RETAILER = 1;
	OPERATOR_TYPE_GROUP = 2;
	OPERATOR_TYPE_OPERATOR = 3;
}

message CreateOperatorRequest {
	string operator_name = 1;
	string operator_type = 2;
	repeated int64 parent_operator_ids = 3;
	string subdomain = 4;
}

message CreateOperatorResponse {
	int64 operator_id = 1;
}

message UpdateRoleRequest {
	int64 role_id = 1;
	string name = 2;
	repeated Permission permissions = 3;
}

message UpdateRoleResponse {}

message GetRoleRequest {
	int64 role_id = 1;
}

message GetRoleResponse {
	Role role = 1;
}

message GetOverviewDashboardFromUserRequest {
}

message GetOverviewDashboardFromUserResponse {
	message RegisteredUsers {
		int32 today = 1;
		int32 yesterday = 2;
	}
	message FirstDepositUsers {
		int32 today = 1;
		int32 yesterday = 2;
	}
	message ActiveUsers {
		int32 today = 1;
		int32 yesterday = 2;
	}
	RegisteredUsers registered_users = 1;
	FirstDepositUsers first_deposit_users = 2;
	ActiveUsers active_users = 3;
}

message DeleteRoleRequest {
	int64 role_id = 1;
}

message DeleteRoleResponse {}

message GetOperatorIdByOriginRequest {
	string origin = 1;
}

message GetOperatorIdByOriginResponse {
	int64 operator_id = 1;
}

message GetOperatorIdsByOriginRequest {
	string origin = 1;
}

message GetOperatorIdsByOriginResponse {
	OperatorContext operator_context = 1;
}

message GetOperatorRequest {
	int64 operator_id = 1;
}

message GetOperatorResponse {
	message Operator {
		int64 operator_id = 1;
		string name = 2;
		bool enabled = 3;
	}
	Operator operator = 1;
}

message GetOperatorsByIdsRequest {
	repeated int64 operator_ids = 1;
}

message GetOperatorsByIdsResponse {
	message Operator {
		int64 operator_id = 1;
		string name = 2;
		bool enabled = 3;
	}
	repeated Operator operators = 1;
}

message ListOperatorsRequest {
	optional bool enabled = 1;
}

message ListOperatorsResponse {
	message Operator {
		int64 operator_id = 1;
		string operator_name = 2;
		bool enabled = 3;
	}
	repeated Operator operators = 1;
}

message GetParentOperatorIdsRequest {
	// The operator ID to get parent operators for
	int64 operator_id = 1;
}

message GetParentOperatorIdsResponse {
	// List of parent operator IDs.
	repeated int64 parent_operator_ids = 1;
}

message GetChildOperatorIdsRequest {
	// The operator ID to get child operators for
	int64 operator_id = 1;
}

message GetChildOperatorIdsResponse {
	// List of child operator IDs.
	repeated int64 child_operator_ids = 1;
}

message OperatorContext {
	int64 operator_id = 1;
	int64 company_operator_id = 2;
	int64 retailer_operator_id = 3;
	int64 system_operator_id = 4;
}

message CheckEmailExistsRequest {
	string email = 1;
	int64 operator_id = 2;
	string operator_type = 3; // "operator", "company", "retailer", "system"
}

message CheckEmailExistsResponse {
	bool exists = 1;
}

message CheckSubdomainExistsRequest {
	string subdomain = 1;
}

message CheckSubdomainExistsResponse {
	bool exists = 1;
}

message CreateBusinessRequest {
	string name = 1;
	// business type: "retailer", "retailer", "operator"
	string type = 2;
	string contact_name = 3;
	string contact_methods = 4;
	string affiliate = 5;
	int64 owner_user_id = 6;
	OperatorContext operator_context = 7;
}

message CreateBusinessResponse {
	int64 business_id = 1;
}