syntax = "proto3";

package api.user.service.v1;

import "google/api/annotations.proto";

option go_package = "github.com/infigaming-com/meepo-api/user/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.user.service.v1";

// User service provides authentication and user management functionality.
service User {
	rpc Event (EventRequest) returns (EventResponse) {}

	// Register a new user with password-based authentication.
	// This endpoint allows users to create a new account using various identity providers.
	rpc Register (RegisterRequest) returns (AuthResponse) {
		option (google.api.http) = {
			post: "/v1/user/auth/register"
			body: "*"
		};
	}
	  
	// Login an existing user with password-based authentication.
	// Users can login using their registered credentials.
	rpc Login (LoginRequest) returns (AuthResponse) {
		option (google.api.http) = {
			post: "/v1/user/auth/login"
			body: "*"
		};
	}
	
	// Register or login using OAuth provider.
	// Supports multiple OAuth providers like Google, Facebook, and Twitter.
	rpc RegisterOrLoginWithOAuth (OAuthRequest) returns (AuthResponse) {
		option (google.api.http) = {
			post: "/v1/user/auth/oauth"
			body: "*"
		};
	}
	
	// Register or login using Telegram authentication.
	// Uses Telegram's login widget for authentication.
	rpc RegisterOrLoginWithTelegram (TelegramAuthRequest) returns (AuthResponse) {
		option (google.api.http) = {
			post: "/v1/user/auth/telegram"
			body: "*"
		};
	}
	
	// Refresh the access token using a refresh token.
	// Used to obtain a new access token when the current one expires.
	rpc RefreshToken (RefreshTokenRequest) returns (RefreshTokenResponse) {
		option (google.api.http) = {
			post: "/v1/user/auth/refresh"
			body: "*"
		};
	}
	  
	// Get user information by userId.
	// Returns basic user information for the specified user.
	rpc GetUser (GetUserRequest) returns (GetUserResponse) {
		option (google.api.http) = {
			post: "/v1/user/get"
			body: "*"
		};
	}

	// Get userIds by operatorIds.
	rpc GetUserIdsByOperatorIds (GetUserIdsByOperatorIdsRequest) returns (GetUserIdsByOperatorIdsResponse) {}
	
	// Logout the current user.
	// Invalidates the current session and refresh token.
	rpc Logout (LogoutRequest) returns (LogoutResponse) {
		option (google.api.http) = {
			post: "/v1/user/auth/logout"
			body: "*"
		};
	}

	rpc IsTokenRevoked (IsTokenRevokedRequest) returns (IsTokenRevokedResponse) {
	}


	// GetOperatorTagConfig returns follow-parent flag for the given operator ID.
	rpc GetOperatorTagConfig(GetOperatorTagConfigRequest) returns (GetOperatorTagConfigResponse) {
		option (google.api.http) = {
			post: "/v1/user/operators/tag-config/get"
			body: "*"
		};
	}

	// SetOperatorTagConfig sets or updates the follow_parent flag for an operator.
	// It will reverse the follow_parent flag if the record exists.
	// If the record doesn't exist, it will create a new one with follow_parent set to false.
	rpc SetOperatorTagConfig(SetOperatorTagConfigRequest) returns (SetOperatorTagConfigResponse) {
		option (google.api.http) = {
			post: "/v1/user/operators/tag-config/set"
			body: "*"
		};
	}

	// AddOperatorTag adds a new tag to an operator if follow_parent is false.
	rpc AddOperatorTag(AddOperatorTagRequest) returns (AddOperatorTagResponse) {
		option (google.api.http) = {
			post: "/v1/user/operators/tags/add"
			body: "*"
		};
	}

	// GetOperatorTags retrieves all tags of an operator or parent operator if follow_parent is true.
	rpc GetOperatorTags(GetOperatorTagsRequest) returns (GetOperatorTagsResponse) {
		option (google.api.http) = {
			post: "/v1/user/operators/tags/get"
			body: "*"
		};
	}

	// DeleteOperatorTag soft deletes a specific tag from an operator.
	rpc DeleteOperatorTag(DeleteOperatorTagRequest) returns (DeleteOperatorTagResponse) {
		option (google.api.http) = {
			post: "/v1/user/operators/tags/delete"
			body: "*"
		};
	}

	// AddUserTag adds a new tag to a user.
	rpc AddUserTag (AddUserTagRequest) returns (AddUserTagResponse) {
		option (google.api.http) = {
			post: "/v1/user/tags/add"
			body: "*"
		};
	}

	// DeleteUserTag soft deletes a tag from a user.
	rpc DeleteUserTag (DeleteUserTagRequest) returns (DeleteUserTagResponse) {
		option (google.api.http) = {
			post: "/v1/user/tags/delete"
			body: "*"
		};
	}

	// GetUserTags retrieves all active tags associated with a user and also exists in the related operator's tag list.
	rpc GetUserTags (GetUserTagsRequest) returns (GetUserTagsResponse) {
		option (google.api.http) = {
			post: "/v1/user/tags/get"
			body: "*"
		};
	}
	
}

message EventRequest {
	string topic = 1;
	bytes event_data = 2;
}

message EventResponse {}

// UserInfo contains basic user information.
message UserInfo {
	// Unique identifier for the user.
	int64 user_id = 1;
	// OperatorId.
	int64 operator_id = 2;
	// Username.
	string username = 3;
	// Email.
	string email = 4;
	// Mobile.
	string mobile = 5;
	// Whether the user is enabled.
	bool enabled = 6;
	// First name.
	string firstname = 7;
	// Last name.
	string lastname = 8;
	// Nickname
	string nickname = 9;
	// Avatar
	string avatar = 10;
	// BanGame
	bool ban_game = 11;
	// BanWithdraw
	bool ban_withdraw = 12;
}

// AuthType defines the type of authentication method.
enum AuthType {
	// Default value, should not be used.
	AUTH_TYPE_UNSPECIFIED = 0;
	// Password-based authentication.
	AUTH_TYPE_PASSWORD = 1;
	// OAuth-based authentication.
	AUTH_TYPE_OAUTH = 2;
	// Telegram-based authentication.
	AUTH_TYPE_TELEGRAM = 3;
}

// PasswordProvider defines the type of identity used for password authentication.
enum PasswordProvider {
	// Default value, should not be used.
	PASSWORD_PROVIDER_UNSPECIFIED = 0;
	// Username-based authentication.
	PASSWORD_PROVIDER_USERNAME = 1;
	// Email-based authentication.
	PASSWORD_PROVIDER_EMAIL = 2;
	// Mobile number-based authentication.
	PASSWORD_PROVIDER_MOBILE = 3;
}

// OAuthProvider defines the supported OAuth providers.
enum OAuthProvider {
	// Default value, should not be used.
	OAUTH_PROVIDER_UNSPECIFIED = 0;
	// Google OAuth provider.
	OAUTH_PROVIDER_GOOGLE = 1;
	// Facebook OAuth provider.
	OAUTH_PROVIDER_FACEBOOK = 2;
	// Twitter OAuth provider.
	OAUTH_PROVIDER_TWITTER = 3;
}

// RegisterRequest contains the information needed to register a new user.
message RegisterRequest {
	// The type of identity provider to use for registration.
	PasswordProvider password_provider = 1;
	// The identity (username, email, or mobile) to register with.
	string auth_id = 2;
	// The password for the new account.
	string password = 3;
}

// LoginRequest contains the credentials for user login.
message LoginRequest {
	// The type of identity provider to use for login.
	PasswordProvider password_provider = 1;
	// The identity (username, email, or mobile) to login with.
	string auth_id = 2;
	// The password for the account.
	string password = 3;
}

// OAuthRequest contains the information needed for OAuth authentication.
message OAuthRequest {
	// The OAuth provider to use for authentication.
	OAuthProvider oauth_provider = 1;
	// The OAuth token received from the provider.
	string token = 2;
}

// TelegramAuthRequest contains the information from Telegram's login widget.
message TelegramAuthRequest {
	// Telegram user Id.
	int64 id = 1;
	// User's first name.
	string first_name = 2;
	// User's last name.
	string last_name = 3;
	// Telegram username.
	string username = 4;
	// URL of the user's profile photo.
	string photo_url = 5;
	// Unix timestamp when the authentication was performed.
	int64 auth_date = 6;
	// Hash for verifying the authentication data.
	string hash = 7;
}

// RefreshTokenRequest contains the refresh token for obtaining a new access token.
message RefreshTokenRequest {
	// The refresh token to use for obtaining a new access token.
	string refresh_token = 1;
}

// AuthResponse contains the authentication tokens and user information.
message AuthResponse {
	// JWT access token for API authentication.
	string access_token = 1;
	// Refresh token for obtaining new access tokens.
	string refresh_token = 2;
	// Number of seconds until the access token expires.
	int64 expires_in = 3;
	// Basic information about the authenticated user.
	UserInfo user_info = 4;
}

// RefreshTokenResponse contains the authentication tokens.
message RefreshTokenResponse {
	// JWT access token for API authentication.
	string access_token = 1;
	// Refresh token for obtaining new access tokens.
	string refresh_token = 2;
	// Number of seconds until the access token expires.
	int64 expires_in = 3;
}

// GetUserRequest contains the userId of the user to retrieve.
message GetUserRequest {
	// The userId of the user to retrieve.
	int64 user_id = 1;
}

// GetUserResponse contains the requested user's information.
message GetUserResponse {
	// Basic information about the requested user.
	UserInfo user_info = 1;
}

message GetUserIdsByOperatorIdsRequest {
	repeated int64 operator_ids = 1;
}

message GetUserIdsByOperatorIdsResponse {
	repeated int64 user_ids = 1;
}

// LogoutRequest is an empty message for the logout operation.
message LogoutRequest {}

// LogoutResponse is an empty message for the logout operation.
message LogoutResponse {}

message IsTokenRevokedRequest {
	string token = 1;
}

message IsTokenRevokedResponse {
	bool revoked = 1;
}

// GetOperatorTagConfigRequest contains the operator ID to retrieve tag configuration.
message GetOperatorTagConfigRequest {
	// The ID of the operator to get tag configuration for.
	int64 operator_id = 1;
}

// GetOperatorTagConfigResponse contains the tag configuration settings, now only follow_parent flag.
message GetOperatorTagConfigResponse {
	// Whether the operator should follow parent operator's tags.
	bool follow_parent = 1;
}

// SetOperatorTagConfigRequest contains the operator ID.
message SetOperatorTagConfigRequest {
	// The ID of the operator to set tag configuration for.
	int64 operator_id = 1;
	// Whether to follow parent operator's tags.
	bool follow_parent = 2;
}

// SetOperatorTagConfigResponse contains the updated tag configuration, now only follow_parent flag.
message SetOperatorTagConfigResponse {
	// The updated follow_parent setting.
	bool follow_parent = 1;
}

// AddOperatorTagRequest contains the operator ID and tag to add.
message AddOperatorTagRequest {
	// The ID of the operator to add the tag to.
	int64 operator_id = 1;
	// The tag to add to the operator.
	string tag = 2;
}

// AddOperatorTagResponse is an empty message indicating successful tag addition.
message AddOperatorTagResponse {}

// GetOperatorTagsRequest contains the operator ID to retrieve tags for.
message GetOperatorTagsRequest {
	// The ID of the operator to get tags for.
	int64 operator_id = 1;
}	

// GetOperatorTagsResponse contains the list of tags associated with the operator or parent operator if follow_parent is true.
message GetOperatorTagsResponse {
	// List of tags associated with the operator.
	repeated string tags = 1;
}

// DeleteOperatorTagRequest contains the operator ID and tag to soft delete.
message DeleteOperatorTagRequest {
	// The ID of the operator to delete the tag from.
	int64 operator_id = 1;
	// The tag to delete from the operator.
	string tag = 2;
}

// DeleteOperatorTagResponse is an empty message indicating successful tag deletion.
message DeleteOperatorTagResponse {}

// AddUserTagRequest contains the user ID and tag to add.
message AddUserTagRequest {
	// The ID of the user to add the tag to.
	int64 user_id = 1;
	// The tag to add to the user.
	string tag = 2;
}

// AddUserTagResponse is an empty message indicating successful tag addition.
message AddUserTagResponse {}

// DeleteUserTagRequest contains the user ID and tag to soft delete.
message DeleteUserTagRequest {
	// The ID of the user to delete the tag from.
	int64 user_id = 1;
	// The tag to delete from the user.
	string tag = 2;
}

// DeleteUserTagResponse is an empty message indicating successful tag deletion.
message DeleteUserTagResponse {}

// GetUserTagsRequest contains the user ID to retrieve tags for.
message GetUserTagsRequest {
	// The ID of the user to get tags for.
	int64 user_id = 1;
}

// GetUserTagsResponse contains the list of active tags associated with the user.
message GetUserTagsResponse {
	// List of active tags associated with the user.
	repeated string tags = 1;
}
