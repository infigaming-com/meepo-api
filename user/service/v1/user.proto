syntax = "proto3";

package api.user.service.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "common/common.proto";
import "vip/service/v1/vip.proto";

option go_package = "github.com/infigaming-com/meepo-api/user/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.user.service.v1";

// User service provides authentication and user management functionality.
service User {
	// Register a new user with password-based authentication.
	// This endpoint allows users to create a new account using various identity providers.
	rpc Register (RegisterRequest) returns (AuthResponse) {
		option (google.api.http) = {
			post: "/v1/user/auth/register"
			body: "*"
		};
	}
	  
	// Login an existing user with password-based authentication.
	// Users can login using their registered credentials.
	rpc Login (LoginRequest) returns (AuthResponse) {
		option (google.api.http) = {
			post: "/v1/user/auth/login"
			body: "*"
		};
	}

	// Login an existing user with password-based authentication and request info (now adds operator_id and http request info).
	// Users can login using their registered credentials.
	rpc LoginWithInfo (LoginWithInfoRequest) returns (AuthResponse) {
	}
	
	// Register or login using OAuth provider.
	// Supports multiple OAuth providers like Google, Facebook, and Twitter.
	rpc RegisterOrLoginWithOAuth (OAuthRequest) returns (AuthResponse) {
		option (google.api.http) = {
			post: "/v1/user/auth/oauth"
			body: "*"
		};
	}
	
	// Register or login using Telegram authentication.
	// Uses Telegram's login widget for authentication.
	rpc RegisterOrLoginWithTelegram (TelegramAuthRequest) returns (AuthResponse) {
		option (google.api.http) = {
			post: "/v1/user/auth/telegram"
			body: "*"
		};
	}
	
	// Refresh the access token using a refresh token.
	// Used to obtain a new access token when the current one expires.
	rpc RefreshToken (RefreshTokenRequest) returns (RefreshTokenResponse) {
		option (google.api.http) = {
			post: "/v1/user/auth/refresh"
			body: "*"
		};
	}
	  
	// Get user information by userId.
	// Returns basic user information for the specified user.
	rpc GetUser (GetUserRequest) returns (GetUserResponse) {
		option (google.api.http) = {
			post: "/v1/user/get"
			body: "*"
		};
	}

	rpc GetUsersByIds (GetUsersByIdsRequest) returns (GetUsersByIdsResponse) {}

	// Get userIds by operatorIds.
	rpc GetUserIdsByOperatorIds (GetUserIdsByOperatorIdsRequest) returns (GetUserIdsByOperatorIdsResponse) {}
	
	// Logout the current user.
	// Invalidates the current session and refresh token.
	rpc Logout (LogoutRequest) returns (LogoutResponse) {
		option (google.api.http) = {
			post: "/v1/user/auth/logout"
			body: "*"
		};
	}

	rpc IsTokenRevoked (IsTokenRevokedRequest) returns (IsTokenRevokedResponse) {
	}

	// SetOperatorTagConfig sets or updates the follow_parent flag for an operator.
	// It will reverse the follow_parent flag if the record exists.
	// If the record doesn't exist, it will create a new one with follow_parent set to false.
	rpc SetOperatorTagsConfig(SetOperatorTagsConfigRequest) returns (SetOperatorTagsConfigResponse) {
	}

	// SetOperatorTags sets or updates the tags for an operator.
	rpc SetOperatorTags(SetOperatorTagsRequest) returns (SetOperatorTagsResponse) {
	}

	// GetOperatorTagConfig returns follow-parent flag for the given operator ID.
	rpc GetOperatorTagsConfig(GetOperatorTagsConfigRequest) returns (GetOperatorTagsConfigResponse) {}

	// GetOperatorTags retrieves all tags of an operator or parent operator if follow_parent is true.
	rpc GetOperatorTags(GetOperatorTagsRequest) returns (GetOperatorTagsResponse) {
	}

	// GetUserTags retrieves all active tags associated for the current user
	// and also exists in the related operator's tag list.
	rpc GetUserTags (GetUserTagsRequest) returns (GetUserTagsResponse) {
		option (google.api.http) = {
			post: "/v1/user/tags/get"
			body: "*"
		};
	}

	// GetUserTagsById is an internal API to retrieve the tags of given user.
	// It's used by GetUserTags() in user-service for the current user and
	// also by GetUserTags() in backoffice-service for the given user.
	rpc GetUserTagsById (GetUserTagsByIdRequest) returns (GetUserTagsByIdResponse) {
	}

	// SetUserTagsById is an internal API to set the tags of given user.
	// It's used by SetUserTags() in backoffice-service for the given user.
	rpc SetUserTagsById(SetUserTagsByIdRequest) returns (SetUserTagsByIdResponse) {
	}

	rpc CheckPermission (CheckPermissionRequest) returns (CheckPermissionResponse) {
	}

	rpc AddOperator (AddOperatorRequest) returns (AddOperatorResponse) {
	}

	rpc SendEmailVerificationCode(SendEmailVerificationCodeRequest) returns (SendEmailVerificationCodeResponse) {
		option (google.api.http) = {
			post: "/v1/user/email/verification-code/send"
			body: "*"
		};
	}

	// Send password reset verification code to email
	rpc SendPasswordResetCode(SendPasswordResetCodeRequest) returns (SendPasswordResetCodeResponse) {
		option (google.api.http) = {
			post: "/v1/user/auth/password/reset-code/send"
			body: "*"
		};
	}

	// Reset password using verification code
	rpc ResetPasswordWithCode(ResetPasswordWithCodeRequest) returns (ResetPasswordWithCodeResponse) {
		option (google.api.http) = {
			post: "/v1/user/auth/password/reset"
			body: "*"
		};
	}
	
	rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      post: "/v1/user/update"
      body: "*"
    };
	}

	rpc UpdateUserIdentity(UpdateUserIdentityRequest) returns (UpdateUserIdentityResponse) {
    option (google.api.http) = {
      post: "/v1/user/identity/update"
      body: "*"
    };
	}

	rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {}

	rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {}

	rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {
		option (google.api.http) = {
			post: "/v1/user/email/verify/get"
			body: "*"
		};
	}
	
	rpc AddComment(AddCommentRequest) returns (AddCommentResponse) {}

	rpc GetCommentsByUserId(GetCommentsByUserIdRequest) returns (GetCommentsByUserIdResponse) {}

	rpc GetUserProfile(GetUserProfileRequest) returns (GetUserProfileResponse) {}

	rpc CreateRole(CreateRoleRequest) returns (CreateRoleResponse) {}

	rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {}

	rpc CreateOperator(CreateOperatorRequest) returns (CreateOperatorResponse) {}

	rpc UpdateRole(UpdateRoleRequest) returns (UpdateRoleResponse) {}

	rpc GetRole(GetRoleRequest) returns (GetRoleResponse) {}

	rpc DeleteRole(DeleteRoleRequest) returns (DeleteRoleResponse) {}

	rpc GetOverviewDashboardFromUser(GetOverviewDashboardFromUserRequest) returns (GetOverviewDashboardFromUserResponse) {}

	rpc GetOperatorIdByOrigin(GetOperatorIdByOriginRequest) returns (GetOperatorIdByOriginResponse) {}

	rpc GetOperatorIdsByOrigin(GetOperatorIdsByOriginRequest) returns (GetOperatorIdsByOriginResponse) {}

	rpc GetOperatorInfoByOrigin(GetOperatorInfoByOriginRequest) returns (GetOperatorInfoByOriginResponse) {}

	rpc GetOperator(GetOperatorRequest) returns (GetOperatorResponse) {
	}

	rpc GetOperatorsByIds(GetOperatorsByIdsRequest) returns (GetOperatorsByIdsResponse) {
	}

	// ListOperators returns a list of operators based on the enabled status or all operators if the enabled status is not provided.
	rpc ListAllOperators(ListAllOperatorsRequest) returns (ListAllOperatorsResponse) {
	}

	// GetParentOperatorIds returns parent operator IDs for the given operator ID.
	// The response contains only the list of parent operator IDs, doesn't include the requested operator_id.
	rpc GetParentOperatorIds(GetParentOperatorIdsRequest) returns (GetParentOperatorIdsResponse) {
	}

	// GetChildOperatorIds returns direct child operator IDs for the given operator ID.
	rpc GetChildOperatorIds(GetChildOperatorIdsRequest) returns (GetChildOperatorIdsResponse) {
	}

	// CheckEmailExists checks if the email with the hierarchy operator_id list exists in the user table.
	rpc CheckEmailExists(CheckEmailExistsRequest) returns (CheckEmailExistsResponse) {
	}

	// CheckSubdomainExists checks if the subdomain exists in the origin_to_operator table.
	rpc CheckSubdomainExists(CheckSubdomainExistsRequest) returns (CheckSubdomainExistsResponse) {
	}

	// CheckOperatorKeyExists checks if the operator key exists in the operator table.
	rpc CheckOperatorKeyExists(CheckOperatorKeyExistsRequest) returns (CheckOperatorKeyExistsResponse) {
	}

	// CreateBusiness creates a new business record.
	rpc CreateBusiness(CreateBusinessRequest) returns (CreateBusinessResponse) {
	}

	// GetOperatorDetails returns the operator details.
	rpc GetOperatorDetails(GetOperatorDetailsRequest) returns (GetOperatorDetailsResponse) {
	}

	// ListOperatorsByParentOperatorId returns a list of operators by parent operator ID.
	rpc ListOperatorsByParentOperatorId(ListOperatorsByParentOperatorIdRequest) returns (ListOperatorsByParentOperatorIdResponse) {
	}

	// ListRetailers returns a list of retailers by operator context
	rpc ListRetailerOperators(ListRetailerOperatorsRequest) returns (ListRetailerOperatorsResponse) {
	}

	// ListCompanies returns a list of companies by operator context
	rpc ListCompanyOperators(ListCompanyOperatorsRequest) returns (ListCompanyOperatorsResponse) {
	}

	// ListBottomOperators returns a list of bottom operators by operator context
	rpc ListBottomOperators(ListBottomOperatorsRequest) returns (ListBottomOperatorsResponse) {
	}

	// UpdateOperatorStatus updates the status of an operator
	rpc UpdateOperatorStatus(UpdateOperatorStatusRequest) returns (UpdateOperatorStatusResponse) {
	}

	// ListAllUsers returns a list of all users which belong to the operator context
	rpc ListAllUsers(ListAllUsersRequest) returns (ListAllUsersResponse) {
	}

	// ListOperatorsByAdminEmail returns a list of (retailer, company, bottom) operators by admin email based on the operator context
	rpc ListOperatorsByAdminEmail(ListOperatorsByAdminEmailRequest) returns (ListOperatorsByAdminEmailResponse) {
	}

	// ListOperatorDetails returns a list of operator details
	rpc ListOperatorDetails(ListOperatorDetailsRequest) returns (ListOperatorDetailsResponse) {
	}

	// GetOperatorDetailsByUserId returns the operator details which the user belongs to
	rpc GetOperatorDetailsByUserId(GetOperatorDetailsByUserIdRequest) returns (GetOperatorDetailsByUserIdResponse) {
	}

	rpc GetOperatorAccountSettings(GetOperatorAccountSettingsRequest) returns (GetOperatorAccountSettingsResponse) {
		option (google.api.http) = {
			post: "/v1/user/operator/account-settings/get"
			body: "*"
		};
	}

	rpc UpdateOperatorAccountSettings(UpdateOperatorAccountSettingsRequest) returns (UpdateOperatorAccountSettingsResponse) {
	}

	rpc GetUserAccountSettingsStatus(GetUserAccountSettingsStatusRequest) returns (GetUserAccountSettingsStatusResponse) {
		option (google.api.http) = {
			post: "/v1/user/account-settings/status/get"
			body: "*"
		};
	}

	rpc AddResponsibleGamblingConfig(AddResponsibleGamblingConfigRequest) returns (AddResponsibleGamblingConfigResponse) {
		option (google.api.http) = {
			post: "/v1/user/responsible-gambling/config/add"
			body: "*"
		};
	}

	rpc DeleteResponsibleGamblingConfig(DeleteResponsibleGamblingConfigRequest) returns (DeleteResponsibleGamblingConfigResponse) {
		option (google.api.http) = {
			post: "/v1/user/responsible-gambling/config/delete"
			body: "*"
		};
	}

	rpc GetResponsibleGamblingConfig(GetResponsibleGamblingConfigRequest) returns (GetResponsibleGamblingConfigResponse) {
		option (google.api.http) = {
			post: "/v1/user/responsible-gambling/config/get"
			body: "*"
		};
	}
	
	rpc UserIdentityAudit(UserIdentityAuditRequest) returns (UserIdentityAuditResponse) { }

	rpc UserIdentityList(UserIdentityListRequest) returns (UserIdentityListResponse) { }

	rpc AddRegisterLoginBlacklist(AddRegisterLoginBlacklistRequest) returns (AddRegisterLoginBlacklistResponse) {}

	rpc DeleteRegisterLoginBlacklist(DeleteRegisterLoginBlacklistRequest) returns (DeleteRegisterLoginBlacklistResponse) {}

	rpc ListRegisterLoginBlacklist(ListRegisterLoginBlacklistRequest) returns (ListRegisterLoginBlacklistResponse) {}

	rpc SetOperatorRegisterLimitConfig(SetOperatorRegisterLimitConfigRequest) returns (SetOperatorRegisterLimitConfigResponse) {}

	rpc GetOperatorRegisterLimitConfig(GetOperatorRegisterLimitConfigRequest) returns (GetOperatorRegisterLimitConfigResponse) {}

	rpc CloseAccount(CloseAccountRequest) returns (CloseAccountResponse) {
		option (google.api.http) = {
			post: "/v1/user/account/update"
			body: "*"
		};
	}

	rpc GetOperatorVipSettings(GetOperatorVipSettingsRequest) returns (api.vip.service.v1.GetOperatorVipSettingsResponse) {
		option (google.api.http) = {
			post: "/v1/user/vip/operator/settings/get"
			body: "*"
		};
	}

	rpc GetUserVipLevel(GetUserVipLevelRequest) returns (api.vip.service.v1.GetUserVipLevelResponse) {
		option (google.api.http) = {
			post: "/v1/user/vip/level/get"
			body: "*"
		};
	}

	rpc UpdateVipRewardSlider(UpdateVipRewardSliderRequest) returns (api.vip.service.v1.UpdateVipRewardSliderResponse) {
		option (google.api.http) = {
			post: "/v1/user/vip/reward/slider/update"
			body: "*"
		};
	}

	rpc GetClaimableVipRewards(GetClaimableVipRewardsRequest) returns (api.vip.service.v1.GetClaimableVipRewardsResponse) {
		option (google.api.http) = {
			post: "/v1/user/vip/reward/claimable/get"
			body: "*"
		};
	}

	rpc ClaimVipReward(ClaimVipRewardRequest) returns (api.vip.service.v1.ClaimVipRewardResponse) {
		option (google.api.http) = {
			post: "/v1/user/vip/reward/claim"
			body: "*"
		};
	}

	rpc ConfirmClaimVipReward(ConfirmClaimVipRewardRequest) returns (api.vip.service.v1.ConfirmClaimVipRewardResponse) {
		option (google.api.http) = {
			post: "/v1/user/vip/reward/claim/confirm"
			body: "*"
		};
	}
}

// UserInfo contains basic user information.
message UserInfo {
	// Unique identifier for the user.
	int64 user_id = 1;
	// OperatorId in the operator hierarchy.
	int64 operator_id = 2;
	// Company OperatorId in the operator hierarchy.
	int64 company_operator_id = 3;
	// Retailer OperatorId in the operator hierarchy.
	int64 retailer_operator_id = 4;
	// System OperatorId in the operator hierarchy.
	int64 system_operator_id = 5;
	// Username.
	string username = 6;
	// Email.
	string email = 7;
	// Mobile.
	string mobile = 8;
	// Whether the user is enabled.
	bool enabled = 9;
	// First name.
	string firstname = 10;
	// Last name.
	string lastname = 11;
	// Nickname
	string nickname = 12;
	// Avatar
	string avatar = 13;
	// BanGame
	bool ban_game = 14;
	// BanWithdraw
	bool ban_withdraw = 15;
	// role id
	int64 role_id = 16;
	// registered mobile
	string registered_mobile = 17;
	// registered email
	string registered_email = 18;
	// kyc_level
	int32 kyc_level = 19;
	// address
	string address = 20;
	// uesr identities
	repeated UserIdentity user_identity = 21;
	// user date of birth
	google.protobuf.Timestamp dob = 22;
	// user country
	string country = 23;
}

// AuthType defines the type of authentication method.
enum AuthType {
	// Default value, should not be used.
	AUTH_TYPE_UNSPECIFIED = 0;
	// Password-based authentication.
	AUTH_TYPE_PASSWORD = 1;
	// OAuth-based authentication.
	AUTH_TYPE_OAUTH = 2;
	// Telegram-based authentication.
	AUTH_TYPE_TELEGRAM = 3;
}

// PasswordProvider defines the type of identity used for password authentication.
enum PasswordProvider {
	// Default value, should not be used.
	PASSWORD_PROVIDER_UNSPECIFIED = 0;
	// Username-based authentication.
	PASSWORD_PROVIDER_USERNAME = 1;
	// Email-based authentication.
	PASSWORD_PROVIDER_EMAIL = 2;
	// Mobile number-based authentication.
	PASSWORD_PROVIDER_MOBILE = 3;
}

// OAuthProvider defines the supported OAuth providers.
enum OAuthProvider {
	// Default value, should not be used.
	OAUTH_PROVIDER_UNSPECIFIED = 0;
	// Google OAuth provider.
	OAUTH_PROVIDER_GOOGLE = 1;
	// Facebook OAuth provider.
	OAUTH_PROVIDER_FACEBOOK = 2;
	// Twitter OAuth provider.
	OAUTH_PROVIDER_TWITTER = 3;
}

// RegisterRequest contains the information needed to register a new user.
message RegisterRequest {
	// The type of identity provider to use for registration.
	PasswordProvider password_provider = 1;
	// The identity (username, email, or mobile) to register with.
	string auth_id = 2;
	// The password for the new account.
	string password = 3;
		// Date of birth of user
	optional google.protobuf.Timestamp dob = 4;
	// User ID info
	optional string id_number = 5;
	// User ID Type
	optional string id_type = 6;
	// campaign url
	optional string campaign_url = 7;
}

// LoginRequest contains the credentials for user login.
message LoginRequest {
	// The type of identity provider to use for login.
	PasswordProvider password_provider = 1;
	// The identity (username, email, or mobile) to login with.
	string auth_id = 2;
	// The password for the account.
	string password = 3;
}

// HttpRequestInfo contains the http request info get from RequestInfoMiddleware.
message HttpRequestInfo {
	string method = 1;
	string path = 2;
	string host = 3;
	string remote_addr = 4;
	string country = 5;
	string origin = 6;
	string referer = 7;
	string user_agent = 8;
	string client_ip = 9;
}

// LoginWithInfoRequest contains the credentials for user login and http request info.
message LoginWithInfoRequest {
	// The type of identity provider to use for login.
	PasswordProvider password_provider = 1;
	// The identity (username, email, or mobile) to login with.
	string auth_id = 2;
	// The password for the account.
	string password = 3;
	// The operator context to login with.
	api.common.OperatorContext operator_context = 4;
	// Http request info.
	HttpRequestInfo http_request_info = 5;
}

// OAuthRequest contains the information needed for OAuth authentication.
message OAuthRequest {
	// The OAuth provider to use for authentication.
	OAuthProvider oauth_provider = 1;
	// The OAuth token received from the provider.
	string token = 2;
}

// TelegramAuthRequest contains the information from Telegram's login widget.
message TelegramAuthRequest {
	// Telegram user Id.
	int64 id = 1;
	// User's first name.
	string first_name = 2;
	// User's last name.
	string last_name = 3;
	// Telegram username.
	string username = 4;
	// URL of the user's profile photo.
	string photo_url = 5;
	// Unix timestamp when the authentication was performed.
	int64 auth_date = 6;
	// Hash for verifying the authentication data.
	string hash = 7;
}

// RefreshTokenRequest contains the refresh token for obtaining a new access token.
message RefreshTokenRequest {
	// The refresh token to use for obtaining a new access token.
	string refresh_token = 1;
}

// AuthResponse contains the authentication tokens and user information.
message AuthResponse {
	// JWT access token for API authentication.
	string access_token = 1;
	// Refresh token for obtaining new access tokens.
	string refresh_token = 2;
	// Number of seconds until the access token expires.
	int64 expires_in = 3;
	// Basic information about the authenticated user.
	UserInfo user_info = 4;
}

// RefreshTokenResponse contains the authentication tokens.
message RefreshTokenResponse {
	// JWT access token for API authentication.
	string access_token = 1;
	// Refresh token for obtaining new access tokens.
	string refresh_token = 2;
	// Number of seconds until the access token expires.
	int64 expires_in = 3;
}

// GetUserRequest contains the userId of the user to retrieve.
message GetUserRequest {
	// The userId of the user to retrieve.
	int64 user_id = 1;
}

// GetUserResponse contains the requested user's information.
message GetUserResponse {
	// Basic information about the requested user.
	UserInfo user_info = 1;
}

message GetUsersByIdsRequest {
	repeated int64 user_ids = 1;
}

message GetUsersByIdsResponse {
	repeated UserInfo users = 1;
}

message GetUserIdsByOperatorIdsRequest {
	repeated int64 operator_ids = 1;
}

message GetUserIdsByOperatorIdsResponse {
	repeated int64 user_ids = 1;
}

// LogoutRequest is an empty message for the logout operation.
message LogoutRequest {}

// LogoutResponse is an empty message for the logout operation.
message LogoutResponse {}

message IsTokenRevokedRequest {
	string token = 1;
}

message IsTokenRevokedResponse {
	bool revoked = 1;
}

// SetOperatorTagsConfigRequest contains the operator ID.
message SetOperatorTagsConfigRequest {
	// The ID of the operator to set tag configuration for.
	int64 operator_id = 1;
	// Whether to follow parent operator's tags.
	bool follow_parent = 2;
	// The initial operator context.
	api.common.OperatorContext operator_context = 3;
}

// SetOperatorTagsConfigResponse is an empty message indicating successful tag configuration.
message SetOperatorTagsConfigResponse {}

// SetOperatorTagsRequest contains the operator ID and tag to add.
message SetOperatorTagsRequest {
	// The ID of the operator to add the tag to.
	int64 operator_id = 1;
	// The tag to add to the operator.
	repeated string tags = 2;
	// The initial operator context.
	api.common.OperatorContext operator_context = 3;
}

// SetOperatorTagsResponse is an empty message indicating successful tag addition.
message SetOperatorTagsResponse {}

// GetOperatorTagsConfigRequest contains the operator ID to retrieve tag configuration.
message GetOperatorTagsConfigRequest {
	// The ID of the operator to get tag configuration for.
	int64 operator_id = 1;
	// The initial operator context.
	api.common.OperatorContext operator_context = 2;
}

// GetOperatorTagsConfigResponse contains the tag configuration settings, now only follow_parent flag.
message GetOperatorTagsConfigResponse {
	// Whether the operator should follow parent operator's tags.
	bool follow_parent = 1;
}

// GetOperatorTagsRequest contains the operator ID to retrieve tags for.
message GetOperatorTagsRequest {
	// The ID of the operator to get tags for.
	int64 operator_id = 1;
	// The initial operator context.
	api.common.OperatorContext operator_context = 2;
}	

// GetOperatorTagsResponse contains the list of tags associated with the operator or parent operator if follow_parent is true.
message GetOperatorTagsResponse {
	// List of tags associated with the operator.
	repeated string tags = 1;
}

// GetUserTagsRequest retrieve tags for the current user.
message GetUserTagsRequest {}

// GetUserTagsResponse contains the list of active tags associated with the user.
message GetUserTagsResponse {
	// List of active tags associated with the user.
	repeated string tags = 1;
}


// GetUserTagsByIdRequest contains the user ID to retrieve tags for.
message GetUserTagsByIdRequest {
	// The ID of the user to get tags for.
	int64 user_id = 1;
	// The initial operator context.
	api.common.OperatorContext operator_context = 2;
}

// GetUserTagsByIdResponse contains the list of active tags associated with the user.
message GetUserTagsByIdResponse {
	// List of active tags associated with the user.
	repeated string tags = 1;
}

message SetUserTagsByIdRequest {
	int64 user_id = 1;
	repeated string tags = 2;
	// The initial operator context.
	api.common.OperatorContext operator_context = 3;
}

message SetUserTagsByIdResponse {}

message CheckPermissionRequest {
	string path = 1;
	int64 role_id = 2;
	int64 operator_id = 3;
}

message CheckPermissionResponse {
	bool allowed = 1;
}

message AddOperatorRequest {
	string operator_id = 1;
}

message AddOperatorResponse {
}

message SendEmailVerificationCodeRequest {
	string email = 1;
	api.common.OperatorContext operator_context = 2;
	optional int64 user_id = 3;
}

message SendEmailVerificationCodeResponse {
}

message SendPasswordResetCodeRequest {
	string email = 1;  // User's email address
	optional api.common.OperatorContext operator_context = 2;  // Operator context
}

message SendPasswordResetCodeResponse {
}

message ResetPasswordWithCodeRequest {
	string email = 1;           // User's email address
	string verification_code = 2;  // Verification code received via email
	string new_password = 3;    // New password
	optional api.common.OperatorContext operator_context = 4;  // Operator context
}

message ResetPasswordWithCodeResponse {
}

message UserIdentityRequest {
	// ID Type "Passport", "South African ID"
	string id_type = 1;
	string id_number = 2;
	string image = 3;
}

message UserIdentity {
	int64 id = 1;
	int64 user_id = 2;
	string id_type = 3;
	string id_number = 4;
	string image = 5;
	string status = 6;
	google.protobuf.Timestamp created_at = 7;
	google.protobuf.Timestamp audited_at = 8;
	string operator = 9;
	string reviewer = 10;
	int32 review_time = 11;
}

message UpdateUserRequest {
	int64 user_id = 1;
	optional string nickname = 2;
	optional string avatar = 3;
	optional bool ban_login = 4;
	optional bool ban_game = 5;
	optional bool ban_withdraw = 6;
	optional bool locked = 7;
	optional bool enabled = 8;
	optional int64 role_id = 9;
	optional string firstname = 10;
	optional string lastname = 11;
	optional string email = 12;
	optional string mobile = 13;
	optional UserIdentityRequest user_identity = 14;
	optional string address = 15;
	optional google.protobuf.Timestamp dob = 16;
	optional bool email_verified = 17;
	optional bool phone_verified = 18;
	// The initial operator context.
	api.common.OperatorContext operator_context = 19;
	optional string campaign_url = 20;
	optional int64 campaign_id = 21;
	optional int64 affiliate_id = 22;
}

message UpdateUserResponse {
}

message UpdateUserIdentityRequest {
	// User identity id
	int64 id = 1;
	// User ID Type
	string id_type = 2;
	// User ID Number
	string id_number = 3;
	// Image Url
	string image = 4;
}

message UpdateUserIdentityResponse {
}

message ListUsersRequest {
	optional int64 user_id = 1;
	repeated string tags = 2; // not available for now
	optional google.protobuf.Timestamp registration_start_time = 3;
	optional google.protobuf.Timestamp registration_end_time = 4;
	optional int32 vip_level = 5;
	optional string country = 6;
	// optional int32 risk_level_min = 10;
	// optional int32 risk_level_max = 11;
	optional int32 kyc_level = 7;
	// optional bool has_made_deposit = 13;
	optional string deposit_min = 8;
	optional string deposit_max = 9;
	optional string withdrawal_min = 10;
	optional string withdrawal_max = 11;
	optional bool ban_withdraw = 12;
	optional bool ban_game = 13;
	optional bool ban_login = 14;
	optional string user_type = 15;
	optional int64 role_id = 16;
	optional bool online = 17;
	optional bool enabled = 18;
	optional string email = 19;
	optional string mobile = 20;
	optional int32 page = 21;
	optional int32 page_size = 22;
	// The initial operator context.
	api.common.OperatorContext operator_context = 23;
	api.common.OperatorContextFilters operator_context_filters = 24;
}

message ListUsersResponse {
	message User {
		string operator_name = 1;
		string company_operator_name = 2;
		string retailer_operator_name = 3;
		string system_operator_name = 4;
		int64 user_id = 5;
		string username = 6;
		string email = 7;
		string mobile = 8;
		int32 vip_level = 9;
		int32 kyc_level = 10;
		string deposit_usd = 11;
		string withdraw_usd = 12;
		string deposit_reporting_currency = 13;
		string withdraw_reporting_currency = 14;
		repeated string tags = 15;
		bool ban_withdraw = 16;
		bool ban_game = 17;
		bool ban_login = 18;
		bool online = 19;
		google.protobuf.Timestamp last_login_at = 20;
		google.protobuf.Timestamp registered_at = 21;
		// int32 risk_level = 19;
		// string referral_code = 20;
		// string affiliate_code = 21;
		string country = 22;
		// string device = 23;
		// string source = 24;
		string registration_ip = 23;
		bool enabled = 24;
		google.protobuf.Timestamp created_at = 25;
		Role role = 26;
	}
	repeated User users = 1;
	int32 page = 2;
	int32 page_size = 3;
	int32 total = 4;
	int32 total_enabled = 5;
	int32 total_disabled = 6;
}

message CreateUserRequest {
	string username = 1;
	optional string password = 2;
	string email = 3;
	optional string mobile = 4;
	api.common.OperatorContext operator_context = 5;
	int64 role_id = 6;
}

message CreateUserResponse {
	int64 user_id = 1;
	string email = 2;
	string password = 3;
}

message VerifyEmailRequest {
	string email = 1;
	string verification_code = 2;
	api.common.OperatorContext operator_context = 3;
}

message VerifyEmailResponse {}
message AddCommentRequest {
	int64 user_id = 1;
	int64 author_user_id = 2;
	string content = 3;
	// The initial operator context.
	api.common.OperatorContext operator_context = 4;
}

message AddCommentResponse {
	int64 comment_id = 1;
}

message GetCommentsByUserIdRequest {
	int64 user_id = 1;
}

message GetCommentsByUserIdResponse {
	message Comment {
		int64 comment_id = 1;
		int64 user_id = 2;
		int64 author_user_id = 4;
		string content = 6;
		int64 created_at = 7;
	}
	repeated Comment comments = 1;
}

message GetUserProfileRequest {
	int64 user_id = 1;
	optional int32 login_page = 2;
	optional int32 login_page_size = 3;
	// The initial operator context.
	api.common.OperatorContext operator_context = 4;
}

message GetUserProfileResponse {
	message IpInfo {
		string ip = 1;
		int32 count = 2;
		string country = 3;
	}
	message RegistrationRecord {
		google.protobuf.Timestamp registered_at = 1;
		IpInfo ip_info = 2;
		string device = 3;
		string method = 4;
		string browser = 5;
		string app = 6; // Not available for now
		string mobile = 7;
		string email = 8;
		string username = 9;
		string source = 10;
	}
	message LoginRecord {
		google.protobuf.Timestamp login_at = 1;
		IpInfo ip_info = 2;
		string device = 3;
		string method = 4;
		string browser = 5;
		string app = 6; // Not available for now
		string email = 7;
		string mobile = 8;
		string username = 9;
	}
	message Comment {
		int64 comment_id = 1;
		string username = 2;
		string author_username = 3;
		string content = 4;
		google.protobuf.Timestamp created_at = 5;
	}
	message ChangeRecord {
		google.protobuf.Timestamp changed_at = 1;
		string new = 2;
		string old = 3;
		string ip = 4;
		string reviewer = 5;
	}
	string nickname = 1;
	int64 user_id = 2;
	int32 vip_level = 3; // Not available for now, only return 1
	bool online = 4;
	bool ban_withdraw = 5;
	bool ban_game = 6;
	bool ban_login = 7;
	bool locked = 8;
	RegistrationRecord registration_record = 9;
	repeated LoginRecord login_records = 10;
	repeated string tags = 11;
	repeated Comment comments = 12;
	int32 total_login_count = 13;
	int32 login_page = 14;
	int32 login_page_size = 15;
	string registered_mobile = 16;
	string registered_email = 17;
	string first_name = 18;
	string last_name = 19;
	int32 kyc_level = 20;
	bool email_verified = 21;
	bool phone_verified = 22;
	google.protobuf.Timestamp dob = 23;
	string address = 24;
	repeated UserIdentity user_identity = 25;
	repeated ChangeRecord emailChangeHistory = 26;
	repeated ChangeRecord phoneChangeHistory = 27;
	// Email.
	string login_email = 28;
	// Mobile.
	string login_mobile = 29;
}

message CreateRoleRequest {
	string name = 1;
	repeated Permission permissions = 2;
	int64 user_id = 3;
}

message Permission {
	string module = 1;
	repeated string actions = 2;
}

message CreateRoleResponse {}

message ListRolesRequest {
	optional int32 page = 1;
	optional int32 page_size = 2;
}

message Role {
	int64 role_id = 1;
	string name = 2;
	repeated Permission permissions = 3;
}

message ListRolesResponse {
	repeated Role roles = 1;
	int32 page = 2;
	int32 page_size = 3;
	int32 total = 4;
}
enum OperatorType {
	OPERATOR_TYPE_UNSPECIFIED = 0;
	OPERATOR_TYPE_RETAILER = 1;
	OPERATOR_TYPE_GROUP = 2;
	OPERATOR_TYPE_OPERATOR = 3;
}

message CreateOperatorRequest {
	string operator_name = 1;
	string operator_type = 2;
	repeated int64 parent_operator_ids = 3;
	optional string mode = 4;
	string operator_key = 5;
	optional string reporting_currency = 6;
	optional string backoffice_timezone = 7;
	repeated string supported_languages = 8;
	repeated string supported_currencies = 9;
	optional string template_name = 10;
}

message CreateOperatorResponse {
	int64 operator_id = 1;
	string subdomain = 2;
	string backoffice_subdomain = 3;
}

message UpdateRoleRequest {
	int64 role_id = 1;
	string name = 2;
	repeated Permission permissions = 3;
}

message UpdateRoleResponse {}

message GetRoleRequest {
	int64 role_id = 1;
}

message GetRoleResponse {
	Role role = 1;
}

message GetOverviewDashboardFromUserRequest {
	api.common.OperatorContext operator_context = 1;
	api.common.OperatorContextFilters operator_context_filters = 2;
}

message GetOverviewDashboardFromUserResponse {
	message RegisteredUsers {
		int32 today = 1;
		int32 yesterday = 2;
	}
	message FirstDepositUsers {
		int32 today = 1;
		int32 yesterday = 2;
	}
	message ActiveUsers {
		int32 today = 1;
		int32 yesterday = 2;
	}
	RegisteredUsers registered_users = 1;
	FirstDepositUsers first_deposit_users = 2;
	ActiveUsers active_users = 3;
}

message DeleteRoleRequest {
	int64 role_id = 1;
}

message DeleteRoleResponse {}

message GetOperatorIdByOriginRequest {
	string origin = 1;
}

message GetOperatorIdByOriginResponse {
	int64 operator_id = 1;
}

message GetOperatorIdsByOriginRequest {
	string origin = 1;
}

message GetOperatorIdsByOriginResponse {
	api.common.OperatorContext operator_context = 1;
}

message GetOperatorInfoByOriginRequest {
	string origin = 1;
}

message GetOperatorInfoByOriginResponse {
	api.common.OperatorContext operator_context = 1;
	OperatorDetails operatorDetail = 2;
	OperatorDetails systemOperatorDetail = 3;
}

message GetOperatorRequest {
	int64 operator_id = 1;
}

message GetOperatorResponse {
	message Operator {
		int64 operator_id = 1;
		string name = 2;
		bool enabled = 3;
	}
	Operator operator = 1;
}

message GetOperatorsByIdsRequest {
	repeated int64 operator_ids = 1;
}

message GetOperatorsByIdsResponse {
	message Operator {
		int64 operator_id = 1;
		string name = 2;
		bool enabled = 3;
	}
	repeated Operator operators = 1;
}

message ListAllOperatorsRequest {
	optional bool enabled = 1;
	optional api.common.OperatorContext operator_context = 2;
}

message ListAllOperatorsResponse {
	message Operator {
		int64 real_operator_id = 1;
		string operator_name = 2;
		bool enabled = 3;
		string operator_type = 4;
		int64 parent_operator_id = 5;
		api.common.OperatorContext operator_context = 6;
	}
	repeated Operator operators = 1;
}

message GetParentOperatorIdsRequest {
	// The operator ID to get parent operators for
	int64 operator_id = 1;
}

message GetParentOperatorIdsResponse {
	// List of parent operator IDs.
	repeated int64 parent_operator_ids = 1;
}

message GetChildOperatorIdsRequest {
	// The operator ID to get child operators for
	int64 operator_id = 1;
}

message GetChildOperatorIdsResponse {
	// List of child operator IDs.
	repeated int64 child_operator_ids = 1;
}

message CheckEmailExistsRequest {
	string email = 1;
	int64 operator_id = 2;
	// "operator", "company", "retailer", "system"
	string operator_type = 3;
}

message CheckEmailExistsResponse {
	bool exists = 1;
}

message CheckSubdomainExistsRequest {
	string subdomain = 1;
}

message CheckSubdomainExistsResponse {
	bool exists = 1;
}

message CheckOperatorKeyExistsRequest {
	string operator_key = 1;
	int64 retailer_operator_id = 2;
}

message CheckOperatorKeyExistsResponse {
	bool exists = 1;
}

message CreateBusinessRequest {
	string name = 1;
	// business type: "retailer", "retailer", "operator"
	string type = 2;
	optional string contact_name = 3;
	optional string contact_methods = 4;
	optional string affiliate = 5;
	int64 owner_user_id = 6;
	api.common.OperatorContext operator_context = 7;
}

message CreateBusinessResponse {
	int64 business_id = 1;
}

message OperatorAccountPasswordSettings {
	int32 min_characters = 1;
	int32 min_uppercase_characters = 2;
	int32 min_lowercase_characters = 3;
	int32 min_special_characters = 4;
	int32 min_digits = 5;
}

message OperatorAccountSecuritySettings {
	int32 max_password_retries = 1;
	int32 password_expiry_days = 2;
	int32 password_history_limits = 3;
}

message OperatorAccountGameSettings {
	bool no_game_without_deposit = 1;
	int32 min_game_kyc_level = 2;
}

message OperatorAccountPaymentSettings {
	int32 min_deposit_kyc_level = 1;
	int32 min_withdraw_kyc_level = 2;
}

message OperatorAccountSettings {
	OperatorAccountPasswordSettings password_settings = 1;
	OperatorAccountSecuritySettings security_settings = 2;
	OperatorAccountGameSettings game_settings = 3;
	OperatorAccountPaymentSettings payment_settings = 4;
}

message GetUserAccountSettingsStatusRequest {
	int64 user_id = 1;
	api.common.OperatorContext operator_context = 2;
}

message UserAccountGameSettingsStatus {
	bool no_game_without_deposit = 1;
	int32 min_game_kyc_level = 2;
	int32 deposit_count = 3;
	int32 kyc_level = 4;
}

message UserAccountPaymentSettingsStatus {
	int32 min_deposit_kyc_level = 1;
	int32 min_withdraw_kyc_level = 2;
	int32 kyc_level = 3;
}

message GetUserAccountSettingsStatusResponse {
	bool allow_game = 1;
	bool allow_deposit = 2;
	bool allow_withdraw = 3;
	UserAccountGameSettingsStatus game_settings_status = 4;
	UserAccountPaymentSettingsStatus payment_settings_status = 5;
}

message OperatorConfig {
	optional string swap_fee_percentage = 1;
	optional OperatorAccountSettings account_settings = 2;
}

message OperatorDetails {
	int64 id = 1; // real operator id
	string operator_name = 2;
	int64 parent_operator_id = 3;
	string parent_operator_name = 4;
	string operator_type = 5;
	string external_id = 6;
	string api_key = 7;
	string subdomain = 8;
	string backoffice_subdomain = 9;
	string backoffice_child_domain = 10;
	repeated string domain_pool = 11;
	bool enabled = 12;
	string mode = 13;
	string operator_key = 14;
	string reporting_currency = 15;
	string backoffice_timezone = 16;
	repeated string supported_languages = 17;
	repeated string supported_currencies = 18;
	string status = 19;
	int64 status_start_time = 21;
	int64 status_end_time = 22;
	// operator id in the operator hierarchy
	int64 operator_id = 23;
	// company operator id in the operator hierarchy
	int64 company_operator_id = 24;
	// company operator name in the operator hierarchy, or empty string if not exists
	string company_operator_name = 25;
	// retailer operator id in the operator hierarchy
	int64 retailer_operator_id = 26;
	// retailer operator name in the operator hierarchy, or empty string if not exists
	string retailer_operator_name = 27;
	// system operator id in the operator hierarchy
	int64 system_operator_id = 28;
	// system operator name in the operator hierarchy, or empty string if not exists
	string system_operator_name = 29;
	OperatorConfig config = 30;
	string min_launch_balance = 31;
	repeated string status_launch_whitelist = 32;

}

message GetOperatorDetailsRequest {
	int64 operator_id = 1;
}

message GetOperatorDetailsResponse {
	OperatorDetails operator_details = 1;
}

message ListOperatorsByParentOperatorIdRequest {
	int64 parent_operator_id = 1;
	optional string status = 2;
	optional int32 page = 3;
	optional int32 page_size = 4;
}

message ListOperatorsByParentOperatorIdResponse {
	repeated OperatorDetails operator_details_list = 1;
	int32 total = 2;
	int32 live_count = 3;
	int32 closed_count = 4;
	int32 pending_count = 5;
	int32 request_to_close_count = 6;
	int32 suspended_count = 7;
	int32 page = 8;
	int32 page_size = 9;
}

message ListRetailerOperatorsRequest {
	api.common.OperatorContext operator_context = 1;
	bool include_count = 2;
}

message ListRetailerOperatorsResponse {
	// OperatorInfo is the simplified information of a retailer operator, used for list retailer operators
	message OperatorInfo {
		api.common.OperatorContext operator_context = 1;
		string retailer_operator_name = 2;
		int32 company_operator_count = 3;
		int32 bottom_operator_count = 4;
		int32 bottom_live_operator_count = 5;
		bool status = 6;
		bool self_co_operation_enabled = 7;
	}
	repeated OperatorInfo retailer_operators = 1;
}

message ListCompanyOperatorsRequest {
	repeated int64 retailer_operator_ids = 1;
	api.common.OperatorContext operator_context = 2;
	bool include_count = 3;
}

message ListCompanyOperatorsResponse {
	// OperatorInfo is the simplified information of a company operator, used for list company operators
	message OperatorInfo {
		api.common.OperatorContext operator_context = 1;
		string company_operator_name = 2;
		string retailer_operator_name = 3;
		int32 bottom_operator_count = 4;
		int32 bottom_live_operator_count = 5;
		bool status = 6;
	}
	repeated OperatorInfo company_operators = 1;
}

message ListBottomOperatorsRequest {
	repeated int64 retailer_operator_ids = 1;
	repeated int64 company_operator_ids = 2;
	api.common.OperatorContext operator_context = 3;
}

message ListBottomOperatorsResponse {
	// OperatorInfo is the simplified information of a bottom operator, used for list bottom operators
	message OperatorInfo {
		api.common.OperatorContext operator_context = 1;
		string bottom_operator_name = 2;
		string retailer_operator_name = 3;
		string company_operator_name = 4;
		string mode = 5;
		string status = 6;
		string subdomain = 7;
	}
	repeated OperatorInfo bottom_operators = 1;
}

message UpdateOperatorStatusRequest {
	// target operator context
 	api.common.OperatorContext target_operator_context = 1; 
	// action to update the status of target operator "pending", "live", "suspended", "request_to_close", "closed", "maintain",
 	string action = 2; 
	// action start
	google.protobuf.Timestamp actionStart = 3; 
	// action end
	google.protobuf.Timestamp actionEnd = 4;
	// operator context of the backoffice operator
	api.common.OperatorContext operator_context = 5;
}

message UpdateOperatorStatusResponse {
	// status of target operator after update
	string status = 1;
}

message ListAllUsersRequest {
	api.common.OperatorContext operator_context = 1;
	optional int64 role_id = 2;
}

message ListAllUsersResponse {
	repeated UserInfo users = 1;
}

message ListOperatorsByAdminEmailRequest {
	string email = 1;
	api.common.OperatorContext operator_context = 2;
}

message ListOperatorsByAdminEmailResponse {
	repeated OperatorDetails retailer_operator_details_list = 1;
	repeated OperatorDetails company_operator_details_list = 2;
	repeated OperatorDetails operator_details_list = 3;
}

message ListOperatorDetailsRequest {
	// real operator ids list
	repeated int64 operator_ids = 1;
}

message ListOperatorDetailsResponse {
	repeated OperatorDetails operator_details_list = 1;
}

message GetOperatorDetailsByUserIdRequest {
	int64 user_id = 1;
}

message GetOperatorDetailsByUserIdResponse {
	OperatorDetails operator_details = 1;
}

message GetOperatorAccountSettingsRequest {
	api.common.OperatorContext operator_context = 1;
	api.common.OperatorContext target_operator_context = 2;
}

message GetOperatorAccountSettingsResponse {
	OperatorAccountSettings account_settings = 1;
	string country = 2;
	string client_ip = 3;
}

message UpdateOperatorAccountSettingsRequest {
	api.common.OperatorContext operator_context = 1;
	api.common.OperatorContext target_operator_context = 2;
	OperatorAccountSettings account_settings = 3;
}

message UpdateOperatorAccountSettingsResponse {
}

message ResponsibleGamblingConfig {
	message SelfExclusion {
		google.protobuf.Timestamp start_time = 1;
		google.protobuf.Timestamp end_time = 2;
	}
	message BreakInPlay {
		google.protobuf.Timestamp start_time = 1;
		google.protobuf.Timestamp end_time = 2;
	}
	message TimeLimits {
		string time_zone = 1; // "UTC+X", "UTC-X"
		string start_time = 2; // HH:mm:ss, works out every day
		string end_time = 3; // HH:mm:ss, works out every day
	}
	optional SelfExclusion self_exclusion = 1;
	optional BreakInPlay break_in_play = 2;
	optional TimeLimits time_limits = 3;
}

message AddResponsibleGamblingConfigRequest {
	ResponsibleGamblingConfig responsible_gambling_config = 1;
}

message AddResponsibleGamblingConfigResponse {
}

message DeleteResponsibleGamblingConfigRequest {
	optional int64 user_id = 1;
	api.common.OperatorContext operator_context = 2;
	// "self_exclusion", "break_in_play", "time_limits"
	string limit_type = 3;
}

message DeleteResponsibleGamblingConfigResponse {
}

message GetResponsibleGamblingConfigRequest {
	optional int64 user_id = 1;
	api.common.OperatorContext operator_context = 2;
}

message ResponsibleGamblingStatus {
	bool login_allowed = 1;
	bool deposit_allowed = 2;
	bool withdrawal_allowed = 3;
	bool game_bet_allowed = 4;
	bool self_exclusion_active = 5; // indicates if self exclusion active in current time	
	bool break_in_play_active = 6; // indicates if break in play active in current time
	bool time_limits_active = 7; // indicates if time limits active in current time
	google.protobuf.Timestamp time_limits_next_inactive_time = 8; // the very next time when time limits is inactive, exists if time_limits_active is true
}

message ResponsibleGamblingDeleteSchedule {
	google.protobuf.Timestamp self_exclusion_delete_schedule_time = 1;
	google.protobuf.Timestamp break_in_play_delete_schedule_time = 2;
	google.protobuf.Timestamp time_limits_delete_schedule_time = 3;
}

message GetResponsibleGamblingConfigResponse {
	ResponsibleGamblingConfig responsible_gambling_config = 1;
	ResponsibleGamblingStatus responsible_gambling_status = 2;
	ResponsibleGamblingDeleteSchedule responsible_gambling_delete_schedule = 3;
}

message UserIdentityAuditRequest {
	// user identity id
	int64 id = 1;
	// audit "approved" or "declined"
	string audit= 2;
	api.common.OperatorContext operator_context = 3;
}

message UserIdentityAuditResponse {
	
}

message UserIdentityListRequest {
	optional int64 id = 1;
	optional int64 user_id = 2;
	optional string status = 3;
	optional google.protobuf.Timestamp start_time = 4;
	optional google.protobuf.Timestamp end_time = 5;
	int32 page = 6;
	int32 page_size = 7;
	// The initial operator context.
	api.common.OperatorContextFilters operator_context_filters = 8;
	api.common.OperatorContext operator_context = 9;
}

message UserIdentityListResponse {
	repeated UserIdentity user_identity = 1;
	int32 total_count = 2;
	int32 approved_count = 3;
	int32 declined_count = 4;
	int32 pending_count = 5;
}

message AddRegisterLoginBlacklistRequest {
	api.common.OperatorContext operator_context = 1;
	api.common.OperatorContext target_operator_context = 2;
	string id_type = 3;
	repeated string ids = 4;
}

message AddRegisterLoginBlacklistResponse {
}

message DeleteRegisterLoginBlacklistRequest {
	api.common.OperatorContext operator_context = 1;
	api.common.OperatorContext target_operator_context = 2;
	string id_type = 3;
	repeated string ids = 4;
}

message DeleteRegisterLoginBlacklistResponse {
}

message ListRegisterLoginBlacklistRequest {
	api.common.OperatorContext operator_context = 1;
	api.common.OperatorContext target_operator_context = 2;
	string id_type = 4;
	optional int32 page = 5;
	optional int32 page_size = 6;
}

message ListRegisterLoginBlacklistResponse {
	message RegisterLoginBlacklist {
		string id = 1;
		google.protobuf.Timestamp created_at = 2;
		string source = 3;
	}
	repeated RegisterLoginBlacklist register_login_blacklists = 1;
	int32 page = 2;
	int32 page_size = 3;
	int32 total = 4;
}

message OperatorRegisterLimitConfig {
	int32 registration_limit_per_ip = 1;
}

message SetOperatorRegisterLimitConfigRequest {
	api.common.OperatorContext operator_context = 1;
	api.common.OperatorContext target_operator_context = 2;
	map<string, OperatorRegisterLimitConfig> config = 3;
}

message SetOperatorRegisterLimitConfigResponse {
}

message GetOperatorRegisterLimitConfigRequest {
	api.common.OperatorContext operator_context = 1;
	api.common.OperatorContext target_operator_context = 2;
}

message GetOperatorRegisterLimitConfigResponse {
	map<string, OperatorRegisterLimitConfig> config = 1;
}

message CloseAccountRequest {
	
}

message CloseAccountResponse {
	
}

message GetOperatorVipSettingsRequest {
}

message GetUserVipLevelRequest {
}

message UpdateVipRewardSliderRequest {
	int64 rackback = 1;
	int64 lossback = 2;
	string type = 3; // weekly, monthly
}

message GetClaimableVipRewardsRequest {
}

message ClaimVipRewardRequest {
	api.vip.service.v1.VipRewardKind reward_kind = 1;
}

message ConfirmClaimVipRewardRequest {
	int64 claim_transaction_id = 1;
	string claim_currency = 2;
}