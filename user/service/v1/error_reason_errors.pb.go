// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNSPECIFIED.String() && e.Code == 500
}

func ErrorUnspecified(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UNSPECIFIED.String(), fmt.Sprintf(format, args...))
}

func IsUserInfoNotFoundInContext(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_INFO_NOT_FOUND_IN_CONTEXT.String() && e.Code == 500
}

func ErrorUserInfoNotFoundInContext(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_INFO_NOT_FOUND_IN_CONTEXT.String(), fmt.Sprintf(format, args...))
}

func IsRequestInfoNotFoundInContext(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REQUEST_INFO_NOT_FOUND_IN_CONTEXT.String() && e.Code == 500
}

func ErrorRequestInfoNotFoundInContext(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_REQUEST_INFO_NOT_FOUND_IN_CONTEXT.String(), fmt.Sprintf(format, args...))
}

func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 500
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsUserAuthNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_AUTH_NOT_FOUND.String() && e.Code == 500
}

func ErrorUserAuthNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_AUTH_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsUserAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_ALREADY_EXISTS.String() && e.Code == 500
}

func ErrorUserAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

func IsRevokeTokenFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REVOKE_TOKEN_FAILED.String() && e.Code == 500
}

func ErrorRevokeTokenFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_REVOKE_TOKEN_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGenerateRefreshTokenIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GENERATE_REFRESH_TOKEN_ID_FAILED.String() && e.Code == 500
}

func ErrorGenerateRefreshTokenIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GENERATE_REFRESH_TOKEN_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGenerateTokenIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GENERATE_TOKEN_ID_FAILED.String() && e.Code == 500
}

func ErrorGenerateTokenIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GENERATE_TOKEN_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsSaveTokenFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SAVE_TOKEN_FAILED.String() && e.Code == 500
}

func ErrorSaveTokenFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SAVE_TOKEN_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetUserAuthFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_USER_AUTH_FAILED.String() && e.Code == 500
}

func ErrorGetUserAuthFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_USER_AUTH_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_USER_FAILED.String() && e.Code == 500
}

func ErrorGetUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUpdateUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_USER_FAILED.String() && e.Code == 500
}

func ErrorUpdateUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsLockUserAuthFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LOCK_USER_AUTH_FAILED.String() && e.Code == 500
}

func ErrorLockUserAuthFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LOCK_USER_AUTH_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsHashUserPasswordFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_HASH_USER_PASSWORD_FAILED.String() && e.Code == 500
}

func ErrorHashUserPasswordFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_HASH_USER_PASSWORD_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGenerateUserIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GENERATE_USER_ID_FAILED.String() && e.Code == 500
}

func ErrorGenerateUserIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GENERATE_USER_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_USER_FAILED.String() && e.Code == 500
}

func ErrorAddUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddUserAuthFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_USER_AUTH_FAILED.String() && e.Code == 500
}

func ErrorAddUserAuthFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_USER_AUTH_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUserDisabled(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_DISABLED.String() && e.Code == 500
}

func ErrorUserDisabled(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_DISABLED.String(), fmt.Sprintf(format, args...))
}

func IsUserLoginBanned(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_LOGIN_BANNED.String() && e.Code == 500
}

func ErrorUserLoginBanned(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_LOGIN_BANNED.String(), fmt.Sprintf(format, args...))
}

func IsInvalidUserPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_USER_PASSWORD.String() && e.Code == 500
}

func ErrorInvalidUserPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_USER_PASSWORD.String(), fmt.Sprintf(format, args...))
}

func IsGetTokenWithRefreshTokenFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_TOKEN_WITH_REFRESH_TOKEN_FAILED.String() && e.Code == 500
}

func ErrorGetTokenWithRefreshTokenFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_TOKEN_WITH_REFRESH_TOKEN_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetUnexpiredTokenForUserFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_UNEXPIRED_TOKEN_FOR_USER_FAILED.String() && e.Code == 500
}

func ErrorGetUnexpiredTokenForUserFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_UNEXPIRED_TOKEN_FOR_USER_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsOauthProviderNotSupported(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OAUTH_PROVIDER_NOT_SUPPORTED.String() && e.Code == 500
}

func ErrorOauthProviderNotSupported(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OAUTH_PROVIDER_NOT_SUPPORTED.String(), fmt.Sprintf(format, args...))
}

func IsUsernameOrPasswordInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USERNAME_OR_PASSWORD_INVALID.String() && e.Code == 500
}

func ErrorUsernameOrPasswordInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USERNAME_OR_PASSWORD_INVALID.String(), fmt.Sprintf(format, args...))
}

func IsAddUserToWalletFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_USER_TO_WALLET_FAILED.String() && e.Code == 500
}

func ErrorAddUserToWalletFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_USER_TO_WALLET_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetUsersByOperatorIdsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_USERS_BY_OPERATOR_IDS_FAILED.String() && e.Code == 500
}

func ErrorGetUsersByOperatorIdsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_USERS_BY_OPERATOR_IDS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetOperatorIdByOriginFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_OPERATOR_ID_BY_ORIGIN_FAILED.String() && e.Code == 500
}

func ErrorGetOperatorIdByOriginFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_OPERATOR_ID_BY_ORIGIN_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUserTagAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_TAG_ALREADY_EXISTS.String() && e.Code == 500
}

func ErrorUserTagAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_TAG_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

func IsUserTagNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_TAG_NOT_EXIST.String() && e.Code == 500
}

func ErrorUserTagNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_TAG_NOT_EXIST.String(), fmt.Sprintf(format, args...))
}

func IsVerifyGoogleTokenFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_VERIFY_GOOGLE_TOKEN_FAILED.String() && e.Code == 500
}

func ErrorVerifyGoogleTokenFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_VERIFY_GOOGLE_TOKEN_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsMarshalRequestInfoFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MARSHAL_REQUEST_INFO_FAILED.String() && e.Code == 500
}

func ErrorMarshalRequestInfoFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_MARSHAL_REQUEST_INFO_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddUserEventFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_USER_EVENT_FAILED.String() && e.Code == 500
}

func ErrorAddUserEventFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_USER_EVENT_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGenerateUserEventIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GENERATE_USER_EVENT_ID_FAILED.String() && e.Code == 500
}

func ErrorGenerateUserEventIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GENERATE_USER_EVENT_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

// Operator is in follow_parent=true mode
func IsFollowParentEnabled(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FOLLOW_PARENT_ENABLED.String() && e.Code == 500
}

// Operator is in follow_parent=true mode
func ErrorFollowParentEnabled(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_FOLLOW_PARENT_ENABLED.String(), fmt.Sprintf(format, args...))
}

func IsOperatorTagsAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OPERATOR_TAGS_ALREADY_EXISTS.String() && e.Code == 500
}

func ErrorOperatorTagsAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OPERATOR_TAGS_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

func IsOperatorTagNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OPERATOR_TAG_NOT_FOUND.String() && e.Code == 500
}

func ErrorOperatorTagNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OPERATOR_TAG_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsOperatorParentNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OPERATOR_PARENT_NOT_FOUND.String() && e.Code == 500
}

func ErrorOperatorParentNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OPERATOR_PARENT_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsNonFollowParentOperatorNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NON_FOLLOW_PARENT_OPERATOR_NOT_FOUND.String() && e.Code == 500
}

func ErrorNonFollowParentOperatorNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_NON_FOLLOW_PARENT_OPERATOR_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsSystemOperator(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SYSTEM_OPERATOR.String() && e.Code == 500
}

func ErrorSystemOperator(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_SYSTEM_OPERATOR.String(), fmt.Sprintf(format, args...))
}

func IsListUsersFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LIST_USERS_FAILED.String() && e.Code == 500
}

func ErrorListUsersFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LIST_USERS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsRoleNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ROLE_NOT_FOUND.String() && e.Code == 500
}

func ErrorRoleNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ROLE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsFailedToSendEmail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FAILED_TO_SEND_EMAIL.String() && e.Code == 500
}

func ErrorFailedToSendEmail(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_FAILED_TO_SEND_EMAIL.String(), fmt.Sprintf(format, args...))
}

func IsVerificationCodeSendTooFrequently(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_VERIFICATION_CODE_SEND_TOO_FREQUENTLY.String() && e.Code == 500
}

func ErrorVerificationCodeSendTooFrequently(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_VERIFICATION_CODE_SEND_TOO_FREQUENTLY.String(), fmt.Sprintf(format, args...))
}

func IsEmailVerificationFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EMAIL_VERIFICATION_FAILED.String() && e.Code == 500
}

func ErrorEmailVerificationFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_EMAIL_VERIFICATION_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsEmailAlreadyRegistered(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EMAIL_ALREADY_REGISTERED.String() && e.Code == 500
}

func ErrorEmailAlreadyRegistered(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_EMAIL_ALREADY_REGISTERED.String(), fmt.Sprintf(format, args...))
}

func IsGenerateCommentIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GENERATE_COMMENT_ID_FAILED.String() && e.Code == 500
}

func ErrorGenerateCommentIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GENERATE_COMMENT_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsAddCommentFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_COMMENT_FAILED.String() && e.Code == 500
}

func ErrorAddCommentFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_COMMENT_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetCommentsByUserIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_COMMENTS_BY_USER_ID_FAILED.String() && e.Code == 500
}

func ErrorGetCommentsByUserIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_COMMENTS_BY_USER_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsUserTagsNotMatchOperatorTags(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_TAGS_NOT_MATCH_OPERATOR_TAGS.String() && e.Code == 500
}

func ErrorUserTagsNotMatchOperatorTags(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_TAGS_NOT_MATCH_OPERATOR_TAGS.String(), fmt.Sprintf(format, args...))
}

func IsInvalidOperatorType(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_OPERATOR_TYPE.String() && e.Code == 500
}

func ErrorInvalidOperatorType(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_OPERATOR_TYPE.String(), fmt.Sprintf(format, args...))
}

func IsAddUserDailyActivityFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ADD_USER_DAILY_ACTIVITY_FAILED.String() && e.Code == 500
}

func ErrorAddUserDailyActivityFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ADD_USER_DAILY_ACTIVITY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsOperatorIdNotFoundByOrigin(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OPERATOR_ID_NOT_FOUND_BY_ORIGIN.String() && e.Code == 500
}

func ErrorOperatorIdNotFoundByOrigin(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OPERATOR_ID_NOT_FOUND_BY_ORIGIN.String(), fmt.Sprintf(format, args...))
}

func IsOperatorIdNotFoundInContext(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OPERATOR_ID_NOT_FOUND_IN_CONTEXT.String() && e.Code == 500
}

func ErrorOperatorIdNotFoundInContext(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OPERATOR_ID_NOT_FOUND_IN_CONTEXT.String(), fmt.Sprintf(format, args...))
}

func IsListOperatorsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_LIST_OPERATORS_FAILED.String() && e.Code == 500
}

func ErrorListOperatorsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_LIST_OPERATORS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetOperatorsByIdsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_OPERATORS_BY_IDS_FAILED.String() && e.Code == 500
}

func ErrorGetOperatorsByIdsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_OPERATORS_BY_IDS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsOperatorHierarchyTooDeep(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OPERATOR_HIERARCHY_TOO_DEEP.String() && e.Code == 500
}

func ErrorOperatorHierarchyTooDeep(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OPERATOR_HIERARCHY_TOO_DEEP.String(), fmt.Sprintf(format, args...))
}

func IsGetParentOperatorIdsFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_PARENT_OPERATOR_IDS_FAILED.String() && e.Code == 500
}

func ErrorGetParentOperatorIdsFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_PARENT_OPERATOR_IDS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsCreateOriginToOperatorMappingFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CREATE_ORIGIN_TO_OPERATOR_MAPPING_FAILED.String() && e.Code == 500
}

func ErrorCreateOriginToOperatorMappingFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CREATE_ORIGIN_TO_OPERATOR_MAPPING_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsOriginAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ORIGIN_ALREADY_EXISTS.String() && e.Code == 500
}

func ErrorOriginAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ORIGIN_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

func IsGenerateBusinessIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GENERATE_BUSINESS_ID_FAILED.String() && e.Code == 500
}

func ErrorGenerateBusinessIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GENERATE_BUSINESS_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsCreateBusinessFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CREATE_BUSINESS_FAILED.String() && e.Code == 500
}

func ErrorCreateBusinessFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CREATE_BUSINESS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsOperatorIdsNotFoundByOrigin(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OPERATOR_IDS_NOT_FOUND_BY_ORIGIN.String() && e.Code == 500
}

func ErrorOperatorIdsNotFoundByOrigin(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OPERATOR_IDS_NOT_FOUND_BY_ORIGIN.String(), fmt.Sprintf(format, args...))
}

func IsOperatorIdsNotFoundInContext(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OPERATOR_IDS_NOT_FOUND_IN_CONTEXT.String() && e.Code == 500
}

func ErrorOperatorIdsNotFoundInContext(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OPERATOR_IDS_NOT_FOUND_IN_CONTEXT.String(), fmt.Sprintf(format, args...))
}

func IsActualOperatorIdNotGetInContext(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ACTUAL_OPERATOR_ID_NOT_GET_IN_CONTEXT.String() && e.Code == 500
}

func ErrorActualOperatorIdNotGetInContext(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ACTUAL_OPERATOR_ID_NOT_GET_IN_CONTEXT.String(), fmt.Sprintf(format, args...))
}

func IsInvalidOperatorKey(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_OPERATOR_KEY.String() && e.Code == 500
}

func ErrorInvalidOperatorKey(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_OPERATOR_KEY.String(), fmt.Sprintf(format, args...))
}

func IsGetOperatorByKeyFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_OPERATOR_BY_KEY_FAILED.String() && e.Code == 500
}

func ErrorGetOperatorByKeyFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_OPERATOR_BY_KEY_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsOperatorKeyAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OPERATOR_KEY_ALREADY_EXISTS.String() && e.Code == 500
}

func ErrorOperatorKeyAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OPERATOR_KEY_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

func IsEmptyPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EMPTY_PASSWORD.String() && e.Code == 500
}

func ErrorEmptyPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_EMPTY_PASSWORD.String(), fmt.Sprintf(format, args...))
}

func IsEmailAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EMAIL_ALREADY_EXISTS.String() && e.Code == 500
}

func ErrorEmailAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_EMAIL_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

func IsInvalidOperatorStatus(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_OPERATOR_STATUS.String() && e.Code == 500
}

func ErrorInvalidOperatorStatus(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_OPERATOR_STATUS.String(), fmt.Sprintf(format, args...))
}

func IsDomainPoolEmpty(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DOMAIN_POOL_EMPTY.String() && e.Code == 500
}

func ErrorDomainPoolEmpty(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DOMAIN_POOL_EMPTY.String(), fmt.Sprintf(format, args...))
}

func IsTargetOperatorNotBelongToOperator(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TARGET_OPERATOR_NOT_BELONG_TO_OPERATOR.String() && e.Code == 500
}

func ErrorTargetOperatorNotBelongToOperator(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_TARGET_OPERATOR_NOT_BELONG_TO_OPERATOR.String(), fmt.Sprintf(format, args...))
}

func IsOperatorNotFoundById(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OPERATOR_NOT_FOUND_BY_ID.String() && e.Code == 500
}

func ErrorOperatorNotFoundById(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OPERATOR_NOT_FOUND_BY_ID.String(), fmt.Sprintf(format, args...))
}

func IsGetOperatorByIdFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_OPERATOR_BY_ID_FAILED.String() && e.Code == 500
}

func ErrorGetOperatorByIdFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_OPERATOR_BY_ID_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsInvalidOperatorTransitionAction(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_OPERATOR_TRANSITION_ACTION.String() && e.Code == 500
}

func ErrorInvalidOperatorTransitionAction(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_OPERATOR_TRANSITION_ACTION.String(), fmt.Sprintf(format, args...))
}

func IsUpdateOperatorStatusFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UPDATE_OPERATOR_STATUS_FAILED.String() && e.Code == 500
}

func ErrorUpdateOperatorStatusFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UPDATE_OPERATOR_STATUS_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsInvalidOperatorContext(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_OPERATOR_CONTEXT.String() && e.Code == 500
}

func ErrorInvalidOperatorContext(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_OPERATOR_CONTEXT.String(), fmt.Sprintf(format, args...))
}

func IsInvalidOperatorId(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_OPERATOR_ID.String() && e.Code == 500
}

func ErrorInvalidOperatorId(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INVALID_OPERATOR_ID.String(), fmt.Sprintf(format, args...))
}

func IsOperatorContextPermissionDenied(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_OPERATOR_CONTEXT_PERMISSION_DENIED.String() && e.Code == 500
}

func ErrorOperatorContextPermissionDenied(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_OPERATOR_CONTEXT_PERMISSION_DENIED.String(), fmt.Sprintf(format, args...))
}
