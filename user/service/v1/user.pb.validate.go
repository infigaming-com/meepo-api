// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/service/v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for OperatorId

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for Enabled

	// no validation rules for Firstname

	// no validation rules for Lastname

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for BanGame

	// no validation rules for BanWithdraw

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PasswordProvider

	// no validation rules for AuthId

	// no validation rules for Password

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PasswordProvider

	// no validation rules for AuthId

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on OAuthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OAuthRequestMultiError, or
// nil if none found.
func (m *OAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OauthProvider

	// no validation rules for Token

	if len(errors) > 0 {
		return OAuthRequestMultiError(errors)
	}

	return nil
}

// OAuthRequestMultiError is an error wrapping multiple validation errors
// returned by OAuthRequest.ValidateAll() if the designated constraints aren't met.
type OAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthRequestMultiError) AllErrors() []error { return m }

// OAuthRequestValidationError is the validation error returned by
// OAuthRequest.Validate if the designated constraints aren't met.
type OAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthRequestValidationError) ErrorName() string { return "OAuthRequestValidationError" }

// Error satisfies the builtin error interface
func (e OAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthRequestValidationError{}

// Validate checks the field values on TelegramAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TelegramAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TelegramAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TelegramAuthRequestMultiError, or nil if none found.
func (m *TelegramAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TelegramAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Username

	// no validation rules for PhotoUrl

	// no validation rules for AuthDate

	// no validation rules for Hash

	if len(errors) > 0 {
		return TelegramAuthRequestMultiError(errors)
	}

	return nil
}

// TelegramAuthRequestMultiError is an error wrapping multiple validation
// errors returned by TelegramAuthRequest.ValidateAll() if the designated
// constraints aren't met.
type TelegramAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TelegramAuthRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TelegramAuthRequestMultiError) AllErrors() []error { return m }

// TelegramAuthRequestValidationError is the validation error returned by
// TelegramAuthRequest.Validate if the designated constraints aren't met.
type TelegramAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TelegramAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TelegramAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TelegramAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TelegramAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TelegramAuthRequestValidationError) ErrorName() string {
	return "TelegramAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TelegramAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTelegramAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TelegramAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TelegramAuthRequestValidationError{}

// Validate checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenRequestMultiError, or nil if none found.
func (m *RefreshTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return RefreshTokenRequestMultiError(errors)
	}

	return nil
}

// RefreshTokenRequestMultiError is an error wrapping multiple validation
// errors returned by RefreshTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type RefreshTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenRequestMultiError) AllErrors() []error { return m }

// RefreshTokenRequestValidationError is the validation error returned by
// RefreshTokenRequest.Validate if the designated constraints aren't met.
type RefreshTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenRequestValidationError) ErrorName() string {
	return "RefreshTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenRequestValidationError{}

// Validate checks the field values on AuthResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthResponseMultiError, or
// nil if none found.
func (m *AuthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	// no validation rules for ExpiresIn

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthResponseValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthResponseValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthResponseValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthResponseMultiError(errors)
	}

	return nil
}

// AuthResponseMultiError is an error wrapping multiple validation errors
// returned by AuthResponse.ValidateAll() if the designated constraints aren't met.
type AuthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthResponseMultiError) AllErrors() []error { return m }

// AuthResponseValidationError is the validation error returned by
// AuthResponse.Validate if the designated constraints aren't met.
type AuthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthResponseValidationError) ErrorName() string { return "AuthResponseValidationError" }

// Error satisfies the builtin error interface
func (e AuthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthResponseValidationError{}

// Validate checks the field values on RefreshTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenResponseMultiError, or nil if none found.
func (m *RefreshTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	// no validation rules for ExpiresIn

	if len(errors) > 0 {
		return RefreshTokenResponseMultiError(errors)
	}

	return nil
}

// RefreshTokenResponseMultiError is an error wrapping multiple validation
// errors returned by RefreshTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type RefreshTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenResponseMultiError) AllErrors() []error { return m }

// RefreshTokenResponseValidationError is the validation error returned by
// RefreshTokenResponse.Validate if the designated constraints aren't met.
type RefreshTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenResponseValidationError) ErrorName() string {
	return "RefreshTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenResponseValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}

	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on GetUsersByIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersByIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersByIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersByIdsRequestMultiError, or nil if none found.
func (m *GetUsersByIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersByIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUsersByIdsRequestMultiError(errors)
	}

	return nil
}

// GetUsersByIdsRequestMultiError is an error wrapping multiple validation
// errors returned by GetUsersByIdsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUsersByIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersByIdsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersByIdsRequestMultiError) AllErrors() []error { return m }

// GetUsersByIdsRequestValidationError is the validation error returned by
// GetUsersByIdsRequest.Validate if the designated constraints aren't met.
type GetUsersByIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersByIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersByIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersByIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersByIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersByIdsRequestValidationError) ErrorName() string {
	return "GetUsersByIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersByIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersByIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersByIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersByIdsRequestValidationError{}

// Validate checks the field values on GetUsersByIdsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersByIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersByIdsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersByIdsResponseMultiError, or nil if none found.
func (m *GetUsersByIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersByIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUsersByIdsResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUsersByIdsResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUsersByIdsResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUsersByIdsResponseMultiError(errors)
	}

	return nil
}

// GetUsersByIdsResponseMultiError is an error wrapping multiple validation
// errors returned by GetUsersByIdsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUsersByIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersByIdsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersByIdsResponseMultiError) AllErrors() []error { return m }

// GetUsersByIdsResponseValidationError is the validation error returned by
// GetUsersByIdsResponse.Validate if the designated constraints aren't met.
type GetUsersByIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersByIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersByIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersByIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersByIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersByIdsResponseValidationError) ErrorName() string {
	return "GetUsersByIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersByIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersByIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersByIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersByIdsResponseValidationError{}

// Validate checks the field values on GetUserIdsByOperatorIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserIdsByOperatorIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserIdsByOperatorIdsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserIdsByOperatorIdsRequestMultiError, or nil if none found.
func (m *GetUserIdsByOperatorIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserIdsByOperatorIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserIdsByOperatorIdsRequestMultiError(errors)
	}

	return nil
}

// GetUserIdsByOperatorIdsRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserIdsByOperatorIdsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetUserIdsByOperatorIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserIdsByOperatorIdsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserIdsByOperatorIdsRequestMultiError) AllErrors() []error { return m }

// GetUserIdsByOperatorIdsRequestValidationError is the validation error
// returned by GetUserIdsByOperatorIdsRequest.Validate if the designated
// constraints aren't met.
type GetUserIdsByOperatorIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIdsByOperatorIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIdsByOperatorIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIdsByOperatorIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIdsByOperatorIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIdsByOperatorIdsRequestValidationError) ErrorName() string {
	return "GetUserIdsByOperatorIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserIdsByOperatorIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIdsByOperatorIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIdsByOperatorIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIdsByOperatorIdsRequestValidationError{}

// Validate checks the field values on GetUserIdsByOperatorIdsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserIdsByOperatorIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserIdsByOperatorIdsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserIdsByOperatorIdsResponseMultiError, or nil if none found.
func (m *GetUserIdsByOperatorIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserIdsByOperatorIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserIdsByOperatorIdsResponseMultiError(errors)
	}

	return nil
}

// GetUserIdsByOperatorIdsResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserIdsByOperatorIdsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetUserIdsByOperatorIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserIdsByOperatorIdsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserIdsByOperatorIdsResponseMultiError) AllErrors() []error { return m }

// GetUserIdsByOperatorIdsResponseValidationError is the validation error
// returned by GetUserIdsByOperatorIdsResponse.Validate if the designated
// constraints aren't met.
type GetUserIdsByOperatorIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIdsByOperatorIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIdsByOperatorIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIdsByOperatorIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIdsByOperatorIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIdsByOperatorIdsResponseValidationError) ErrorName() string {
	return "GetUserIdsByOperatorIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserIdsByOperatorIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIdsByOperatorIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIdsByOperatorIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIdsByOperatorIdsResponseValidationError{}

// Validate checks the field values on LogoutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRequestMultiError, or
// nil if none found.
func (m *LogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutRequestMultiError(errors)
	}

	return nil
}

// LogoutRequestMultiError is an error wrapping multiple validation errors
// returned by LogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type LogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRequestMultiError) AllErrors() []error { return m }

// LogoutRequestValidationError is the validation error returned by
// LogoutRequest.Validate if the designated constraints aren't met.
type LogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRequestValidationError) ErrorName() string { return "LogoutRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRequestValidationError{}

// Validate checks the field values on LogoutResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutResponseMultiError,
// or nil if none found.
func (m *LogoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutResponseMultiError(errors)
	}

	return nil
}

// LogoutResponseMultiError is an error wrapping multiple validation errors
// returned by LogoutResponse.ValidateAll() if the designated constraints
// aren't met.
type LogoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutResponseMultiError) AllErrors() []error { return m }

// LogoutResponseValidationError is the validation error returned by
// LogoutResponse.Validate if the designated constraints aren't met.
type LogoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutResponseValidationError) ErrorName() string { return "LogoutResponseValidationError" }

// Error satisfies the builtin error interface
func (e LogoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutResponseValidationError{}

// Validate checks the field values on IsTokenRevokedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsTokenRevokedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsTokenRevokedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsTokenRevokedRequestMultiError, or nil if none found.
func (m *IsTokenRevokedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsTokenRevokedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return IsTokenRevokedRequestMultiError(errors)
	}

	return nil
}

// IsTokenRevokedRequestMultiError is an error wrapping multiple validation
// errors returned by IsTokenRevokedRequest.ValidateAll() if the designated
// constraints aren't met.
type IsTokenRevokedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsTokenRevokedRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsTokenRevokedRequestMultiError) AllErrors() []error { return m }

// IsTokenRevokedRequestValidationError is the validation error returned by
// IsTokenRevokedRequest.Validate if the designated constraints aren't met.
type IsTokenRevokedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsTokenRevokedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsTokenRevokedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsTokenRevokedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsTokenRevokedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsTokenRevokedRequestValidationError) ErrorName() string {
	return "IsTokenRevokedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsTokenRevokedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsTokenRevokedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsTokenRevokedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsTokenRevokedRequestValidationError{}

// Validate checks the field values on IsTokenRevokedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsTokenRevokedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsTokenRevokedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsTokenRevokedResponseMultiError, or nil if none found.
func (m *IsTokenRevokedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsTokenRevokedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Revoked

	if len(errors) > 0 {
		return IsTokenRevokedResponseMultiError(errors)
	}

	return nil
}

// IsTokenRevokedResponseMultiError is an error wrapping multiple validation
// errors returned by IsTokenRevokedResponse.ValidateAll() if the designated
// constraints aren't met.
type IsTokenRevokedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsTokenRevokedResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsTokenRevokedResponseMultiError) AllErrors() []error { return m }

// IsTokenRevokedResponseValidationError is the validation error returned by
// IsTokenRevokedResponse.Validate if the designated constraints aren't met.
type IsTokenRevokedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsTokenRevokedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsTokenRevokedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsTokenRevokedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsTokenRevokedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsTokenRevokedResponseValidationError) ErrorName() string {
	return "IsTokenRevokedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsTokenRevokedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsTokenRevokedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsTokenRevokedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsTokenRevokedResponseValidationError{}

// Validate checks the field values on GetOperatorTagConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorTagConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorTagConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorTagConfigRequestMultiError, or nil if none found.
func (m *GetOperatorTagConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorTagConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return GetOperatorTagConfigRequestMultiError(errors)
	}

	return nil
}

// GetOperatorTagConfigRequestMultiError is an error wrapping multiple
// validation errors returned by GetOperatorTagConfigRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOperatorTagConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorTagConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorTagConfigRequestMultiError) AllErrors() []error { return m }

// GetOperatorTagConfigRequestValidationError is the validation error returned
// by GetOperatorTagConfigRequest.Validate if the designated constraints
// aren't met.
type GetOperatorTagConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorTagConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorTagConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorTagConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorTagConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorTagConfigRequestValidationError) ErrorName() string {
	return "GetOperatorTagConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorTagConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorTagConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorTagConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorTagConfigRequestValidationError{}

// Validate checks the field values on GetOperatorTagConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorTagConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorTagConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorTagConfigResponseMultiError, or nil if none found.
func (m *GetOperatorTagConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorTagConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FollowParent

	if len(errors) > 0 {
		return GetOperatorTagConfigResponseMultiError(errors)
	}

	return nil
}

// GetOperatorTagConfigResponseMultiError is an error wrapping multiple
// validation errors returned by GetOperatorTagConfigResponse.ValidateAll() if
// the designated constraints aren't met.
type GetOperatorTagConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorTagConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorTagConfigResponseMultiError) AllErrors() []error { return m }

// GetOperatorTagConfigResponseValidationError is the validation error returned
// by GetOperatorTagConfigResponse.Validate if the designated constraints
// aren't met.
type GetOperatorTagConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorTagConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorTagConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorTagConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorTagConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorTagConfigResponseValidationError) ErrorName() string {
	return "GetOperatorTagConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorTagConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorTagConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorTagConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorTagConfigResponseValidationError{}

// Validate checks the field values on SetOperatorTagConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOperatorTagConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOperatorTagConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetOperatorTagConfigRequestMultiError, or nil if none found.
func (m *SetOperatorTagConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOperatorTagConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for FollowParent

	if len(errors) > 0 {
		return SetOperatorTagConfigRequestMultiError(errors)
	}

	return nil
}

// SetOperatorTagConfigRequestMultiError is an error wrapping multiple
// validation errors returned by SetOperatorTagConfigRequest.ValidateAll() if
// the designated constraints aren't met.
type SetOperatorTagConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOperatorTagConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOperatorTagConfigRequestMultiError) AllErrors() []error { return m }

// SetOperatorTagConfigRequestValidationError is the validation error returned
// by SetOperatorTagConfigRequest.Validate if the designated constraints
// aren't met.
type SetOperatorTagConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOperatorTagConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOperatorTagConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOperatorTagConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOperatorTagConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOperatorTagConfigRequestValidationError) ErrorName() string {
	return "SetOperatorTagConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetOperatorTagConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOperatorTagConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOperatorTagConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOperatorTagConfigRequestValidationError{}

// Validate checks the field values on SetOperatorTagConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOperatorTagConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOperatorTagConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetOperatorTagConfigResponseMultiError, or nil if none found.
func (m *SetOperatorTagConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOperatorTagConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FollowParent

	if len(errors) > 0 {
		return SetOperatorTagConfigResponseMultiError(errors)
	}

	return nil
}

// SetOperatorTagConfigResponseMultiError is an error wrapping multiple
// validation errors returned by SetOperatorTagConfigResponse.ValidateAll() if
// the designated constraints aren't met.
type SetOperatorTagConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOperatorTagConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOperatorTagConfigResponseMultiError) AllErrors() []error { return m }

// SetOperatorTagConfigResponseValidationError is the validation error returned
// by SetOperatorTagConfigResponse.Validate if the designated constraints
// aren't met.
type SetOperatorTagConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOperatorTagConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOperatorTagConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOperatorTagConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOperatorTagConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOperatorTagConfigResponseValidationError) ErrorName() string {
	return "SetOperatorTagConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetOperatorTagConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOperatorTagConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOperatorTagConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOperatorTagConfigResponseValidationError{}

// Validate checks the field values on AddOperatorTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOperatorTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOperatorTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOperatorTagRequestMultiError, or nil if none found.
func (m *AddOperatorTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOperatorTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for Tag

	if len(errors) > 0 {
		return AddOperatorTagRequestMultiError(errors)
	}

	return nil
}

// AddOperatorTagRequestMultiError is an error wrapping multiple validation
// errors returned by AddOperatorTagRequest.ValidateAll() if the designated
// constraints aren't met.
type AddOperatorTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOperatorTagRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOperatorTagRequestMultiError) AllErrors() []error { return m }

// AddOperatorTagRequestValidationError is the validation error returned by
// AddOperatorTagRequest.Validate if the designated constraints aren't met.
type AddOperatorTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOperatorTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOperatorTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOperatorTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOperatorTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOperatorTagRequestValidationError) ErrorName() string {
	return "AddOperatorTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOperatorTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOperatorTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOperatorTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOperatorTagRequestValidationError{}

// Validate checks the field values on AddOperatorTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOperatorTagResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOperatorTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOperatorTagResponseMultiError, or nil if none found.
func (m *AddOperatorTagResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOperatorTagResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddOperatorTagResponseMultiError(errors)
	}

	return nil
}

// AddOperatorTagResponseMultiError is an error wrapping multiple validation
// errors returned by AddOperatorTagResponse.ValidateAll() if the designated
// constraints aren't met.
type AddOperatorTagResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOperatorTagResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOperatorTagResponseMultiError) AllErrors() []error { return m }

// AddOperatorTagResponseValidationError is the validation error returned by
// AddOperatorTagResponse.Validate if the designated constraints aren't met.
type AddOperatorTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOperatorTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOperatorTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOperatorTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOperatorTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOperatorTagResponseValidationError) ErrorName() string {
	return "AddOperatorTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOperatorTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOperatorTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOperatorTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOperatorTagResponseValidationError{}

// Validate checks the field values on GetOperatorTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorTagsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorTagsRequestMultiError, or nil if none found.
func (m *GetOperatorTagsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorTagsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return GetOperatorTagsRequestMultiError(errors)
	}

	return nil
}

// GetOperatorTagsRequestMultiError is an error wrapping multiple validation
// errors returned by GetOperatorTagsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorTagsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorTagsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorTagsRequestMultiError) AllErrors() []error { return m }

// GetOperatorTagsRequestValidationError is the validation error returned by
// GetOperatorTagsRequest.Validate if the designated constraints aren't met.
type GetOperatorTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorTagsRequestValidationError) ErrorName() string {
	return "GetOperatorTagsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorTagsRequestValidationError{}

// Validate checks the field values on GetOperatorTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorTagsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorTagsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorTagsResponseMultiError, or nil if none found.
func (m *GetOperatorTagsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorTagsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOperatorTagsResponseMultiError(errors)
	}

	return nil
}

// GetOperatorTagsResponseMultiError is an error wrapping multiple validation
// errors returned by GetOperatorTagsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorTagsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorTagsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorTagsResponseMultiError) AllErrors() []error { return m }

// GetOperatorTagsResponseValidationError is the validation error returned by
// GetOperatorTagsResponse.Validate if the designated constraints aren't met.
type GetOperatorTagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorTagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorTagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorTagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorTagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorTagsResponseValidationError) ErrorName() string {
	return "GetOperatorTagsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorTagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorTagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorTagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorTagsResponseValidationError{}

// Validate checks the field values on DeleteOperatorTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOperatorTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOperatorTagRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOperatorTagRequestMultiError, or nil if none found.
func (m *DeleteOperatorTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOperatorTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for Tag

	if len(errors) > 0 {
		return DeleteOperatorTagRequestMultiError(errors)
	}

	return nil
}

// DeleteOperatorTagRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOperatorTagRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteOperatorTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOperatorTagRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOperatorTagRequestMultiError) AllErrors() []error { return m }

// DeleteOperatorTagRequestValidationError is the validation error returned by
// DeleteOperatorTagRequest.Validate if the designated constraints aren't met.
type DeleteOperatorTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOperatorTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOperatorTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOperatorTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOperatorTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOperatorTagRequestValidationError) ErrorName() string {
	return "DeleteOperatorTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOperatorTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOperatorTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOperatorTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOperatorTagRequestValidationError{}

// Validate checks the field values on DeleteOperatorTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOperatorTagResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOperatorTagResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOperatorTagResponseMultiError, or nil if none found.
func (m *DeleteOperatorTagResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOperatorTagResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOperatorTagResponseMultiError(errors)
	}

	return nil
}

// DeleteOperatorTagResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteOperatorTagResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteOperatorTagResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOperatorTagResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOperatorTagResponseMultiError) AllErrors() []error { return m }

// DeleteOperatorTagResponseValidationError is the validation error returned by
// DeleteOperatorTagResponse.Validate if the designated constraints aren't met.
type DeleteOperatorTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOperatorTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOperatorTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOperatorTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOperatorTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOperatorTagResponseValidationError) ErrorName() string {
	return "DeleteOperatorTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOperatorTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOperatorTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOperatorTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOperatorTagResponseValidationError{}

// Validate checks the field values on AddUserTagRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddUserTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserTagRequestMultiError, or nil if none found.
func (m *AddUserTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Tag

	if len(errors) > 0 {
		return AddUserTagRequestMultiError(errors)
	}

	return nil
}

// AddUserTagRequestMultiError is an error wrapping multiple validation errors
// returned by AddUserTagRequest.ValidateAll() if the designated constraints
// aren't met.
type AddUserTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserTagRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserTagRequestMultiError) AllErrors() []error { return m }

// AddUserTagRequestValidationError is the validation error returned by
// AddUserTagRequest.Validate if the designated constraints aren't met.
type AddUserTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserTagRequestValidationError) ErrorName() string {
	return "AddUserTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserTagRequestValidationError{}

// Validate checks the field values on AddUserTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUserTagResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserTagResponseMultiError, or nil if none found.
func (m *AddUserTagResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserTagResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddUserTagResponseMultiError(errors)
	}

	return nil
}

// AddUserTagResponseMultiError is an error wrapping multiple validation errors
// returned by AddUserTagResponse.ValidateAll() if the designated constraints
// aren't met.
type AddUserTagResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserTagResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserTagResponseMultiError) AllErrors() []error { return m }

// AddUserTagResponseValidationError is the validation error returned by
// AddUserTagResponse.Validate if the designated constraints aren't met.
type AddUserTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserTagResponseValidationError) ErrorName() string {
	return "AddUserTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserTagResponseValidationError{}

// Validate checks the field values on DeleteUserTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserTagRequestMultiError, or nil if none found.
func (m *DeleteUserTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Tag

	if len(errors) > 0 {
		return DeleteUserTagRequestMultiError(errors)
	}

	return nil
}

// DeleteUserTagRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserTagRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserTagRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserTagRequestMultiError) AllErrors() []error { return m }

// DeleteUserTagRequestValidationError is the validation error returned by
// DeleteUserTagRequest.Validate if the designated constraints aren't met.
type DeleteUserTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserTagRequestValidationError) ErrorName() string {
	return "DeleteUserTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserTagRequestValidationError{}

// Validate checks the field values on DeleteUserTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserTagResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserTagResponseMultiError, or nil if none found.
func (m *DeleteUserTagResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserTagResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserTagResponseMultiError(errors)
	}

	return nil
}

// DeleteUserTagResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteUserTagResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserTagResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserTagResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserTagResponseMultiError) AllErrors() []error { return m }

// DeleteUserTagResponseValidationError is the validation error returned by
// DeleteUserTagResponse.Validate if the designated constraints aren't met.
type DeleteUserTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserTagResponseValidationError) ErrorName() string {
	return "DeleteUserTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserTagResponseValidationError{}

// Validate checks the field values on GetUserTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTagsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTagsRequestMultiError, or nil if none found.
func (m *GetUserTagsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTagsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserTagsRequestMultiError(errors)
	}

	return nil
}

// GetUserTagsRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserTagsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserTagsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTagsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTagsRequestMultiError) AllErrors() []error { return m }

// GetUserTagsRequestValidationError is the validation error returned by
// GetUserTagsRequest.Validate if the designated constraints aren't met.
type GetUserTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTagsRequestValidationError) ErrorName() string {
	return "GetUserTagsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTagsRequestValidationError{}

// Validate checks the field values on GetUserTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTagsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTagsResponseMultiError, or nil if none found.
func (m *GetUserTagsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTagsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserTagsResponseMultiError(errors)
	}

	return nil
}

// GetUserTagsResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserTagsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserTagsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTagsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTagsResponseMultiError) AllErrors() []error { return m }

// GetUserTagsResponseValidationError is the validation error returned by
// GetUserTagsResponse.Validate if the designated constraints aren't met.
type GetUserTagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTagsResponseValidationError) ErrorName() string {
	return "GetUserTagsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTagsResponseValidationError{}

// Validate checks the field values on CheckPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckPermissionRequestMultiError, or nil if none found.
func (m *CheckPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for RoleId

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return CheckPermissionRequestMultiError(errors)
	}

	return nil
}

// CheckPermissionRequestMultiError is an error wrapping multiple validation
// errors returned by CheckPermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckPermissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckPermissionRequestMultiError) AllErrors() []error { return m }

// CheckPermissionRequestValidationError is the validation error returned by
// CheckPermissionRequest.Validate if the designated constraints aren't met.
type CheckPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckPermissionRequestValidationError) ErrorName() string {
	return "CheckPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckPermissionRequestValidationError{}

// Validate checks the field values on CheckPermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckPermissionResponseMultiError, or nil if none found.
func (m *CheckPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Allowed

	if len(errors) > 0 {
		return CheckPermissionResponseMultiError(errors)
	}

	return nil
}

// CheckPermissionResponseMultiError is an error wrapping multiple validation
// errors returned by CheckPermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckPermissionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckPermissionResponseMultiError) AllErrors() []error { return m }

// CheckPermissionResponseValidationError is the validation error returned by
// CheckPermissionResponse.Validate if the designated constraints aren't met.
type CheckPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckPermissionResponseValidationError) ErrorName() string {
	return "CheckPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckPermissionResponseValidationError{}

// Validate checks the field values on AddOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOperatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOperatorRequestMultiError, or nil if none found.
func (m *AddOperatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOperatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return AddOperatorRequestMultiError(errors)
	}

	return nil
}

// AddOperatorRequestMultiError is an error wrapping multiple validation errors
// returned by AddOperatorRequest.ValidateAll() if the designated constraints
// aren't met.
type AddOperatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOperatorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOperatorRequestMultiError) AllErrors() []error { return m }

// AddOperatorRequestValidationError is the validation error returned by
// AddOperatorRequest.Validate if the designated constraints aren't met.
type AddOperatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOperatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOperatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOperatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOperatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOperatorRequestValidationError) ErrorName() string {
	return "AddOperatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOperatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOperatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOperatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOperatorRequestValidationError{}

// Validate checks the field values on AddOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOperatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOperatorResponseMultiError, or nil if none found.
func (m *AddOperatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOperatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddOperatorResponseMultiError(errors)
	}

	return nil
}

// AddOperatorResponseMultiError is an error wrapping multiple validation
// errors returned by AddOperatorResponse.ValidateAll() if the designated
// constraints aren't met.
type AddOperatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOperatorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOperatorResponseMultiError) AllErrors() []error { return m }

// AddOperatorResponseValidationError is the validation error returned by
// AddOperatorResponse.Validate if the designated constraints aren't met.
type AddOperatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOperatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOperatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOperatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOperatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOperatorResponseValidationError) ErrorName() string {
	return "AddOperatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOperatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOperatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOperatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOperatorResponseValidationError{}

// Validate checks the field values on SendEmailVerificationCodeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendEmailVerificationCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailVerificationCodeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendEmailVerificationCodeRequestMultiError, or nil if none found.
func (m *SendEmailVerificationCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailVerificationCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return SendEmailVerificationCodeRequestMultiError(errors)
	}

	return nil
}

// SendEmailVerificationCodeRequestMultiError is an error wrapping multiple
// validation errors returned by
// SendEmailVerificationCodeRequest.ValidateAll() if the designated
// constraints aren't met.
type SendEmailVerificationCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailVerificationCodeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailVerificationCodeRequestMultiError) AllErrors() []error { return m }

// SendEmailVerificationCodeRequestValidationError is the validation error
// returned by SendEmailVerificationCodeRequest.Validate if the designated
// constraints aren't met.
type SendEmailVerificationCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailVerificationCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailVerificationCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailVerificationCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailVerificationCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailVerificationCodeRequestValidationError) ErrorName() string {
	return "SendEmailVerificationCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendEmailVerificationCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailVerificationCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailVerificationCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailVerificationCodeRequestValidationError{}

// Validate checks the field values on SendEmailVerificationCodeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendEmailVerificationCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailVerificationCodeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendEmailVerificationCodeResponseMultiError, or nil if none found.
func (m *SendEmailVerificationCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailVerificationCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendEmailVerificationCodeResponseMultiError(errors)
	}

	return nil
}

// SendEmailVerificationCodeResponseMultiError is an error wrapping multiple
// validation errors returned by
// SendEmailVerificationCodeResponse.ValidateAll() if the designated
// constraints aren't met.
type SendEmailVerificationCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailVerificationCodeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailVerificationCodeResponseMultiError) AllErrors() []error { return m }

// SendEmailVerificationCodeResponseValidationError is the validation error
// returned by SendEmailVerificationCodeResponse.Validate if the designated
// constraints aren't met.
type SendEmailVerificationCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailVerificationCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailVerificationCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailVerificationCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailVerificationCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailVerificationCodeResponseValidationError) ErrorName() string {
	return "SendEmailVerificationCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendEmailVerificationCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailVerificationCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailVerificationCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailVerificationCodeResponseValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.BanLogin != nil {
		// no validation rules for BanLogin
	}

	if m.BanGame != nil {
		// no validation rules for BanGame
	}

	if m.BanWithdraw != nil {
		// no validation rules for BanWithdraw
	}

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserResponseMultiError, or nil if none found.
func (m *UpdateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserResponseMultiError(errors)
	}

	return nil
}

// UpdateUserResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserResponseMultiError) AllErrors() []error { return m }

// UpdateUserResponseValidationError is the validation error returned by
// UpdateUserResponse.Validate if the designated constraints aren't met.
type UpdateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserResponseValidationError) ErrorName() string {
	return "UpdateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserResponseValidationError{}

// Validate checks the field values on ListUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersRequestMultiError, or nil if none found.
func (m *ListUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.RegistrationStartTime != nil {

		if all {
			switch v := interface{}(m.GetRegistrationStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersRequestValidationError{
						field:  "RegistrationStartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersRequestValidationError{
						field:  "RegistrationStartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegistrationStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersRequestValidationError{
					field:  "RegistrationStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RegistrationEndTime != nil {

		if all {
			switch v := interface{}(m.GetRegistrationEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersRequestValidationError{
						field:  "RegistrationEndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersRequestValidationError{
						field:  "RegistrationEndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegistrationEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersRequestValidationError{
					field:  "RegistrationEndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.VipLevel != nil {
		// no validation rules for VipLevel
	}

	if m.RetailerOperatorId != nil {
		// no validation rules for RetailerOperatorId
	}

	if m.GroupOperatorId != nil {
		// no validation rules for GroupOperatorId
	}

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if m.Country != nil {
		// no validation rules for Country
	}

	if m.KycLevel != nil {
		// no validation rules for KycLevel
	}

	if m.DepositMin != nil {
		// no validation rules for DepositMin
	}

	if m.DepositMax != nil {
		// no validation rules for DepositMax
	}

	if m.WithdrawalMin != nil {
		// no validation rules for WithdrawalMin
	}

	if m.WithdrawalMax != nil {
		// no validation rules for WithdrawalMax
	}

	if m.BanWithdraw != nil {
		// no validation rules for BanWithdraw
	}

	if m.BanGame != nil {
		// no validation rules for BanGame
	}

	if m.BanLogin != nil {
		// no validation rules for BanLogin
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListUsersRequestMultiError(errors)
	}

	return nil
}

// ListUsersRequestMultiError is an error wrapping multiple validation errors
// returned by ListUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersRequestMultiError) AllErrors() []error { return m }

// ListUsersRequestValidationError is the validation error returned by
// ListUsersRequest.Validate if the designated constraints aren't met.
type ListUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersRequestValidationError) ErrorName() string { return "ListUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersRequestValidationError{}

// Validate checks the field values on ListUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersResponseMultiError, or nil if none found.
func (m *ListUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return ListUsersResponseMultiError(errors)
	}

	return nil
}

// ListUsersResponseMultiError is an error wrapping multiple validation errors
// returned by ListUsersResponse.ValidateAll() if the designated constraints
// aren't met.
type ListUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersResponseMultiError) AllErrors() []error { return m }

// ListUsersResponseValidationError is the validation error returned by
// ListUsersResponse.Validate if the designated constraints aren't met.
type ListUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponseValidationError) ErrorName() string {
	return "ListUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponseValidationError{}

// Validate checks the field values on ListUsersResponse_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUsersResponse_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersResponse_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersResponse_UserMultiError, or nil if none found.
func (m *ListUsersResponse_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersResponse_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Retailer

	// no validation rules for Group

	// no validation rules for OperatorName

	// no validation rules for UserId

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for VipLevel

	// no validation rules for KycLevel

	// no validation rules for Deposit

	// no validation rules for Withdraw

	// no validation rules for BanWithdraw

	// no validation rules for BanGame

	// no validation rules for BanLogin

	if all {
		switch v := interface{}(m.GetLastLoginAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "LastLoginAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "LastLoginAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastLoginAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersResponse_UserValidationError{
				field:  "LastLoginAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRegisteredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "RegisteredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "RegisteredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegisteredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersResponse_UserValidationError{
				field:  "RegisteredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Country

	// no validation rules for RegistrationIp

	if len(errors) > 0 {
		return ListUsersResponse_UserMultiError(errors)
	}

	return nil
}

// ListUsersResponse_UserMultiError is an error wrapping multiple validation
// errors returned by ListUsersResponse_User.ValidateAll() if the designated
// constraints aren't met.
type ListUsersResponse_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersResponse_UserMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersResponse_UserMultiError) AllErrors() []error { return m }

// ListUsersResponse_UserValidationError is the validation error returned by
// ListUsersResponse_User.Validate if the designated constraints aren't met.
type ListUsersResponse_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponse_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponse_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponse_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponse_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponse_UserValidationError) ErrorName() string {
	return "ListUsersResponse_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponse_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponse_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponse_UserValidationError{}
