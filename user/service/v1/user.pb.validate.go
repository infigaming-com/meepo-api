// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/service/v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for OperatorId

	// no validation rules for CompanyOperatorId

	// no validation rules for RetailerOperatorId

	// no validation rules for SystemOperatorId

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for Enabled

	// no validation rules for Firstname

	// no validation rules for Lastname

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for BanGame

	// no validation rules for BanWithdraw

	// no validation rules for RoleId

	// no validation rules for RegisteredMobile

	// no validation rules for RegisteredEmail

	// no validation rules for KycLevel

	// no validation rules for Address

	for idx, item := range m.GetUserIdentity() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserInfoValidationError{
						field:  fmt.Sprintf("UserIdentity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserInfoValidationError{
						field:  fmt.Sprintf("UserIdentity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserInfoValidationError{
					field:  fmt.Sprintf("UserIdentity[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetDob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserInfoValidationError{
					field:  "Dob",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserInfoValidationError{
					field:  "Dob",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserInfoValidationError{
				field:  "Dob",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Country

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PasswordProvider

	// no validation rules for AuthId

	// no validation rules for Password

	if m.Dob != nil {

		if all {
			switch v := interface{}(m.GetDob()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RegisterRequestValidationError{
						field:  "Dob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RegisterRequestValidationError{
						field:  "Dob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDob()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegisterRequestValidationError{
					field:  "Dob",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.IdNumber != nil {
		// no validation rules for IdNumber
	}

	if m.IdType != nil {
		// no validation rules for IdType
	}

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PasswordProvider

	// no validation rules for AuthId

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on HttpRequestInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HttpRequestInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HttpRequestInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HttpRequestInfoMultiError, or nil if none found.
func (m *HttpRequestInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *HttpRequestInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Method

	// no validation rules for Path

	// no validation rules for Host

	// no validation rules for RemoteAddr

	// no validation rules for Country

	// no validation rules for Origin

	// no validation rules for Referer

	// no validation rules for UserAgent

	// no validation rules for ClientIp

	if len(errors) > 0 {
		return HttpRequestInfoMultiError(errors)
	}

	return nil
}

// HttpRequestInfoMultiError is an error wrapping multiple validation errors
// returned by HttpRequestInfo.ValidateAll() if the designated constraints
// aren't met.
type HttpRequestInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HttpRequestInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HttpRequestInfoMultiError) AllErrors() []error { return m }

// HttpRequestInfoValidationError is the validation error returned by
// HttpRequestInfo.Validate if the designated constraints aren't met.
type HttpRequestInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpRequestInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpRequestInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpRequestInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpRequestInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpRequestInfoValidationError) ErrorName() string { return "HttpRequestInfoValidationError" }

// Error satisfies the builtin error interface
func (e HttpRequestInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpRequestInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpRequestInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpRequestInfoValidationError{}

// Validate checks the field values on LoginWithInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginWithInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginWithInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginWithInfoRequestMultiError, or nil if none found.
func (m *LoginWithInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginWithInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PasswordProvider

	// no validation rules for AuthId

	// no validation rules for Password

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginWithInfoRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginWithInfoRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginWithInfoRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHttpRequestInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginWithInfoRequestValidationError{
					field:  "HttpRequestInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginWithInfoRequestValidationError{
					field:  "HttpRequestInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHttpRequestInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginWithInfoRequestValidationError{
				field:  "HttpRequestInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoginWithInfoRequestMultiError(errors)
	}

	return nil
}

// LoginWithInfoRequestMultiError is an error wrapping multiple validation
// errors returned by LoginWithInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type LoginWithInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginWithInfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginWithInfoRequestMultiError) AllErrors() []error { return m }

// LoginWithInfoRequestValidationError is the validation error returned by
// LoginWithInfoRequest.Validate if the designated constraints aren't met.
type LoginWithInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginWithInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginWithInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginWithInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginWithInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginWithInfoRequestValidationError) ErrorName() string {
	return "LoginWithInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginWithInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginWithInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginWithInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginWithInfoRequestValidationError{}

// Validate checks the field values on OAuthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OAuthRequestMultiError, or
// nil if none found.
func (m *OAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OauthProvider

	// no validation rules for Token

	if len(errors) > 0 {
		return OAuthRequestMultiError(errors)
	}

	return nil
}

// OAuthRequestMultiError is an error wrapping multiple validation errors
// returned by OAuthRequest.ValidateAll() if the designated constraints aren't met.
type OAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthRequestMultiError) AllErrors() []error { return m }

// OAuthRequestValidationError is the validation error returned by
// OAuthRequest.Validate if the designated constraints aren't met.
type OAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthRequestValidationError) ErrorName() string { return "OAuthRequestValidationError" }

// Error satisfies the builtin error interface
func (e OAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthRequestValidationError{}

// Validate checks the field values on TelegramAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TelegramAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TelegramAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TelegramAuthRequestMultiError, or nil if none found.
func (m *TelegramAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TelegramAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Username

	// no validation rules for PhotoUrl

	// no validation rules for AuthDate

	// no validation rules for Hash

	if len(errors) > 0 {
		return TelegramAuthRequestMultiError(errors)
	}

	return nil
}

// TelegramAuthRequestMultiError is an error wrapping multiple validation
// errors returned by TelegramAuthRequest.ValidateAll() if the designated
// constraints aren't met.
type TelegramAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TelegramAuthRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TelegramAuthRequestMultiError) AllErrors() []error { return m }

// TelegramAuthRequestValidationError is the validation error returned by
// TelegramAuthRequest.Validate if the designated constraints aren't met.
type TelegramAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TelegramAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TelegramAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TelegramAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TelegramAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TelegramAuthRequestValidationError) ErrorName() string {
	return "TelegramAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TelegramAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTelegramAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TelegramAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TelegramAuthRequestValidationError{}

// Validate checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenRequestMultiError, or nil if none found.
func (m *RefreshTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return RefreshTokenRequestMultiError(errors)
	}

	return nil
}

// RefreshTokenRequestMultiError is an error wrapping multiple validation
// errors returned by RefreshTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type RefreshTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenRequestMultiError) AllErrors() []error { return m }

// RefreshTokenRequestValidationError is the validation error returned by
// RefreshTokenRequest.Validate if the designated constraints aren't met.
type RefreshTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenRequestValidationError) ErrorName() string {
	return "RefreshTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenRequestValidationError{}

// Validate checks the field values on AuthResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthResponseMultiError, or
// nil if none found.
func (m *AuthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	// no validation rules for ExpiresIn

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthResponseValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthResponseValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthResponseValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthResponseMultiError(errors)
	}

	return nil
}

// AuthResponseMultiError is an error wrapping multiple validation errors
// returned by AuthResponse.ValidateAll() if the designated constraints aren't met.
type AuthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthResponseMultiError) AllErrors() []error { return m }

// AuthResponseValidationError is the validation error returned by
// AuthResponse.Validate if the designated constraints aren't met.
type AuthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthResponseValidationError) ErrorName() string { return "AuthResponseValidationError" }

// Error satisfies the builtin error interface
func (e AuthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthResponseValidationError{}

// Validate checks the field values on RefreshTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenResponseMultiError, or nil if none found.
func (m *RefreshTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	// no validation rules for ExpiresIn

	if len(errors) > 0 {
		return RefreshTokenResponseMultiError(errors)
	}

	return nil
}

// RefreshTokenResponseMultiError is an error wrapping multiple validation
// errors returned by RefreshTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type RefreshTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenResponseMultiError) AllErrors() []error { return m }

// RefreshTokenResponseValidationError is the validation error returned by
// RefreshTokenResponse.Validate if the designated constraints aren't met.
type RefreshTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenResponseValidationError) ErrorName() string {
	return "RefreshTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenResponseValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}

	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on GetUsersByIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersByIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersByIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersByIdsRequestMultiError, or nil if none found.
func (m *GetUsersByIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersByIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUsersByIdsRequestMultiError(errors)
	}

	return nil
}

// GetUsersByIdsRequestMultiError is an error wrapping multiple validation
// errors returned by GetUsersByIdsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUsersByIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersByIdsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersByIdsRequestMultiError) AllErrors() []error { return m }

// GetUsersByIdsRequestValidationError is the validation error returned by
// GetUsersByIdsRequest.Validate if the designated constraints aren't met.
type GetUsersByIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersByIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersByIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersByIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersByIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersByIdsRequestValidationError) ErrorName() string {
	return "GetUsersByIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersByIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersByIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersByIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersByIdsRequestValidationError{}

// Validate checks the field values on GetUsersByIdsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersByIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersByIdsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersByIdsResponseMultiError, or nil if none found.
func (m *GetUsersByIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersByIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUsersByIdsResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUsersByIdsResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUsersByIdsResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUsersByIdsResponseMultiError(errors)
	}

	return nil
}

// GetUsersByIdsResponseMultiError is an error wrapping multiple validation
// errors returned by GetUsersByIdsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUsersByIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersByIdsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersByIdsResponseMultiError) AllErrors() []error { return m }

// GetUsersByIdsResponseValidationError is the validation error returned by
// GetUsersByIdsResponse.Validate if the designated constraints aren't met.
type GetUsersByIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersByIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersByIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersByIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersByIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersByIdsResponseValidationError) ErrorName() string {
	return "GetUsersByIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersByIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersByIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersByIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersByIdsResponseValidationError{}

// Validate checks the field values on GetUserIdsByOperatorIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserIdsByOperatorIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserIdsByOperatorIdsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserIdsByOperatorIdsRequestMultiError, or nil if none found.
func (m *GetUserIdsByOperatorIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserIdsByOperatorIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserIdsByOperatorIdsRequestMultiError(errors)
	}

	return nil
}

// GetUserIdsByOperatorIdsRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserIdsByOperatorIdsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetUserIdsByOperatorIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserIdsByOperatorIdsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserIdsByOperatorIdsRequestMultiError) AllErrors() []error { return m }

// GetUserIdsByOperatorIdsRequestValidationError is the validation error
// returned by GetUserIdsByOperatorIdsRequest.Validate if the designated
// constraints aren't met.
type GetUserIdsByOperatorIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIdsByOperatorIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIdsByOperatorIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIdsByOperatorIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIdsByOperatorIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIdsByOperatorIdsRequestValidationError) ErrorName() string {
	return "GetUserIdsByOperatorIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserIdsByOperatorIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIdsByOperatorIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIdsByOperatorIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIdsByOperatorIdsRequestValidationError{}

// Validate checks the field values on GetUserIdsByOperatorIdsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserIdsByOperatorIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserIdsByOperatorIdsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserIdsByOperatorIdsResponseMultiError, or nil if none found.
func (m *GetUserIdsByOperatorIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserIdsByOperatorIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserIdsByOperatorIdsResponseMultiError(errors)
	}

	return nil
}

// GetUserIdsByOperatorIdsResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserIdsByOperatorIdsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetUserIdsByOperatorIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserIdsByOperatorIdsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserIdsByOperatorIdsResponseMultiError) AllErrors() []error { return m }

// GetUserIdsByOperatorIdsResponseValidationError is the validation error
// returned by GetUserIdsByOperatorIdsResponse.Validate if the designated
// constraints aren't met.
type GetUserIdsByOperatorIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIdsByOperatorIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIdsByOperatorIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIdsByOperatorIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIdsByOperatorIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIdsByOperatorIdsResponseValidationError) ErrorName() string {
	return "GetUserIdsByOperatorIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserIdsByOperatorIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIdsByOperatorIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIdsByOperatorIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIdsByOperatorIdsResponseValidationError{}

// Validate checks the field values on LogoutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRequestMultiError, or
// nil if none found.
func (m *LogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutRequestMultiError(errors)
	}

	return nil
}

// LogoutRequestMultiError is an error wrapping multiple validation errors
// returned by LogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type LogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRequestMultiError) AllErrors() []error { return m }

// LogoutRequestValidationError is the validation error returned by
// LogoutRequest.Validate if the designated constraints aren't met.
type LogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRequestValidationError) ErrorName() string { return "LogoutRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRequestValidationError{}

// Validate checks the field values on LogoutResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutResponseMultiError,
// or nil if none found.
func (m *LogoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutResponseMultiError(errors)
	}

	return nil
}

// LogoutResponseMultiError is an error wrapping multiple validation errors
// returned by LogoutResponse.ValidateAll() if the designated constraints
// aren't met.
type LogoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutResponseMultiError) AllErrors() []error { return m }

// LogoutResponseValidationError is the validation error returned by
// LogoutResponse.Validate if the designated constraints aren't met.
type LogoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutResponseValidationError) ErrorName() string { return "LogoutResponseValidationError" }

// Error satisfies the builtin error interface
func (e LogoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutResponseValidationError{}

// Validate checks the field values on IsTokenRevokedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsTokenRevokedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsTokenRevokedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsTokenRevokedRequestMultiError, or nil if none found.
func (m *IsTokenRevokedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsTokenRevokedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return IsTokenRevokedRequestMultiError(errors)
	}

	return nil
}

// IsTokenRevokedRequestMultiError is an error wrapping multiple validation
// errors returned by IsTokenRevokedRequest.ValidateAll() if the designated
// constraints aren't met.
type IsTokenRevokedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsTokenRevokedRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsTokenRevokedRequestMultiError) AllErrors() []error { return m }

// IsTokenRevokedRequestValidationError is the validation error returned by
// IsTokenRevokedRequest.Validate if the designated constraints aren't met.
type IsTokenRevokedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsTokenRevokedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsTokenRevokedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsTokenRevokedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsTokenRevokedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsTokenRevokedRequestValidationError) ErrorName() string {
	return "IsTokenRevokedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsTokenRevokedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsTokenRevokedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsTokenRevokedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsTokenRevokedRequestValidationError{}

// Validate checks the field values on IsTokenRevokedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsTokenRevokedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsTokenRevokedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsTokenRevokedResponseMultiError, or nil if none found.
func (m *IsTokenRevokedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsTokenRevokedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Revoked

	if len(errors) > 0 {
		return IsTokenRevokedResponseMultiError(errors)
	}

	return nil
}

// IsTokenRevokedResponseMultiError is an error wrapping multiple validation
// errors returned by IsTokenRevokedResponse.ValidateAll() if the designated
// constraints aren't met.
type IsTokenRevokedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsTokenRevokedResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsTokenRevokedResponseMultiError) AllErrors() []error { return m }

// IsTokenRevokedResponseValidationError is the validation error returned by
// IsTokenRevokedResponse.Validate if the designated constraints aren't met.
type IsTokenRevokedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsTokenRevokedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsTokenRevokedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsTokenRevokedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsTokenRevokedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsTokenRevokedResponseValidationError) ErrorName() string {
	return "IsTokenRevokedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsTokenRevokedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsTokenRevokedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsTokenRevokedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsTokenRevokedResponseValidationError{}

// Validate checks the field values on SetOperatorTagsConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOperatorTagsConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOperatorTagsConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetOperatorTagsConfigRequestMultiError, or nil if none found.
func (m *SetOperatorTagsConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOperatorTagsConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for FollowParent

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetOperatorTagsConfigRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetOperatorTagsConfigRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetOperatorTagsConfigRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetOperatorTagsConfigRequestMultiError(errors)
	}

	return nil
}

// SetOperatorTagsConfigRequestMultiError is an error wrapping multiple
// validation errors returned by SetOperatorTagsConfigRequest.ValidateAll() if
// the designated constraints aren't met.
type SetOperatorTagsConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOperatorTagsConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOperatorTagsConfigRequestMultiError) AllErrors() []error { return m }

// SetOperatorTagsConfigRequestValidationError is the validation error returned
// by SetOperatorTagsConfigRequest.Validate if the designated constraints
// aren't met.
type SetOperatorTagsConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOperatorTagsConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOperatorTagsConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOperatorTagsConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOperatorTagsConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOperatorTagsConfigRequestValidationError) ErrorName() string {
	return "SetOperatorTagsConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetOperatorTagsConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOperatorTagsConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOperatorTagsConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOperatorTagsConfigRequestValidationError{}

// Validate checks the field values on SetOperatorTagsConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOperatorTagsConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOperatorTagsConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SetOperatorTagsConfigResponseMultiError, or nil if none found.
func (m *SetOperatorTagsConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOperatorTagsConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetOperatorTagsConfigResponseMultiError(errors)
	}

	return nil
}

// SetOperatorTagsConfigResponseMultiError is an error wrapping multiple
// validation errors returned by SetOperatorTagsConfigResponse.ValidateAll()
// if the designated constraints aren't met.
type SetOperatorTagsConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOperatorTagsConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOperatorTagsConfigResponseMultiError) AllErrors() []error { return m }

// SetOperatorTagsConfigResponseValidationError is the validation error
// returned by SetOperatorTagsConfigResponse.Validate if the designated
// constraints aren't met.
type SetOperatorTagsConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOperatorTagsConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOperatorTagsConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOperatorTagsConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOperatorTagsConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOperatorTagsConfigResponseValidationError) ErrorName() string {
	return "SetOperatorTagsConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetOperatorTagsConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOperatorTagsConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOperatorTagsConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOperatorTagsConfigResponseValidationError{}

// Validate checks the field values on SetOperatorTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOperatorTagsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOperatorTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetOperatorTagsRequestMultiError, or nil if none found.
func (m *SetOperatorTagsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOperatorTagsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetOperatorTagsRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetOperatorTagsRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetOperatorTagsRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetOperatorTagsRequestMultiError(errors)
	}

	return nil
}

// SetOperatorTagsRequestMultiError is an error wrapping multiple validation
// errors returned by SetOperatorTagsRequest.ValidateAll() if the designated
// constraints aren't met.
type SetOperatorTagsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOperatorTagsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOperatorTagsRequestMultiError) AllErrors() []error { return m }

// SetOperatorTagsRequestValidationError is the validation error returned by
// SetOperatorTagsRequest.Validate if the designated constraints aren't met.
type SetOperatorTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOperatorTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOperatorTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOperatorTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOperatorTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOperatorTagsRequestValidationError) ErrorName() string {
	return "SetOperatorTagsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetOperatorTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOperatorTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOperatorTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOperatorTagsRequestValidationError{}

// Validate checks the field values on SetOperatorTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOperatorTagsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOperatorTagsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetOperatorTagsResponseMultiError, or nil if none found.
func (m *SetOperatorTagsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOperatorTagsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetOperatorTagsResponseMultiError(errors)
	}

	return nil
}

// SetOperatorTagsResponseMultiError is an error wrapping multiple validation
// errors returned by SetOperatorTagsResponse.ValidateAll() if the designated
// constraints aren't met.
type SetOperatorTagsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOperatorTagsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOperatorTagsResponseMultiError) AllErrors() []error { return m }

// SetOperatorTagsResponseValidationError is the validation error returned by
// SetOperatorTagsResponse.Validate if the designated constraints aren't met.
type SetOperatorTagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOperatorTagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOperatorTagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOperatorTagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOperatorTagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOperatorTagsResponseValidationError) ErrorName() string {
	return "SetOperatorTagsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetOperatorTagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOperatorTagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOperatorTagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOperatorTagsResponseValidationError{}

// Validate checks the field values on GetOperatorTagsConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorTagsConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorTagsConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorTagsConfigRequestMultiError, or nil if none found.
func (m *GetOperatorTagsConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorTagsConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorTagsConfigRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorTagsConfigRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorTagsConfigRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOperatorTagsConfigRequestMultiError(errors)
	}

	return nil
}

// GetOperatorTagsConfigRequestMultiError is an error wrapping multiple
// validation errors returned by GetOperatorTagsConfigRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOperatorTagsConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorTagsConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorTagsConfigRequestMultiError) AllErrors() []error { return m }

// GetOperatorTagsConfigRequestValidationError is the validation error returned
// by GetOperatorTagsConfigRequest.Validate if the designated constraints
// aren't met.
type GetOperatorTagsConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorTagsConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorTagsConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorTagsConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorTagsConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorTagsConfigRequestValidationError) ErrorName() string {
	return "GetOperatorTagsConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorTagsConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorTagsConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorTagsConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorTagsConfigRequestValidationError{}

// Validate checks the field values on GetOperatorTagsConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorTagsConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorTagsConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOperatorTagsConfigResponseMultiError, or nil if none found.
func (m *GetOperatorTagsConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorTagsConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FollowParent

	if len(errors) > 0 {
		return GetOperatorTagsConfigResponseMultiError(errors)
	}

	return nil
}

// GetOperatorTagsConfigResponseMultiError is an error wrapping multiple
// validation errors returned by GetOperatorTagsConfigResponse.ValidateAll()
// if the designated constraints aren't met.
type GetOperatorTagsConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorTagsConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorTagsConfigResponseMultiError) AllErrors() []error { return m }

// GetOperatorTagsConfigResponseValidationError is the validation error
// returned by GetOperatorTagsConfigResponse.Validate if the designated
// constraints aren't met.
type GetOperatorTagsConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorTagsConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorTagsConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorTagsConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorTagsConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorTagsConfigResponseValidationError) ErrorName() string {
	return "GetOperatorTagsConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorTagsConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorTagsConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorTagsConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorTagsConfigResponseValidationError{}

// Validate checks the field values on GetOperatorTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorTagsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorTagsRequestMultiError, or nil if none found.
func (m *GetOperatorTagsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorTagsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorTagsRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorTagsRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorTagsRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOperatorTagsRequestMultiError(errors)
	}

	return nil
}

// GetOperatorTagsRequestMultiError is an error wrapping multiple validation
// errors returned by GetOperatorTagsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorTagsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorTagsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorTagsRequestMultiError) AllErrors() []error { return m }

// GetOperatorTagsRequestValidationError is the validation error returned by
// GetOperatorTagsRequest.Validate if the designated constraints aren't met.
type GetOperatorTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorTagsRequestValidationError) ErrorName() string {
	return "GetOperatorTagsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorTagsRequestValidationError{}

// Validate checks the field values on GetOperatorTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorTagsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorTagsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorTagsResponseMultiError, or nil if none found.
func (m *GetOperatorTagsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorTagsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOperatorTagsResponseMultiError(errors)
	}

	return nil
}

// GetOperatorTagsResponseMultiError is an error wrapping multiple validation
// errors returned by GetOperatorTagsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorTagsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorTagsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorTagsResponseMultiError) AllErrors() []error { return m }

// GetOperatorTagsResponseValidationError is the validation error returned by
// GetOperatorTagsResponse.Validate if the designated constraints aren't met.
type GetOperatorTagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorTagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorTagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorTagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorTagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorTagsResponseValidationError) ErrorName() string {
	return "GetOperatorTagsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorTagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorTagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorTagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorTagsResponseValidationError{}

// Validate checks the field values on GetUserTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTagsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTagsRequestMultiError, or nil if none found.
func (m *GetUserTagsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTagsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserTagsRequestMultiError(errors)
	}

	return nil
}

// GetUserTagsRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserTagsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserTagsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTagsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTagsRequestMultiError) AllErrors() []error { return m }

// GetUserTagsRequestValidationError is the validation error returned by
// GetUserTagsRequest.Validate if the designated constraints aren't met.
type GetUserTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTagsRequestValidationError) ErrorName() string {
	return "GetUserTagsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTagsRequestValidationError{}

// Validate checks the field values on GetUserTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTagsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTagsResponseMultiError, or nil if none found.
func (m *GetUserTagsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTagsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserTagsResponseMultiError(errors)
	}

	return nil
}

// GetUserTagsResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserTagsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserTagsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTagsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTagsResponseMultiError) AllErrors() []error { return m }

// GetUserTagsResponseValidationError is the validation error returned by
// GetUserTagsResponse.Validate if the designated constraints aren't met.
type GetUserTagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTagsResponseValidationError) ErrorName() string {
	return "GetUserTagsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTagsResponseValidationError{}

// Validate checks the field values on GetUserTagsByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTagsByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTagsByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTagsByIdRequestMultiError, or nil if none found.
func (m *GetUserTagsByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTagsByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserTagsByIdRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserTagsByIdRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserTagsByIdRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserTagsByIdRequestMultiError(errors)
	}

	return nil
}

// GetUserTagsByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserTagsByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserTagsByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTagsByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTagsByIdRequestMultiError) AllErrors() []error { return m }

// GetUserTagsByIdRequestValidationError is the validation error returned by
// GetUserTagsByIdRequest.Validate if the designated constraints aren't met.
type GetUserTagsByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTagsByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTagsByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTagsByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTagsByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTagsByIdRequestValidationError) ErrorName() string {
	return "GetUserTagsByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTagsByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTagsByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTagsByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTagsByIdRequestValidationError{}

// Validate checks the field values on GetUserTagsByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTagsByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTagsByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTagsByIdResponseMultiError, or nil if none found.
func (m *GetUserTagsByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTagsByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserTagsByIdResponseMultiError(errors)
	}

	return nil
}

// GetUserTagsByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserTagsByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserTagsByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTagsByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTagsByIdResponseMultiError) AllErrors() []error { return m }

// GetUserTagsByIdResponseValidationError is the validation error returned by
// GetUserTagsByIdResponse.Validate if the designated constraints aren't met.
type GetUserTagsByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTagsByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTagsByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTagsByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTagsByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTagsByIdResponseValidationError) ErrorName() string {
	return "GetUserTagsByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTagsByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTagsByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTagsByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTagsByIdResponseValidationError{}

// Validate checks the field values on SetUserTagsByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserTagsByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserTagsByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserTagsByIdRequestMultiError, or nil if none found.
func (m *SetUserTagsByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserTagsByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetUserTagsByIdRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetUserTagsByIdRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetUserTagsByIdRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetUserTagsByIdRequestMultiError(errors)
	}

	return nil
}

// SetUserTagsByIdRequestMultiError is an error wrapping multiple validation
// errors returned by SetUserTagsByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type SetUserTagsByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserTagsByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserTagsByIdRequestMultiError) AllErrors() []error { return m }

// SetUserTagsByIdRequestValidationError is the validation error returned by
// SetUserTagsByIdRequest.Validate if the designated constraints aren't met.
type SetUserTagsByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserTagsByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserTagsByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserTagsByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserTagsByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserTagsByIdRequestValidationError) ErrorName() string {
	return "SetUserTagsByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserTagsByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserTagsByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserTagsByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserTagsByIdRequestValidationError{}

// Validate checks the field values on SetUserTagsByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserTagsByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserTagsByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserTagsByIdResponseMultiError, or nil if none found.
func (m *SetUserTagsByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserTagsByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetUserTagsByIdResponseMultiError(errors)
	}

	return nil
}

// SetUserTagsByIdResponseMultiError is an error wrapping multiple validation
// errors returned by SetUserTagsByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type SetUserTagsByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserTagsByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserTagsByIdResponseMultiError) AllErrors() []error { return m }

// SetUserTagsByIdResponseValidationError is the validation error returned by
// SetUserTagsByIdResponse.Validate if the designated constraints aren't met.
type SetUserTagsByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserTagsByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserTagsByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserTagsByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserTagsByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserTagsByIdResponseValidationError) ErrorName() string {
	return "SetUserTagsByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserTagsByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserTagsByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserTagsByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserTagsByIdResponseValidationError{}

// Validate checks the field values on CheckPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckPermissionRequestMultiError, or nil if none found.
func (m *CheckPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for RoleId

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return CheckPermissionRequestMultiError(errors)
	}

	return nil
}

// CheckPermissionRequestMultiError is an error wrapping multiple validation
// errors returned by CheckPermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckPermissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckPermissionRequestMultiError) AllErrors() []error { return m }

// CheckPermissionRequestValidationError is the validation error returned by
// CheckPermissionRequest.Validate if the designated constraints aren't met.
type CheckPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckPermissionRequestValidationError) ErrorName() string {
	return "CheckPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckPermissionRequestValidationError{}

// Validate checks the field values on CheckPermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckPermissionResponseMultiError, or nil if none found.
func (m *CheckPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Allowed

	if len(errors) > 0 {
		return CheckPermissionResponseMultiError(errors)
	}

	return nil
}

// CheckPermissionResponseMultiError is an error wrapping multiple validation
// errors returned by CheckPermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckPermissionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckPermissionResponseMultiError) AllErrors() []error { return m }

// CheckPermissionResponseValidationError is the validation error returned by
// CheckPermissionResponse.Validate if the designated constraints aren't met.
type CheckPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckPermissionResponseValidationError) ErrorName() string {
	return "CheckPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckPermissionResponseValidationError{}

// Validate checks the field values on AddOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOperatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOperatorRequestMultiError, or nil if none found.
func (m *AddOperatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOperatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return AddOperatorRequestMultiError(errors)
	}

	return nil
}

// AddOperatorRequestMultiError is an error wrapping multiple validation errors
// returned by AddOperatorRequest.ValidateAll() if the designated constraints
// aren't met.
type AddOperatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOperatorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOperatorRequestMultiError) AllErrors() []error { return m }

// AddOperatorRequestValidationError is the validation error returned by
// AddOperatorRequest.Validate if the designated constraints aren't met.
type AddOperatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOperatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOperatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOperatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOperatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOperatorRequestValidationError) ErrorName() string {
	return "AddOperatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOperatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOperatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOperatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOperatorRequestValidationError{}

// Validate checks the field values on AddOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOperatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOperatorResponseMultiError, or nil if none found.
func (m *AddOperatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOperatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddOperatorResponseMultiError(errors)
	}

	return nil
}

// AddOperatorResponseMultiError is an error wrapping multiple validation
// errors returned by AddOperatorResponse.ValidateAll() if the designated
// constraints aren't met.
type AddOperatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOperatorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOperatorResponseMultiError) AllErrors() []error { return m }

// AddOperatorResponseValidationError is the validation error returned by
// AddOperatorResponse.Validate if the designated constraints aren't met.
type AddOperatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOperatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOperatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOperatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOperatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOperatorResponseValidationError) ErrorName() string {
	return "AddOperatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOperatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOperatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOperatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOperatorResponseValidationError{}

// Validate checks the field values on SendEmailVerificationCodeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendEmailVerificationCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailVerificationCodeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendEmailVerificationCodeRequestMultiError, or nil if none found.
func (m *SendEmailVerificationCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailVerificationCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendEmailVerificationCodeRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendEmailVerificationCodeRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendEmailVerificationCodeRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if len(errors) > 0 {
		return SendEmailVerificationCodeRequestMultiError(errors)
	}

	return nil
}

// SendEmailVerificationCodeRequestMultiError is an error wrapping multiple
// validation errors returned by
// SendEmailVerificationCodeRequest.ValidateAll() if the designated
// constraints aren't met.
type SendEmailVerificationCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailVerificationCodeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailVerificationCodeRequestMultiError) AllErrors() []error { return m }

// SendEmailVerificationCodeRequestValidationError is the validation error
// returned by SendEmailVerificationCodeRequest.Validate if the designated
// constraints aren't met.
type SendEmailVerificationCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailVerificationCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailVerificationCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailVerificationCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailVerificationCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailVerificationCodeRequestValidationError) ErrorName() string {
	return "SendEmailVerificationCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendEmailVerificationCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailVerificationCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailVerificationCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailVerificationCodeRequestValidationError{}

// Validate checks the field values on SendEmailVerificationCodeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendEmailVerificationCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailVerificationCodeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendEmailVerificationCodeResponseMultiError, or nil if none found.
func (m *SendEmailVerificationCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailVerificationCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendEmailVerificationCodeResponseMultiError(errors)
	}

	return nil
}

// SendEmailVerificationCodeResponseMultiError is an error wrapping multiple
// validation errors returned by
// SendEmailVerificationCodeResponse.ValidateAll() if the designated
// constraints aren't met.
type SendEmailVerificationCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailVerificationCodeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailVerificationCodeResponseMultiError) AllErrors() []error { return m }

// SendEmailVerificationCodeResponseValidationError is the validation error
// returned by SendEmailVerificationCodeResponse.Validate if the designated
// constraints aren't met.
type SendEmailVerificationCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailVerificationCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailVerificationCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailVerificationCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailVerificationCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailVerificationCodeResponseValidationError) ErrorName() string {
	return "SendEmailVerificationCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendEmailVerificationCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailVerificationCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailVerificationCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailVerificationCodeResponseValidationError{}

// Validate checks the field values on SendPasswordResetCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendPasswordResetCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendPasswordResetCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendPasswordResetCodeRequestMultiError, or nil if none found.
func (m *SendPasswordResetCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendPasswordResetCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if m.OperatorContext != nil {

		if all {
			switch v := interface{}(m.GetOperatorContext()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendPasswordResetCodeRequestValidationError{
						field:  "OperatorContext",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendPasswordResetCodeRequestValidationError{
						field:  "OperatorContext",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendPasswordResetCodeRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SendPasswordResetCodeRequestMultiError(errors)
	}

	return nil
}

// SendPasswordResetCodeRequestMultiError is an error wrapping multiple
// validation errors returned by SendPasswordResetCodeRequest.ValidateAll() if
// the designated constraints aren't met.
type SendPasswordResetCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendPasswordResetCodeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendPasswordResetCodeRequestMultiError) AllErrors() []error { return m }

// SendPasswordResetCodeRequestValidationError is the validation error returned
// by SendPasswordResetCodeRequest.Validate if the designated constraints
// aren't met.
type SendPasswordResetCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendPasswordResetCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendPasswordResetCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendPasswordResetCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendPasswordResetCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendPasswordResetCodeRequestValidationError) ErrorName() string {
	return "SendPasswordResetCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendPasswordResetCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendPasswordResetCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendPasswordResetCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendPasswordResetCodeRequestValidationError{}

// Validate checks the field values on SendPasswordResetCodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendPasswordResetCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendPasswordResetCodeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendPasswordResetCodeResponseMultiError, or nil if none found.
func (m *SendPasswordResetCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendPasswordResetCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendPasswordResetCodeResponseMultiError(errors)
	}

	return nil
}

// SendPasswordResetCodeResponseMultiError is an error wrapping multiple
// validation errors returned by SendPasswordResetCodeResponse.ValidateAll()
// if the designated constraints aren't met.
type SendPasswordResetCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendPasswordResetCodeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendPasswordResetCodeResponseMultiError) AllErrors() []error { return m }

// SendPasswordResetCodeResponseValidationError is the validation error
// returned by SendPasswordResetCodeResponse.Validate if the designated
// constraints aren't met.
type SendPasswordResetCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendPasswordResetCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendPasswordResetCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendPasswordResetCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendPasswordResetCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendPasswordResetCodeResponseValidationError) ErrorName() string {
	return "SendPasswordResetCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendPasswordResetCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendPasswordResetCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendPasswordResetCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendPasswordResetCodeResponseValidationError{}

// Validate checks the field values on ResetPasswordWithCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordWithCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordWithCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordWithCodeRequestMultiError, or nil if none found.
func (m *ResetPasswordWithCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordWithCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for VerificationCode

	// no validation rules for NewPassword

	if m.OperatorContext != nil {

		if all {
			switch v := interface{}(m.GetOperatorContext()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResetPasswordWithCodeRequestValidationError{
						field:  "OperatorContext",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResetPasswordWithCodeRequestValidationError{
						field:  "OperatorContext",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResetPasswordWithCodeRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResetPasswordWithCodeRequestMultiError(errors)
	}

	return nil
}

// ResetPasswordWithCodeRequestMultiError is an error wrapping multiple
// validation errors returned by ResetPasswordWithCodeRequest.ValidateAll() if
// the designated constraints aren't met.
type ResetPasswordWithCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordWithCodeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordWithCodeRequestMultiError) AllErrors() []error { return m }

// ResetPasswordWithCodeRequestValidationError is the validation error returned
// by ResetPasswordWithCodeRequest.Validate if the designated constraints
// aren't met.
type ResetPasswordWithCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordWithCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordWithCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordWithCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordWithCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordWithCodeRequestValidationError) ErrorName() string {
	return "ResetPasswordWithCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordWithCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordWithCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordWithCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordWithCodeRequestValidationError{}

// Validate checks the field values on ResetPasswordWithCodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordWithCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordWithCodeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ResetPasswordWithCodeResponseMultiError, or nil if none found.
func (m *ResetPasswordWithCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordWithCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResetPasswordWithCodeResponseMultiError(errors)
	}

	return nil
}

// ResetPasswordWithCodeResponseMultiError is an error wrapping multiple
// validation errors returned by ResetPasswordWithCodeResponse.ValidateAll()
// if the designated constraints aren't met.
type ResetPasswordWithCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordWithCodeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordWithCodeResponseMultiError) AllErrors() []error { return m }

// ResetPasswordWithCodeResponseValidationError is the validation error
// returned by ResetPasswordWithCodeResponse.Validate if the designated
// constraints aren't met.
type ResetPasswordWithCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordWithCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordWithCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordWithCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordWithCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordWithCodeResponseValidationError) ErrorName() string {
	return "ResetPasswordWithCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordWithCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordWithCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordWithCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordWithCodeResponseValidationError{}

// Validate checks the field values on UserIdentityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserIdentityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserIdentityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserIdentityRequestMultiError, or nil if none found.
func (m *UserIdentityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserIdentityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdType

	// no validation rules for IdNumber

	// no validation rules for Image

	if len(errors) > 0 {
		return UserIdentityRequestMultiError(errors)
	}

	return nil
}

// UserIdentityRequestMultiError is an error wrapping multiple validation
// errors returned by UserIdentityRequest.ValidateAll() if the designated
// constraints aren't met.
type UserIdentityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserIdentityRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserIdentityRequestMultiError) AllErrors() []error { return m }

// UserIdentityRequestValidationError is the validation error returned by
// UserIdentityRequest.Validate if the designated constraints aren't met.
type UserIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserIdentityRequestValidationError) ErrorName() string {
	return "UserIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserIdentityRequestValidationError{}

// Validate checks the field values on UserIdentity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserIdentity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserIdentityMultiError, or
// nil if none found.
func (m *UserIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *UserIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for IdType

	// no validation rules for IdNumber

	// no validation rules for Image

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserIdentityValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserIdentityValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserIdentityValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAuditedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserIdentityValidationError{
					field:  "AuditedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserIdentityValidationError{
					field:  "AuditedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuditedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserIdentityValidationError{
				field:  "AuditedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Operator

	// no validation rules for Reviewer

	// no validation rules for ReviewTime

	if len(errors) > 0 {
		return UserIdentityMultiError(errors)
	}

	return nil
}

// UserIdentityMultiError is an error wrapping multiple validation errors
// returned by UserIdentity.ValidateAll() if the designated constraints aren't met.
type UserIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserIdentityMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserIdentityMultiError) AllErrors() []error { return m }

// UserIdentityValidationError is the validation error returned by
// UserIdentity.Validate if the designated constraints aren't met.
type UserIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserIdentityValidationError) ErrorName() string { return "UserIdentityValidationError" }

// Error satisfies the builtin error interface
func (e UserIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserIdentityValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Nickname != nil {
		// no validation rules for Nickname
	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if m.BanLogin != nil {
		// no validation rules for BanLogin
	}

	if m.BanGame != nil {
		// no validation rules for BanGame
	}

	if m.BanWithdraw != nil {
		// no validation rules for BanWithdraw
	}

	if m.Locked != nil {
		// no validation rules for Locked
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.RoleId != nil {
		// no validation rules for RoleId
	}

	if m.Firstname != nil {
		// no validation rules for Firstname
	}

	if m.Lastname != nil {
		// no validation rules for Lastname
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Mobile != nil {
		// no validation rules for Mobile
	}

	if m.UserIdentity != nil {

		if all {
			switch v := interface{}(m.GetUserIdentity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateUserRequestValidationError{
						field:  "UserIdentity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateUserRequestValidationError{
						field:  "UserIdentity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserIdentity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateUserRequestValidationError{
					field:  "UserIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Address != nil {
		// no validation rules for Address
	}

	if m.Dob != nil {

		if all {
			switch v := interface{}(m.GetDob()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateUserRequestValidationError{
						field:  "Dob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateUserRequestValidationError{
						field:  "Dob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDob()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateUserRequestValidationError{
					field:  "Dob",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EmailVerified != nil {
		// no validation rules for EmailVerified
	}

	if m.PhoneVerified != nil {
		// no validation rules for PhoneVerified
	}

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserResponseMultiError, or nil if none found.
func (m *UpdateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserResponseMultiError(errors)
	}

	return nil
}

// UpdateUserResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserResponseMultiError) AllErrors() []error { return m }

// UpdateUserResponseValidationError is the validation error returned by
// UpdateUserResponse.Validate if the designated constraints aren't met.
type UpdateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserResponseValidationError) ErrorName() string {
	return "UpdateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserResponseValidationError{}

// Validate checks the field values on UpdateUserIdentityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserIdentityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserIdentityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserIdentityRequestMultiError, or nil if none found.
func (m *UpdateUserIdentityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserIdentityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for IdType

	// no validation rules for IdNumber

	// no validation rules for Image

	if len(errors) > 0 {
		return UpdateUserIdentityRequestMultiError(errors)
	}

	return nil
}

// UpdateUserIdentityRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserIdentityRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateUserIdentityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserIdentityRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserIdentityRequestMultiError) AllErrors() []error { return m }

// UpdateUserIdentityRequestValidationError is the validation error returned by
// UpdateUserIdentityRequest.Validate if the designated constraints aren't met.
type UpdateUserIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserIdentityRequestValidationError) ErrorName() string {
	return "UpdateUserIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserIdentityRequestValidationError{}

// Validate checks the field values on UpdateUserIdentityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserIdentityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserIdentityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserIdentityResponseMultiError, or nil if none found.
func (m *UpdateUserIdentityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserIdentityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserIdentityResponseMultiError(errors)
	}

	return nil
}

// UpdateUserIdentityResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateUserIdentityResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateUserIdentityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserIdentityResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserIdentityResponseMultiError) AllErrors() []error { return m }

// UpdateUserIdentityResponseValidationError is the validation error returned
// by UpdateUserIdentityResponse.Validate if the designated constraints aren't met.
type UpdateUserIdentityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserIdentityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserIdentityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserIdentityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserIdentityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserIdentityResponseValidationError) ErrorName() string {
	return "UpdateUserIdentityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserIdentityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserIdentityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserIdentityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserIdentityResponseValidationError{}

// Validate checks the field values on ListUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersRequestMultiError, or nil if none found.
func (m *ListUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.RegistrationStartTime != nil {

		if all {
			switch v := interface{}(m.GetRegistrationStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersRequestValidationError{
						field:  "RegistrationStartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersRequestValidationError{
						field:  "RegistrationStartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegistrationStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersRequestValidationError{
					field:  "RegistrationStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RegistrationEndTime != nil {

		if all {
			switch v := interface{}(m.GetRegistrationEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersRequestValidationError{
						field:  "RegistrationEndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersRequestValidationError{
						field:  "RegistrationEndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegistrationEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersRequestValidationError{
					field:  "RegistrationEndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.VipLevel != nil {
		// no validation rules for VipLevel
	}

	if m.Country != nil {
		// no validation rules for Country
	}

	if m.KycLevel != nil {
		// no validation rules for KycLevel
	}

	if m.DepositMin != nil {
		// no validation rules for DepositMin
	}

	if m.DepositMax != nil {
		// no validation rules for DepositMax
	}

	if m.WithdrawalMin != nil {
		// no validation rules for WithdrawalMin
	}

	if m.WithdrawalMax != nil {
		// no validation rules for WithdrawalMax
	}

	if m.BanWithdraw != nil {
		// no validation rules for BanWithdraw
	}

	if m.BanGame != nil {
		// no validation rules for BanGame
	}

	if m.BanLogin != nil {
		// no validation rules for BanLogin
	}

	if m.UserType != nil {
		// no validation rules for UserType
	}

	if m.RoleId != nil {
		// no validation rules for RoleId
	}

	if m.Online != nil {
		// no validation rules for Online
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Mobile != nil {
		// no validation rules for Mobile
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListUsersRequestMultiError(errors)
	}

	return nil
}

// ListUsersRequestMultiError is an error wrapping multiple validation errors
// returned by ListUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersRequestMultiError) AllErrors() []error { return m }

// ListUsersRequestValidationError is the validation error returned by
// ListUsersRequest.Validate if the designated constraints aren't met.
type ListUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersRequestValidationError) ErrorName() string { return "ListUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersRequestValidationError{}

// Validate checks the field values on ListUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersResponseMultiError, or nil if none found.
func (m *ListUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	// no validation rules for TotalEnabled

	// no validation rules for TotalDisabled

	if len(errors) > 0 {
		return ListUsersResponseMultiError(errors)
	}

	return nil
}

// ListUsersResponseMultiError is an error wrapping multiple validation errors
// returned by ListUsersResponse.ValidateAll() if the designated constraints
// aren't met.
type ListUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersResponseMultiError) AllErrors() []error { return m }

// ListUsersResponseValidationError is the validation error returned by
// ListUsersResponse.Validate if the designated constraints aren't met.
type ListUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponseValidationError) ErrorName() string {
	return "ListUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponseValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Email

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RoleId

	if m.Password != nil {
		// no validation rules for Password
	}

	if m.Mobile != nil {
		// no validation rules for Mobile
	}

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserResponseMultiError, or nil if none found.
func (m *CreateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return CreateUserResponseMultiError(errors)
	}

	return nil
}

// CreateUserResponseMultiError is an error wrapping multiple validation errors
// returned by CreateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserResponseMultiError) AllErrors() []error { return m }

// CreateUserResponseValidationError is the validation error returned by
// CreateUserResponse.Validate if the designated constraints aren't met.
type CreateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserResponseValidationError) ErrorName() string {
	return "CreateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserResponseValidationError{}

// Validate checks the field values on VerifyEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyEmailRequestMultiError, or nil if none found.
func (m *VerifyEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for VerificationCode

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VerifyEmailRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VerifyEmailRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyEmailRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VerifyEmailRequestMultiError(errors)
	}

	return nil
}

// VerifyEmailRequestMultiError is an error wrapping multiple validation errors
// returned by VerifyEmailRequest.ValidateAll() if the designated constraints
// aren't met.
type VerifyEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyEmailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyEmailRequestMultiError) AllErrors() []error { return m }

// VerifyEmailRequestValidationError is the validation error returned by
// VerifyEmailRequest.Validate if the designated constraints aren't met.
type VerifyEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyEmailRequestValidationError) ErrorName() string {
	return "VerifyEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyEmailRequestValidationError{}

// Validate checks the field values on VerifyEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyEmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyEmailResponseMultiError, or nil if none found.
func (m *VerifyEmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyEmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerifyEmailResponseMultiError(errors)
	}

	return nil
}

// VerifyEmailResponseMultiError is an error wrapping multiple validation
// errors returned by VerifyEmailResponse.ValidateAll() if the designated
// constraints aren't met.
type VerifyEmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyEmailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyEmailResponseMultiError) AllErrors() []error { return m }

// VerifyEmailResponseValidationError is the validation error returned by
// VerifyEmailResponse.Validate if the designated constraints aren't met.
type VerifyEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyEmailResponseValidationError) ErrorName() string {
	return "VerifyEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyEmailResponseValidationError{}

// Validate checks the field values on AddCommentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCommentRequestMultiError, or nil if none found.
func (m *AddCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for AuthorUserId

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddCommentRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddCommentRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCommentRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddCommentRequestMultiError(errors)
	}

	return nil
}

// AddCommentRequestMultiError is an error wrapping multiple validation errors
// returned by AddCommentRequest.ValidateAll() if the designated constraints
// aren't met.
type AddCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCommentRequestMultiError) AllErrors() []error { return m }

// AddCommentRequestValidationError is the validation error returned by
// AddCommentRequest.Validate if the designated constraints aren't met.
type AddCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommentRequestValidationError) ErrorName() string {
	return "AddCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommentRequestValidationError{}

// Validate checks the field values on AddCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCommentResponseMultiError, or nil if none found.
func (m *AddCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	if len(errors) > 0 {
		return AddCommentResponseMultiError(errors)
	}

	return nil
}

// AddCommentResponseMultiError is an error wrapping multiple validation errors
// returned by AddCommentResponse.ValidateAll() if the designated constraints
// aren't met.
type AddCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCommentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCommentResponseMultiError) AllErrors() []error { return m }

// AddCommentResponseValidationError is the validation error returned by
// AddCommentResponse.Validate if the designated constraints aren't met.
type AddCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommentResponseValidationError) ErrorName() string {
	return "AddCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommentResponseValidationError{}

// Validate checks the field values on GetCommentsByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentsByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentsByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentsByUserIdRequestMultiError, or nil if none found.
func (m *GetCommentsByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentsByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetCommentsByUserIdRequestMultiError(errors)
	}

	return nil
}

// GetCommentsByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetCommentsByUserIdRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCommentsByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentsByUserIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentsByUserIdRequestMultiError) AllErrors() []error { return m }

// GetCommentsByUserIdRequestValidationError is the validation error returned
// by GetCommentsByUserIdRequest.Validate if the designated constraints aren't met.
type GetCommentsByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentsByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentsByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentsByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentsByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentsByUserIdRequestValidationError) ErrorName() string {
	return "GetCommentsByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentsByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentsByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentsByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentsByUserIdRequestValidationError{}

// Validate checks the field values on GetCommentsByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentsByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentsByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentsByUserIdResponseMultiError, or nil if none found.
func (m *GetCommentsByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentsByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommentsByUserIdResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommentsByUserIdResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommentsByUserIdResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommentsByUserIdResponseMultiError(errors)
	}

	return nil
}

// GetCommentsByUserIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetCommentsByUserIdResponse.ValidateAll() if
// the designated constraints aren't met.
type GetCommentsByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentsByUserIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentsByUserIdResponseMultiError) AllErrors() []error { return m }

// GetCommentsByUserIdResponseValidationError is the validation error returned
// by GetCommentsByUserIdResponse.Validate if the designated constraints
// aren't met.
type GetCommentsByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentsByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentsByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentsByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentsByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentsByUserIdResponseValidationError) ErrorName() string {
	return "GetCommentsByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentsByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentsByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentsByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentsByUserIdResponseValidationError{}

// Validate checks the field values on GetUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProfileRequestMultiError, or nil if none found.
func (m *GetUserProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.LoginPage != nil {
		// no validation rules for LoginPage
	}

	if m.LoginPageSize != nil {
		// no validation rules for LoginPageSize
	}

	if len(errors) > 0 {
		return GetUserProfileRequestMultiError(errors)
	}

	return nil
}

// GetUserProfileRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileRequestMultiError) AllErrors() []error { return m }

// GetUserProfileRequestValidationError is the validation error returned by
// GetUserProfileRequest.Validate if the designated constraints aren't met.
type GetUserProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileRequestValidationError) ErrorName() string {
	return "GetUserProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileRequestValidationError{}

// Validate checks the field values on GetUserProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProfileResponseMultiError, or nil if none found.
func (m *GetUserProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Nickname

	// no validation rules for UserId

	// no validation rules for VipLevel

	// no validation rules for Online

	// no validation rules for BanWithdraw

	// no validation rules for BanGame

	// no validation rules for BanLogin

	// no validation rules for Locked

	if all {
		switch v := interface{}(m.GetRegistrationRecord()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponseValidationError{
					field:  "RegistrationRecord",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponseValidationError{
					field:  "RegistrationRecord",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegistrationRecord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponseValidationError{
				field:  "RegistrationRecord",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLoginRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("LoginRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("LoginRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfileResponseValidationError{
					field:  fmt.Sprintf("LoginRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfileResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalLoginCount

	// no validation rules for LoginPage

	// no validation rules for LoginPageSize

	// no validation rules for RegisteredMobile

	// no validation rules for RegisteredEmail

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for KycLevel

	// no validation rules for EmailVerified

	// no validation rules for PhoneVerified

	if all {
		switch v := interface{}(m.GetDob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponseValidationError{
					field:  "Dob",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponseValidationError{
					field:  "Dob",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponseValidationError{
				field:  "Dob",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Address

	for idx, item := range m.GetUserIdentity() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("UserIdentity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("UserIdentity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfileResponseValidationError{
					field:  fmt.Sprintf("UserIdentity[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEmailChangeHistory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("EmailChangeHistory[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("EmailChangeHistory[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfileResponseValidationError{
					field:  fmt.Sprintf("EmailChangeHistory[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPhoneChangeHistory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("PhoneChangeHistory[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("PhoneChangeHistory[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfileResponseValidationError{
					field:  fmt.Sprintf("PhoneChangeHistory[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for LoginEmail

	// no validation rules for LoginMobile

	if len(errors) > 0 {
		return GetUserProfileResponseMultiError(errors)
	}

	return nil
}

// GetUserProfileResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponseMultiError) AllErrors() []error { return m }

// GetUserProfileResponseValidationError is the validation error returned by
// GetUserProfileResponse.Validate if the designated constraints aren't met.
type GetUserProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponseValidationError) ErrorName() string {
	return "GetUserProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponseValidationError{}

// Validate checks the field values on CreateRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleRequestMultiError, or nil if none found.
func (m *CreateRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateRoleRequestValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateRoleRequestValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateRoleRequestValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return CreateRoleRequestMultiError(errors)
	}

	return nil
}

// CreateRoleRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleRequestMultiError) AllErrors() []error { return m }

// CreateRoleRequestValidationError is the validation error returned by
// CreateRoleRequest.Validate if the designated constraints aren't met.
type CreateRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleRequestValidationError) ErrorName() string {
	return "CreateRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleRequestValidationError{}

// Validate checks the field values on Permission with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Permission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Permission with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PermissionMultiError, or
// nil if none found.
func (m *Permission) ValidateAll() error {
	return m.validate(true)
}

func (m *Permission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Module

	if len(errors) > 0 {
		return PermissionMultiError(errors)
	}

	return nil
}

// PermissionMultiError is an error wrapping multiple validation errors
// returned by Permission.ValidateAll() if the designated constraints aren't met.
type PermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionMultiError) AllErrors() []error { return m }

// PermissionValidationError is the validation error returned by
// Permission.Validate if the designated constraints aren't met.
type PermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionValidationError) ErrorName() string { return "PermissionValidationError" }

// Error satisfies the builtin error interface
func (e PermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionValidationError{}

// Validate checks the field values on CreateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleResponseMultiError, or nil if none found.
func (m *CreateRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateRoleResponseMultiError(errors)
	}

	return nil
}

// CreateRoleResponseMultiError is an error wrapping multiple validation errors
// returned by CreateRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleResponseMultiError) AllErrors() []error { return m }

// CreateRoleResponseValidationError is the validation error returned by
// CreateRoleResponse.Validate if the designated constraints aren't met.
type CreateRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleResponseValidationError) ErrorName() string {
	return "CreateRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleResponseValidationError{}

// Validate checks the field values on ListRolesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRolesRequestMultiError, or nil if none found.
func (m *ListRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListRolesRequestMultiError(errors)
	}

	return nil
}

// ListRolesRequestMultiError is an error wrapping multiple validation errors
// returned by ListRolesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRolesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRolesRequestMultiError) AllErrors() []error { return m }

// ListRolesRequestValidationError is the validation error returned by
// ListRolesRequest.Validate if the designated constraints aren't met.
type ListRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolesRequestValidationError) ErrorName() string { return "ListRolesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolesRequestValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for Name

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on ListRolesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRolesResponseMultiError, or nil if none found.
func (m *ListRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRolesResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return ListRolesResponseMultiError(errors)
	}

	return nil
}

// ListRolesResponseMultiError is an error wrapping multiple validation errors
// returned by ListRolesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRolesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRolesResponseMultiError) AllErrors() []error { return m }

// ListRolesResponseValidationError is the validation error returned by
// ListRolesResponse.Validate if the designated constraints aren't met.
type ListRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolesResponseValidationError) ErrorName() string {
	return "ListRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolesResponseValidationError{}

// Validate checks the field values on CreateOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOperatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOperatorRequestMultiError, or nil if none found.
func (m *CreateOperatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOperatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorName

	// no validation rules for OperatorType

	// no validation rules for OperatorKey

	if m.Mode != nil {
		// no validation rules for Mode
	}

	if m.ReportingCurrency != nil {
		// no validation rules for ReportingCurrency
	}

	if m.BackofficeTimezone != nil {
		// no validation rules for BackofficeTimezone
	}

	if len(errors) > 0 {
		return CreateOperatorRequestMultiError(errors)
	}

	return nil
}

// CreateOperatorRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOperatorRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOperatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOperatorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOperatorRequestMultiError) AllErrors() []error { return m }

// CreateOperatorRequestValidationError is the validation error returned by
// CreateOperatorRequest.Validate if the designated constraints aren't met.
type CreateOperatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOperatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOperatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOperatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOperatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOperatorRequestValidationError) ErrorName() string {
	return "CreateOperatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOperatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOperatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOperatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOperatorRequestValidationError{}

// Validate checks the field values on CreateOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOperatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOperatorResponseMultiError, or nil if none found.
func (m *CreateOperatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOperatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for Subdomain

	// no validation rules for BackofficeSubdomain

	if len(errors) > 0 {
		return CreateOperatorResponseMultiError(errors)
	}

	return nil
}

// CreateOperatorResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOperatorResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOperatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOperatorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOperatorResponseMultiError) AllErrors() []error { return m }

// CreateOperatorResponseValidationError is the validation error returned by
// CreateOperatorResponse.Validate if the designated constraints aren't met.
type CreateOperatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOperatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOperatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOperatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOperatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOperatorResponseValidationError) ErrorName() string {
	return "CreateOperatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOperatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOperatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOperatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOperatorResponseValidationError{}

// Validate checks the field values on UpdateRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleRequestMultiError, or nil if none found.
func (m *UpdateRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for Name

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateRoleRequestValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateRoleRequestValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateRoleRequestValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateRoleRequestMultiError(errors)
	}

	return nil
}

// UpdateRoleRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleRequestMultiError) AllErrors() []error { return m }

// UpdateRoleRequestValidationError is the validation error returned by
// UpdateRoleRequest.Validate if the designated constraints aren't met.
type UpdateRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleRequestValidationError) ErrorName() string {
	return "UpdateRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleRequestValidationError{}

// Validate checks the field values on UpdateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleResponseMultiError, or nil if none found.
func (m *UpdateRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRoleResponseMultiError(errors)
	}

	return nil
}

// UpdateRoleResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleResponseMultiError) AllErrors() []error { return m }

// UpdateRoleResponseValidationError is the validation error returned by
// UpdateRoleResponse.Validate if the designated constraints aren't met.
type UpdateRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleResponseValidationError) ErrorName() string {
	return "UpdateRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleResponseValidationError{}

// Validate checks the field values on GetRoleRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoleRequestMultiError,
// or nil if none found.
func (m *GetRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return GetRoleRequestMultiError(errors)
	}

	return nil
}

// GetRoleRequestMultiError is an error wrapping multiple validation errors
// returned by GetRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleRequestMultiError) AllErrors() []error { return m }

// GetRoleRequestValidationError is the validation error returned by
// GetRoleRequest.Validate if the designated constraints aren't met.
type GetRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleRequestValidationError) ErrorName() string { return "GetRoleRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleRequestValidationError{}

// Validate checks the field values on GetRoleResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleResponseMultiError, or nil if none found.
func (m *GetRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRoleResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRoleResponseMultiError(errors)
	}

	return nil
}

// GetRoleResponseMultiError is an error wrapping multiple validation errors
// returned by GetRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleResponseMultiError) AllErrors() []error { return m }

// GetRoleResponseValidationError is the validation error returned by
// GetRoleResponse.Validate if the designated constraints aren't met.
type GetRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleResponseValidationError) ErrorName() string { return "GetRoleResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleResponseValidationError{}

// Validate checks the field values on GetOverviewDashboardFromUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOverviewDashboardFromUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOverviewDashboardFromUserRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOverviewDashboardFromUserRequestMultiError, or nil if none found.
func (m *GetOverviewDashboardFromUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOverviewDashboardFromUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOverviewDashboardFromUserRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOverviewDashboardFromUserRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOverviewDashboardFromUserRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOverviewDashboardFromUserRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOverviewDashboardFromUserRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOverviewDashboardFromUserRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOverviewDashboardFromUserRequestMultiError(errors)
	}

	return nil
}

// GetOverviewDashboardFromUserRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetOverviewDashboardFromUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOverviewDashboardFromUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOverviewDashboardFromUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOverviewDashboardFromUserRequestMultiError) AllErrors() []error { return m }

// GetOverviewDashboardFromUserRequestValidationError is the validation error
// returned by GetOverviewDashboardFromUserRequest.Validate if the designated
// constraints aren't met.
type GetOverviewDashboardFromUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOverviewDashboardFromUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOverviewDashboardFromUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOverviewDashboardFromUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOverviewDashboardFromUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOverviewDashboardFromUserRequestValidationError) ErrorName() string {
	return "GetOverviewDashboardFromUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOverviewDashboardFromUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOverviewDashboardFromUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOverviewDashboardFromUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOverviewDashboardFromUserRequestValidationError{}

// Validate checks the field values on GetOverviewDashboardFromUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetOverviewDashboardFromUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOverviewDashboardFromUserResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOverviewDashboardFromUserResponseMultiError, or nil if none found.
func (m *GetOverviewDashboardFromUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOverviewDashboardFromUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRegisteredUsers()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOverviewDashboardFromUserResponseValidationError{
					field:  "RegisteredUsers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOverviewDashboardFromUserResponseValidationError{
					field:  "RegisteredUsers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegisteredUsers()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOverviewDashboardFromUserResponseValidationError{
				field:  "RegisteredUsers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFirstDepositUsers()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOverviewDashboardFromUserResponseValidationError{
					field:  "FirstDepositUsers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOverviewDashboardFromUserResponseValidationError{
					field:  "FirstDepositUsers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFirstDepositUsers()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOverviewDashboardFromUserResponseValidationError{
				field:  "FirstDepositUsers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetActiveUsers()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOverviewDashboardFromUserResponseValidationError{
					field:  "ActiveUsers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOverviewDashboardFromUserResponseValidationError{
					field:  "ActiveUsers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActiveUsers()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOverviewDashboardFromUserResponseValidationError{
				field:  "ActiveUsers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOverviewDashboardFromUserResponseMultiError(errors)
	}

	return nil
}

// GetOverviewDashboardFromUserResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetOverviewDashboardFromUserResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOverviewDashboardFromUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOverviewDashboardFromUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOverviewDashboardFromUserResponseMultiError) AllErrors() []error { return m }

// GetOverviewDashboardFromUserResponseValidationError is the validation error
// returned by GetOverviewDashboardFromUserResponse.Validate if the designated
// constraints aren't met.
type GetOverviewDashboardFromUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOverviewDashboardFromUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOverviewDashboardFromUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOverviewDashboardFromUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOverviewDashboardFromUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOverviewDashboardFromUserResponseValidationError) ErrorName() string {
	return "GetOverviewDashboardFromUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOverviewDashboardFromUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOverviewDashboardFromUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOverviewDashboardFromUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOverviewDashboardFromUserResponseValidationError{}

// Validate checks the field values on DeleteRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleRequestMultiError, or nil if none found.
func (m *DeleteRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return DeleteRoleRequestMultiError(errors)
	}

	return nil
}

// DeleteRoleRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleRequestMultiError) AllErrors() []error { return m }

// DeleteRoleRequestValidationError is the validation error returned by
// DeleteRoleRequest.Validate if the designated constraints aren't met.
type DeleteRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleRequestValidationError) ErrorName() string {
	return "DeleteRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleRequestValidationError{}

// Validate checks the field values on DeleteRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleResponseMultiError, or nil if none found.
func (m *DeleteRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRoleResponseMultiError(errors)
	}

	return nil
}

// DeleteRoleResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleResponseMultiError) AllErrors() []error { return m }

// DeleteRoleResponseValidationError is the validation error returned by
// DeleteRoleResponse.Validate if the designated constraints aren't met.
type DeleteRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleResponseValidationError) ErrorName() string {
	return "DeleteRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleResponseValidationError{}

// Validate checks the field values on GetOperatorIdByOriginRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorIdByOriginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorIdByOriginRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorIdByOriginRequestMultiError, or nil if none found.
func (m *GetOperatorIdByOriginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorIdByOriginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Origin

	if len(errors) > 0 {
		return GetOperatorIdByOriginRequestMultiError(errors)
	}

	return nil
}

// GetOperatorIdByOriginRequestMultiError is an error wrapping multiple
// validation errors returned by GetOperatorIdByOriginRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOperatorIdByOriginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorIdByOriginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorIdByOriginRequestMultiError) AllErrors() []error { return m }

// GetOperatorIdByOriginRequestValidationError is the validation error returned
// by GetOperatorIdByOriginRequest.Validate if the designated constraints
// aren't met.
type GetOperatorIdByOriginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorIdByOriginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorIdByOriginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorIdByOriginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorIdByOriginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorIdByOriginRequestValidationError) ErrorName() string {
	return "GetOperatorIdByOriginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorIdByOriginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorIdByOriginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorIdByOriginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorIdByOriginRequestValidationError{}

// Validate checks the field values on GetOperatorIdByOriginResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorIdByOriginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorIdByOriginResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOperatorIdByOriginResponseMultiError, or nil if none found.
func (m *GetOperatorIdByOriginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorIdByOriginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return GetOperatorIdByOriginResponseMultiError(errors)
	}

	return nil
}

// GetOperatorIdByOriginResponseMultiError is an error wrapping multiple
// validation errors returned by GetOperatorIdByOriginResponse.ValidateAll()
// if the designated constraints aren't met.
type GetOperatorIdByOriginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorIdByOriginResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorIdByOriginResponseMultiError) AllErrors() []error { return m }

// GetOperatorIdByOriginResponseValidationError is the validation error
// returned by GetOperatorIdByOriginResponse.Validate if the designated
// constraints aren't met.
type GetOperatorIdByOriginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorIdByOriginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorIdByOriginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorIdByOriginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorIdByOriginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorIdByOriginResponseValidationError) ErrorName() string {
	return "GetOperatorIdByOriginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorIdByOriginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorIdByOriginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorIdByOriginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorIdByOriginResponseValidationError{}

// Validate checks the field values on GetOperatorIdsByOriginRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorIdsByOriginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorIdsByOriginRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOperatorIdsByOriginRequestMultiError, or nil if none found.
func (m *GetOperatorIdsByOriginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorIdsByOriginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Origin

	if len(errors) > 0 {
		return GetOperatorIdsByOriginRequestMultiError(errors)
	}

	return nil
}

// GetOperatorIdsByOriginRequestMultiError is an error wrapping multiple
// validation errors returned by GetOperatorIdsByOriginRequest.ValidateAll()
// if the designated constraints aren't met.
type GetOperatorIdsByOriginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorIdsByOriginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorIdsByOriginRequestMultiError) AllErrors() []error { return m }

// GetOperatorIdsByOriginRequestValidationError is the validation error
// returned by GetOperatorIdsByOriginRequest.Validate if the designated
// constraints aren't met.
type GetOperatorIdsByOriginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorIdsByOriginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorIdsByOriginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorIdsByOriginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorIdsByOriginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorIdsByOriginRequestValidationError) ErrorName() string {
	return "GetOperatorIdsByOriginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorIdsByOriginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorIdsByOriginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorIdsByOriginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorIdsByOriginRequestValidationError{}

// Validate checks the field values on GetOperatorIdsByOriginResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorIdsByOriginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorIdsByOriginResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOperatorIdsByOriginResponseMultiError, or nil if none found.
func (m *GetOperatorIdsByOriginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorIdsByOriginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorIdsByOriginResponseValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorIdsByOriginResponseValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorIdsByOriginResponseValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOperatorIdsByOriginResponseMultiError(errors)
	}

	return nil
}

// GetOperatorIdsByOriginResponseMultiError is an error wrapping multiple
// validation errors returned by GetOperatorIdsByOriginResponse.ValidateAll()
// if the designated constraints aren't met.
type GetOperatorIdsByOriginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorIdsByOriginResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorIdsByOriginResponseMultiError) AllErrors() []error { return m }

// GetOperatorIdsByOriginResponseValidationError is the validation error
// returned by GetOperatorIdsByOriginResponse.Validate if the designated
// constraints aren't met.
type GetOperatorIdsByOriginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorIdsByOriginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorIdsByOriginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorIdsByOriginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorIdsByOriginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorIdsByOriginResponseValidationError) ErrorName() string {
	return "GetOperatorIdsByOriginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorIdsByOriginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorIdsByOriginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorIdsByOriginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorIdsByOriginResponseValidationError{}

// Validate checks the field values on GetOperatorInfoByOriginRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorInfoByOriginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorInfoByOriginRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOperatorInfoByOriginRequestMultiError, or nil if none found.
func (m *GetOperatorInfoByOriginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorInfoByOriginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Origin

	if len(errors) > 0 {
		return GetOperatorInfoByOriginRequestMultiError(errors)
	}

	return nil
}

// GetOperatorInfoByOriginRequestMultiError is an error wrapping multiple
// validation errors returned by GetOperatorInfoByOriginRequest.ValidateAll()
// if the designated constraints aren't met.
type GetOperatorInfoByOriginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorInfoByOriginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorInfoByOriginRequestMultiError) AllErrors() []error { return m }

// GetOperatorInfoByOriginRequestValidationError is the validation error
// returned by GetOperatorInfoByOriginRequest.Validate if the designated
// constraints aren't met.
type GetOperatorInfoByOriginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorInfoByOriginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorInfoByOriginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorInfoByOriginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorInfoByOriginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorInfoByOriginRequestValidationError) ErrorName() string {
	return "GetOperatorInfoByOriginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorInfoByOriginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorInfoByOriginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorInfoByOriginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorInfoByOriginRequestValidationError{}

// Validate checks the field values on GetOperatorInfoByOriginResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorInfoByOriginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorInfoByOriginResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOperatorInfoByOriginResponseMultiError, or nil if none found.
func (m *GetOperatorInfoByOriginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorInfoByOriginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorInfoByOriginResponseValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorInfoByOriginResponseValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorInfoByOriginResponseValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorInfoByOriginResponseValidationError{
					field:  "OperatorDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorInfoByOriginResponseValidationError{
					field:  "OperatorDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorInfoByOriginResponseValidationError{
				field:  "OperatorDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSystemOperatorDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorInfoByOriginResponseValidationError{
					field:  "SystemOperatorDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorInfoByOriginResponseValidationError{
					field:  "SystemOperatorDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSystemOperatorDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorInfoByOriginResponseValidationError{
				field:  "SystemOperatorDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOperatorInfoByOriginResponseMultiError(errors)
	}

	return nil
}

// GetOperatorInfoByOriginResponseMultiError is an error wrapping multiple
// validation errors returned by GetOperatorInfoByOriginResponse.ValidateAll()
// if the designated constraints aren't met.
type GetOperatorInfoByOriginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorInfoByOriginResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorInfoByOriginResponseMultiError) AllErrors() []error { return m }

// GetOperatorInfoByOriginResponseValidationError is the validation error
// returned by GetOperatorInfoByOriginResponse.Validate if the designated
// constraints aren't met.
type GetOperatorInfoByOriginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorInfoByOriginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorInfoByOriginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorInfoByOriginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorInfoByOriginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorInfoByOriginResponseValidationError) ErrorName() string {
	return "GetOperatorInfoByOriginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorInfoByOriginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorInfoByOriginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorInfoByOriginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorInfoByOriginResponseValidationError{}

// Validate checks the field values on GetOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorRequestMultiError, or nil if none found.
func (m *GetOperatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return GetOperatorRequestMultiError(errors)
	}

	return nil
}

// GetOperatorRequestMultiError is an error wrapping multiple validation errors
// returned by GetOperatorRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOperatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorRequestMultiError) AllErrors() []error { return m }

// GetOperatorRequestValidationError is the validation error returned by
// GetOperatorRequest.Validate if the designated constraints aren't met.
type GetOperatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorRequestValidationError) ErrorName() string {
	return "GetOperatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorRequestValidationError{}

// Validate checks the field values on GetOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorResponseMultiError, or nil if none found.
func (m *GetOperatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorResponseValidationError{
					field:  "Operator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorResponseValidationError{
					field:  "Operator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorResponseValidationError{
				field:  "Operator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOperatorResponseMultiError(errors)
	}

	return nil
}

// GetOperatorResponseMultiError is an error wrapping multiple validation
// errors returned by GetOperatorResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorResponseMultiError) AllErrors() []error { return m }

// GetOperatorResponseValidationError is the validation error returned by
// GetOperatorResponse.Validate if the designated constraints aren't met.
type GetOperatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorResponseValidationError) ErrorName() string {
	return "GetOperatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorResponseValidationError{}

// Validate checks the field values on GetOperatorsByIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorsByIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorsByIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorsByIdsRequestMultiError, or nil if none found.
func (m *GetOperatorsByIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorsByIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOperatorsByIdsRequestMultiError(errors)
	}

	return nil
}

// GetOperatorsByIdsRequestMultiError is an error wrapping multiple validation
// errors returned by GetOperatorsByIdsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorsByIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorsByIdsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorsByIdsRequestMultiError) AllErrors() []error { return m }

// GetOperatorsByIdsRequestValidationError is the validation error returned by
// GetOperatorsByIdsRequest.Validate if the designated constraints aren't met.
type GetOperatorsByIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorsByIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorsByIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorsByIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorsByIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorsByIdsRequestValidationError) ErrorName() string {
	return "GetOperatorsByIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorsByIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorsByIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorsByIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorsByIdsRequestValidationError{}

// Validate checks the field values on GetOperatorsByIdsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorsByIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorsByIdsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorsByIdsResponseMultiError, or nil if none found.
func (m *GetOperatorsByIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorsByIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOperatorsByIdsResponseValidationError{
						field:  fmt.Sprintf("Operators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOperatorsByIdsResponseValidationError{
						field:  fmt.Sprintf("Operators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOperatorsByIdsResponseValidationError{
					field:  fmt.Sprintf("Operators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOperatorsByIdsResponseMultiError(errors)
	}

	return nil
}

// GetOperatorsByIdsResponseMultiError is an error wrapping multiple validation
// errors returned by GetOperatorsByIdsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetOperatorsByIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorsByIdsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorsByIdsResponseMultiError) AllErrors() []error { return m }

// GetOperatorsByIdsResponseValidationError is the validation error returned by
// GetOperatorsByIdsResponse.Validate if the designated constraints aren't met.
type GetOperatorsByIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorsByIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorsByIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorsByIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorsByIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorsByIdsResponseValidationError) ErrorName() string {
	return "GetOperatorsByIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorsByIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorsByIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorsByIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorsByIdsResponseValidationError{}

// Validate checks the field values on ListAllOperatorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllOperatorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllOperatorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAllOperatorsRequestMultiError, or nil if none found.
func (m *ListAllOperatorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllOperatorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.OperatorContext != nil {

		if all {
			switch v := interface{}(m.GetOperatorContext()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAllOperatorsRequestValidationError{
						field:  "OperatorContext",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAllOperatorsRequestValidationError{
						field:  "OperatorContext",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAllOperatorsRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAllOperatorsRequestMultiError(errors)
	}

	return nil
}

// ListAllOperatorsRequestMultiError is an error wrapping multiple validation
// errors returned by ListAllOperatorsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAllOperatorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllOperatorsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllOperatorsRequestMultiError) AllErrors() []error { return m }

// ListAllOperatorsRequestValidationError is the validation error returned by
// ListAllOperatorsRequest.Validate if the designated constraints aren't met.
type ListAllOperatorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllOperatorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllOperatorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllOperatorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllOperatorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllOperatorsRequestValidationError) ErrorName() string {
	return "ListAllOperatorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllOperatorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllOperatorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllOperatorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllOperatorsRequestValidationError{}

// Validate checks the field values on ListAllOperatorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllOperatorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllOperatorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAllOperatorsResponseMultiError, or nil if none found.
func (m *ListAllOperatorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllOperatorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAllOperatorsResponseValidationError{
						field:  fmt.Sprintf("Operators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAllOperatorsResponseValidationError{
						field:  fmt.Sprintf("Operators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAllOperatorsResponseValidationError{
					field:  fmt.Sprintf("Operators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAllOperatorsResponseMultiError(errors)
	}

	return nil
}

// ListAllOperatorsResponseMultiError is an error wrapping multiple validation
// errors returned by ListAllOperatorsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAllOperatorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllOperatorsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllOperatorsResponseMultiError) AllErrors() []error { return m }

// ListAllOperatorsResponseValidationError is the validation error returned by
// ListAllOperatorsResponse.Validate if the designated constraints aren't met.
type ListAllOperatorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllOperatorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllOperatorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllOperatorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllOperatorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllOperatorsResponseValidationError) ErrorName() string {
	return "ListAllOperatorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllOperatorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllOperatorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllOperatorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllOperatorsResponseValidationError{}

// Validate checks the field values on GetParentOperatorIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetParentOperatorIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetParentOperatorIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetParentOperatorIdsRequestMultiError, or nil if none found.
func (m *GetParentOperatorIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetParentOperatorIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return GetParentOperatorIdsRequestMultiError(errors)
	}

	return nil
}

// GetParentOperatorIdsRequestMultiError is an error wrapping multiple
// validation errors returned by GetParentOperatorIdsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetParentOperatorIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetParentOperatorIdsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetParentOperatorIdsRequestMultiError) AllErrors() []error { return m }

// GetParentOperatorIdsRequestValidationError is the validation error returned
// by GetParentOperatorIdsRequest.Validate if the designated constraints
// aren't met.
type GetParentOperatorIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetParentOperatorIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetParentOperatorIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetParentOperatorIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetParentOperatorIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetParentOperatorIdsRequestValidationError) ErrorName() string {
	return "GetParentOperatorIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetParentOperatorIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetParentOperatorIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetParentOperatorIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetParentOperatorIdsRequestValidationError{}

// Validate checks the field values on GetParentOperatorIdsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetParentOperatorIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetParentOperatorIdsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetParentOperatorIdsResponseMultiError, or nil if none found.
func (m *GetParentOperatorIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetParentOperatorIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetParentOperatorIdsResponseMultiError(errors)
	}

	return nil
}

// GetParentOperatorIdsResponseMultiError is an error wrapping multiple
// validation errors returned by GetParentOperatorIdsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetParentOperatorIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetParentOperatorIdsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetParentOperatorIdsResponseMultiError) AllErrors() []error { return m }

// GetParentOperatorIdsResponseValidationError is the validation error returned
// by GetParentOperatorIdsResponse.Validate if the designated constraints
// aren't met.
type GetParentOperatorIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetParentOperatorIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetParentOperatorIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetParentOperatorIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetParentOperatorIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetParentOperatorIdsResponseValidationError) ErrorName() string {
	return "GetParentOperatorIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetParentOperatorIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetParentOperatorIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetParentOperatorIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetParentOperatorIdsResponseValidationError{}

// Validate checks the field values on GetChildOperatorIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChildOperatorIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChildOperatorIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChildOperatorIdsRequestMultiError, or nil if none found.
func (m *GetChildOperatorIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChildOperatorIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return GetChildOperatorIdsRequestMultiError(errors)
	}

	return nil
}

// GetChildOperatorIdsRequestMultiError is an error wrapping multiple
// validation errors returned by GetChildOperatorIdsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetChildOperatorIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChildOperatorIdsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChildOperatorIdsRequestMultiError) AllErrors() []error { return m }

// GetChildOperatorIdsRequestValidationError is the validation error returned
// by GetChildOperatorIdsRequest.Validate if the designated constraints aren't met.
type GetChildOperatorIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChildOperatorIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChildOperatorIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChildOperatorIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChildOperatorIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChildOperatorIdsRequestValidationError) ErrorName() string {
	return "GetChildOperatorIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetChildOperatorIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChildOperatorIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChildOperatorIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChildOperatorIdsRequestValidationError{}

// Validate checks the field values on GetChildOperatorIdsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChildOperatorIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChildOperatorIdsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChildOperatorIdsResponseMultiError, or nil if none found.
func (m *GetChildOperatorIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChildOperatorIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetChildOperatorIdsResponseMultiError(errors)
	}

	return nil
}

// GetChildOperatorIdsResponseMultiError is an error wrapping multiple
// validation errors returned by GetChildOperatorIdsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetChildOperatorIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChildOperatorIdsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChildOperatorIdsResponseMultiError) AllErrors() []error { return m }

// GetChildOperatorIdsResponseValidationError is the validation error returned
// by GetChildOperatorIdsResponse.Validate if the designated constraints
// aren't met.
type GetChildOperatorIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChildOperatorIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChildOperatorIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChildOperatorIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChildOperatorIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChildOperatorIdsResponseValidationError) ErrorName() string {
	return "GetChildOperatorIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetChildOperatorIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChildOperatorIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChildOperatorIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChildOperatorIdsResponseValidationError{}

// Validate checks the field values on CheckEmailExistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckEmailExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckEmailExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckEmailExistsRequestMultiError, or nil if none found.
func (m *CheckEmailExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckEmailExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for OperatorId

	// no validation rules for OperatorType

	if len(errors) > 0 {
		return CheckEmailExistsRequestMultiError(errors)
	}

	return nil
}

// CheckEmailExistsRequestMultiError is an error wrapping multiple validation
// errors returned by CheckEmailExistsRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckEmailExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckEmailExistsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckEmailExistsRequestMultiError) AllErrors() []error { return m }

// CheckEmailExistsRequestValidationError is the validation error returned by
// CheckEmailExistsRequest.Validate if the designated constraints aren't met.
type CheckEmailExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckEmailExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckEmailExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckEmailExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckEmailExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckEmailExistsRequestValidationError) ErrorName() string {
	return "CheckEmailExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckEmailExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckEmailExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckEmailExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckEmailExistsRequestValidationError{}

// Validate checks the field values on CheckEmailExistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckEmailExistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckEmailExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckEmailExistsResponseMultiError, or nil if none found.
func (m *CheckEmailExistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckEmailExistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return CheckEmailExistsResponseMultiError(errors)
	}

	return nil
}

// CheckEmailExistsResponseMultiError is an error wrapping multiple validation
// errors returned by CheckEmailExistsResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckEmailExistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckEmailExistsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckEmailExistsResponseMultiError) AllErrors() []error { return m }

// CheckEmailExistsResponseValidationError is the validation error returned by
// CheckEmailExistsResponse.Validate if the designated constraints aren't met.
type CheckEmailExistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckEmailExistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckEmailExistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckEmailExistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckEmailExistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckEmailExistsResponseValidationError) ErrorName() string {
	return "CheckEmailExistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckEmailExistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckEmailExistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckEmailExistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckEmailExistsResponseValidationError{}

// Validate checks the field values on CheckSubdomainExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckSubdomainExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckSubdomainExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckSubdomainExistsRequestMultiError, or nil if none found.
func (m *CheckSubdomainExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckSubdomainExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subdomain

	if len(errors) > 0 {
		return CheckSubdomainExistsRequestMultiError(errors)
	}

	return nil
}

// CheckSubdomainExistsRequestMultiError is an error wrapping multiple
// validation errors returned by CheckSubdomainExistsRequest.ValidateAll() if
// the designated constraints aren't met.
type CheckSubdomainExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckSubdomainExistsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckSubdomainExistsRequestMultiError) AllErrors() []error { return m }

// CheckSubdomainExistsRequestValidationError is the validation error returned
// by CheckSubdomainExistsRequest.Validate if the designated constraints
// aren't met.
type CheckSubdomainExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckSubdomainExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckSubdomainExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckSubdomainExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckSubdomainExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckSubdomainExistsRequestValidationError) ErrorName() string {
	return "CheckSubdomainExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckSubdomainExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckSubdomainExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckSubdomainExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckSubdomainExistsRequestValidationError{}

// Validate checks the field values on CheckSubdomainExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckSubdomainExistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckSubdomainExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckSubdomainExistsResponseMultiError, or nil if none found.
func (m *CheckSubdomainExistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckSubdomainExistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return CheckSubdomainExistsResponseMultiError(errors)
	}

	return nil
}

// CheckSubdomainExistsResponseMultiError is an error wrapping multiple
// validation errors returned by CheckSubdomainExistsResponse.ValidateAll() if
// the designated constraints aren't met.
type CheckSubdomainExistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckSubdomainExistsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckSubdomainExistsResponseMultiError) AllErrors() []error { return m }

// CheckSubdomainExistsResponseValidationError is the validation error returned
// by CheckSubdomainExistsResponse.Validate if the designated constraints
// aren't met.
type CheckSubdomainExistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckSubdomainExistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckSubdomainExistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckSubdomainExistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckSubdomainExistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckSubdomainExistsResponseValidationError) ErrorName() string {
	return "CheckSubdomainExistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckSubdomainExistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckSubdomainExistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckSubdomainExistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckSubdomainExistsResponseValidationError{}

// Validate checks the field values on CheckOperatorKeyExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckOperatorKeyExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckOperatorKeyExistsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckOperatorKeyExistsRequestMultiError, or nil if none found.
func (m *CheckOperatorKeyExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckOperatorKeyExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorKey

	// no validation rules for RetailerOperatorId

	if len(errors) > 0 {
		return CheckOperatorKeyExistsRequestMultiError(errors)
	}

	return nil
}

// CheckOperatorKeyExistsRequestMultiError is an error wrapping multiple
// validation errors returned by CheckOperatorKeyExistsRequest.ValidateAll()
// if the designated constraints aren't met.
type CheckOperatorKeyExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckOperatorKeyExistsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckOperatorKeyExistsRequestMultiError) AllErrors() []error { return m }

// CheckOperatorKeyExistsRequestValidationError is the validation error
// returned by CheckOperatorKeyExistsRequest.Validate if the designated
// constraints aren't met.
type CheckOperatorKeyExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckOperatorKeyExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckOperatorKeyExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckOperatorKeyExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckOperatorKeyExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckOperatorKeyExistsRequestValidationError) ErrorName() string {
	return "CheckOperatorKeyExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckOperatorKeyExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckOperatorKeyExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckOperatorKeyExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckOperatorKeyExistsRequestValidationError{}

// Validate checks the field values on CheckOperatorKeyExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckOperatorKeyExistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckOperatorKeyExistsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckOperatorKeyExistsResponseMultiError, or nil if none found.
func (m *CheckOperatorKeyExistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckOperatorKeyExistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return CheckOperatorKeyExistsResponseMultiError(errors)
	}

	return nil
}

// CheckOperatorKeyExistsResponseMultiError is an error wrapping multiple
// validation errors returned by CheckOperatorKeyExistsResponse.ValidateAll()
// if the designated constraints aren't met.
type CheckOperatorKeyExistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckOperatorKeyExistsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckOperatorKeyExistsResponseMultiError) AllErrors() []error { return m }

// CheckOperatorKeyExistsResponseValidationError is the validation error
// returned by CheckOperatorKeyExistsResponse.Validate if the designated
// constraints aren't met.
type CheckOperatorKeyExistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckOperatorKeyExistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckOperatorKeyExistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckOperatorKeyExistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckOperatorKeyExistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckOperatorKeyExistsResponseValidationError) ErrorName() string {
	return "CheckOperatorKeyExistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckOperatorKeyExistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckOperatorKeyExistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckOperatorKeyExistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckOperatorKeyExistsResponseValidationError{}

// Validate checks the field values on CreateBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBusinessRequestMultiError, or nil if none found.
func (m *CreateBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for OwnerUserId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.ContactName != nil {
		// no validation rules for ContactName
	}

	if m.ContactMethods != nil {
		// no validation rules for ContactMethods
	}

	if m.Affiliate != nil {
		// no validation rules for Affiliate
	}

	if len(errors) > 0 {
		return CreateBusinessRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessRequestMultiError) AllErrors() []error { return m }

// CreateBusinessRequestValidationError is the validation error returned by
// CreateBusinessRequest.Validate if the designated constraints aren't met.
type CreateBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessRequestValidationError) ErrorName() string {
	return "CreateBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessRequestValidationError{}

// Validate checks the field values on CreateBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBusinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBusinessResponseMultiError, or nil if none found.
func (m *CreateBusinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessId

	if len(errors) > 0 {
		return CreateBusinessResponseMultiError(errors)
	}

	return nil
}

// CreateBusinessResponseMultiError is an error wrapping multiple validation
// errors returned by CreateBusinessResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessResponseMultiError) AllErrors() []error { return m }

// CreateBusinessResponseValidationError is the validation error returned by
// CreateBusinessResponse.Validate if the designated constraints aren't met.
type CreateBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessResponseValidationError) ErrorName() string {
	return "CreateBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessResponseValidationError{}

// Validate checks the field values on OperatorAccountPasswordSettings with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OperatorAccountPasswordSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperatorAccountPasswordSettings with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OperatorAccountPasswordSettingsMultiError, or nil if none found.
func (m *OperatorAccountPasswordSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *OperatorAccountPasswordSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MinCharacters

	// no validation rules for MinUppercaseCharacters

	// no validation rules for MinLowercaseCharacters

	// no validation rules for MinSpecialCharacters

	// no validation rules for MinDigits

	if len(errors) > 0 {
		return OperatorAccountPasswordSettingsMultiError(errors)
	}

	return nil
}

// OperatorAccountPasswordSettingsMultiError is an error wrapping multiple
// validation errors returned by OperatorAccountPasswordSettings.ValidateAll()
// if the designated constraints aren't met.
type OperatorAccountPasswordSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperatorAccountPasswordSettingsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperatorAccountPasswordSettingsMultiError) AllErrors() []error { return m }

// OperatorAccountPasswordSettingsValidationError is the validation error
// returned by OperatorAccountPasswordSettings.Validate if the designated
// constraints aren't met.
type OperatorAccountPasswordSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperatorAccountPasswordSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperatorAccountPasswordSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperatorAccountPasswordSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperatorAccountPasswordSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperatorAccountPasswordSettingsValidationError) ErrorName() string {
	return "OperatorAccountPasswordSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e OperatorAccountPasswordSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperatorAccountPasswordSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperatorAccountPasswordSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperatorAccountPasswordSettingsValidationError{}

// Validate checks the field values on OperatorAccountSecuritySettings with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OperatorAccountSecuritySettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperatorAccountSecuritySettings with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OperatorAccountSecuritySettingsMultiError, or nil if none found.
func (m *OperatorAccountSecuritySettings) ValidateAll() error {
	return m.validate(true)
}

func (m *OperatorAccountSecuritySettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MaxPasswordRetries

	// no validation rules for PasswordExpiryDays

	// no validation rules for PasswordHistoryLimits

	if len(errors) > 0 {
		return OperatorAccountSecuritySettingsMultiError(errors)
	}

	return nil
}

// OperatorAccountSecuritySettingsMultiError is an error wrapping multiple
// validation errors returned by OperatorAccountSecuritySettings.ValidateAll()
// if the designated constraints aren't met.
type OperatorAccountSecuritySettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperatorAccountSecuritySettingsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperatorAccountSecuritySettingsMultiError) AllErrors() []error { return m }

// OperatorAccountSecuritySettingsValidationError is the validation error
// returned by OperatorAccountSecuritySettings.Validate if the designated
// constraints aren't met.
type OperatorAccountSecuritySettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperatorAccountSecuritySettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperatorAccountSecuritySettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperatorAccountSecuritySettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperatorAccountSecuritySettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperatorAccountSecuritySettingsValidationError) ErrorName() string {
	return "OperatorAccountSecuritySettingsValidationError"
}

// Error satisfies the builtin error interface
func (e OperatorAccountSecuritySettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperatorAccountSecuritySettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperatorAccountSecuritySettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperatorAccountSecuritySettingsValidationError{}

// Validate checks the field values on OperatorAccountGameSettings with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OperatorAccountGameSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperatorAccountGameSettings with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperatorAccountGameSettingsMultiError, or nil if none found.
func (m *OperatorAccountGameSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *OperatorAccountGameSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NoGameWithoutDeposit

	// no validation rules for MinGameKycLevel

	if len(errors) > 0 {
		return OperatorAccountGameSettingsMultiError(errors)
	}

	return nil
}

// OperatorAccountGameSettingsMultiError is an error wrapping multiple
// validation errors returned by OperatorAccountGameSettings.ValidateAll() if
// the designated constraints aren't met.
type OperatorAccountGameSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperatorAccountGameSettingsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperatorAccountGameSettingsMultiError) AllErrors() []error { return m }

// OperatorAccountGameSettingsValidationError is the validation error returned
// by OperatorAccountGameSettings.Validate if the designated constraints
// aren't met.
type OperatorAccountGameSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperatorAccountGameSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperatorAccountGameSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperatorAccountGameSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperatorAccountGameSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperatorAccountGameSettingsValidationError) ErrorName() string {
	return "OperatorAccountGameSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e OperatorAccountGameSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperatorAccountGameSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperatorAccountGameSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperatorAccountGameSettingsValidationError{}

// Validate checks the field values on OperatorAccountPaymentSettings with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OperatorAccountPaymentSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperatorAccountPaymentSettings with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OperatorAccountPaymentSettingsMultiError, or nil if none found.
func (m *OperatorAccountPaymentSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *OperatorAccountPaymentSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MinDepositKycLevel

	// no validation rules for MinWithdrawKycLevel

	if len(errors) > 0 {
		return OperatorAccountPaymentSettingsMultiError(errors)
	}

	return nil
}

// OperatorAccountPaymentSettingsMultiError is an error wrapping multiple
// validation errors returned by OperatorAccountPaymentSettings.ValidateAll()
// if the designated constraints aren't met.
type OperatorAccountPaymentSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperatorAccountPaymentSettingsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperatorAccountPaymentSettingsMultiError) AllErrors() []error { return m }

// OperatorAccountPaymentSettingsValidationError is the validation error
// returned by OperatorAccountPaymentSettings.Validate if the designated
// constraints aren't met.
type OperatorAccountPaymentSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperatorAccountPaymentSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperatorAccountPaymentSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperatorAccountPaymentSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperatorAccountPaymentSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperatorAccountPaymentSettingsValidationError) ErrorName() string {
	return "OperatorAccountPaymentSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e OperatorAccountPaymentSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperatorAccountPaymentSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperatorAccountPaymentSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperatorAccountPaymentSettingsValidationError{}

// Validate checks the field values on OperatorAccountSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OperatorAccountSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperatorAccountSettings with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperatorAccountSettingsMultiError, or nil if none found.
func (m *OperatorAccountSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *OperatorAccountSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPasswordSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperatorAccountSettingsValidationError{
					field:  "PasswordSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperatorAccountSettingsValidationError{
					field:  "PasswordSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPasswordSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperatorAccountSettingsValidationError{
				field:  "PasswordSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSecuritySettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperatorAccountSettingsValidationError{
					field:  "SecuritySettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperatorAccountSettingsValidationError{
					field:  "SecuritySettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecuritySettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperatorAccountSettingsValidationError{
				field:  "SecuritySettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGameSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperatorAccountSettingsValidationError{
					field:  "GameSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperatorAccountSettingsValidationError{
					field:  "GameSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGameSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperatorAccountSettingsValidationError{
				field:  "GameSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPaymentSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperatorAccountSettingsValidationError{
					field:  "PaymentSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperatorAccountSettingsValidationError{
					field:  "PaymentSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperatorAccountSettingsValidationError{
				field:  "PaymentSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OperatorAccountSettingsMultiError(errors)
	}

	return nil
}

// OperatorAccountSettingsMultiError is an error wrapping multiple validation
// errors returned by OperatorAccountSettings.ValidateAll() if the designated
// constraints aren't met.
type OperatorAccountSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperatorAccountSettingsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperatorAccountSettingsMultiError) AllErrors() []error { return m }

// OperatorAccountSettingsValidationError is the validation error returned by
// OperatorAccountSettings.Validate if the designated constraints aren't met.
type OperatorAccountSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperatorAccountSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperatorAccountSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperatorAccountSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperatorAccountSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperatorAccountSettingsValidationError) ErrorName() string {
	return "OperatorAccountSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e OperatorAccountSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperatorAccountSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperatorAccountSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperatorAccountSettingsValidationError{}

// Validate checks the field values on GetUserAccountSettingsStatusRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserAccountSettingsStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserAccountSettingsStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserAccountSettingsStatusRequestMultiError, or nil if none found.
func (m *GetUserAccountSettingsStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserAccountSettingsStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserAccountSettingsStatusRequestMultiError(errors)
	}

	return nil
}

// GetUserAccountSettingsStatusRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetUserAccountSettingsStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserAccountSettingsStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAccountSettingsStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAccountSettingsStatusRequestMultiError) AllErrors() []error { return m }

// GetUserAccountSettingsStatusRequestValidationError is the validation error
// returned by GetUserAccountSettingsStatusRequest.Validate if the designated
// constraints aren't met.
type GetUserAccountSettingsStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAccountSettingsStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAccountSettingsStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAccountSettingsStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAccountSettingsStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAccountSettingsStatusRequestValidationError) ErrorName() string {
	return "GetUserAccountSettingsStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAccountSettingsStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAccountSettingsStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAccountSettingsStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAccountSettingsStatusRequestValidationError{}

// Validate checks the field values on UserAccountGameSettingsStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserAccountGameSettingsStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAccountGameSettingsStatus with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UserAccountGameSettingsStatusMultiError, or nil if none found.
func (m *UserAccountGameSettingsStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAccountGameSettingsStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NoGameWithoutDeposit

	// no validation rules for MinGameKycLevel

	// no validation rules for DepositCount

	// no validation rules for KycLevel

	if len(errors) > 0 {
		return UserAccountGameSettingsStatusMultiError(errors)
	}

	return nil
}

// UserAccountGameSettingsStatusMultiError is an error wrapping multiple
// validation errors returned by UserAccountGameSettingsStatus.ValidateAll()
// if the designated constraints aren't met.
type UserAccountGameSettingsStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAccountGameSettingsStatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAccountGameSettingsStatusMultiError) AllErrors() []error { return m }

// UserAccountGameSettingsStatusValidationError is the validation error
// returned by UserAccountGameSettingsStatus.Validate if the designated
// constraints aren't met.
type UserAccountGameSettingsStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAccountGameSettingsStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAccountGameSettingsStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAccountGameSettingsStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAccountGameSettingsStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAccountGameSettingsStatusValidationError) ErrorName() string {
	return "UserAccountGameSettingsStatusValidationError"
}

// Error satisfies the builtin error interface
func (e UserAccountGameSettingsStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAccountGameSettingsStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAccountGameSettingsStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAccountGameSettingsStatusValidationError{}

// Validate checks the field values on UserAccountPaymentSettingsStatus with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UserAccountPaymentSettingsStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAccountPaymentSettingsStatus with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UserAccountPaymentSettingsStatusMultiError, or nil if none found.
func (m *UserAccountPaymentSettingsStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAccountPaymentSettingsStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MinDepositKycLevel

	// no validation rules for MinWithdrawKycLevel

	// no validation rules for KycLevel

	if len(errors) > 0 {
		return UserAccountPaymentSettingsStatusMultiError(errors)
	}

	return nil
}

// UserAccountPaymentSettingsStatusMultiError is an error wrapping multiple
// validation errors returned by
// UserAccountPaymentSettingsStatus.ValidateAll() if the designated
// constraints aren't met.
type UserAccountPaymentSettingsStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAccountPaymentSettingsStatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAccountPaymentSettingsStatusMultiError) AllErrors() []error { return m }

// UserAccountPaymentSettingsStatusValidationError is the validation error
// returned by UserAccountPaymentSettingsStatus.Validate if the designated
// constraints aren't met.
type UserAccountPaymentSettingsStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAccountPaymentSettingsStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAccountPaymentSettingsStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAccountPaymentSettingsStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAccountPaymentSettingsStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAccountPaymentSettingsStatusValidationError) ErrorName() string {
	return "UserAccountPaymentSettingsStatusValidationError"
}

// Error satisfies the builtin error interface
func (e UserAccountPaymentSettingsStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAccountPaymentSettingsStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAccountPaymentSettingsStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAccountPaymentSettingsStatusValidationError{}

// Validate checks the field values on GetUserAccountSettingsStatusResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUserAccountSettingsStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserAccountSettingsStatusResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserAccountSettingsStatusResponseMultiError, or nil if none found.
func (m *GetUserAccountSettingsStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserAccountSettingsStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AllowGame

	// no validation rules for AllowDeposit

	// no validation rules for AllowWithdraw

	if all {
		switch v := interface{}(m.GetGameSettingsStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserAccountSettingsStatusResponseValidationError{
					field:  "GameSettingsStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserAccountSettingsStatusResponseValidationError{
					field:  "GameSettingsStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGameSettingsStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserAccountSettingsStatusResponseValidationError{
				field:  "GameSettingsStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPaymentSettingsStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserAccountSettingsStatusResponseValidationError{
					field:  "PaymentSettingsStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserAccountSettingsStatusResponseValidationError{
					field:  "PaymentSettingsStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentSettingsStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserAccountSettingsStatusResponseValidationError{
				field:  "PaymentSettingsStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserAccountSettingsStatusResponseMultiError(errors)
	}

	return nil
}

// GetUserAccountSettingsStatusResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetUserAccountSettingsStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserAccountSettingsStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAccountSettingsStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAccountSettingsStatusResponseMultiError) AllErrors() []error { return m }

// GetUserAccountSettingsStatusResponseValidationError is the validation error
// returned by GetUserAccountSettingsStatusResponse.Validate if the designated
// constraints aren't met.
type GetUserAccountSettingsStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAccountSettingsStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAccountSettingsStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAccountSettingsStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAccountSettingsStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAccountSettingsStatusResponseValidationError) ErrorName() string {
	return "GetUserAccountSettingsStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAccountSettingsStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAccountSettingsStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAccountSettingsStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAccountSettingsStatusResponseValidationError{}

// Validate checks the field values on OperatorConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OperatorConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperatorConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OperatorConfigMultiError,
// or nil if none found.
func (m *OperatorConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *OperatorConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.SwapFeePercentage != nil {
		// no validation rules for SwapFeePercentage
	}

	if m.AccountSettings != nil {

		if all {
			switch v := interface{}(m.GetAccountSettings()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OperatorConfigValidationError{
						field:  "AccountSettings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OperatorConfigValidationError{
						field:  "AccountSettings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAccountSettings()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OperatorConfigValidationError{
					field:  "AccountSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OperatorConfigMultiError(errors)
	}

	return nil
}

// OperatorConfigMultiError is an error wrapping multiple validation errors
// returned by OperatorConfig.ValidateAll() if the designated constraints
// aren't met.
type OperatorConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperatorConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperatorConfigMultiError) AllErrors() []error { return m }

// OperatorConfigValidationError is the validation error returned by
// OperatorConfig.Validate if the designated constraints aren't met.
type OperatorConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperatorConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperatorConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperatorConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperatorConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperatorConfigValidationError) ErrorName() string { return "OperatorConfigValidationError" }

// Error satisfies the builtin error interface
func (e OperatorConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperatorConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperatorConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperatorConfigValidationError{}

// Validate checks the field values on OperatorDetails with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OperatorDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperatorDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperatorDetailsMultiError, or nil if none found.
func (m *OperatorDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *OperatorDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OperatorName

	// no validation rules for ParentOperatorId

	// no validation rules for ParentOperatorName

	// no validation rules for OperatorType

	// no validation rules for ExternalId

	// no validation rules for ApiKey

	// no validation rules for Subdomain

	// no validation rules for BackofficeSubdomain

	// no validation rules for BackofficeChildDomain

	// no validation rules for Enabled

	// no validation rules for Mode

	// no validation rules for OperatorKey

	// no validation rules for ReportingCurrency

	// no validation rules for BackofficeTimezone

	// no validation rules for Status

	// no validation rules for StatusStartTime

	// no validation rules for StatusEndTime

	// no validation rules for OperatorId

	// no validation rules for CompanyOperatorId

	// no validation rules for CompanyOperatorName

	// no validation rules for RetailerOperatorId

	// no validation rules for RetailerOperatorName

	// no validation rules for SystemOperatorId

	// no validation rules for SystemOperatorName

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperatorDetailsValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperatorDetailsValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperatorDetailsValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MinLaunchBalance

	if len(errors) > 0 {
		return OperatorDetailsMultiError(errors)
	}

	return nil
}

// OperatorDetailsMultiError is an error wrapping multiple validation errors
// returned by OperatorDetails.ValidateAll() if the designated constraints
// aren't met.
type OperatorDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperatorDetailsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperatorDetailsMultiError) AllErrors() []error { return m }

// OperatorDetailsValidationError is the validation error returned by
// OperatorDetails.Validate if the designated constraints aren't met.
type OperatorDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperatorDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperatorDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperatorDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperatorDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperatorDetailsValidationError) ErrorName() string { return "OperatorDetailsValidationError" }

// Error satisfies the builtin error interface
func (e OperatorDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperatorDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperatorDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperatorDetailsValidationError{}

// Validate checks the field values on GetOperatorDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorDetailsRequestMultiError, or nil if none found.
func (m *GetOperatorDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return GetOperatorDetailsRequestMultiError(errors)
	}

	return nil
}

// GetOperatorDetailsRequestMultiError is an error wrapping multiple validation
// errors returned by GetOperatorDetailsRequest.ValidateAll() if the
// designated constraints aren't met.
type GetOperatorDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorDetailsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorDetailsRequestMultiError) AllErrors() []error { return m }

// GetOperatorDetailsRequestValidationError is the validation error returned by
// GetOperatorDetailsRequest.Validate if the designated constraints aren't met.
type GetOperatorDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorDetailsRequestValidationError) ErrorName() string {
	return "GetOperatorDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorDetailsRequestValidationError{}

// Validate checks the field values on GetOperatorDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorDetailsResponseMultiError, or nil if none found.
func (m *GetOperatorDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorDetailsResponseValidationError{
					field:  "OperatorDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorDetailsResponseValidationError{
					field:  "OperatorDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorDetailsResponseValidationError{
				field:  "OperatorDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOperatorDetailsResponseMultiError(errors)
	}

	return nil
}

// GetOperatorDetailsResponseMultiError is an error wrapping multiple
// validation errors returned by GetOperatorDetailsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetOperatorDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorDetailsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorDetailsResponseMultiError) AllErrors() []error { return m }

// GetOperatorDetailsResponseValidationError is the validation error returned
// by GetOperatorDetailsResponse.Validate if the designated constraints aren't met.
type GetOperatorDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorDetailsResponseValidationError) ErrorName() string {
	return "GetOperatorDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorDetailsResponseValidationError{}

// Validate checks the field values on ListOperatorsByParentOperatorIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListOperatorsByParentOperatorIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOperatorsByParentOperatorIdRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListOperatorsByParentOperatorIdRequestMultiError, or nil if none found.
func (m *ListOperatorsByParentOperatorIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOperatorsByParentOperatorIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParentOperatorId

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListOperatorsByParentOperatorIdRequestMultiError(errors)
	}

	return nil
}

// ListOperatorsByParentOperatorIdRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListOperatorsByParentOperatorIdRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOperatorsByParentOperatorIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOperatorsByParentOperatorIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOperatorsByParentOperatorIdRequestMultiError) AllErrors() []error { return m }

// ListOperatorsByParentOperatorIdRequestValidationError is the validation
// error returned by ListOperatorsByParentOperatorIdRequest.Validate if the
// designated constraints aren't met.
type ListOperatorsByParentOperatorIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperatorsByParentOperatorIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperatorsByParentOperatorIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperatorsByParentOperatorIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperatorsByParentOperatorIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperatorsByParentOperatorIdRequestValidationError) ErrorName() string {
	return "ListOperatorsByParentOperatorIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperatorsByParentOperatorIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperatorsByParentOperatorIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperatorsByParentOperatorIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperatorsByParentOperatorIdRequestValidationError{}

// Validate checks the field values on ListOperatorsByParentOperatorIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListOperatorsByParentOperatorIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOperatorsByParentOperatorIdResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListOperatorsByParentOperatorIdResponseMultiError, or nil if none found.
func (m *ListOperatorsByParentOperatorIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOperatorsByParentOperatorIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOperatorDetailsList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOperatorsByParentOperatorIdResponseValidationError{
						field:  fmt.Sprintf("OperatorDetailsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOperatorsByParentOperatorIdResponseValidationError{
						field:  fmt.Sprintf("OperatorDetailsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOperatorsByParentOperatorIdResponseValidationError{
					field:  fmt.Sprintf("OperatorDetailsList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for LiveCount

	// no validation rules for ClosedCount

	// no validation rules for PendingCount

	// no validation rules for RequestToCloseCount

	// no validation rules for SuspendedCount

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListOperatorsByParentOperatorIdResponseMultiError(errors)
	}

	return nil
}

// ListOperatorsByParentOperatorIdResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListOperatorsByParentOperatorIdResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOperatorsByParentOperatorIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOperatorsByParentOperatorIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOperatorsByParentOperatorIdResponseMultiError) AllErrors() []error { return m }

// ListOperatorsByParentOperatorIdResponseValidationError is the validation
// error returned by ListOperatorsByParentOperatorIdResponse.Validate if the
// designated constraints aren't met.
type ListOperatorsByParentOperatorIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperatorsByParentOperatorIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperatorsByParentOperatorIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperatorsByParentOperatorIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperatorsByParentOperatorIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperatorsByParentOperatorIdResponseValidationError) ErrorName() string {
	return "ListOperatorsByParentOperatorIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperatorsByParentOperatorIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperatorsByParentOperatorIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperatorsByParentOperatorIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperatorsByParentOperatorIdResponseValidationError{}

// Validate checks the field values on ListRetailerOperatorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRetailerOperatorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRetailerOperatorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRetailerOperatorsRequestMultiError, or nil if none found.
func (m *ListRetailerOperatorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRetailerOperatorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRetailerOperatorsRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRetailerOperatorsRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRetailerOperatorsRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IncludeCount

	if len(errors) > 0 {
		return ListRetailerOperatorsRequestMultiError(errors)
	}

	return nil
}

// ListRetailerOperatorsRequestMultiError is an error wrapping multiple
// validation errors returned by ListRetailerOperatorsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListRetailerOperatorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRetailerOperatorsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRetailerOperatorsRequestMultiError) AllErrors() []error { return m }

// ListRetailerOperatorsRequestValidationError is the validation error returned
// by ListRetailerOperatorsRequest.Validate if the designated constraints
// aren't met.
type ListRetailerOperatorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRetailerOperatorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRetailerOperatorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRetailerOperatorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRetailerOperatorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRetailerOperatorsRequestValidationError) ErrorName() string {
	return "ListRetailerOperatorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRetailerOperatorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRetailerOperatorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRetailerOperatorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRetailerOperatorsRequestValidationError{}

// Validate checks the field values on ListRetailerOperatorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRetailerOperatorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRetailerOperatorsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListRetailerOperatorsResponseMultiError, or nil if none found.
func (m *ListRetailerOperatorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRetailerOperatorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRetailerOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRetailerOperatorsResponseValidationError{
						field:  fmt.Sprintf("RetailerOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRetailerOperatorsResponseValidationError{
						field:  fmt.Sprintf("RetailerOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRetailerOperatorsResponseValidationError{
					field:  fmt.Sprintf("RetailerOperators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRetailerOperatorsResponseMultiError(errors)
	}

	return nil
}

// ListRetailerOperatorsResponseMultiError is an error wrapping multiple
// validation errors returned by ListRetailerOperatorsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListRetailerOperatorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRetailerOperatorsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRetailerOperatorsResponseMultiError) AllErrors() []error { return m }

// ListRetailerOperatorsResponseValidationError is the validation error
// returned by ListRetailerOperatorsResponse.Validate if the designated
// constraints aren't met.
type ListRetailerOperatorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRetailerOperatorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRetailerOperatorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRetailerOperatorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRetailerOperatorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRetailerOperatorsResponseValidationError) ErrorName() string {
	return "ListRetailerOperatorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRetailerOperatorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRetailerOperatorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRetailerOperatorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRetailerOperatorsResponseValidationError{}

// Validate checks the field values on ListCompanyOperatorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCompanyOperatorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCompanyOperatorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCompanyOperatorsRequestMultiError, or nil if none found.
func (m *ListCompanyOperatorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCompanyOperatorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCompanyOperatorsRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCompanyOperatorsRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCompanyOperatorsRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IncludeCount

	if len(errors) > 0 {
		return ListCompanyOperatorsRequestMultiError(errors)
	}

	return nil
}

// ListCompanyOperatorsRequestMultiError is an error wrapping multiple
// validation errors returned by ListCompanyOperatorsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListCompanyOperatorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCompanyOperatorsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCompanyOperatorsRequestMultiError) AllErrors() []error { return m }

// ListCompanyOperatorsRequestValidationError is the validation error returned
// by ListCompanyOperatorsRequest.Validate if the designated constraints
// aren't met.
type ListCompanyOperatorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCompanyOperatorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCompanyOperatorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCompanyOperatorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCompanyOperatorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCompanyOperatorsRequestValidationError) ErrorName() string {
	return "ListCompanyOperatorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCompanyOperatorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCompanyOperatorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCompanyOperatorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCompanyOperatorsRequestValidationError{}

// Validate checks the field values on ListCompanyOperatorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCompanyOperatorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCompanyOperatorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCompanyOperatorsResponseMultiError, or nil if none found.
func (m *ListCompanyOperatorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCompanyOperatorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCompanyOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCompanyOperatorsResponseValidationError{
						field:  fmt.Sprintf("CompanyOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCompanyOperatorsResponseValidationError{
						field:  fmt.Sprintf("CompanyOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCompanyOperatorsResponseValidationError{
					field:  fmt.Sprintf("CompanyOperators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCompanyOperatorsResponseMultiError(errors)
	}

	return nil
}

// ListCompanyOperatorsResponseMultiError is an error wrapping multiple
// validation errors returned by ListCompanyOperatorsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListCompanyOperatorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCompanyOperatorsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCompanyOperatorsResponseMultiError) AllErrors() []error { return m }

// ListCompanyOperatorsResponseValidationError is the validation error returned
// by ListCompanyOperatorsResponse.Validate if the designated constraints
// aren't met.
type ListCompanyOperatorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCompanyOperatorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCompanyOperatorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCompanyOperatorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCompanyOperatorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCompanyOperatorsResponseValidationError) ErrorName() string {
	return "ListCompanyOperatorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCompanyOperatorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCompanyOperatorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCompanyOperatorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCompanyOperatorsResponseValidationError{}

// Validate checks the field values on ListBottomOperatorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBottomOperatorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBottomOperatorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBottomOperatorsRequestMultiError, or nil if none found.
func (m *ListBottomOperatorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBottomOperatorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListBottomOperatorsRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListBottomOperatorsRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListBottomOperatorsRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListBottomOperatorsRequestMultiError(errors)
	}

	return nil
}

// ListBottomOperatorsRequestMultiError is an error wrapping multiple
// validation errors returned by ListBottomOperatorsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListBottomOperatorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBottomOperatorsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBottomOperatorsRequestMultiError) AllErrors() []error { return m }

// ListBottomOperatorsRequestValidationError is the validation error returned
// by ListBottomOperatorsRequest.Validate if the designated constraints aren't met.
type ListBottomOperatorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBottomOperatorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBottomOperatorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBottomOperatorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBottomOperatorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBottomOperatorsRequestValidationError) ErrorName() string {
	return "ListBottomOperatorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBottomOperatorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBottomOperatorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBottomOperatorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBottomOperatorsRequestValidationError{}

// Validate checks the field values on ListBottomOperatorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBottomOperatorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBottomOperatorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBottomOperatorsResponseMultiError, or nil if none found.
func (m *ListBottomOperatorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBottomOperatorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBottomOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBottomOperatorsResponseValidationError{
						field:  fmt.Sprintf("BottomOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBottomOperatorsResponseValidationError{
						field:  fmt.Sprintf("BottomOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBottomOperatorsResponseValidationError{
					field:  fmt.Sprintf("BottomOperators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBottomOperatorsResponseMultiError(errors)
	}

	return nil
}

// ListBottomOperatorsResponseMultiError is an error wrapping multiple
// validation errors returned by ListBottomOperatorsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListBottomOperatorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBottomOperatorsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBottomOperatorsResponseMultiError) AllErrors() []error { return m }

// ListBottomOperatorsResponseValidationError is the validation error returned
// by ListBottomOperatorsResponse.Validate if the designated constraints
// aren't met.
type ListBottomOperatorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBottomOperatorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBottomOperatorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBottomOperatorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBottomOperatorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBottomOperatorsResponseValidationError) ErrorName() string {
	return "ListBottomOperatorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBottomOperatorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBottomOperatorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBottomOperatorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBottomOperatorsResponseValidationError{}

// Validate checks the field values on UpdateOperatorStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOperatorStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOperatorStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOperatorStatusRequestMultiError, or nil if none found.
func (m *UpdateOperatorStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOperatorStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOperatorStatusRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOperatorStatusRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOperatorStatusRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Action

	if all {
		switch v := interface{}(m.GetActionStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOperatorStatusRequestValidationError{
					field:  "ActionStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOperatorStatusRequestValidationError{
					field:  "ActionStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActionStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOperatorStatusRequestValidationError{
				field:  "ActionStart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetActionEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOperatorStatusRequestValidationError{
					field:  "ActionEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOperatorStatusRequestValidationError{
					field:  "ActionEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActionEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOperatorStatusRequestValidationError{
				field:  "ActionEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOperatorStatusRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOperatorStatusRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOperatorStatusRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOperatorStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateOperatorStatusRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateOperatorStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateOperatorStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOperatorStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOperatorStatusRequestMultiError) AllErrors() []error { return m }

// UpdateOperatorStatusRequestValidationError is the validation error returned
// by UpdateOperatorStatusRequest.Validate if the designated constraints
// aren't met.
type UpdateOperatorStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOperatorStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOperatorStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOperatorStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOperatorStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOperatorStatusRequestValidationError) ErrorName() string {
	return "UpdateOperatorStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOperatorStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOperatorStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOperatorStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOperatorStatusRequestValidationError{}

// Validate checks the field values on UpdateOperatorStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOperatorStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOperatorStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOperatorStatusResponseMultiError, or nil if none found.
func (m *UpdateOperatorStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOperatorStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateOperatorStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateOperatorStatusResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOperatorStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateOperatorStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOperatorStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOperatorStatusResponseMultiError) AllErrors() []error { return m }

// UpdateOperatorStatusResponseValidationError is the validation error returned
// by UpdateOperatorStatusResponse.Validate if the designated constraints
// aren't met.
type UpdateOperatorStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOperatorStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOperatorStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOperatorStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOperatorStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOperatorStatusResponseValidationError) ErrorName() string {
	return "UpdateOperatorStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOperatorStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOperatorStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOperatorStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOperatorStatusResponseValidationError{}

// Validate checks the field values on ListAllUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAllUsersRequestMultiError, or nil if none found.
func (m *ListAllUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAllUsersRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAllUsersRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAllUsersRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RoleId != nil {
		// no validation rules for RoleId
	}

	if len(errors) > 0 {
		return ListAllUsersRequestMultiError(errors)
	}

	return nil
}

// ListAllUsersRequestMultiError is an error wrapping multiple validation
// errors returned by ListAllUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAllUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllUsersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllUsersRequestMultiError) AllErrors() []error { return m }

// ListAllUsersRequestValidationError is the validation error returned by
// ListAllUsersRequest.Validate if the designated constraints aren't met.
type ListAllUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllUsersRequestValidationError) ErrorName() string {
	return "ListAllUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllUsersRequestValidationError{}

// Validate checks the field values on ListAllUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAllUsersResponseMultiError, or nil if none found.
func (m *ListAllUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAllUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAllUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAllUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAllUsersResponseMultiError(errors)
	}

	return nil
}

// ListAllUsersResponseMultiError is an error wrapping multiple validation
// errors returned by ListAllUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAllUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllUsersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllUsersResponseMultiError) AllErrors() []error { return m }

// ListAllUsersResponseValidationError is the validation error returned by
// ListAllUsersResponse.Validate if the designated constraints aren't met.
type ListAllUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllUsersResponseValidationError) ErrorName() string {
	return "ListAllUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllUsersResponseValidationError{}

// Validate checks the field values on ListOperatorsByAdminEmailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOperatorsByAdminEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOperatorsByAdminEmailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOperatorsByAdminEmailRequestMultiError, or nil if none found.
func (m *ListOperatorsByAdminEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOperatorsByAdminEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListOperatorsByAdminEmailRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListOperatorsByAdminEmailRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOperatorsByAdminEmailRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListOperatorsByAdminEmailRequestMultiError(errors)
	}

	return nil
}

// ListOperatorsByAdminEmailRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListOperatorsByAdminEmailRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOperatorsByAdminEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOperatorsByAdminEmailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOperatorsByAdminEmailRequestMultiError) AllErrors() []error { return m }

// ListOperatorsByAdminEmailRequestValidationError is the validation error
// returned by ListOperatorsByAdminEmailRequest.Validate if the designated
// constraints aren't met.
type ListOperatorsByAdminEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperatorsByAdminEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperatorsByAdminEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperatorsByAdminEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperatorsByAdminEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperatorsByAdminEmailRequestValidationError) ErrorName() string {
	return "ListOperatorsByAdminEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperatorsByAdminEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperatorsByAdminEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperatorsByAdminEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperatorsByAdminEmailRequestValidationError{}

// Validate checks the field values on ListOperatorsByAdminEmailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOperatorsByAdminEmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOperatorsByAdminEmailResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOperatorsByAdminEmailResponseMultiError, or nil if none found.
func (m *ListOperatorsByAdminEmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOperatorsByAdminEmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRetailerOperatorDetailsList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOperatorsByAdminEmailResponseValidationError{
						field:  fmt.Sprintf("RetailerOperatorDetailsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOperatorsByAdminEmailResponseValidationError{
						field:  fmt.Sprintf("RetailerOperatorDetailsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOperatorsByAdminEmailResponseValidationError{
					field:  fmt.Sprintf("RetailerOperatorDetailsList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCompanyOperatorDetailsList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOperatorsByAdminEmailResponseValidationError{
						field:  fmt.Sprintf("CompanyOperatorDetailsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOperatorsByAdminEmailResponseValidationError{
						field:  fmt.Sprintf("CompanyOperatorDetailsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOperatorsByAdminEmailResponseValidationError{
					field:  fmt.Sprintf("CompanyOperatorDetailsList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOperatorDetailsList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOperatorsByAdminEmailResponseValidationError{
						field:  fmt.Sprintf("OperatorDetailsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOperatorsByAdminEmailResponseValidationError{
						field:  fmt.Sprintf("OperatorDetailsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOperatorsByAdminEmailResponseValidationError{
					field:  fmt.Sprintf("OperatorDetailsList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOperatorsByAdminEmailResponseMultiError(errors)
	}

	return nil
}

// ListOperatorsByAdminEmailResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListOperatorsByAdminEmailResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOperatorsByAdminEmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOperatorsByAdminEmailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOperatorsByAdminEmailResponseMultiError) AllErrors() []error { return m }

// ListOperatorsByAdminEmailResponseValidationError is the validation error
// returned by ListOperatorsByAdminEmailResponse.Validate if the designated
// constraints aren't met.
type ListOperatorsByAdminEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperatorsByAdminEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperatorsByAdminEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperatorsByAdminEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperatorsByAdminEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperatorsByAdminEmailResponseValidationError) ErrorName() string {
	return "ListOperatorsByAdminEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperatorsByAdminEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperatorsByAdminEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperatorsByAdminEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperatorsByAdminEmailResponseValidationError{}

// Validate checks the field values on ListOperatorDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOperatorDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOperatorDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOperatorDetailsRequestMultiError, or nil if none found.
func (m *ListOperatorDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOperatorDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListOperatorDetailsRequestMultiError(errors)
	}

	return nil
}

// ListOperatorDetailsRequestMultiError is an error wrapping multiple
// validation errors returned by ListOperatorDetailsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListOperatorDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOperatorDetailsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOperatorDetailsRequestMultiError) AllErrors() []error { return m }

// ListOperatorDetailsRequestValidationError is the validation error returned
// by ListOperatorDetailsRequest.Validate if the designated constraints aren't met.
type ListOperatorDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperatorDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperatorDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperatorDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperatorDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperatorDetailsRequestValidationError) ErrorName() string {
	return "ListOperatorDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperatorDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperatorDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperatorDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperatorDetailsRequestValidationError{}

// Validate checks the field values on ListOperatorDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOperatorDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOperatorDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOperatorDetailsResponseMultiError, or nil if none found.
func (m *ListOperatorDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOperatorDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOperatorDetailsList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOperatorDetailsResponseValidationError{
						field:  fmt.Sprintf("OperatorDetailsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOperatorDetailsResponseValidationError{
						field:  fmt.Sprintf("OperatorDetailsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOperatorDetailsResponseValidationError{
					field:  fmt.Sprintf("OperatorDetailsList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOperatorDetailsResponseMultiError(errors)
	}

	return nil
}

// ListOperatorDetailsResponseMultiError is an error wrapping multiple
// validation errors returned by ListOperatorDetailsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListOperatorDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOperatorDetailsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOperatorDetailsResponseMultiError) AllErrors() []error { return m }

// ListOperatorDetailsResponseValidationError is the validation error returned
// by ListOperatorDetailsResponse.Validate if the designated constraints
// aren't met.
type ListOperatorDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperatorDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperatorDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperatorDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperatorDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperatorDetailsResponseValidationError) ErrorName() string {
	return "ListOperatorDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperatorDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperatorDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperatorDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperatorDetailsResponseValidationError{}

// Validate checks the field values on GetOperatorDetailsByUserIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOperatorDetailsByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorDetailsByUserIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOperatorDetailsByUserIdRequestMultiError, or nil if none found.
func (m *GetOperatorDetailsByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorDetailsByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetOperatorDetailsByUserIdRequestMultiError(errors)
	}

	return nil
}

// GetOperatorDetailsByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetOperatorDetailsByUserIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorDetailsByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorDetailsByUserIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorDetailsByUserIdRequestMultiError) AllErrors() []error { return m }

// GetOperatorDetailsByUserIdRequestValidationError is the validation error
// returned by GetOperatorDetailsByUserIdRequest.Validate if the designated
// constraints aren't met.
type GetOperatorDetailsByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorDetailsByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorDetailsByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorDetailsByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorDetailsByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorDetailsByUserIdRequestValidationError) ErrorName() string {
	return "GetOperatorDetailsByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorDetailsByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorDetailsByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorDetailsByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorDetailsByUserIdRequestValidationError{}

// Validate checks the field values on GetOperatorDetailsByUserIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOperatorDetailsByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorDetailsByUserIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOperatorDetailsByUserIdResponseMultiError, or nil if none found.
func (m *GetOperatorDetailsByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorDetailsByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorDetailsByUserIdResponseValidationError{
					field:  "OperatorDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorDetailsByUserIdResponseValidationError{
					field:  "OperatorDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorDetailsByUserIdResponseValidationError{
				field:  "OperatorDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOperatorDetailsByUserIdResponseMultiError(errors)
	}

	return nil
}

// GetOperatorDetailsByUserIdResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetOperatorDetailsByUserIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorDetailsByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorDetailsByUserIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorDetailsByUserIdResponseMultiError) AllErrors() []error { return m }

// GetOperatorDetailsByUserIdResponseValidationError is the validation error
// returned by GetOperatorDetailsByUserIdResponse.Validate if the designated
// constraints aren't met.
type GetOperatorDetailsByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorDetailsByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorDetailsByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorDetailsByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorDetailsByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorDetailsByUserIdResponseValidationError) ErrorName() string {
	return "GetOperatorDetailsByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorDetailsByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorDetailsByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorDetailsByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorDetailsByUserIdResponseValidationError{}

// Validate checks the field values on GetOperatorAccountSettingsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOperatorAccountSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorAccountSettingsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOperatorAccountSettingsRequestMultiError, or nil if none found.
func (m *GetOperatorAccountSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorAccountSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorAccountSettingsRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorAccountSettingsRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorAccountSettingsRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOperatorAccountSettingsRequestMultiError(errors)
	}

	return nil
}

// GetOperatorAccountSettingsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetOperatorAccountSettingsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorAccountSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorAccountSettingsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorAccountSettingsRequestMultiError) AllErrors() []error { return m }

// GetOperatorAccountSettingsRequestValidationError is the validation error
// returned by GetOperatorAccountSettingsRequest.Validate if the designated
// constraints aren't met.
type GetOperatorAccountSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorAccountSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorAccountSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorAccountSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorAccountSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorAccountSettingsRequestValidationError) ErrorName() string {
	return "GetOperatorAccountSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorAccountSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorAccountSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorAccountSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorAccountSettingsRequestValidationError{}

// Validate checks the field values on GetOperatorAccountSettingsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOperatorAccountSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorAccountSettingsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOperatorAccountSettingsResponseMultiError, or nil if none found.
func (m *GetOperatorAccountSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorAccountSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccountSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorAccountSettingsResponseValidationError{
					field:  "AccountSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorAccountSettingsResponseValidationError{
					field:  "AccountSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccountSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorAccountSettingsResponseValidationError{
				field:  "AccountSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOperatorAccountSettingsResponseMultiError(errors)
	}

	return nil
}

// GetOperatorAccountSettingsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetOperatorAccountSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorAccountSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorAccountSettingsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorAccountSettingsResponseMultiError) AllErrors() []error { return m }

// GetOperatorAccountSettingsResponseValidationError is the validation error
// returned by GetOperatorAccountSettingsResponse.Validate if the designated
// constraints aren't met.
type GetOperatorAccountSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorAccountSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorAccountSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorAccountSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorAccountSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorAccountSettingsResponseValidationError) ErrorName() string {
	return "GetOperatorAccountSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorAccountSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorAccountSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorAccountSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorAccountSettingsResponseValidationError{}

// Validate checks the field values on UpdateOperatorAccountSettingsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateOperatorAccountSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOperatorAccountSettingsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateOperatorAccountSettingsRequestMultiError, or nil if none found.
func (m *UpdateOperatorAccountSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOperatorAccountSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOperatorAccountSettingsRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOperatorAccountSettingsRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOperatorAccountSettingsRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAccountSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOperatorAccountSettingsRequestValidationError{
					field:  "AccountSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOperatorAccountSettingsRequestValidationError{
					field:  "AccountSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccountSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOperatorAccountSettingsRequestValidationError{
				field:  "AccountSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOperatorAccountSettingsRequestMultiError(errors)
	}

	return nil
}

// UpdateOperatorAccountSettingsRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateOperatorAccountSettingsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOperatorAccountSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOperatorAccountSettingsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOperatorAccountSettingsRequestMultiError) AllErrors() []error { return m }

// UpdateOperatorAccountSettingsRequestValidationError is the validation error
// returned by UpdateOperatorAccountSettingsRequest.Validate if the designated
// constraints aren't met.
type UpdateOperatorAccountSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOperatorAccountSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOperatorAccountSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOperatorAccountSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOperatorAccountSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOperatorAccountSettingsRequestValidationError) ErrorName() string {
	return "UpdateOperatorAccountSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOperatorAccountSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOperatorAccountSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOperatorAccountSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOperatorAccountSettingsRequestValidationError{}

// Validate checks the field values on UpdateOperatorAccountSettingsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateOperatorAccountSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOperatorAccountSettingsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateOperatorAccountSettingsResponseMultiError, or nil if none found.
func (m *UpdateOperatorAccountSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOperatorAccountSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateOperatorAccountSettingsResponseMultiError(errors)
	}

	return nil
}

// UpdateOperatorAccountSettingsResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateOperatorAccountSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOperatorAccountSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOperatorAccountSettingsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOperatorAccountSettingsResponseMultiError) AllErrors() []error { return m }

// UpdateOperatorAccountSettingsResponseValidationError is the validation error
// returned by UpdateOperatorAccountSettingsResponse.Validate if the
// designated constraints aren't met.
type UpdateOperatorAccountSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOperatorAccountSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOperatorAccountSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOperatorAccountSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOperatorAccountSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOperatorAccountSettingsResponseValidationError) ErrorName() string {
	return "UpdateOperatorAccountSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOperatorAccountSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOperatorAccountSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOperatorAccountSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOperatorAccountSettingsResponseValidationError{}

// Validate checks the field values on ResponsibleGamblingConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResponsibleGamblingConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponsibleGamblingConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResponsibleGamblingConfigMultiError, or nil if none found.
func (m *ResponsibleGamblingConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponsibleGamblingConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.SelfExclusion != nil {

		if all {
			switch v := interface{}(m.GetSelfExclusion()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResponsibleGamblingConfigValidationError{
						field:  "SelfExclusion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResponsibleGamblingConfigValidationError{
						field:  "SelfExclusion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSelfExclusion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponsibleGamblingConfigValidationError{
					field:  "SelfExclusion",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.BreakInPlay != nil {

		if all {
			switch v := interface{}(m.GetBreakInPlay()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResponsibleGamblingConfigValidationError{
						field:  "BreakInPlay",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResponsibleGamblingConfigValidationError{
						field:  "BreakInPlay",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBreakInPlay()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponsibleGamblingConfigValidationError{
					field:  "BreakInPlay",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.TimeLimits != nil {

		if all {
			switch v := interface{}(m.GetTimeLimits()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResponsibleGamblingConfigValidationError{
						field:  "TimeLimits",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResponsibleGamblingConfigValidationError{
						field:  "TimeLimits",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimeLimits()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResponsibleGamblingConfigValidationError{
					field:  "TimeLimits",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResponsibleGamblingConfigMultiError(errors)
	}

	return nil
}

// ResponsibleGamblingConfigMultiError is an error wrapping multiple validation
// errors returned by ResponsibleGamblingConfig.ValidateAll() if the
// designated constraints aren't met.
type ResponsibleGamblingConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponsibleGamblingConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponsibleGamblingConfigMultiError) AllErrors() []error { return m }

// ResponsibleGamblingConfigValidationError is the validation error returned by
// ResponsibleGamblingConfig.Validate if the designated constraints aren't met.
type ResponsibleGamblingConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponsibleGamblingConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponsibleGamblingConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponsibleGamblingConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponsibleGamblingConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponsibleGamblingConfigValidationError) ErrorName() string {
	return "ResponsibleGamblingConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ResponsibleGamblingConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponsibleGamblingConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponsibleGamblingConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponsibleGamblingConfigValidationError{}

// Validate checks the field values on AddResponsibleGamblingConfigRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddResponsibleGamblingConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddResponsibleGamblingConfigRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddResponsibleGamblingConfigRequestMultiError, or nil if none found.
func (m *AddResponsibleGamblingConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddResponsibleGamblingConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponsibleGamblingConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddResponsibleGamblingConfigRequestValidationError{
					field:  "ResponsibleGamblingConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddResponsibleGamblingConfigRequestValidationError{
					field:  "ResponsibleGamblingConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponsibleGamblingConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddResponsibleGamblingConfigRequestValidationError{
				field:  "ResponsibleGamblingConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddResponsibleGamblingConfigRequestMultiError(errors)
	}

	return nil
}

// AddResponsibleGamblingConfigRequestMultiError is an error wrapping multiple
// validation errors returned by
// AddResponsibleGamblingConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type AddResponsibleGamblingConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddResponsibleGamblingConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddResponsibleGamblingConfigRequestMultiError) AllErrors() []error { return m }

// AddResponsibleGamblingConfigRequestValidationError is the validation error
// returned by AddResponsibleGamblingConfigRequest.Validate if the designated
// constraints aren't met.
type AddResponsibleGamblingConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddResponsibleGamblingConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddResponsibleGamblingConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddResponsibleGamblingConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddResponsibleGamblingConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddResponsibleGamblingConfigRequestValidationError) ErrorName() string {
	return "AddResponsibleGamblingConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddResponsibleGamblingConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddResponsibleGamblingConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddResponsibleGamblingConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddResponsibleGamblingConfigRequestValidationError{}

// Validate checks the field values on AddResponsibleGamblingConfigResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AddResponsibleGamblingConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddResponsibleGamblingConfigResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddResponsibleGamblingConfigResponseMultiError, or nil if none found.
func (m *AddResponsibleGamblingConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddResponsibleGamblingConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddResponsibleGamblingConfigResponseMultiError(errors)
	}

	return nil
}

// AddResponsibleGamblingConfigResponseMultiError is an error wrapping multiple
// validation errors returned by
// AddResponsibleGamblingConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type AddResponsibleGamblingConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddResponsibleGamblingConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddResponsibleGamblingConfigResponseMultiError) AllErrors() []error { return m }

// AddResponsibleGamblingConfigResponseValidationError is the validation error
// returned by AddResponsibleGamblingConfigResponse.Validate if the designated
// constraints aren't met.
type AddResponsibleGamblingConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddResponsibleGamblingConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddResponsibleGamblingConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddResponsibleGamblingConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddResponsibleGamblingConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddResponsibleGamblingConfigResponseValidationError) ErrorName() string {
	return "AddResponsibleGamblingConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddResponsibleGamblingConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddResponsibleGamblingConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddResponsibleGamblingConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddResponsibleGamblingConfigResponseValidationError{}

// Validate checks the field values on DeleteResponsibleGamblingConfigRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteResponsibleGamblingConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteResponsibleGamblingConfigRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DeleteResponsibleGamblingConfigRequestMultiError, or nil if none found.
func (m *DeleteResponsibleGamblingConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResponsibleGamblingConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteResponsibleGamblingConfigRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteResponsibleGamblingConfigRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteResponsibleGamblingConfigRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LimitType

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if len(errors) > 0 {
		return DeleteResponsibleGamblingConfigRequestMultiError(errors)
	}

	return nil
}

// DeleteResponsibleGamblingConfigRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteResponsibleGamblingConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteResponsibleGamblingConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResponsibleGamblingConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResponsibleGamblingConfigRequestMultiError) AllErrors() []error { return m }

// DeleteResponsibleGamblingConfigRequestValidationError is the validation
// error returned by DeleteResponsibleGamblingConfigRequest.Validate if the
// designated constraints aren't met.
type DeleteResponsibleGamblingConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponsibleGamblingConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponsibleGamblingConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponsibleGamblingConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponsibleGamblingConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponsibleGamblingConfigRequestValidationError) ErrorName() string {
	return "DeleteResponsibleGamblingConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteResponsibleGamblingConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponsibleGamblingConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponsibleGamblingConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponsibleGamblingConfigRequestValidationError{}

// Validate checks the field values on DeleteResponsibleGamblingConfigResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteResponsibleGamblingConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteResponsibleGamblingConfigResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DeleteResponsibleGamblingConfigResponseMultiError, or nil if none found.
func (m *DeleteResponsibleGamblingConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResponsibleGamblingConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteResponsibleGamblingConfigResponseMultiError(errors)
	}

	return nil
}

// DeleteResponsibleGamblingConfigResponseMultiError is an error wrapping
// multiple validation errors returned by
// DeleteResponsibleGamblingConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteResponsibleGamblingConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResponsibleGamblingConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResponsibleGamblingConfigResponseMultiError) AllErrors() []error { return m }

// DeleteResponsibleGamblingConfigResponseValidationError is the validation
// error returned by DeleteResponsibleGamblingConfigResponse.Validate if the
// designated constraints aren't met.
type DeleteResponsibleGamblingConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponsibleGamblingConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponsibleGamblingConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponsibleGamblingConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponsibleGamblingConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponsibleGamblingConfigResponseValidationError) ErrorName() string {
	return "DeleteResponsibleGamblingConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteResponsibleGamblingConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponsibleGamblingConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponsibleGamblingConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponsibleGamblingConfigResponseValidationError{}

// Validate checks the field values on GetResponsibleGamblingConfigRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetResponsibleGamblingConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResponsibleGamblingConfigRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetResponsibleGamblingConfigRequestMultiError, or nil if none found.
func (m *GetResponsibleGamblingConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResponsibleGamblingConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetResponsibleGamblingConfigRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetResponsibleGamblingConfigRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResponsibleGamblingConfigRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if len(errors) > 0 {
		return GetResponsibleGamblingConfigRequestMultiError(errors)
	}

	return nil
}

// GetResponsibleGamblingConfigRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetResponsibleGamblingConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type GetResponsibleGamblingConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResponsibleGamblingConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResponsibleGamblingConfigRequestMultiError) AllErrors() []error { return m }

// GetResponsibleGamblingConfigRequestValidationError is the validation error
// returned by GetResponsibleGamblingConfigRequest.Validate if the designated
// constraints aren't met.
type GetResponsibleGamblingConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResponsibleGamblingConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResponsibleGamblingConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResponsibleGamblingConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResponsibleGamblingConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResponsibleGamblingConfigRequestValidationError) ErrorName() string {
	return "GetResponsibleGamblingConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetResponsibleGamblingConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResponsibleGamblingConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResponsibleGamblingConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResponsibleGamblingConfigRequestValidationError{}

// Validate checks the field values on ResponsibleGamblingStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResponsibleGamblingStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponsibleGamblingStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResponsibleGamblingStatusMultiError, or nil if none found.
func (m *ResponsibleGamblingStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponsibleGamblingStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LoginAllowed

	// no validation rules for DepositAllowed

	// no validation rules for WithdrawalAllowed

	// no validation rules for GameBetAllowed

	// no validation rules for SelfExclusionActive

	// no validation rules for BreakInPlayActive

	// no validation rules for TimeLimitsActive

	if all {
		switch v := interface{}(m.GetTimeLimitsNextInactiveTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponsibleGamblingStatusValidationError{
					field:  "TimeLimitsNextInactiveTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponsibleGamblingStatusValidationError{
					field:  "TimeLimitsNextInactiveTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeLimitsNextInactiveTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponsibleGamblingStatusValidationError{
				field:  "TimeLimitsNextInactiveTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResponsibleGamblingStatusMultiError(errors)
	}

	return nil
}

// ResponsibleGamblingStatusMultiError is an error wrapping multiple validation
// errors returned by ResponsibleGamblingStatus.ValidateAll() if the
// designated constraints aren't met.
type ResponsibleGamblingStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponsibleGamblingStatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponsibleGamblingStatusMultiError) AllErrors() []error { return m }

// ResponsibleGamblingStatusValidationError is the validation error returned by
// ResponsibleGamblingStatus.Validate if the designated constraints aren't met.
type ResponsibleGamblingStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponsibleGamblingStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponsibleGamblingStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponsibleGamblingStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponsibleGamblingStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponsibleGamblingStatusValidationError) ErrorName() string {
	return "ResponsibleGamblingStatusValidationError"
}

// Error satisfies the builtin error interface
func (e ResponsibleGamblingStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponsibleGamblingStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponsibleGamblingStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponsibleGamblingStatusValidationError{}

// Validate checks the field values on ResponsibleGamblingDeleteSchedule with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ResponsibleGamblingDeleteSchedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponsibleGamblingDeleteSchedule
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ResponsibleGamblingDeleteScheduleMultiError, or nil if none found.
func (m *ResponsibleGamblingDeleteSchedule) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponsibleGamblingDeleteSchedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSelfExclusionDeleteScheduleTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponsibleGamblingDeleteScheduleValidationError{
					field:  "SelfExclusionDeleteScheduleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponsibleGamblingDeleteScheduleValidationError{
					field:  "SelfExclusionDeleteScheduleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSelfExclusionDeleteScheduleTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponsibleGamblingDeleteScheduleValidationError{
				field:  "SelfExclusionDeleteScheduleTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBreakInPlayDeleteScheduleTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponsibleGamblingDeleteScheduleValidationError{
					field:  "BreakInPlayDeleteScheduleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponsibleGamblingDeleteScheduleValidationError{
					field:  "BreakInPlayDeleteScheduleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBreakInPlayDeleteScheduleTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponsibleGamblingDeleteScheduleValidationError{
				field:  "BreakInPlayDeleteScheduleTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeLimitsDeleteScheduleTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponsibleGamblingDeleteScheduleValidationError{
					field:  "TimeLimitsDeleteScheduleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponsibleGamblingDeleteScheduleValidationError{
					field:  "TimeLimitsDeleteScheduleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeLimitsDeleteScheduleTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponsibleGamblingDeleteScheduleValidationError{
				field:  "TimeLimitsDeleteScheduleTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResponsibleGamblingDeleteScheduleMultiError(errors)
	}

	return nil
}

// ResponsibleGamblingDeleteScheduleMultiError is an error wrapping multiple
// validation errors returned by
// ResponsibleGamblingDeleteSchedule.ValidateAll() if the designated
// constraints aren't met.
type ResponsibleGamblingDeleteScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponsibleGamblingDeleteScheduleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponsibleGamblingDeleteScheduleMultiError) AllErrors() []error { return m }

// ResponsibleGamblingDeleteScheduleValidationError is the validation error
// returned by ResponsibleGamblingDeleteSchedule.Validate if the designated
// constraints aren't met.
type ResponsibleGamblingDeleteScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponsibleGamblingDeleteScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponsibleGamblingDeleteScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponsibleGamblingDeleteScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponsibleGamblingDeleteScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponsibleGamblingDeleteScheduleValidationError) ErrorName() string {
	return "ResponsibleGamblingDeleteScheduleValidationError"
}

// Error satisfies the builtin error interface
func (e ResponsibleGamblingDeleteScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponsibleGamblingDeleteSchedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponsibleGamblingDeleteScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponsibleGamblingDeleteScheduleValidationError{}

// Validate checks the field values on GetResponsibleGamblingConfigResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetResponsibleGamblingConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResponsibleGamblingConfigResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetResponsibleGamblingConfigResponseMultiError, or nil if none found.
func (m *GetResponsibleGamblingConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResponsibleGamblingConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponsibleGamblingConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetResponsibleGamblingConfigResponseValidationError{
					field:  "ResponsibleGamblingConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetResponsibleGamblingConfigResponseValidationError{
					field:  "ResponsibleGamblingConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponsibleGamblingConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResponsibleGamblingConfigResponseValidationError{
				field:  "ResponsibleGamblingConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResponsibleGamblingStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetResponsibleGamblingConfigResponseValidationError{
					field:  "ResponsibleGamblingStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetResponsibleGamblingConfigResponseValidationError{
					field:  "ResponsibleGamblingStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponsibleGamblingStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResponsibleGamblingConfigResponseValidationError{
				field:  "ResponsibleGamblingStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResponsibleGamblingDeleteSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetResponsibleGamblingConfigResponseValidationError{
					field:  "ResponsibleGamblingDeleteSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetResponsibleGamblingConfigResponseValidationError{
					field:  "ResponsibleGamblingDeleteSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponsibleGamblingDeleteSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResponsibleGamblingConfigResponseValidationError{
				field:  "ResponsibleGamblingDeleteSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetResponsibleGamblingConfigResponseMultiError(errors)
	}

	return nil
}

// GetResponsibleGamblingConfigResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetResponsibleGamblingConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type GetResponsibleGamblingConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResponsibleGamblingConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResponsibleGamblingConfigResponseMultiError) AllErrors() []error { return m }

// GetResponsibleGamblingConfigResponseValidationError is the validation error
// returned by GetResponsibleGamblingConfigResponse.Validate if the designated
// constraints aren't met.
type GetResponsibleGamblingConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResponsibleGamblingConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResponsibleGamblingConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResponsibleGamblingConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResponsibleGamblingConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResponsibleGamblingConfigResponseValidationError) ErrorName() string {
	return "GetResponsibleGamblingConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetResponsibleGamblingConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResponsibleGamblingConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResponsibleGamblingConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResponsibleGamblingConfigResponseValidationError{}

// Validate checks the field values on UserIdentityAuditRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserIdentityAuditRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserIdentityAuditRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserIdentityAuditRequestMultiError, or nil if none found.
func (m *UserIdentityAuditRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserIdentityAuditRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Audit

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserIdentityAuditRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserIdentityAuditRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserIdentityAuditRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserIdentityAuditRequestMultiError(errors)
	}

	return nil
}

// UserIdentityAuditRequestMultiError is an error wrapping multiple validation
// errors returned by UserIdentityAuditRequest.ValidateAll() if the designated
// constraints aren't met.
type UserIdentityAuditRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserIdentityAuditRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserIdentityAuditRequestMultiError) AllErrors() []error { return m }

// UserIdentityAuditRequestValidationError is the validation error returned by
// UserIdentityAuditRequest.Validate if the designated constraints aren't met.
type UserIdentityAuditRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserIdentityAuditRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserIdentityAuditRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserIdentityAuditRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserIdentityAuditRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserIdentityAuditRequestValidationError) ErrorName() string {
	return "UserIdentityAuditRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserIdentityAuditRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserIdentityAuditRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserIdentityAuditRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserIdentityAuditRequestValidationError{}

// Validate checks the field values on UserIdentityAuditResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserIdentityAuditResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserIdentityAuditResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserIdentityAuditResponseMultiError, or nil if none found.
func (m *UserIdentityAuditResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserIdentityAuditResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserIdentityAuditResponseMultiError(errors)
	}

	return nil
}

// UserIdentityAuditResponseMultiError is an error wrapping multiple validation
// errors returned by UserIdentityAuditResponse.ValidateAll() if the
// designated constraints aren't met.
type UserIdentityAuditResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserIdentityAuditResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserIdentityAuditResponseMultiError) AllErrors() []error { return m }

// UserIdentityAuditResponseValidationError is the validation error returned by
// UserIdentityAuditResponse.Validate if the designated constraints aren't met.
type UserIdentityAuditResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserIdentityAuditResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserIdentityAuditResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserIdentityAuditResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserIdentityAuditResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserIdentityAuditResponseValidationError) ErrorName() string {
	return "UserIdentityAuditResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserIdentityAuditResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserIdentityAuditResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserIdentityAuditResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserIdentityAuditResponseValidationError{}

// Validate checks the field values on UserIdentityListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserIdentityListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserIdentityListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserIdentityListRequestMultiError, or nil if none found.
func (m *UserIdentityListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserIdentityListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserIdentityListRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserIdentityListRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserIdentityListRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserIdentityListRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserIdentityListRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserIdentityListRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserIdentityListRequestMultiError(errors)
	}

	return nil
}

// UserIdentityListRequestMultiError is an error wrapping multiple validation
// errors returned by UserIdentityListRequest.ValidateAll() if the designated
// constraints aren't met.
type UserIdentityListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserIdentityListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserIdentityListRequestMultiError) AllErrors() []error { return m }

// UserIdentityListRequestValidationError is the validation error returned by
// UserIdentityListRequest.Validate if the designated constraints aren't met.
type UserIdentityListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserIdentityListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserIdentityListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserIdentityListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserIdentityListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserIdentityListRequestValidationError) ErrorName() string {
	return "UserIdentityListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserIdentityListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserIdentityListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserIdentityListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserIdentityListRequestValidationError{}

// Validate checks the field values on UserIdentityListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserIdentityListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserIdentityListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserIdentityListResponseMultiError, or nil if none found.
func (m *UserIdentityListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserIdentityListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserIdentity() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserIdentityListResponseValidationError{
						field:  fmt.Sprintf("UserIdentity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserIdentityListResponseValidationError{
						field:  fmt.Sprintf("UserIdentity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserIdentityListResponseValidationError{
					field:  fmt.Sprintf("UserIdentity[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for ApprovedCount

	// no validation rules for DeclinedCount

	// no validation rules for PendingCount

	if len(errors) > 0 {
		return UserIdentityListResponseMultiError(errors)
	}

	return nil
}

// UserIdentityListResponseMultiError is an error wrapping multiple validation
// errors returned by UserIdentityListResponse.ValidateAll() if the designated
// constraints aren't met.
type UserIdentityListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserIdentityListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserIdentityListResponseMultiError) AllErrors() []error { return m }

// UserIdentityListResponseValidationError is the validation error returned by
// UserIdentityListResponse.Validate if the designated constraints aren't met.
type UserIdentityListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserIdentityListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserIdentityListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserIdentityListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserIdentityListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserIdentityListResponseValidationError) ErrorName() string {
	return "UserIdentityListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserIdentityListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserIdentityListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserIdentityListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserIdentityListResponseValidationError{}

// Validate checks the field values on AddRegisterLoginBlacklistRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddRegisterLoginBlacklistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRegisterLoginBlacklistRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddRegisterLoginBlacklistRequestMultiError, or nil if none found.
func (m *AddRegisterLoginBlacklistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRegisterLoginBlacklistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddRegisterLoginBlacklistRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddRegisterLoginBlacklistRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddRegisterLoginBlacklistRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddRegisterLoginBlacklistRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddRegisterLoginBlacklistRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddRegisterLoginBlacklistRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IdType

	if len(errors) > 0 {
		return AddRegisterLoginBlacklistRequestMultiError(errors)
	}

	return nil
}

// AddRegisterLoginBlacklistRequestMultiError is an error wrapping multiple
// validation errors returned by
// AddRegisterLoginBlacklistRequest.ValidateAll() if the designated
// constraints aren't met.
type AddRegisterLoginBlacklistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRegisterLoginBlacklistRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRegisterLoginBlacklistRequestMultiError) AllErrors() []error { return m }

// AddRegisterLoginBlacklistRequestValidationError is the validation error
// returned by AddRegisterLoginBlacklistRequest.Validate if the designated
// constraints aren't met.
type AddRegisterLoginBlacklistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRegisterLoginBlacklistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRegisterLoginBlacklistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRegisterLoginBlacklistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRegisterLoginBlacklistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRegisterLoginBlacklistRequestValidationError) ErrorName() string {
	return "AddRegisterLoginBlacklistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddRegisterLoginBlacklistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRegisterLoginBlacklistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRegisterLoginBlacklistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRegisterLoginBlacklistRequestValidationError{}

// Validate checks the field values on AddRegisterLoginBlacklistResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddRegisterLoginBlacklistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRegisterLoginBlacklistResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddRegisterLoginBlacklistResponseMultiError, or nil if none found.
func (m *AddRegisterLoginBlacklistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRegisterLoginBlacklistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddRegisterLoginBlacklistResponseMultiError(errors)
	}

	return nil
}

// AddRegisterLoginBlacklistResponseMultiError is an error wrapping multiple
// validation errors returned by
// AddRegisterLoginBlacklistResponse.ValidateAll() if the designated
// constraints aren't met.
type AddRegisterLoginBlacklistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRegisterLoginBlacklistResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRegisterLoginBlacklistResponseMultiError) AllErrors() []error { return m }

// AddRegisterLoginBlacklistResponseValidationError is the validation error
// returned by AddRegisterLoginBlacklistResponse.Validate if the designated
// constraints aren't met.
type AddRegisterLoginBlacklistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRegisterLoginBlacklistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRegisterLoginBlacklistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRegisterLoginBlacklistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRegisterLoginBlacklistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRegisterLoginBlacklistResponseValidationError) ErrorName() string {
	return "AddRegisterLoginBlacklistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddRegisterLoginBlacklistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRegisterLoginBlacklistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRegisterLoginBlacklistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRegisterLoginBlacklistResponseValidationError{}

// Validate checks the field values on DeleteRegisterLoginBlacklistRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteRegisterLoginBlacklistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRegisterLoginBlacklistRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteRegisterLoginBlacklistRequestMultiError, or nil if none found.
func (m *DeleteRegisterLoginBlacklistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRegisterLoginBlacklistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteRegisterLoginBlacklistRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteRegisterLoginBlacklistRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteRegisterLoginBlacklistRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteRegisterLoginBlacklistRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteRegisterLoginBlacklistRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteRegisterLoginBlacklistRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IdType

	if len(errors) > 0 {
		return DeleteRegisterLoginBlacklistRequestMultiError(errors)
	}

	return nil
}

// DeleteRegisterLoginBlacklistRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteRegisterLoginBlacklistRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteRegisterLoginBlacklistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRegisterLoginBlacklistRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRegisterLoginBlacklistRequestMultiError) AllErrors() []error { return m }

// DeleteRegisterLoginBlacklistRequestValidationError is the validation error
// returned by DeleteRegisterLoginBlacklistRequest.Validate if the designated
// constraints aren't met.
type DeleteRegisterLoginBlacklistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRegisterLoginBlacklistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRegisterLoginBlacklistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRegisterLoginBlacklistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRegisterLoginBlacklistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRegisterLoginBlacklistRequestValidationError) ErrorName() string {
	return "DeleteRegisterLoginBlacklistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRegisterLoginBlacklistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRegisterLoginBlacklistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRegisterLoginBlacklistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRegisterLoginBlacklistRequestValidationError{}

// Validate checks the field values on DeleteRegisterLoginBlacklistResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteRegisterLoginBlacklistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRegisterLoginBlacklistResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteRegisterLoginBlacklistResponseMultiError, or nil if none found.
func (m *DeleteRegisterLoginBlacklistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRegisterLoginBlacklistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRegisterLoginBlacklistResponseMultiError(errors)
	}

	return nil
}

// DeleteRegisterLoginBlacklistResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteRegisterLoginBlacklistResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteRegisterLoginBlacklistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRegisterLoginBlacklistResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRegisterLoginBlacklistResponseMultiError) AllErrors() []error { return m }

// DeleteRegisterLoginBlacklistResponseValidationError is the validation error
// returned by DeleteRegisterLoginBlacklistResponse.Validate if the designated
// constraints aren't met.
type DeleteRegisterLoginBlacklistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRegisterLoginBlacklistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRegisterLoginBlacklistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRegisterLoginBlacklistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRegisterLoginBlacklistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRegisterLoginBlacklistResponseValidationError) ErrorName() string {
	return "DeleteRegisterLoginBlacklistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRegisterLoginBlacklistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRegisterLoginBlacklistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRegisterLoginBlacklistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRegisterLoginBlacklistResponseValidationError{}

// Validate checks the field values on ListRegisterLoginBlacklistRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListRegisterLoginBlacklistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRegisterLoginBlacklistRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListRegisterLoginBlacklistRequestMultiError, or nil if none found.
func (m *ListRegisterLoginBlacklistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegisterLoginBlacklistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRegisterLoginBlacklistRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRegisterLoginBlacklistRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRegisterLoginBlacklistRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRegisterLoginBlacklistRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRegisterLoginBlacklistRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRegisterLoginBlacklistRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IdType

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListRegisterLoginBlacklistRequestMultiError(errors)
	}

	return nil
}

// ListRegisterLoginBlacklistRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListRegisterLoginBlacklistRequest.ValidateAll() if the designated
// constraints aren't met.
type ListRegisterLoginBlacklistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegisterLoginBlacklistRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegisterLoginBlacklistRequestMultiError) AllErrors() []error { return m }

// ListRegisterLoginBlacklistRequestValidationError is the validation error
// returned by ListRegisterLoginBlacklistRequest.Validate if the designated
// constraints aren't met.
type ListRegisterLoginBlacklistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegisterLoginBlacklistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegisterLoginBlacklistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegisterLoginBlacklistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegisterLoginBlacklistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegisterLoginBlacklistRequestValidationError) ErrorName() string {
	return "ListRegisterLoginBlacklistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegisterLoginBlacklistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegisterLoginBlacklistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegisterLoginBlacklistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegisterLoginBlacklistRequestValidationError{}

// Validate checks the field values on ListRegisterLoginBlacklistResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListRegisterLoginBlacklistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRegisterLoginBlacklistResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListRegisterLoginBlacklistResponseMultiError, or nil if none found.
func (m *ListRegisterLoginBlacklistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegisterLoginBlacklistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRegisterLoginBlacklists() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRegisterLoginBlacklistResponseValidationError{
						field:  fmt.Sprintf("RegisterLoginBlacklists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRegisterLoginBlacklistResponseValidationError{
						field:  fmt.Sprintf("RegisterLoginBlacklists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRegisterLoginBlacklistResponseValidationError{
					field:  fmt.Sprintf("RegisterLoginBlacklists[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return ListRegisterLoginBlacklistResponseMultiError(errors)
	}

	return nil
}

// ListRegisterLoginBlacklistResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListRegisterLoginBlacklistResponse.ValidateAll() if the designated
// constraints aren't met.
type ListRegisterLoginBlacklistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegisterLoginBlacklistResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegisterLoginBlacklistResponseMultiError) AllErrors() []error { return m }

// ListRegisterLoginBlacklistResponseValidationError is the validation error
// returned by ListRegisterLoginBlacklistResponse.Validate if the designated
// constraints aren't met.
type ListRegisterLoginBlacklistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegisterLoginBlacklistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegisterLoginBlacklistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegisterLoginBlacklistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegisterLoginBlacklistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegisterLoginBlacklistResponseValidationError) ErrorName() string {
	return "ListRegisterLoginBlacklistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegisterLoginBlacklistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegisterLoginBlacklistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegisterLoginBlacklistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegisterLoginBlacklistResponseValidationError{}

// Validate checks the field values on OperatorRegisterLimitConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OperatorRegisterLimitConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperatorRegisterLimitConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperatorRegisterLimitConfigMultiError, or nil if none found.
func (m *OperatorRegisterLimitConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *OperatorRegisterLimitConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RegistrationLimitPerIp

	if len(errors) > 0 {
		return OperatorRegisterLimitConfigMultiError(errors)
	}

	return nil
}

// OperatorRegisterLimitConfigMultiError is an error wrapping multiple
// validation errors returned by OperatorRegisterLimitConfig.ValidateAll() if
// the designated constraints aren't met.
type OperatorRegisterLimitConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperatorRegisterLimitConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperatorRegisterLimitConfigMultiError) AllErrors() []error { return m }

// OperatorRegisterLimitConfigValidationError is the validation error returned
// by OperatorRegisterLimitConfig.Validate if the designated constraints
// aren't met.
type OperatorRegisterLimitConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperatorRegisterLimitConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperatorRegisterLimitConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperatorRegisterLimitConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperatorRegisterLimitConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperatorRegisterLimitConfigValidationError) ErrorName() string {
	return "OperatorRegisterLimitConfigValidationError"
}

// Error satisfies the builtin error interface
func (e OperatorRegisterLimitConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperatorRegisterLimitConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperatorRegisterLimitConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperatorRegisterLimitConfigValidationError{}

// Validate checks the field values on SetOperatorRegisterLimitConfigRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SetOperatorRegisterLimitConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOperatorRegisterLimitConfigRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SetOperatorRegisterLimitConfigRequestMultiError, or nil if none found.
func (m *SetOperatorRegisterLimitConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOperatorRegisterLimitConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetOperatorRegisterLimitConfigRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetOperatorRegisterLimitConfigRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetOperatorRegisterLimitConfigRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetOperatorRegisterLimitConfigRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetOperatorRegisterLimitConfigRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetOperatorRegisterLimitConfigRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetConfig()))
		i := 0
		for key := range m.GetConfig() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfig()[key]
			_ = val

			// no validation rules for Config[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, SetOperatorRegisterLimitConfigRequestValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, SetOperatorRegisterLimitConfigRequestValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return SetOperatorRegisterLimitConfigRequestValidationError{
						field:  fmt.Sprintf("Config[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return SetOperatorRegisterLimitConfigRequestMultiError(errors)
	}

	return nil
}

// SetOperatorRegisterLimitConfigRequestMultiError is an error wrapping
// multiple validation errors returned by
// SetOperatorRegisterLimitConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type SetOperatorRegisterLimitConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOperatorRegisterLimitConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOperatorRegisterLimitConfigRequestMultiError) AllErrors() []error { return m }

// SetOperatorRegisterLimitConfigRequestValidationError is the validation error
// returned by SetOperatorRegisterLimitConfigRequest.Validate if the
// designated constraints aren't met.
type SetOperatorRegisterLimitConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOperatorRegisterLimitConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOperatorRegisterLimitConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOperatorRegisterLimitConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOperatorRegisterLimitConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOperatorRegisterLimitConfigRequestValidationError) ErrorName() string {
	return "SetOperatorRegisterLimitConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetOperatorRegisterLimitConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOperatorRegisterLimitConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOperatorRegisterLimitConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOperatorRegisterLimitConfigRequestValidationError{}

// Validate checks the field values on SetOperatorRegisterLimitConfigResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SetOperatorRegisterLimitConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SetOperatorRegisterLimitConfigResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SetOperatorRegisterLimitConfigResponseMultiError, or nil if none found.
func (m *SetOperatorRegisterLimitConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOperatorRegisterLimitConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetOperatorRegisterLimitConfigResponseMultiError(errors)
	}

	return nil
}

// SetOperatorRegisterLimitConfigResponseMultiError is an error wrapping
// multiple validation errors returned by
// SetOperatorRegisterLimitConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type SetOperatorRegisterLimitConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOperatorRegisterLimitConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOperatorRegisterLimitConfigResponseMultiError) AllErrors() []error { return m }

// SetOperatorRegisterLimitConfigResponseValidationError is the validation
// error returned by SetOperatorRegisterLimitConfigResponse.Validate if the
// designated constraints aren't met.
type SetOperatorRegisterLimitConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOperatorRegisterLimitConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOperatorRegisterLimitConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOperatorRegisterLimitConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOperatorRegisterLimitConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOperatorRegisterLimitConfigResponseValidationError) ErrorName() string {
	return "SetOperatorRegisterLimitConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetOperatorRegisterLimitConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOperatorRegisterLimitConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOperatorRegisterLimitConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOperatorRegisterLimitConfigResponseValidationError{}

// Validate checks the field values on GetOperatorRegisterLimitConfigRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetOperatorRegisterLimitConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorRegisterLimitConfigRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOperatorRegisterLimitConfigRequestMultiError, or nil if none found.
func (m *GetOperatorRegisterLimitConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorRegisterLimitConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorRegisterLimitConfigRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorRegisterLimitConfigRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorRegisterLimitConfigRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorRegisterLimitConfigRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorRegisterLimitConfigRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorRegisterLimitConfigRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOperatorRegisterLimitConfigRequestMultiError(errors)
	}

	return nil
}

// GetOperatorRegisterLimitConfigRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetOperatorRegisterLimitConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorRegisterLimitConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorRegisterLimitConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorRegisterLimitConfigRequestMultiError) AllErrors() []error { return m }

// GetOperatorRegisterLimitConfigRequestValidationError is the validation error
// returned by GetOperatorRegisterLimitConfigRequest.Validate if the
// designated constraints aren't met.
type GetOperatorRegisterLimitConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorRegisterLimitConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorRegisterLimitConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorRegisterLimitConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorRegisterLimitConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorRegisterLimitConfigRequestValidationError) ErrorName() string {
	return "GetOperatorRegisterLimitConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorRegisterLimitConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorRegisterLimitConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorRegisterLimitConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorRegisterLimitConfigRequestValidationError{}

// Validate checks the field values on GetOperatorRegisterLimitConfigResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetOperatorRegisterLimitConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetOperatorRegisterLimitConfigResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetOperatorRegisterLimitConfigResponseMultiError, or nil if none found.
func (m *GetOperatorRegisterLimitConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorRegisterLimitConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetConfig()))
		i := 0
		for key := range m.GetConfig() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfig()[key]
			_ = val

			// no validation rules for Config[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetOperatorRegisterLimitConfigResponseValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetOperatorRegisterLimitConfigResponseValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetOperatorRegisterLimitConfigResponseValidationError{
						field:  fmt.Sprintf("Config[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetOperatorRegisterLimitConfigResponseMultiError(errors)
	}

	return nil
}

// GetOperatorRegisterLimitConfigResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetOperatorRegisterLimitConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorRegisterLimitConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorRegisterLimitConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorRegisterLimitConfigResponseMultiError) AllErrors() []error { return m }

// GetOperatorRegisterLimitConfigResponseValidationError is the validation
// error returned by GetOperatorRegisterLimitConfigResponse.Validate if the
// designated constraints aren't met.
type GetOperatorRegisterLimitConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorRegisterLimitConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorRegisterLimitConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorRegisterLimitConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorRegisterLimitConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorRegisterLimitConfigResponseValidationError) ErrorName() string {
	return "GetOperatorRegisterLimitConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorRegisterLimitConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorRegisterLimitConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorRegisterLimitConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorRegisterLimitConfigResponseValidationError{}

// Validate checks the field values on CloseAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloseAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloseAccountRequestMultiError, or nil if none found.
func (m *CloseAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CloseAccountRequestMultiError(errors)
	}

	return nil
}

// CloseAccountRequestMultiError is an error wrapping multiple validation
// errors returned by CloseAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type CloseAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseAccountRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseAccountRequestMultiError) AllErrors() []error { return m }

// CloseAccountRequestValidationError is the validation error returned by
// CloseAccountRequest.Validate if the designated constraints aren't met.
type CloseAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseAccountRequestValidationError) ErrorName() string {
	return "CloseAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloseAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseAccountRequestValidationError{}

// Validate checks the field values on CloseAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloseAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloseAccountResponseMultiError, or nil if none found.
func (m *CloseAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CloseAccountResponseMultiError(errors)
	}

	return nil
}

// CloseAccountResponseMultiError is an error wrapping multiple validation
// errors returned by CloseAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type CloseAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseAccountResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseAccountResponseMultiError) AllErrors() []error { return m }

// CloseAccountResponseValidationError is the validation error returned by
// CloseAccountResponse.Validate if the designated constraints aren't met.
type CloseAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseAccountResponseValidationError) ErrorName() string {
	return "CloseAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloseAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseAccountResponseValidationError{}

// Validate checks the field values on ListUsersResponse_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUsersResponse_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersResponse_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersResponse_UserMultiError, or nil if none found.
func (m *ListUsersResponse_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersResponse_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorName

	// no validation rules for CompanyOperatorName

	// no validation rules for RetailerOperatorName

	// no validation rules for SystemOperatorName

	// no validation rules for UserId

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for VipLevel

	// no validation rules for KycLevel

	// no validation rules for DepositUsd

	// no validation rules for WithdrawUsd

	// no validation rules for DepositReportingCurrency

	// no validation rules for WithdrawReportingCurrency

	// no validation rules for BanWithdraw

	// no validation rules for BanGame

	// no validation rules for BanLogin

	// no validation rules for Online

	if all {
		switch v := interface{}(m.GetLastLoginAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "LastLoginAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "LastLoginAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastLoginAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersResponse_UserValidationError{
				field:  "LastLoginAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRegisteredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "RegisteredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "RegisteredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegisteredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersResponse_UserValidationError{
				field:  "RegisteredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Country

	// no validation rules for RegistrationIp

	// no validation rules for Enabled

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersResponse_UserValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersResponse_UserValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListUsersResponse_UserMultiError(errors)
	}

	return nil
}

// ListUsersResponse_UserMultiError is an error wrapping multiple validation
// errors returned by ListUsersResponse_User.ValidateAll() if the designated
// constraints aren't met.
type ListUsersResponse_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersResponse_UserMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersResponse_UserMultiError) AllErrors() []error { return m }

// ListUsersResponse_UserValidationError is the validation error returned by
// ListUsersResponse_User.Validate if the designated constraints aren't met.
type ListUsersResponse_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponse_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponse_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponse_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponse_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponse_UserValidationError) ErrorName() string {
	return "ListUsersResponse_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponse_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponse_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponse_UserValidationError{}

// Validate checks the field values on GetCommentsByUserIdResponse_Comment with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetCommentsByUserIdResponse_Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentsByUserIdResponse_Comment
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetCommentsByUserIdResponse_CommentMultiError, or nil if none found.
func (m *GetCommentsByUserIdResponse_Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentsByUserIdResponse_Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	// no validation rules for UserId

	// no validation rules for AuthorUserId

	// no validation rules for Content

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GetCommentsByUserIdResponse_CommentMultiError(errors)
	}

	return nil
}

// GetCommentsByUserIdResponse_CommentMultiError is an error wrapping multiple
// validation errors returned by
// GetCommentsByUserIdResponse_Comment.ValidateAll() if the designated
// constraints aren't met.
type GetCommentsByUserIdResponse_CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentsByUserIdResponse_CommentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentsByUserIdResponse_CommentMultiError) AllErrors() []error { return m }

// GetCommentsByUserIdResponse_CommentValidationError is the validation error
// returned by GetCommentsByUserIdResponse_Comment.Validate if the designated
// constraints aren't met.
type GetCommentsByUserIdResponse_CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentsByUserIdResponse_CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentsByUserIdResponse_CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentsByUserIdResponse_CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentsByUserIdResponse_CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentsByUserIdResponse_CommentValidationError) ErrorName() string {
	return "GetCommentsByUserIdResponse_CommentValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentsByUserIdResponse_CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentsByUserIdResponse_Comment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentsByUserIdResponse_CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentsByUserIdResponse_CommentValidationError{}

// Validate checks the field values on GetUserProfileResponse_IpInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileResponse_IpInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileResponse_IpInfo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserProfileResponse_IpInfoMultiError, or nil if none found.
func (m *GetUserProfileResponse_IpInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse_IpInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ip

	// no validation rules for Count

	// no validation rules for Country

	if len(errors) > 0 {
		return GetUserProfileResponse_IpInfoMultiError(errors)
	}

	return nil
}

// GetUserProfileResponse_IpInfoMultiError is an error wrapping multiple
// validation errors returned by GetUserProfileResponse_IpInfo.ValidateAll()
// if the designated constraints aren't met.
type GetUserProfileResponse_IpInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponse_IpInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponse_IpInfoMultiError) AllErrors() []error { return m }

// GetUserProfileResponse_IpInfoValidationError is the validation error
// returned by GetUserProfileResponse_IpInfo.Validate if the designated
// constraints aren't met.
type GetUserProfileResponse_IpInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponse_IpInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponse_IpInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponse_IpInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponse_IpInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponse_IpInfoValidationError) ErrorName() string {
	return "GetUserProfileResponse_IpInfoValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponse_IpInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse_IpInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponse_IpInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponse_IpInfoValidationError{}

// Validate checks the field values on
// GetUserProfileResponse_RegistrationRecord with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileResponse_RegistrationRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserProfileResponse_RegistrationRecord with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetUserProfileResponse_RegistrationRecordMultiError, or nil if none found.
func (m *GetUserProfileResponse_RegistrationRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse_RegistrationRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRegisteredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponse_RegistrationRecordValidationError{
					field:  "RegisteredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponse_RegistrationRecordValidationError{
					field:  "RegisteredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegisteredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponse_RegistrationRecordValidationError{
				field:  "RegisteredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIpInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponse_RegistrationRecordValidationError{
					field:  "IpInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponse_RegistrationRecordValidationError{
					field:  "IpInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIpInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponse_RegistrationRecordValidationError{
				field:  "IpInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Device

	// no validation rules for Method

	// no validation rules for Browser

	// no validation rules for App

	// no validation rules for Mobile

	// no validation rules for Email

	// no validation rules for Username

	// no validation rules for Source

	if len(errors) > 0 {
		return GetUserProfileResponse_RegistrationRecordMultiError(errors)
	}

	return nil
}

// GetUserProfileResponse_RegistrationRecordMultiError is an error wrapping
// multiple validation errors returned by
// GetUserProfileResponse_RegistrationRecord.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileResponse_RegistrationRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponse_RegistrationRecordMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponse_RegistrationRecordMultiError) AllErrors() []error { return m }

// GetUserProfileResponse_RegistrationRecordValidationError is the validation
// error returned by GetUserProfileResponse_RegistrationRecord.Validate if the
// designated constraints aren't met.
type GetUserProfileResponse_RegistrationRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponse_RegistrationRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponse_RegistrationRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponse_RegistrationRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponse_RegistrationRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponse_RegistrationRecordValidationError) ErrorName() string {
	return "GetUserProfileResponse_RegistrationRecordValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponse_RegistrationRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse_RegistrationRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponse_RegistrationRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponse_RegistrationRecordValidationError{}

// Validate checks the field values on GetUserProfileResponse_LoginRecord with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserProfileResponse_LoginRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileResponse_LoginRecord
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserProfileResponse_LoginRecordMultiError, or nil if none found.
func (m *GetUserProfileResponse_LoginRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse_LoginRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLoginAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponse_LoginRecordValidationError{
					field:  "LoginAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponse_LoginRecordValidationError{
					field:  "LoginAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLoginAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponse_LoginRecordValidationError{
				field:  "LoginAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIpInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponse_LoginRecordValidationError{
					field:  "IpInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponse_LoginRecordValidationError{
					field:  "IpInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIpInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponse_LoginRecordValidationError{
				field:  "IpInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Device

	// no validation rules for Method

	// no validation rules for Browser

	// no validation rules for App

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for Username

	if len(errors) > 0 {
		return GetUserProfileResponse_LoginRecordMultiError(errors)
	}

	return nil
}

// GetUserProfileResponse_LoginRecordMultiError is an error wrapping multiple
// validation errors returned by
// GetUserProfileResponse_LoginRecord.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileResponse_LoginRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponse_LoginRecordMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponse_LoginRecordMultiError) AllErrors() []error { return m }

// GetUserProfileResponse_LoginRecordValidationError is the validation error
// returned by GetUserProfileResponse_LoginRecord.Validate if the designated
// constraints aren't met.
type GetUserProfileResponse_LoginRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponse_LoginRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponse_LoginRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponse_LoginRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponse_LoginRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponse_LoginRecordValidationError) ErrorName() string {
	return "GetUserProfileResponse_LoginRecordValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponse_LoginRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse_LoginRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponse_LoginRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponse_LoginRecordValidationError{}

// Validate checks the field values on GetUserProfileResponse_Comment with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileResponse_Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileResponse_Comment with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserProfileResponse_CommentMultiError, or nil if none found.
func (m *GetUserProfileResponse_Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse_Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	// no validation rules for Username

	// no validation rules for AuthorUsername

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponse_CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponse_CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponse_CommentValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserProfileResponse_CommentMultiError(errors)
	}

	return nil
}

// GetUserProfileResponse_CommentMultiError is an error wrapping multiple
// validation errors returned by GetUserProfileResponse_Comment.ValidateAll()
// if the designated constraints aren't met.
type GetUserProfileResponse_CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponse_CommentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponse_CommentMultiError) AllErrors() []error { return m }

// GetUserProfileResponse_CommentValidationError is the validation error
// returned by GetUserProfileResponse_Comment.Validate if the designated
// constraints aren't met.
type GetUserProfileResponse_CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponse_CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponse_CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponse_CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponse_CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponse_CommentValidationError) ErrorName() string {
	return "GetUserProfileResponse_CommentValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponse_CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse_Comment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponse_CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponse_CommentValidationError{}

// Validate checks the field values on GetUserProfileResponse_ChangeRecord with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserProfileResponse_ChangeRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileResponse_ChangeRecord
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserProfileResponse_ChangeRecordMultiError, or nil if none found.
func (m *GetUserProfileResponse_ChangeRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse_ChangeRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetChangedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponse_ChangeRecordValidationError{
					field:  "ChangedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponse_ChangeRecordValidationError{
					field:  "ChangedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChangedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponse_ChangeRecordValidationError{
				field:  "ChangedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for New

	// no validation rules for Old

	// no validation rules for Ip

	// no validation rules for Reviewer

	if len(errors) > 0 {
		return GetUserProfileResponse_ChangeRecordMultiError(errors)
	}

	return nil
}

// GetUserProfileResponse_ChangeRecordMultiError is an error wrapping multiple
// validation errors returned by
// GetUserProfileResponse_ChangeRecord.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileResponse_ChangeRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponse_ChangeRecordMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponse_ChangeRecordMultiError) AllErrors() []error { return m }

// GetUserProfileResponse_ChangeRecordValidationError is the validation error
// returned by GetUserProfileResponse_ChangeRecord.Validate if the designated
// constraints aren't met.
type GetUserProfileResponse_ChangeRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponse_ChangeRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponse_ChangeRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponse_ChangeRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponse_ChangeRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponse_ChangeRecordValidationError) ErrorName() string {
	return "GetUserProfileResponse_ChangeRecordValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponse_ChangeRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse_ChangeRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponse_ChangeRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponse_ChangeRecordValidationError{}

// Validate checks the field values on
// GetOverviewDashboardFromUserResponse_RegisteredUsers with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOverviewDashboardFromUserResponse_RegisteredUsers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetOverviewDashboardFromUserResponse_RegisteredUsers with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetOverviewDashboardFromUserResponse_RegisteredUsersMultiError, or nil if
// none found.
func (m *GetOverviewDashboardFromUserResponse_RegisteredUsers) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOverviewDashboardFromUserResponse_RegisteredUsers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Today

	// no validation rules for Yesterday

	if len(errors) > 0 {
		return GetOverviewDashboardFromUserResponse_RegisteredUsersMultiError(errors)
	}

	return nil
}

// GetOverviewDashboardFromUserResponse_RegisteredUsersMultiError is an error
// wrapping multiple validation errors returned by
// GetOverviewDashboardFromUserResponse_RegisteredUsers.ValidateAll() if the
// designated constraints aren't met.
type GetOverviewDashboardFromUserResponse_RegisteredUsersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOverviewDashboardFromUserResponse_RegisteredUsersMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOverviewDashboardFromUserResponse_RegisteredUsersMultiError) AllErrors() []error { return m }

// GetOverviewDashboardFromUserResponse_RegisteredUsersValidationError is the
// validation error returned by
// GetOverviewDashboardFromUserResponse_RegisteredUsers.Validate if the
// designated constraints aren't met.
type GetOverviewDashboardFromUserResponse_RegisteredUsersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOverviewDashboardFromUserResponse_RegisteredUsersValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetOverviewDashboardFromUserResponse_RegisteredUsersValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetOverviewDashboardFromUserResponse_RegisteredUsersValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetOverviewDashboardFromUserResponse_RegisteredUsersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOverviewDashboardFromUserResponse_RegisteredUsersValidationError) ErrorName() string {
	return "GetOverviewDashboardFromUserResponse_RegisteredUsersValidationError"
}

// Error satisfies the builtin error interface
func (e GetOverviewDashboardFromUserResponse_RegisteredUsersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOverviewDashboardFromUserResponse_RegisteredUsers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOverviewDashboardFromUserResponse_RegisteredUsersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOverviewDashboardFromUserResponse_RegisteredUsersValidationError{}

// Validate checks the field values on
// GetOverviewDashboardFromUserResponse_FirstDepositUsers with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOverviewDashboardFromUserResponse_FirstDepositUsers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetOverviewDashboardFromUserResponse_FirstDepositUsers with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOverviewDashboardFromUserResponse_FirstDepositUsersMultiError, or nil if
// none found.
func (m *GetOverviewDashboardFromUserResponse_FirstDepositUsers) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOverviewDashboardFromUserResponse_FirstDepositUsers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Today

	// no validation rules for Yesterday

	if len(errors) > 0 {
		return GetOverviewDashboardFromUserResponse_FirstDepositUsersMultiError(errors)
	}

	return nil
}

// GetOverviewDashboardFromUserResponse_FirstDepositUsersMultiError is an error
// wrapping multiple validation errors returned by
// GetOverviewDashboardFromUserResponse_FirstDepositUsers.ValidateAll() if the
// designated constraints aren't met.
type GetOverviewDashboardFromUserResponse_FirstDepositUsersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOverviewDashboardFromUserResponse_FirstDepositUsersMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOverviewDashboardFromUserResponse_FirstDepositUsersMultiError) AllErrors() []error {
	return m
}

// GetOverviewDashboardFromUserResponse_FirstDepositUsersValidationError is the
// validation error returned by
// GetOverviewDashboardFromUserResponse_FirstDepositUsers.Validate if the
// designated constraints aren't met.
type GetOverviewDashboardFromUserResponse_FirstDepositUsersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOverviewDashboardFromUserResponse_FirstDepositUsersValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetOverviewDashboardFromUserResponse_FirstDepositUsersValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetOverviewDashboardFromUserResponse_FirstDepositUsersValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetOverviewDashboardFromUserResponse_FirstDepositUsersValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetOverviewDashboardFromUserResponse_FirstDepositUsersValidationError) ErrorName() string {
	return "GetOverviewDashboardFromUserResponse_FirstDepositUsersValidationError"
}

// Error satisfies the builtin error interface
func (e GetOverviewDashboardFromUserResponse_FirstDepositUsersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOverviewDashboardFromUserResponse_FirstDepositUsers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOverviewDashboardFromUserResponse_FirstDepositUsersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOverviewDashboardFromUserResponse_FirstDepositUsersValidationError{}

// Validate checks the field values on
// GetOverviewDashboardFromUserResponse_ActiveUsers with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOverviewDashboardFromUserResponse_ActiveUsers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetOverviewDashboardFromUserResponse_ActiveUsers with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetOverviewDashboardFromUserResponse_ActiveUsersMultiError, or nil if none found.
func (m *GetOverviewDashboardFromUserResponse_ActiveUsers) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOverviewDashboardFromUserResponse_ActiveUsers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Today

	// no validation rules for Yesterday

	if len(errors) > 0 {
		return GetOverviewDashboardFromUserResponse_ActiveUsersMultiError(errors)
	}

	return nil
}

// GetOverviewDashboardFromUserResponse_ActiveUsersMultiError is an error
// wrapping multiple validation errors returned by
// GetOverviewDashboardFromUserResponse_ActiveUsers.ValidateAll() if the
// designated constraints aren't met.
type GetOverviewDashboardFromUserResponse_ActiveUsersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOverviewDashboardFromUserResponse_ActiveUsersMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOverviewDashboardFromUserResponse_ActiveUsersMultiError) AllErrors() []error { return m }

// GetOverviewDashboardFromUserResponse_ActiveUsersValidationError is the
// validation error returned by
// GetOverviewDashboardFromUserResponse_ActiveUsers.Validate if the designated
// constraints aren't met.
type GetOverviewDashboardFromUserResponse_ActiveUsersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOverviewDashboardFromUserResponse_ActiveUsersValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetOverviewDashboardFromUserResponse_ActiveUsersValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetOverviewDashboardFromUserResponse_ActiveUsersValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetOverviewDashboardFromUserResponse_ActiveUsersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOverviewDashboardFromUserResponse_ActiveUsersValidationError) ErrorName() string {
	return "GetOverviewDashboardFromUserResponse_ActiveUsersValidationError"
}

// Error satisfies the builtin error interface
func (e GetOverviewDashboardFromUserResponse_ActiveUsersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOverviewDashboardFromUserResponse_ActiveUsers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOverviewDashboardFromUserResponse_ActiveUsersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOverviewDashboardFromUserResponse_ActiveUsersValidationError{}

// Validate checks the field values on GetOperatorResponse_Operator with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorResponse_Operator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorResponse_Operator with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorResponse_OperatorMultiError, or nil if none found.
func (m *GetOperatorResponse_Operator) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorResponse_Operator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for Name

	// no validation rules for Enabled

	if len(errors) > 0 {
		return GetOperatorResponse_OperatorMultiError(errors)
	}

	return nil
}

// GetOperatorResponse_OperatorMultiError is an error wrapping multiple
// validation errors returned by GetOperatorResponse_Operator.ValidateAll() if
// the designated constraints aren't met.
type GetOperatorResponse_OperatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorResponse_OperatorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorResponse_OperatorMultiError) AllErrors() []error { return m }

// GetOperatorResponse_OperatorValidationError is the validation error returned
// by GetOperatorResponse_Operator.Validate if the designated constraints
// aren't met.
type GetOperatorResponse_OperatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorResponse_OperatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorResponse_OperatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorResponse_OperatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorResponse_OperatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorResponse_OperatorValidationError) ErrorName() string {
	return "GetOperatorResponse_OperatorValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorResponse_OperatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorResponse_Operator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorResponse_OperatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorResponse_OperatorValidationError{}

// Validate checks the field values on GetOperatorsByIdsResponse_Operator with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOperatorsByIdsResponse_Operator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorsByIdsResponse_Operator
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOperatorsByIdsResponse_OperatorMultiError, or nil if none found.
func (m *GetOperatorsByIdsResponse_Operator) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorsByIdsResponse_Operator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for Name

	// no validation rules for Enabled

	if len(errors) > 0 {
		return GetOperatorsByIdsResponse_OperatorMultiError(errors)
	}

	return nil
}

// GetOperatorsByIdsResponse_OperatorMultiError is an error wrapping multiple
// validation errors returned by
// GetOperatorsByIdsResponse_Operator.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorsByIdsResponse_OperatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorsByIdsResponse_OperatorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorsByIdsResponse_OperatorMultiError) AllErrors() []error { return m }

// GetOperatorsByIdsResponse_OperatorValidationError is the validation error
// returned by GetOperatorsByIdsResponse_Operator.Validate if the designated
// constraints aren't met.
type GetOperatorsByIdsResponse_OperatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorsByIdsResponse_OperatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorsByIdsResponse_OperatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorsByIdsResponse_OperatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorsByIdsResponse_OperatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorsByIdsResponse_OperatorValidationError) ErrorName() string {
	return "GetOperatorsByIdsResponse_OperatorValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorsByIdsResponse_OperatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorsByIdsResponse_Operator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorsByIdsResponse_OperatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorsByIdsResponse_OperatorValidationError{}

// Validate checks the field values on ListAllOperatorsResponse_Operator with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListAllOperatorsResponse_Operator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllOperatorsResponse_Operator
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListAllOperatorsResponse_OperatorMultiError, or nil if none found.
func (m *ListAllOperatorsResponse_Operator) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllOperatorsResponse_Operator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RealOperatorId

	// no validation rules for OperatorName

	// no validation rules for Enabled

	// no validation rules for OperatorType

	// no validation rules for ParentOperatorId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAllOperatorsResponse_OperatorValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAllOperatorsResponse_OperatorValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAllOperatorsResponse_OperatorValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAllOperatorsResponse_OperatorMultiError(errors)
	}

	return nil
}

// ListAllOperatorsResponse_OperatorMultiError is an error wrapping multiple
// validation errors returned by
// ListAllOperatorsResponse_Operator.ValidateAll() if the designated
// constraints aren't met.
type ListAllOperatorsResponse_OperatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllOperatorsResponse_OperatorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllOperatorsResponse_OperatorMultiError) AllErrors() []error { return m }

// ListAllOperatorsResponse_OperatorValidationError is the validation error
// returned by ListAllOperatorsResponse_Operator.Validate if the designated
// constraints aren't met.
type ListAllOperatorsResponse_OperatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllOperatorsResponse_OperatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllOperatorsResponse_OperatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllOperatorsResponse_OperatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllOperatorsResponse_OperatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllOperatorsResponse_OperatorValidationError) ErrorName() string {
	return "ListAllOperatorsResponse_OperatorValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllOperatorsResponse_OperatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllOperatorsResponse_Operator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllOperatorsResponse_OperatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllOperatorsResponse_OperatorValidationError{}

// Validate checks the field values on
// ListRetailerOperatorsResponse_OperatorInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRetailerOperatorsResponse_OperatorInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListRetailerOperatorsResponse_OperatorInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListRetailerOperatorsResponse_OperatorInfoMultiError, or nil if none found.
func (m *ListRetailerOperatorsResponse_OperatorInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRetailerOperatorsResponse_OperatorInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRetailerOperatorsResponse_OperatorInfoValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRetailerOperatorsResponse_OperatorInfoValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRetailerOperatorsResponse_OperatorInfoValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RetailerOperatorName

	// no validation rules for CompanyOperatorCount

	// no validation rules for BottomOperatorCount

	// no validation rules for BottomLiveOperatorCount

	// no validation rules for Status

	// no validation rules for SelfCoOperationEnabled

	if len(errors) > 0 {
		return ListRetailerOperatorsResponse_OperatorInfoMultiError(errors)
	}

	return nil
}

// ListRetailerOperatorsResponse_OperatorInfoMultiError is an error wrapping
// multiple validation errors returned by
// ListRetailerOperatorsResponse_OperatorInfo.ValidateAll() if the designated
// constraints aren't met.
type ListRetailerOperatorsResponse_OperatorInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRetailerOperatorsResponse_OperatorInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRetailerOperatorsResponse_OperatorInfoMultiError) AllErrors() []error { return m }

// ListRetailerOperatorsResponse_OperatorInfoValidationError is the validation
// error returned by ListRetailerOperatorsResponse_OperatorInfo.Validate if
// the designated constraints aren't met.
type ListRetailerOperatorsResponse_OperatorInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRetailerOperatorsResponse_OperatorInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRetailerOperatorsResponse_OperatorInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRetailerOperatorsResponse_OperatorInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRetailerOperatorsResponse_OperatorInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRetailerOperatorsResponse_OperatorInfoValidationError) ErrorName() string {
	return "ListRetailerOperatorsResponse_OperatorInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ListRetailerOperatorsResponse_OperatorInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRetailerOperatorsResponse_OperatorInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRetailerOperatorsResponse_OperatorInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRetailerOperatorsResponse_OperatorInfoValidationError{}

// Validate checks the field values on
// ListCompanyOperatorsResponse_OperatorInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListCompanyOperatorsResponse_OperatorInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListCompanyOperatorsResponse_OperatorInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListCompanyOperatorsResponse_OperatorInfoMultiError, or nil if none found.
func (m *ListCompanyOperatorsResponse_OperatorInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCompanyOperatorsResponse_OperatorInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCompanyOperatorsResponse_OperatorInfoValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCompanyOperatorsResponse_OperatorInfoValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCompanyOperatorsResponse_OperatorInfoValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CompanyOperatorName

	// no validation rules for RetailerOperatorName

	// no validation rules for BottomOperatorCount

	// no validation rules for BottomLiveOperatorCount

	// no validation rules for Status

	if len(errors) > 0 {
		return ListCompanyOperatorsResponse_OperatorInfoMultiError(errors)
	}

	return nil
}

// ListCompanyOperatorsResponse_OperatorInfoMultiError is an error wrapping
// multiple validation errors returned by
// ListCompanyOperatorsResponse_OperatorInfo.ValidateAll() if the designated
// constraints aren't met.
type ListCompanyOperatorsResponse_OperatorInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCompanyOperatorsResponse_OperatorInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCompanyOperatorsResponse_OperatorInfoMultiError) AllErrors() []error { return m }

// ListCompanyOperatorsResponse_OperatorInfoValidationError is the validation
// error returned by ListCompanyOperatorsResponse_OperatorInfo.Validate if the
// designated constraints aren't met.
type ListCompanyOperatorsResponse_OperatorInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCompanyOperatorsResponse_OperatorInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCompanyOperatorsResponse_OperatorInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCompanyOperatorsResponse_OperatorInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCompanyOperatorsResponse_OperatorInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCompanyOperatorsResponse_OperatorInfoValidationError) ErrorName() string {
	return "ListCompanyOperatorsResponse_OperatorInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ListCompanyOperatorsResponse_OperatorInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCompanyOperatorsResponse_OperatorInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCompanyOperatorsResponse_OperatorInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCompanyOperatorsResponse_OperatorInfoValidationError{}

// Validate checks the field values on ListBottomOperatorsResponse_OperatorInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBottomOperatorsResponse_OperatorInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBottomOperatorsResponse_OperatorInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListBottomOperatorsResponse_OperatorInfoMultiError, or nil if none found.
func (m *ListBottomOperatorsResponse_OperatorInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBottomOperatorsResponse_OperatorInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListBottomOperatorsResponse_OperatorInfoValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListBottomOperatorsResponse_OperatorInfoValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListBottomOperatorsResponse_OperatorInfoValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BottomOperatorName

	// no validation rules for RetailerOperatorName

	// no validation rules for CompanyOperatorName

	// no validation rules for Mode

	// no validation rules for Status

	if len(errors) > 0 {
		return ListBottomOperatorsResponse_OperatorInfoMultiError(errors)
	}

	return nil
}

// ListBottomOperatorsResponse_OperatorInfoMultiError is an error wrapping
// multiple validation errors returned by
// ListBottomOperatorsResponse_OperatorInfo.ValidateAll() if the designated
// constraints aren't met.
type ListBottomOperatorsResponse_OperatorInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBottomOperatorsResponse_OperatorInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBottomOperatorsResponse_OperatorInfoMultiError) AllErrors() []error { return m }

// ListBottomOperatorsResponse_OperatorInfoValidationError is the validation
// error returned by ListBottomOperatorsResponse_OperatorInfo.Validate if the
// designated constraints aren't met.
type ListBottomOperatorsResponse_OperatorInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBottomOperatorsResponse_OperatorInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBottomOperatorsResponse_OperatorInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBottomOperatorsResponse_OperatorInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBottomOperatorsResponse_OperatorInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBottomOperatorsResponse_OperatorInfoValidationError) ErrorName() string {
	return "ListBottomOperatorsResponse_OperatorInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ListBottomOperatorsResponse_OperatorInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBottomOperatorsResponse_OperatorInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBottomOperatorsResponse_OperatorInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBottomOperatorsResponse_OperatorInfoValidationError{}

// Validate checks the field values on ResponsibleGamblingConfig_SelfExclusion
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ResponsibleGamblingConfig_SelfExclusion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ResponsibleGamblingConfig_SelfExclusion with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ResponsibleGamblingConfig_SelfExclusionMultiError, or nil if none found.
func (m *ResponsibleGamblingConfig_SelfExclusion) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponsibleGamblingConfig_SelfExclusion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponsibleGamblingConfig_SelfExclusionValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponsibleGamblingConfig_SelfExclusionValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponsibleGamblingConfig_SelfExclusionValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponsibleGamblingConfig_SelfExclusionValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponsibleGamblingConfig_SelfExclusionValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponsibleGamblingConfig_SelfExclusionValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResponsibleGamblingConfig_SelfExclusionMultiError(errors)
	}

	return nil
}

// ResponsibleGamblingConfig_SelfExclusionMultiError is an error wrapping
// multiple validation errors returned by
// ResponsibleGamblingConfig_SelfExclusion.ValidateAll() if the designated
// constraints aren't met.
type ResponsibleGamblingConfig_SelfExclusionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponsibleGamblingConfig_SelfExclusionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponsibleGamblingConfig_SelfExclusionMultiError) AllErrors() []error { return m }

// ResponsibleGamblingConfig_SelfExclusionValidationError is the validation
// error returned by ResponsibleGamblingConfig_SelfExclusion.Validate if the
// designated constraints aren't met.
type ResponsibleGamblingConfig_SelfExclusionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponsibleGamblingConfig_SelfExclusionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponsibleGamblingConfig_SelfExclusionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponsibleGamblingConfig_SelfExclusionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponsibleGamblingConfig_SelfExclusionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponsibleGamblingConfig_SelfExclusionValidationError) ErrorName() string {
	return "ResponsibleGamblingConfig_SelfExclusionValidationError"
}

// Error satisfies the builtin error interface
func (e ResponsibleGamblingConfig_SelfExclusionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponsibleGamblingConfig_SelfExclusion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponsibleGamblingConfig_SelfExclusionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponsibleGamblingConfig_SelfExclusionValidationError{}

// Validate checks the field values on ResponsibleGamblingConfig_BreakInPlay
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ResponsibleGamblingConfig_BreakInPlay) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponsibleGamblingConfig_BreakInPlay
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ResponsibleGamblingConfig_BreakInPlayMultiError, or nil if none found.
func (m *ResponsibleGamblingConfig_BreakInPlay) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponsibleGamblingConfig_BreakInPlay) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponsibleGamblingConfig_BreakInPlayValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponsibleGamblingConfig_BreakInPlayValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponsibleGamblingConfig_BreakInPlayValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponsibleGamblingConfig_BreakInPlayValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponsibleGamblingConfig_BreakInPlayValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponsibleGamblingConfig_BreakInPlayValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResponsibleGamblingConfig_BreakInPlayMultiError(errors)
	}

	return nil
}

// ResponsibleGamblingConfig_BreakInPlayMultiError is an error wrapping
// multiple validation errors returned by
// ResponsibleGamblingConfig_BreakInPlay.ValidateAll() if the designated
// constraints aren't met.
type ResponsibleGamblingConfig_BreakInPlayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponsibleGamblingConfig_BreakInPlayMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponsibleGamblingConfig_BreakInPlayMultiError) AllErrors() []error { return m }

// ResponsibleGamblingConfig_BreakInPlayValidationError is the validation error
// returned by ResponsibleGamblingConfig_BreakInPlay.Validate if the
// designated constraints aren't met.
type ResponsibleGamblingConfig_BreakInPlayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponsibleGamblingConfig_BreakInPlayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponsibleGamblingConfig_BreakInPlayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponsibleGamblingConfig_BreakInPlayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponsibleGamblingConfig_BreakInPlayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponsibleGamblingConfig_BreakInPlayValidationError) ErrorName() string {
	return "ResponsibleGamblingConfig_BreakInPlayValidationError"
}

// Error satisfies the builtin error interface
func (e ResponsibleGamblingConfig_BreakInPlayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponsibleGamblingConfig_BreakInPlay.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponsibleGamblingConfig_BreakInPlayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponsibleGamblingConfig_BreakInPlayValidationError{}

// Validate checks the field values on ResponsibleGamblingConfig_TimeLimits
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ResponsibleGamblingConfig_TimeLimits) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponsibleGamblingConfig_TimeLimits
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ResponsibleGamblingConfig_TimeLimitsMultiError, or nil if none found.
func (m *ResponsibleGamblingConfig_TimeLimits) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponsibleGamblingConfig_TimeLimits) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimeZone

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return ResponsibleGamblingConfig_TimeLimitsMultiError(errors)
	}

	return nil
}

// ResponsibleGamblingConfig_TimeLimitsMultiError is an error wrapping multiple
// validation errors returned by
// ResponsibleGamblingConfig_TimeLimits.ValidateAll() if the designated
// constraints aren't met.
type ResponsibleGamblingConfig_TimeLimitsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponsibleGamblingConfig_TimeLimitsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponsibleGamblingConfig_TimeLimitsMultiError) AllErrors() []error { return m }

// ResponsibleGamblingConfig_TimeLimitsValidationError is the validation error
// returned by ResponsibleGamblingConfig_TimeLimits.Validate if the designated
// constraints aren't met.
type ResponsibleGamblingConfig_TimeLimitsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponsibleGamblingConfig_TimeLimitsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponsibleGamblingConfig_TimeLimitsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponsibleGamblingConfig_TimeLimitsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponsibleGamblingConfig_TimeLimitsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponsibleGamblingConfig_TimeLimitsValidationError) ErrorName() string {
	return "ResponsibleGamblingConfig_TimeLimitsValidationError"
}

// Error satisfies the builtin error interface
func (e ResponsibleGamblingConfig_TimeLimitsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponsibleGamblingConfig_TimeLimits.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponsibleGamblingConfig_TimeLimitsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponsibleGamblingConfig_TimeLimitsValidationError{}

// Validate checks the field values on
// ListRegisterLoginBlacklistResponse_RegisterLoginBlacklist with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRegisterLoginBlacklistResponse_RegisterLoginBlacklist) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListRegisterLoginBlacklistResponse_RegisterLoginBlacklist with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRegisterLoginBlacklistResponse_RegisterLoginBlacklistMultiError, or nil
// if none found.
func (m *ListRegisterLoginBlacklistResponse_RegisterLoginBlacklist) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegisterLoginBlacklistResponse_RegisterLoginBlacklist) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRegisterLoginBlacklistResponse_RegisterLoginBlacklistValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRegisterLoginBlacklistResponse_RegisterLoginBlacklistValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRegisterLoginBlacklistResponse_RegisterLoginBlacklistValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Source

	if len(errors) > 0 {
		return ListRegisterLoginBlacklistResponse_RegisterLoginBlacklistMultiError(errors)
	}

	return nil
}

// ListRegisterLoginBlacklistResponse_RegisterLoginBlacklistMultiError is an
// error wrapping multiple validation errors returned by
// ListRegisterLoginBlacklistResponse_RegisterLoginBlacklist.ValidateAll() if
// the designated constraints aren't met.
type ListRegisterLoginBlacklistResponse_RegisterLoginBlacklistMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegisterLoginBlacklistResponse_RegisterLoginBlacklistMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegisterLoginBlacklistResponse_RegisterLoginBlacklistMultiError) AllErrors() []error {
	return m
}

// ListRegisterLoginBlacklistResponse_RegisterLoginBlacklistValidationError is
// the validation error returned by
// ListRegisterLoginBlacklistResponse_RegisterLoginBlacklist.Validate if the
// designated constraints aren't met.
type ListRegisterLoginBlacklistResponse_RegisterLoginBlacklistValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegisterLoginBlacklistResponse_RegisterLoginBlacklistValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListRegisterLoginBlacklistResponse_RegisterLoginBlacklistValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListRegisterLoginBlacklistResponse_RegisterLoginBlacklistValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListRegisterLoginBlacklistResponse_RegisterLoginBlacklistValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ListRegisterLoginBlacklistResponse_RegisterLoginBlacklistValidationError) ErrorName() string {
	return "ListRegisterLoginBlacklistResponse_RegisterLoginBlacklistValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegisterLoginBlacklistResponse_RegisterLoginBlacklistValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegisterLoginBlacklistResponse_RegisterLoginBlacklist.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegisterLoginBlacklistResponse_RegisterLoginBlacklistValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegisterLoginBlacklistResponse_RegisterLoginBlacklistValidationError{}
