// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/service/v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for OperatorId

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for Enabled

	// no validation rules for Firstname

	// no validation rules for Lastname

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for BanGame

	// no validation rules for BanWithdraw

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PasswordProvider

	// no validation rules for AuthId

	// no validation rules for Password

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PasswordProvider

	// no validation rules for AuthId

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on OAuthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OAuthRequestMultiError, or
// nil if none found.
func (m *OAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OauthProvider

	// no validation rules for Token

	if len(errors) > 0 {
		return OAuthRequestMultiError(errors)
	}

	return nil
}

// OAuthRequestMultiError is an error wrapping multiple validation errors
// returned by OAuthRequest.ValidateAll() if the designated constraints aren't met.
type OAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthRequestMultiError) AllErrors() []error { return m }

// OAuthRequestValidationError is the validation error returned by
// OAuthRequest.Validate if the designated constraints aren't met.
type OAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthRequestValidationError) ErrorName() string { return "OAuthRequestValidationError" }

// Error satisfies the builtin error interface
func (e OAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthRequestValidationError{}

// Validate checks the field values on TelegramAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TelegramAuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TelegramAuthRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TelegramAuthRequestMultiError, or nil if none found.
func (m *TelegramAuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TelegramAuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Username

	// no validation rules for PhotoUrl

	// no validation rules for AuthDate

	// no validation rules for Hash

	if len(errors) > 0 {
		return TelegramAuthRequestMultiError(errors)
	}

	return nil
}

// TelegramAuthRequestMultiError is an error wrapping multiple validation
// errors returned by TelegramAuthRequest.ValidateAll() if the designated
// constraints aren't met.
type TelegramAuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TelegramAuthRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TelegramAuthRequestMultiError) AllErrors() []error { return m }

// TelegramAuthRequestValidationError is the validation error returned by
// TelegramAuthRequest.Validate if the designated constraints aren't met.
type TelegramAuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TelegramAuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TelegramAuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TelegramAuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TelegramAuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TelegramAuthRequestValidationError) ErrorName() string {
	return "TelegramAuthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TelegramAuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTelegramAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TelegramAuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TelegramAuthRequestValidationError{}

// Validate checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenRequestMultiError, or nil if none found.
func (m *RefreshTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return RefreshTokenRequestMultiError(errors)
	}

	return nil
}

// RefreshTokenRequestMultiError is an error wrapping multiple validation
// errors returned by RefreshTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type RefreshTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenRequestMultiError) AllErrors() []error { return m }

// RefreshTokenRequestValidationError is the validation error returned by
// RefreshTokenRequest.Validate if the designated constraints aren't met.
type RefreshTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenRequestValidationError) ErrorName() string {
	return "RefreshTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenRequestValidationError{}

// Validate checks the field values on AuthResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthResponseMultiError, or
// nil if none found.
func (m *AuthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	// no validation rules for ExpiresIn

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthResponseValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthResponseValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthResponseValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthResponseMultiError(errors)
	}

	return nil
}

// AuthResponseMultiError is an error wrapping multiple validation errors
// returned by AuthResponse.ValidateAll() if the designated constraints aren't met.
type AuthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthResponseMultiError) AllErrors() []error { return m }

// AuthResponseValidationError is the validation error returned by
// AuthResponse.Validate if the designated constraints aren't met.
type AuthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthResponseValidationError) ErrorName() string { return "AuthResponseValidationError" }

// Error satisfies the builtin error interface
func (e AuthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthResponseValidationError{}

// Validate checks the field values on RefreshTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenResponseMultiError, or nil if none found.
func (m *RefreshTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	// no validation rules for ExpiresIn

	if len(errors) > 0 {
		return RefreshTokenResponseMultiError(errors)
	}

	return nil
}

// RefreshTokenResponseMultiError is an error wrapping multiple validation
// errors returned by RefreshTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type RefreshTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenResponseMultiError) AllErrors() []error { return m }

// RefreshTokenResponseValidationError is the validation error returned by
// RefreshTokenResponse.Validate if the designated constraints aren't met.
type RefreshTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenResponseValidationError) ErrorName() string {
	return "RefreshTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenResponseValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}

	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on GetUsersByIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersByIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersByIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersByIdsRequestMultiError, or nil if none found.
func (m *GetUsersByIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersByIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUsersByIdsRequestMultiError(errors)
	}

	return nil
}

// GetUsersByIdsRequestMultiError is an error wrapping multiple validation
// errors returned by GetUsersByIdsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUsersByIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersByIdsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersByIdsRequestMultiError) AllErrors() []error { return m }

// GetUsersByIdsRequestValidationError is the validation error returned by
// GetUsersByIdsRequest.Validate if the designated constraints aren't met.
type GetUsersByIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersByIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersByIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersByIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersByIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersByIdsRequestValidationError) ErrorName() string {
	return "GetUsersByIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersByIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersByIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersByIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersByIdsRequestValidationError{}

// Validate checks the field values on GetUsersByIdsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersByIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersByIdsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersByIdsResponseMultiError, or nil if none found.
func (m *GetUsersByIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersByIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUsersByIdsResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUsersByIdsResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUsersByIdsResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUsersByIdsResponseMultiError(errors)
	}

	return nil
}

// GetUsersByIdsResponseMultiError is an error wrapping multiple validation
// errors returned by GetUsersByIdsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUsersByIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersByIdsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersByIdsResponseMultiError) AllErrors() []error { return m }

// GetUsersByIdsResponseValidationError is the validation error returned by
// GetUsersByIdsResponse.Validate if the designated constraints aren't met.
type GetUsersByIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersByIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersByIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersByIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersByIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersByIdsResponseValidationError) ErrorName() string {
	return "GetUsersByIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersByIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersByIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersByIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersByIdsResponseValidationError{}

// Validate checks the field values on GetUserIdsByOperatorIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserIdsByOperatorIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserIdsByOperatorIdsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserIdsByOperatorIdsRequestMultiError, or nil if none found.
func (m *GetUserIdsByOperatorIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserIdsByOperatorIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserIdsByOperatorIdsRequestMultiError(errors)
	}

	return nil
}

// GetUserIdsByOperatorIdsRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserIdsByOperatorIdsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetUserIdsByOperatorIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserIdsByOperatorIdsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserIdsByOperatorIdsRequestMultiError) AllErrors() []error { return m }

// GetUserIdsByOperatorIdsRequestValidationError is the validation error
// returned by GetUserIdsByOperatorIdsRequest.Validate if the designated
// constraints aren't met.
type GetUserIdsByOperatorIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIdsByOperatorIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIdsByOperatorIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIdsByOperatorIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIdsByOperatorIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIdsByOperatorIdsRequestValidationError) ErrorName() string {
	return "GetUserIdsByOperatorIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserIdsByOperatorIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIdsByOperatorIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIdsByOperatorIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIdsByOperatorIdsRequestValidationError{}

// Validate checks the field values on GetUserIdsByOperatorIdsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserIdsByOperatorIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserIdsByOperatorIdsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserIdsByOperatorIdsResponseMultiError, or nil if none found.
func (m *GetUserIdsByOperatorIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserIdsByOperatorIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserIdsByOperatorIdsResponseMultiError(errors)
	}

	return nil
}

// GetUserIdsByOperatorIdsResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserIdsByOperatorIdsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetUserIdsByOperatorIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserIdsByOperatorIdsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserIdsByOperatorIdsResponseMultiError) AllErrors() []error { return m }

// GetUserIdsByOperatorIdsResponseValidationError is the validation error
// returned by GetUserIdsByOperatorIdsResponse.Validate if the designated
// constraints aren't met.
type GetUserIdsByOperatorIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIdsByOperatorIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIdsByOperatorIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIdsByOperatorIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIdsByOperatorIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIdsByOperatorIdsResponseValidationError) ErrorName() string {
	return "GetUserIdsByOperatorIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserIdsByOperatorIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIdsByOperatorIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIdsByOperatorIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIdsByOperatorIdsResponseValidationError{}

// Validate checks the field values on LogoutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRequestMultiError, or
// nil if none found.
func (m *LogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutRequestMultiError(errors)
	}

	return nil
}

// LogoutRequestMultiError is an error wrapping multiple validation errors
// returned by LogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type LogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRequestMultiError) AllErrors() []error { return m }

// LogoutRequestValidationError is the validation error returned by
// LogoutRequest.Validate if the designated constraints aren't met.
type LogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRequestValidationError) ErrorName() string { return "LogoutRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRequestValidationError{}

// Validate checks the field values on LogoutResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutResponseMultiError,
// or nil if none found.
func (m *LogoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutResponseMultiError(errors)
	}

	return nil
}

// LogoutResponseMultiError is an error wrapping multiple validation errors
// returned by LogoutResponse.ValidateAll() if the designated constraints
// aren't met.
type LogoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutResponseMultiError) AllErrors() []error { return m }

// LogoutResponseValidationError is the validation error returned by
// LogoutResponse.Validate if the designated constraints aren't met.
type LogoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutResponseValidationError) ErrorName() string { return "LogoutResponseValidationError" }

// Error satisfies the builtin error interface
func (e LogoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutResponseValidationError{}

// Validate checks the field values on IsTokenRevokedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsTokenRevokedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsTokenRevokedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsTokenRevokedRequestMultiError, or nil if none found.
func (m *IsTokenRevokedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsTokenRevokedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return IsTokenRevokedRequestMultiError(errors)
	}

	return nil
}

// IsTokenRevokedRequestMultiError is an error wrapping multiple validation
// errors returned by IsTokenRevokedRequest.ValidateAll() if the designated
// constraints aren't met.
type IsTokenRevokedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsTokenRevokedRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsTokenRevokedRequestMultiError) AllErrors() []error { return m }

// IsTokenRevokedRequestValidationError is the validation error returned by
// IsTokenRevokedRequest.Validate if the designated constraints aren't met.
type IsTokenRevokedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsTokenRevokedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsTokenRevokedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsTokenRevokedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsTokenRevokedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsTokenRevokedRequestValidationError) ErrorName() string {
	return "IsTokenRevokedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsTokenRevokedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsTokenRevokedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsTokenRevokedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsTokenRevokedRequestValidationError{}

// Validate checks the field values on IsTokenRevokedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsTokenRevokedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsTokenRevokedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsTokenRevokedResponseMultiError, or nil if none found.
func (m *IsTokenRevokedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsTokenRevokedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Revoked

	if len(errors) > 0 {
		return IsTokenRevokedResponseMultiError(errors)
	}

	return nil
}

// IsTokenRevokedResponseMultiError is an error wrapping multiple validation
// errors returned by IsTokenRevokedResponse.ValidateAll() if the designated
// constraints aren't met.
type IsTokenRevokedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsTokenRevokedResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsTokenRevokedResponseMultiError) AllErrors() []error { return m }

// IsTokenRevokedResponseValidationError is the validation error returned by
// IsTokenRevokedResponse.Validate if the designated constraints aren't met.
type IsTokenRevokedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsTokenRevokedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsTokenRevokedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsTokenRevokedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsTokenRevokedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsTokenRevokedResponseValidationError) ErrorName() string {
	return "IsTokenRevokedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsTokenRevokedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsTokenRevokedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsTokenRevokedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsTokenRevokedResponseValidationError{}

// Validate checks the field values on SetOperatorTagsConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOperatorTagsConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOperatorTagsConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetOperatorTagsConfigRequestMultiError, or nil if none found.
func (m *SetOperatorTagsConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOperatorTagsConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for FollowParent

	if len(errors) > 0 {
		return SetOperatorTagsConfigRequestMultiError(errors)
	}

	return nil
}

// SetOperatorTagsConfigRequestMultiError is an error wrapping multiple
// validation errors returned by SetOperatorTagsConfigRequest.ValidateAll() if
// the designated constraints aren't met.
type SetOperatorTagsConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOperatorTagsConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOperatorTagsConfigRequestMultiError) AllErrors() []error { return m }

// SetOperatorTagsConfigRequestValidationError is the validation error returned
// by SetOperatorTagsConfigRequest.Validate if the designated constraints
// aren't met.
type SetOperatorTagsConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOperatorTagsConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOperatorTagsConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOperatorTagsConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOperatorTagsConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOperatorTagsConfigRequestValidationError) ErrorName() string {
	return "SetOperatorTagsConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetOperatorTagsConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOperatorTagsConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOperatorTagsConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOperatorTagsConfigRequestValidationError{}

// Validate checks the field values on SetOperatorTagsConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOperatorTagsConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOperatorTagsConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SetOperatorTagsConfigResponseMultiError, or nil if none found.
func (m *SetOperatorTagsConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOperatorTagsConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetOperatorTagsConfigResponseMultiError(errors)
	}

	return nil
}

// SetOperatorTagsConfigResponseMultiError is an error wrapping multiple
// validation errors returned by SetOperatorTagsConfigResponse.ValidateAll()
// if the designated constraints aren't met.
type SetOperatorTagsConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOperatorTagsConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOperatorTagsConfigResponseMultiError) AllErrors() []error { return m }

// SetOperatorTagsConfigResponseValidationError is the validation error
// returned by SetOperatorTagsConfigResponse.Validate if the designated
// constraints aren't met.
type SetOperatorTagsConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOperatorTagsConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOperatorTagsConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOperatorTagsConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOperatorTagsConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOperatorTagsConfigResponseValidationError) ErrorName() string {
	return "SetOperatorTagsConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetOperatorTagsConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOperatorTagsConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOperatorTagsConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOperatorTagsConfigResponseValidationError{}

// Validate checks the field values on SetOperatorTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOperatorTagsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOperatorTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetOperatorTagsRequestMultiError, or nil if none found.
func (m *SetOperatorTagsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOperatorTagsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return SetOperatorTagsRequestMultiError(errors)
	}

	return nil
}

// SetOperatorTagsRequestMultiError is an error wrapping multiple validation
// errors returned by SetOperatorTagsRequest.ValidateAll() if the designated
// constraints aren't met.
type SetOperatorTagsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOperatorTagsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOperatorTagsRequestMultiError) AllErrors() []error { return m }

// SetOperatorTagsRequestValidationError is the validation error returned by
// SetOperatorTagsRequest.Validate if the designated constraints aren't met.
type SetOperatorTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOperatorTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOperatorTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOperatorTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOperatorTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOperatorTagsRequestValidationError) ErrorName() string {
	return "SetOperatorTagsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetOperatorTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOperatorTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOperatorTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOperatorTagsRequestValidationError{}

// Validate checks the field values on SetOperatorTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOperatorTagsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOperatorTagsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetOperatorTagsResponseMultiError, or nil if none found.
func (m *SetOperatorTagsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOperatorTagsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetOperatorTagsResponseMultiError(errors)
	}

	return nil
}

// SetOperatorTagsResponseMultiError is an error wrapping multiple validation
// errors returned by SetOperatorTagsResponse.ValidateAll() if the designated
// constraints aren't met.
type SetOperatorTagsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOperatorTagsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOperatorTagsResponseMultiError) AllErrors() []error { return m }

// SetOperatorTagsResponseValidationError is the validation error returned by
// SetOperatorTagsResponse.Validate if the designated constraints aren't met.
type SetOperatorTagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOperatorTagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOperatorTagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOperatorTagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOperatorTagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOperatorTagsResponseValidationError) ErrorName() string {
	return "SetOperatorTagsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetOperatorTagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOperatorTagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOperatorTagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOperatorTagsResponseValidationError{}

// Validate checks the field values on GetOperatorTagsConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorTagsConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorTagsConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorTagsConfigRequestMultiError, or nil if none found.
func (m *GetOperatorTagsConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorTagsConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return GetOperatorTagsConfigRequestMultiError(errors)
	}

	return nil
}

// GetOperatorTagsConfigRequestMultiError is an error wrapping multiple
// validation errors returned by GetOperatorTagsConfigRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOperatorTagsConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorTagsConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorTagsConfigRequestMultiError) AllErrors() []error { return m }

// GetOperatorTagsConfigRequestValidationError is the validation error returned
// by GetOperatorTagsConfigRequest.Validate if the designated constraints
// aren't met.
type GetOperatorTagsConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorTagsConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorTagsConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorTagsConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorTagsConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorTagsConfigRequestValidationError) ErrorName() string {
	return "GetOperatorTagsConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorTagsConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorTagsConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorTagsConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorTagsConfigRequestValidationError{}

// Validate checks the field values on GetOperatorTagsConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorTagsConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorTagsConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOperatorTagsConfigResponseMultiError, or nil if none found.
func (m *GetOperatorTagsConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorTagsConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FollowParent

	if len(errors) > 0 {
		return GetOperatorTagsConfigResponseMultiError(errors)
	}

	return nil
}

// GetOperatorTagsConfigResponseMultiError is an error wrapping multiple
// validation errors returned by GetOperatorTagsConfigResponse.ValidateAll()
// if the designated constraints aren't met.
type GetOperatorTagsConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorTagsConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorTagsConfigResponseMultiError) AllErrors() []error { return m }

// GetOperatorTagsConfigResponseValidationError is the validation error
// returned by GetOperatorTagsConfigResponse.Validate if the designated
// constraints aren't met.
type GetOperatorTagsConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorTagsConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorTagsConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorTagsConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorTagsConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorTagsConfigResponseValidationError) ErrorName() string {
	return "GetOperatorTagsConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorTagsConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorTagsConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorTagsConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorTagsConfigResponseValidationError{}

// Validate checks the field values on GetOperatorTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorTagsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorTagsRequestMultiError, or nil if none found.
func (m *GetOperatorTagsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorTagsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return GetOperatorTagsRequestMultiError(errors)
	}

	return nil
}

// GetOperatorTagsRequestMultiError is an error wrapping multiple validation
// errors returned by GetOperatorTagsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorTagsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorTagsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorTagsRequestMultiError) AllErrors() []error { return m }

// GetOperatorTagsRequestValidationError is the validation error returned by
// GetOperatorTagsRequest.Validate if the designated constraints aren't met.
type GetOperatorTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorTagsRequestValidationError) ErrorName() string {
	return "GetOperatorTagsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorTagsRequestValidationError{}

// Validate checks the field values on GetOperatorTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorTagsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorTagsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorTagsResponseMultiError, or nil if none found.
func (m *GetOperatorTagsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorTagsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOperatorTagsResponseMultiError(errors)
	}

	return nil
}

// GetOperatorTagsResponseMultiError is an error wrapping multiple validation
// errors returned by GetOperatorTagsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorTagsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorTagsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorTagsResponseMultiError) AllErrors() []error { return m }

// GetOperatorTagsResponseValidationError is the validation error returned by
// GetOperatorTagsResponse.Validate if the designated constraints aren't met.
type GetOperatorTagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorTagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorTagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorTagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorTagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorTagsResponseValidationError) ErrorName() string {
	return "GetOperatorTagsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorTagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorTagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorTagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorTagsResponseValidationError{}

// Validate checks the field values on GetUserTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTagsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTagsRequestMultiError, or nil if none found.
func (m *GetUserTagsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTagsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserTagsRequestMultiError(errors)
	}

	return nil
}

// GetUserTagsRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserTagsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserTagsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTagsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTagsRequestMultiError) AllErrors() []error { return m }

// GetUserTagsRequestValidationError is the validation error returned by
// GetUserTagsRequest.Validate if the designated constraints aren't met.
type GetUserTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTagsRequestValidationError) ErrorName() string {
	return "GetUserTagsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTagsRequestValidationError{}

// Validate checks the field values on GetUserTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTagsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTagsResponseMultiError, or nil if none found.
func (m *GetUserTagsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTagsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserTagsResponseMultiError(errors)
	}

	return nil
}

// GetUserTagsResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserTagsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserTagsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTagsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTagsResponseMultiError) AllErrors() []error { return m }

// GetUserTagsResponseValidationError is the validation error returned by
// GetUserTagsResponse.Validate if the designated constraints aren't met.
type GetUserTagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTagsResponseValidationError) ErrorName() string {
	return "GetUserTagsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTagsResponseValidationError{}

// Validate checks the field values on GetUserTagsByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTagsByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTagsByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTagsByIdRequestMultiError, or nil if none found.
func (m *GetUserTagsByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTagsByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserTagsByIdRequestMultiError(errors)
	}

	return nil
}

// GetUserTagsByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserTagsByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserTagsByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTagsByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTagsByIdRequestMultiError) AllErrors() []error { return m }

// GetUserTagsByIdRequestValidationError is the validation error returned by
// GetUserTagsByIdRequest.Validate if the designated constraints aren't met.
type GetUserTagsByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTagsByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTagsByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTagsByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTagsByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTagsByIdRequestValidationError) ErrorName() string {
	return "GetUserTagsByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTagsByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTagsByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTagsByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTagsByIdRequestValidationError{}

// Validate checks the field values on GetUserTagsByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTagsByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTagsByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTagsByIdResponseMultiError, or nil if none found.
func (m *GetUserTagsByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTagsByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserTagsByIdResponseMultiError(errors)
	}

	return nil
}

// GetUserTagsByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserTagsByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserTagsByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTagsByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTagsByIdResponseMultiError) AllErrors() []error { return m }

// GetUserTagsByIdResponseValidationError is the validation error returned by
// GetUserTagsByIdResponse.Validate if the designated constraints aren't met.
type GetUserTagsByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTagsByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTagsByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTagsByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTagsByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTagsByIdResponseValidationError) ErrorName() string {
	return "GetUserTagsByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTagsByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTagsByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTagsByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTagsByIdResponseValidationError{}

// Validate checks the field values on SetUserTagsByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserTagsByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserTagsByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserTagsByIdRequestMultiError, or nil if none found.
func (m *SetUserTagsByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserTagsByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return SetUserTagsByIdRequestMultiError(errors)
	}

	return nil
}

// SetUserTagsByIdRequestMultiError is an error wrapping multiple validation
// errors returned by SetUserTagsByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type SetUserTagsByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserTagsByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserTagsByIdRequestMultiError) AllErrors() []error { return m }

// SetUserTagsByIdRequestValidationError is the validation error returned by
// SetUserTagsByIdRequest.Validate if the designated constraints aren't met.
type SetUserTagsByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserTagsByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserTagsByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserTagsByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserTagsByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserTagsByIdRequestValidationError) ErrorName() string {
	return "SetUserTagsByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserTagsByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserTagsByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserTagsByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserTagsByIdRequestValidationError{}

// Validate checks the field values on SetUserTagsByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserTagsByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserTagsByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserTagsByIdResponseMultiError, or nil if none found.
func (m *SetUserTagsByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserTagsByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetUserTagsByIdResponseMultiError(errors)
	}

	return nil
}

// SetUserTagsByIdResponseMultiError is an error wrapping multiple validation
// errors returned by SetUserTagsByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type SetUserTagsByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserTagsByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserTagsByIdResponseMultiError) AllErrors() []error { return m }

// SetUserTagsByIdResponseValidationError is the validation error returned by
// SetUserTagsByIdResponse.Validate if the designated constraints aren't met.
type SetUserTagsByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserTagsByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserTagsByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserTagsByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserTagsByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserTagsByIdResponseValidationError) ErrorName() string {
	return "SetUserTagsByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserTagsByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserTagsByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserTagsByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserTagsByIdResponseValidationError{}

// Validate checks the field values on CheckPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckPermissionRequestMultiError, or nil if none found.
func (m *CheckPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for RoleId

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return CheckPermissionRequestMultiError(errors)
	}

	return nil
}

// CheckPermissionRequestMultiError is an error wrapping multiple validation
// errors returned by CheckPermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckPermissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckPermissionRequestMultiError) AllErrors() []error { return m }

// CheckPermissionRequestValidationError is the validation error returned by
// CheckPermissionRequest.Validate if the designated constraints aren't met.
type CheckPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckPermissionRequestValidationError) ErrorName() string {
	return "CheckPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckPermissionRequestValidationError{}

// Validate checks the field values on CheckPermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckPermissionResponseMultiError, or nil if none found.
func (m *CheckPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Allowed

	if len(errors) > 0 {
		return CheckPermissionResponseMultiError(errors)
	}

	return nil
}

// CheckPermissionResponseMultiError is an error wrapping multiple validation
// errors returned by CheckPermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckPermissionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckPermissionResponseMultiError) AllErrors() []error { return m }

// CheckPermissionResponseValidationError is the validation error returned by
// CheckPermissionResponse.Validate if the designated constraints aren't met.
type CheckPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckPermissionResponseValidationError) ErrorName() string {
	return "CheckPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckPermissionResponseValidationError{}

// Validate checks the field values on AddOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOperatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOperatorRequestMultiError, or nil if none found.
func (m *AddOperatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOperatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return AddOperatorRequestMultiError(errors)
	}

	return nil
}

// AddOperatorRequestMultiError is an error wrapping multiple validation errors
// returned by AddOperatorRequest.ValidateAll() if the designated constraints
// aren't met.
type AddOperatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOperatorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOperatorRequestMultiError) AllErrors() []error { return m }

// AddOperatorRequestValidationError is the validation error returned by
// AddOperatorRequest.Validate if the designated constraints aren't met.
type AddOperatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOperatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOperatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOperatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOperatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOperatorRequestValidationError) ErrorName() string {
	return "AddOperatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOperatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOperatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOperatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOperatorRequestValidationError{}

// Validate checks the field values on AddOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOperatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOperatorResponseMultiError, or nil if none found.
func (m *AddOperatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOperatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddOperatorResponseMultiError(errors)
	}

	return nil
}

// AddOperatorResponseMultiError is an error wrapping multiple validation
// errors returned by AddOperatorResponse.ValidateAll() if the designated
// constraints aren't met.
type AddOperatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOperatorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOperatorResponseMultiError) AllErrors() []error { return m }

// AddOperatorResponseValidationError is the validation error returned by
// AddOperatorResponse.Validate if the designated constraints aren't met.
type AddOperatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOperatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOperatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOperatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOperatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOperatorResponseValidationError) ErrorName() string {
	return "AddOperatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOperatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOperatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOperatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOperatorResponseValidationError{}

// Validate checks the field values on SendEmailVerificationCodeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendEmailVerificationCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailVerificationCodeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendEmailVerificationCodeRequestMultiError, or nil if none found.
func (m *SendEmailVerificationCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailVerificationCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return SendEmailVerificationCodeRequestMultiError(errors)
	}

	return nil
}

// SendEmailVerificationCodeRequestMultiError is an error wrapping multiple
// validation errors returned by
// SendEmailVerificationCodeRequest.ValidateAll() if the designated
// constraints aren't met.
type SendEmailVerificationCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailVerificationCodeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailVerificationCodeRequestMultiError) AllErrors() []error { return m }

// SendEmailVerificationCodeRequestValidationError is the validation error
// returned by SendEmailVerificationCodeRequest.Validate if the designated
// constraints aren't met.
type SendEmailVerificationCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailVerificationCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailVerificationCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailVerificationCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailVerificationCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailVerificationCodeRequestValidationError) ErrorName() string {
	return "SendEmailVerificationCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendEmailVerificationCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailVerificationCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailVerificationCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailVerificationCodeRequestValidationError{}

// Validate checks the field values on SendEmailVerificationCodeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendEmailVerificationCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailVerificationCodeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendEmailVerificationCodeResponseMultiError, or nil if none found.
func (m *SendEmailVerificationCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailVerificationCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendEmailVerificationCodeResponseMultiError(errors)
	}

	return nil
}

// SendEmailVerificationCodeResponseMultiError is an error wrapping multiple
// validation errors returned by
// SendEmailVerificationCodeResponse.ValidateAll() if the designated
// constraints aren't met.
type SendEmailVerificationCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailVerificationCodeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailVerificationCodeResponseMultiError) AllErrors() []error { return m }

// SendEmailVerificationCodeResponseValidationError is the validation error
// returned by SendEmailVerificationCodeResponse.Validate if the designated
// constraints aren't met.
type SendEmailVerificationCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailVerificationCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailVerificationCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailVerificationCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailVerificationCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailVerificationCodeResponseValidationError) ErrorName() string {
	return "SendEmailVerificationCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendEmailVerificationCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailVerificationCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailVerificationCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailVerificationCodeResponseValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.Nickname != nil {
		// no validation rules for Nickname
	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if m.BanLogin != nil {
		// no validation rules for BanLogin
	}

	if m.BanGame != nil {
		// no validation rules for BanGame
	}

	if m.BanWithdraw != nil {
		// no validation rules for BanWithdraw
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.RoleId != nil {
		// no validation rules for RoleId
	}

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserResponseMultiError, or nil if none found.
func (m *UpdateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserResponseMultiError(errors)
	}

	return nil
}

// UpdateUserResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserResponseMultiError) AllErrors() []error { return m }

// UpdateUserResponseValidationError is the validation error returned by
// UpdateUserResponse.Validate if the designated constraints aren't met.
type UpdateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserResponseValidationError) ErrorName() string {
	return "UpdateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserResponseValidationError{}

// Validate checks the field values on ListUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersRequestMultiError, or nil if none found.
func (m *ListUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.RegistrationStartTime != nil {

		if all {
			switch v := interface{}(m.GetRegistrationStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersRequestValidationError{
						field:  "RegistrationStartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersRequestValidationError{
						field:  "RegistrationStartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegistrationStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersRequestValidationError{
					field:  "RegistrationStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RegistrationEndTime != nil {

		if all {
			switch v := interface{}(m.GetRegistrationEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersRequestValidationError{
						field:  "RegistrationEndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersRequestValidationError{
						field:  "RegistrationEndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegistrationEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersRequestValidationError{
					field:  "RegistrationEndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.VipLevel != nil {
		// no validation rules for VipLevel
	}

	if m.RetailerOperatorId != nil {
		// no validation rules for RetailerOperatorId
	}

	if m.GroupOperatorId != nil {
		// no validation rules for GroupOperatorId
	}

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if m.Country != nil {
		// no validation rules for Country
	}

	if m.KycLevel != nil {
		// no validation rules for KycLevel
	}

	if m.DepositMin != nil {
		// no validation rules for DepositMin
	}

	if m.DepositMax != nil {
		// no validation rules for DepositMax
	}

	if m.WithdrawalMin != nil {
		// no validation rules for WithdrawalMin
	}

	if m.WithdrawalMax != nil {
		// no validation rules for WithdrawalMax
	}

	if m.BanWithdraw != nil {
		// no validation rules for BanWithdraw
	}

	if m.BanGame != nil {
		// no validation rules for BanGame
	}

	if m.BanLogin != nil {
		// no validation rules for BanLogin
	}

	if m.UserType != nil {
		// no validation rules for UserType
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListUsersRequestMultiError(errors)
	}

	return nil
}

// ListUsersRequestMultiError is an error wrapping multiple validation errors
// returned by ListUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersRequestMultiError) AllErrors() []error { return m }

// ListUsersRequestValidationError is the validation error returned by
// ListUsersRequest.Validate if the designated constraints aren't met.
type ListUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersRequestValidationError) ErrorName() string { return "ListUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersRequestValidationError{}

// Validate checks the field values on ListUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersResponseMultiError, or nil if none found.
func (m *ListUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return ListUsersResponseMultiError(errors)
	}

	return nil
}

// ListUsersResponseMultiError is an error wrapping multiple validation errors
// returned by ListUsersResponse.ValidateAll() if the designated constraints
// aren't met.
type ListUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersResponseMultiError) AllErrors() []error { return m }

// ListUsersResponseValidationError is the validation error returned by
// ListUsersResponse.Validate if the designated constraints aren't met.
type ListUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponseValidationError) ErrorName() string {
	return "ListUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponseValidationError{}

// Validate checks the field values on CreateGroupUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupUserRequestMultiError, or nil if none found.
func (m *CreateGroupUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Email

	// no validation rules for Mobile

	if len(errors) > 0 {
		return CreateGroupUserRequestMultiError(errors)
	}

	return nil
}

// CreateGroupUserRequestMultiError is an error wrapping multiple validation
// errors returned by CreateGroupUserRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateGroupUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupUserRequestMultiError) AllErrors() []error { return m }

// CreateGroupUserRequestValidationError is the validation error returned by
// CreateGroupUserRequest.Validate if the designated constraints aren't met.
type CreateGroupUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupUserRequestValidationError) ErrorName() string {
	return "CreateGroupUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupUserRequestValidationError{}

// Validate checks the field values on CreateGroupUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGroupUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGroupUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGroupUserResponseMultiError, or nil if none found.
func (m *CreateGroupUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGroupUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateGroupUserResponseMultiError(errors)
	}

	return nil
}

// CreateGroupUserResponseMultiError is an error wrapping multiple validation
// errors returned by CreateGroupUserResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateGroupUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGroupUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGroupUserResponseMultiError) AllErrors() []error { return m }

// CreateGroupUserResponseValidationError is the validation error returned by
// CreateGroupUserResponse.Validate if the designated constraints aren't met.
type CreateGroupUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupUserResponseValidationError) ErrorName() string {
	return "CreateGroupUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupUserResponseValidationError{}

// Validate checks the field values on VerifyEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyEmailRequestMultiError, or nil if none found.
func (m *VerifyEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for VerificationCode

	if len(errors) > 0 {
		return VerifyEmailRequestMultiError(errors)
	}

	return nil
}

// VerifyEmailRequestMultiError is an error wrapping multiple validation errors
// returned by VerifyEmailRequest.ValidateAll() if the designated constraints
// aren't met.
type VerifyEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyEmailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyEmailRequestMultiError) AllErrors() []error { return m }

// VerifyEmailRequestValidationError is the validation error returned by
// VerifyEmailRequest.Validate if the designated constraints aren't met.
type VerifyEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyEmailRequestValidationError) ErrorName() string {
	return "VerifyEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyEmailRequestValidationError{}

// Validate checks the field values on VerifyEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyEmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyEmailResponseMultiError, or nil if none found.
func (m *VerifyEmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyEmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerifyEmailResponseMultiError(errors)
	}

	return nil
}

// VerifyEmailResponseMultiError is an error wrapping multiple validation
// errors returned by VerifyEmailResponse.ValidateAll() if the designated
// constraints aren't met.
type VerifyEmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyEmailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyEmailResponseMultiError) AllErrors() []error { return m }

// VerifyEmailResponseValidationError is the validation error returned by
// VerifyEmailResponse.Validate if the designated constraints aren't met.
type VerifyEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyEmailResponseValidationError) ErrorName() string {
	return "VerifyEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyEmailResponseValidationError{}

// Validate checks the field values on AddCommentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCommentRequestMultiError, or nil if none found.
func (m *AddCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for AuthorUserId

	// no validation rules for Content

	if len(errors) > 0 {
		return AddCommentRequestMultiError(errors)
	}

	return nil
}

// AddCommentRequestMultiError is an error wrapping multiple validation errors
// returned by AddCommentRequest.ValidateAll() if the designated constraints
// aren't met.
type AddCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCommentRequestMultiError) AllErrors() []error { return m }

// AddCommentRequestValidationError is the validation error returned by
// AddCommentRequest.Validate if the designated constraints aren't met.
type AddCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommentRequestValidationError) ErrorName() string {
	return "AddCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommentRequestValidationError{}

// Validate checks the field values on AddCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCommentResponseMultiError, or nil if none found.
func (m *AddCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	if len(errors) > 0 {
		return AddCommentResponseMultiError(errors)
	}

	return nil
}

// AddCommentResponseMultiError is an error wrapping multiple validation errors
// returned by AddCommentResponse.ValidateAll() if the designated constraints
// aren't met.
type AddCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCommentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCommentResponseMultiError) AllErrors() []error { return m }

// AddCommentResponseValidationError is the validation error returned by
// AddCommentResponse.Validate if the designated constraints aren't met.
type AddCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommentResponseValidationError) ErrorName() string {
	return "AddCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommentResponseValidationError{}

// Validate checks the field values on GetCommentsByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentsByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentsByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentsByUserIdRequestMultiError, or nil if none found.
func (m *GetCommentsByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentsByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetCommentsByUserIdRequestMultiError(errors)
	}

	return nil
}

// GetCommentsByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetCommentsByUserIdRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCommentsByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentsByUserIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentsByUserIdRequestMultiError) AllErrors() []error { return m }

// GetCommentsByUserIdRequestValidationError is the validation error returned
// by GetCommentsByUserIdRequest.Validate if the designated constraints aren't met.
type GetCommentsByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentsByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentsByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentsByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentsByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentsByUserIdRequestValidationError) ErrorName() string {
	return "GetCommentsByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentsByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentsByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentsByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentsByUserIdRequestValidationError{}

// Validate checks the field values on GetCommentsByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentsByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentsByUserIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentsByUserIdResponseMultiError, or nil if none found.
func (m *GetCommentsByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentsByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommentsByUserIdResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommentsByUserIdResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommentsByUserIdResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommentsByUserIdResponseMultiError(errors)
	}

	return nil
}

// GetCommentsByUserIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetCommentsByUserIdResponse.ValidateAll() if
// the designated constraints aren't met.
type GetCommentsByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentsByUserIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentsByUserIdResponseMultiError) AllErrors() []error { return m }

// GetCommentsByUserIdResponseValidationError is the validation error returned
// by GetCommentsByUserIdResponse.Validate if the designated constraints
// aren't met.
type GetCommentsByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentsByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentsByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentsByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentsByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentsByUserIdResponseValidationError) ErrorName() string {
	return "GetCommentsByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentsByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentsByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentsByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentsByUserIdResponseValidationError{}

// Validate checks the field values on GetUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProfileRequestMultiError, or nil if none found.
func (m *GetUserProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.LoginPage != nil {
		// no validation rules for LoginPage
	}

	if m.LoginPageSize != nil {
		// no validation rules for LoginPageSize
	}

	if len(errors) > 0 {
		return GetUserProfileRequestMultiError(errors)
	}

	return nil
}

// GetUserProfileRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileRequestMultiError) AllErrors() []error { return m }

// GetUserProfileRequestValidationError is the validation error returned by
// GetUserProfileRequest.Validate if the designated constraints aren't met.
type GetUserProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileRequestValidationError) ErrorName() string {
	return "GetUserProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileRequestValidationError{}

// Validate checks the field values on GetUserProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProfileResponseMultiError, or nil if none found.
func (m *GetUserProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Nickname

	// no validation rules for UserId

	// no validation rules for VipLevel

	// no validation rules for Online

	// no validation rules for BanWithdraw

	// no validation rules for BanGame

	// no validation rules for BanLogin

	if all {
		switch v := interface{}(m.GetRegistrationRecord()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponseValidationError{
					field:  "RegistrationRecord",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponseValidationError{
					field:  "RegistrationRecord",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegistrationRecord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponseValidationError{
				field:  "RegistrationRecord",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLoginRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("LoginRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("LoginRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfileResponseValidationError{
					field:  fmt.Sprintf("LoginRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfileResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalLoginCount

	// no validation rules for LoginPage

	// no validation rules for LoginPageSize

	if len(errors) > 0 {
		return GetUserProfileResponseMultiError(errors)
	}

	return nil
}

// GetUserProfileResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponseMultiError) AllErrors() []error { return m }

// GetUserProfileResponseValidationError is the validation error returned by
// GetUserProfileResponse.Validate if the designated constraints aren't met.
type GetUserProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponseValidationError) ErrorName() string {
	return "GetUserProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponseValidationError{}

// Validate checks the field values on CreateRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleRequestMultiError, or nil if none found.
func (m *CreateRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateRoleRequestValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateRoleRequestValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateRoleRequestValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateRoleRequestMultiError(errors)
	}

	return nil
}

// CreateRoleRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleRequestMultiError) AllErrors() []error { return m }

// CreateRoleRequestValidationError is the validation error returned by
// CreateRoleRequest.Validate if the designated constraints aren't met.
type CreateRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleRequestValidationError) ErrorName() string {
	return "CreateRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleRequestValidationError{}

// Validate checks the field values on Permission with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Permission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Permission with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PermissionMultiError, or
// nil if none found.
func (m *Permission) ValidateAll() error {
	return m.validate(true)
}

func (m *Permission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for GroupName

	if len(errors) > 0 {
		return PermissionMultiError(errors)
	}

	return nil
}

// PermissionMultiError is an error wrapping multiple validation errors
// returned by Permission.ValidateAll() if the designated constraints aren't met.
type PermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionMultiError) AllErrors() []error { return m }

// PermissionValidationError is the validation error returned by
// Permission.Validate if the designated constraints aren't met.
type PermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionValidationError) ErrorName() string { return "PermissionValidationError" }

// Error satisfies the builtin error interface
func (e PermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionValidationError{}

// Validate checks the field values on CreateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleResponseMultiError, or nil if none found.
func (m *CreateRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateRoleResponseMultiError(errors)
	}

	return nil
}

// CreateRoleResponseMultiError is an error wrapping multiple validation errors
// returned by CreateRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleResponseMultiError) AllErrors() []error { return m }

// CreateRoleResponseValidationError is the validation error returned by
// CreateRoleResponse.Validate if the designated constraints aren't met.
type CreateRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleResponseValidationError) ErrorName() string {
	return "CreateRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleResponseValidationError{}

// Validate checks the field values on ListRolesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRolesRequestMultiError, or nil if none found.
func (m *ListRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListRolesRequestMultiError(errors)
	}

	return nil
}

// ListRolesRequestMultiError is an error wrapping multiple validation errors
// returned by ListRolesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRolesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRolesRequestMultiError) AllErrors() []error { return m }

// ListRolesRequestValidationError is the validation error returned by
// ListRolesRequest.Validate if the designated constraints aren't met.
type ListRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolesRequestValidationError) ErrorName() string { return "ListRolesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolesRequestValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for Name

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on ListRolesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRolesResponseMultiError, or nil if none found.
func (m *ListRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRolesResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return ListRolesResponseMultiError(errors)
	}

	return nil
}

// ListRolesResponseMultiError is an error wrapping multiple validation errors
// returned by ListRolesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRolesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRolesResponseMultiError) AllErrors() []error { return m }

// ListRolesResponseValidationError is the validation error returned by
// ListRolesResponse.Validate if the designated constraints aren't met.
type ListRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolesResponseValidationError) ErrorName() string {
	return "ListRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolesResponseValidationError{}

// Validate checks the field values on ListUsersResponse_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUsersResponse_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersResponse_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersResponse_UserMultiError, or nil if none found.
func (m *ListUsersResponse_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersResponse_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Retailer

	// no validation rules for Group

	// no validation rules for OperatorName

	// no validation rules for UserId

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for VipLevel

	// no validation rules for KycLevel

	// no validation rules for Deposit

	// no validation rules for Withdraw

	// no validation rules for BanWithdraw

	// no validation rules for BanGame

	// no validation rules for BanLogin

	if all {
		switch v := interface{}(m.GetLastLoginAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "LastLoginAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "LastLoginAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastLoginAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersResponse_UserValidationError{
				field:  "LastLoginAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRegisteredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "RegisteredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "RegisteredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegisteredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersResponse_UserValidationError{
				field:  "RegisteredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Country

	// no validation rules for RegistrationIp

	// no validation rules for Enabled

	if len(errors) > 0 {
		return ListUsersResponse_UserMultiError(errors)
	}

	return nil
}

// ListUsersResponse_UserMultiError is an error wrapping multiple validation
// errors returned by ListUsersResponse_User.ValidateAll() if the designated
// constraints aren't met.
type ListUsersResponse_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersResponse_UserMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersResponse_UserMultiError) AllErrors() []error { return m }

// ListUsersResponse_UserValidationError is the validation error returned by
// ListUsersResponse_User.Validate if the designated constraints aren't met.
type ListUsersResponse_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponse_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponse_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponse_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponse_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponse_UserValidationError) ErrorName() string {
	return "ListUsersResponse_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponse_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponse_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponse_UserValidationError{}

// Validate checks the field values on GetCommentsByUserIdResponse_Comment with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetCommentsByUserIdResponse_Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentsByUserIdResponse_Comment
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetCommentsByUserIdResponse_CommentMultiError, or nil if none found.
func (m *GetCommentsByUserIdResponse_Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentsByUserIdResponse_Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	// no validation rules for UserId

	// no validation rules for AuthorUserId

	// no validation rules for Content

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GetCommentsByUserIdResponse_CommentMultiError(errors)
	}

	return nil
}

// GetCommentsByUserIdResponse_CommentMultiError is an error wrapping multiple
// validation errors returned by
// GetCommentsByUserIdResponse_Comment.ValidateAll() if the designated
// constraints aren't met.
type GetCommentsByUserIdResponse_CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentsByUserIdResponse_CommentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentsByUserIdResponse_CommentMultiError) AllErrors() []error { return m }

// GetCommentsByUserIdResponse_CommentValidationError is the validation error
// returned by GetCommentsByUserIdResponse_Comment.Validate if the designated
// constraints aren't met.
type GetCommentsByUserIdResponse_CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentsByUserIdResponse_CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentsByUserIdResponse_CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentsByUserIdResponse_CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentsByUserIdResponse_CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentsByUserIdResponse_CommentValidationError) ErrorName() string {
	return "GetCommentsByUserIdResponse_CommentValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentsByUserIdResponse_CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentsByUserIdResponse_Comment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentsByUserIdResponse_CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentsByUserIdResponse_CommentValidationError{}

// Validate checks the field values on GetUserProfileResponse_IpInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileResponse_IpInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileResponse_IpInfo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserProfileResponse_IpInfoMultiError, or nil if none found.
func (m *GetUserProfileResponse_IpInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse_IpInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ip

	// no validation rules for Count

	// no validation rules for Country

	if len(errors) > 0 {
		return GetUserProfileResponse_IpInfoMultiError(errors)
	}

	return nil
}

// GetUserProfileResponse_IpInfoMultiError is an error wrapping multiple
// validation errors returned by GetUserProfileResponse_IpInfo.ValidateAll()
// if the designated constraints aren't met.
type GetUserProfileResponse_IpInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponse_IpInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponse_IpInfoMultiError) AllErrors() []error { return m }

// GetUserProfileResponse_IpInfoValidationError is the validation error
// returned by GetUserProfileResponse_IpInfo.Validate if the designated
// constraints aren't met.
type GetUserProfileResponse_IpInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponse_IpInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponse_IpInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponse_IpInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponse_IpInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponse_IpInfoValidationError) ErrorName() string {
	return "GetUserProfileResponse_IpInfoValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponse_IpInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse_IpInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponse_IpInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponse_IpInfoValidationError{}

// Validate checks the field values on
// GetUserProfileResponse_RegistrationRecord with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileResponse_RegistrationRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserProfileResponse_RegistrationRecord with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetUserProfileResponse_RegistrationRecordMultiError, or nil if none found.
func (m *GetUserProfileResponse_RegistrationRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse_RegistrationRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRegisteredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponse_RegistrationRecordValidationError{
					field:  "RegisteredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponse_RegistrationRecordValidationError{
					field:  "RegisteredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegisteredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponse_RegistrationRecordValidationError{
				field:  "RegisteredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIpInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponse_RegistrationRecordValidationError{
					field:  "IpInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponse_RegistrationRecordValidationError{
					field:  "IpInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIpInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponse_RegistrationRecordValidationError{
				field:  "IpInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Device

	// no validation rules for Method

	// no validation rules for Browser

	// no validation rules for App

	// no validation rules for Mobile

	// no validation rules for Email

	// no validation rules for Username

	// no validation rules for Source

	if len(errors) > 0 {
		return GetUserProfileResponse_RegistrationRecordMultiError(errors)
	}

	return nil
}

// GetUserProfileResponse_RegistrationRecordMultiError is an error wrapping
// multiple validation errors returned by
// GetUserProfileResponse_RegistrationRecord.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileResponse_RegistrationRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponse_RegistrationRecordMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponse_RegistrationRecordMultiError) AllErrors() []error { return m }

// GetUserProfileResponse_RegistrationRecordValidationError is the validation
// error returned by GetUserProfileResponse_RegistrationRecord.Validate if the
// designated constraints aren't met.
type GetUserProfileResponse_RegistrationRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponse_RegistrationRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponse_RegistrationRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponse_RegistrationRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponse_RegistrationRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponse_RegistrationRecordValidationError) ErrorName() string {
	return "GetUserProfileResponse_RegistrationRecordValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponse_RegistrationRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse_RegistrationRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponse_RegistrationRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponse_RegistrationRecordValidationError{}

// Validate checks the field values on GetUserProfileResponse_LoginRecord with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserProfileResponse_LoginRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileResponse_LoginRecord
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserProfileResponse_LoginRecordMultiError, or nil if none found.
func (m *GetUserProfileResponse_LoginRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse_LoginRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLoginAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponse_LoginRecordValidationError{
					field:  "LoginAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponse_LoginRecordValidationError{
					field:  "LoginAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLoginAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponse_LoginRecordValidationError{
				field:  "LoginAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIpInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponse_LoginRecordValidationError{
					field:  "IpInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponse_LoginRecordValidationError{
					field:  "IpInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIpInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponse_LoginRecordValidationError{
				field:  "IpInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Device

	// no validation rules for Method

	// no validation rules for Browser

	// no validation rules for App

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for Username

	if len(errors) > 0 {
		return GetUserProfileResponse_LoginRecordMultiError(errors)
	}

	return nil
}

// GetUserProfileResponse_LoginRecordMultiError is an error wrapping multiple
// validation errors returned by
// GetUserProfileResponse_LoginRecord.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileResponse_LoginRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponse_LoginRecordMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponse_LoginRecordMultiError) AllErrors() []error { return m }

// GetUserProfileResponse_LoginRecordValidationError is the validation error
// returned by GetUserProfileResponse_LoginRecord.Validate if the designated
// constraints aren't met.
type GetUserProfileResponse_LoginRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponse_LoginRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponse_LoginRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponse_LoginRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponse_LoginRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponse_LoginRecordValidationError) ErrorName() string {
	return "GetUserProfileResponse_LoginRecordValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponse_LoginRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse_LoginRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponse_LoginRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponse_LoginRecordValidationError{}

// Validate checks the field values on GetUserProfileResponse_Comment with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileResponse_Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileResponse_Comment with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserProfileResponse_CommentMultiError, or nil if none found.
func (m *GetUserProfileResponse_Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse_Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	// no validation rules for Username

	// no validation rules for AuthorUsername

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponse_CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponse_CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponse_CommentValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserProfileResponse_CommentMultiError(errors)
	}

	return nil
}

// GetUserProfileResponse_CommentMultiError is an error wrapping multiple
// validation errors returned by GetUserProfileResponse_Comment.ValidateAll()
// if the designated constraints aren't met.
type GetUserProfileResponse_CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponse_CommentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponse_CommentMultiError) AllErrors() []error { return m }

// GetUserProfileResponse_CommentValidationError is the validation error
// returned by GetUserProfileResponse_Comment.Validate if the designated
// constraints aren't met.
type GetUserProfileResponse_CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponse_CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponse_CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponse_CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponse_CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponse_CommentValidationError) ErrorName() string {
	return "GetUserProfileResponse_CommentValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponse_CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse_Comment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponse_CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponse_CommentValidationError{}
