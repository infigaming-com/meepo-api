// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: user/service/v1/user_filestore.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserFileStoreUploadOperatorStaticFile = "/api.user.service.v1.UserFileStore/UploadOperatorStaticFile"

type UserFileStoreHTTPServer interface {
	UploadOperatorStaticFile(context.Context, *UploadOperatorStaticFileRequest) (*UploadOperatorStaticFileResponse, error)
}

func RegisterUserFileStoreHTTPServer(s *http.Server, srv UserFileStoreHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/user/kyc/filestore/upload", _UserFileStore_UploadOperatorStaticFile0_HTTP_Handler(srv))
}

func _UserFileStore_UploadOperatorStaticFile0_HTTP_Handler(srv UserFileStoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadOperatorStaticFileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserFileStoreUploadOperatorStaticFile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UploadOperatorStaticFile(ctx, req.(*UploadOperatorStaticFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UploadOperatorStaticFileResponse)
		return ctx.Result(200, reply)
	}
}

type UserFileStoreHTTPClient interface {
	UploadOperatorStaticFile(ctx context.Context, req *UploadOperatorStaticFileRequest, opts ...http.CallOption) (rsp *UploadOperatorStaticFileResponse, err error)
}

type UserFileStoreHTTPClientImpl struct {
	cc *http.Client
}

func NewUserFileStoreHTTPClient(client *http.Client) UserFileStoreHTTPClient {
	return &UserFileStoreHTTPClientImpl{client}
}

func (c *UserFileStoreHTTPClientImpl) UploadOperatorStaticFile(ctx context.Context, in *UploadOperatorStaticFileRequest, opts ...http.CallOption) (*UploadOperatorStaticFileResponse, error) {
	var out UploadOperatorStaticFileResponse
	pattern := "/v1/user/kyc/filestore/upload"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserFileStoreUploadOperatorStaticFile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
