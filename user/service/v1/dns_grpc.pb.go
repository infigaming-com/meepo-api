// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: user/service/v1/dns.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Dns_ListOperatorByoDomains_FullMethodName  = "/api.user.service.v1.Dns/ListOperatorByoDomains"
	Dns_AddOperatorByoDomain_FullMethodName    = "/api.user.service.v1.Dns/AddOperatorByoDomain"
	Dns_DeleteOperatorByoDomain_FullMethodName = "/api.user.service.v1.Dns/DeleteOperatorByoDomain"
)

// DnsClient is the client API for Dns service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// User service provides authentication and user management functionality.
type DnsClient interface {
	// ListOperatorByoDomains returns the list of byo domains
	ListOperatorByoDomains(ctx context.Context, in *ListOperatorByoDomainsRequest, opts ...grpc.CallOption) (*ListOperatorByoDomainsResponse, error)
	// AddOperatorByoDomain adds a binding between customer byo domain and meepo domain
	AddOperatorByoDomain(ctx context.Context, in *AddOperatorByoDomainRequest, opts ...grpc.CallOption) (*AddOperatorByoDomainResponse, error)
	// DeleteOperatorByoDomain deletes a binding between customer byo domain and meepo domain
	DeleteOperatorByoDomain(ctx context.Context, in *DeleteOperatorByoDomainRequest, opts ...grpc.CallOption) (*DeleteOperatorByoDomainResponse, error)
}

type dnsClient struct {
	cc grpc.ClientConnInterface
}

func NewDnsClient(cc grpc.ClientConnInterface) DnsClient {
	return &dnsClient{cc}
}

func (c *dnsClient) ListOperatorByoDomains(ctx context.Context, in *ListOperatorByoDomainsRequest, opts ...grpc.CallOption) (*ListOperatorByoDomainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOperatorByoDomainsResponse)
	err := c.cc.Invoke(ctx, Dns_ListOperatorByoDomains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsClient) AddOperatorByoDomain(ctx context.Context, in *AddOperatorByoDomainRequest, opts ...grpc.CallOption) (*AddOperatorByoDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOperatorByoDomainResponse)
	err := c.cc.Invoke(ctx, Dns_AddOperatorByoDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsClient) DeleteOperatorByoDomain(ctx context.Context, in *DeleteOperatorByoDomainRequest, opts ...grpc.CallOption) (*DeleteOperatorByoDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOperatorByoDomainResponse)
	err := c.cc.Invoke(ctx, Dns_DeleteOperatorByoDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DnsServer is the server API for Dns service.
// All implementations must embed UnimplementedDnsServer
// for forward compatibility.
//
// User service provides authentication and user management functionality.
type DnsServer interface {
	// ListOperatorByoDomains returns the list of byo domains
	ListOperatorByoDomains(context.Context, *ListOperatorByoDomainsRequest) (*ListOperatorByoDomainsResponse, error)
	// AddOperatorByoDomain adds a binding between customer byo domain and meepo domain
	AddOperatorByoDomain(context.Context, *AddOperatorByoDomainRequest) (*AddOperatorByoDomainResponse, error)
	// DeleteOperatorByoDomain deletes a binding between customer byo domain and meepo domain
	DeleteOperatorByoDomain(context.Context, *DeleteOperatorByoDomainRequest) (*DeleteOperatorByoDomainResponse, error)
	mustEmbedUnimplementedDnsServer()
}

// UnimplementedDnsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDnsServer struct{}

func (UnimplementedDnsServer) ListOperatorByoDomains(context.Context, *ListOperatorByoDomainsRequest) (*ListOperatorByoDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperatorByoDomains not implemented")
}
func (UnimplementedDnsServer) AddOperatorByoDomain(context.Context, *AddOperatorByoDomainRequest) (*AddOperatorByoDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOperatorByoDomain not implemented")
}
func (UnimplementedDnsServer) DeleteOperatorByoDomain(context.Context, *DeleteOperatorByoDomainRequest) (*DeleteOperatorByoDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOperatorByoDomain not implemented")
}
func (UnimplementedDnsServer) mustEmbedUnimplementedDnsServer() {}
func (UnimplementedDnsServer) testEmbeddedByValue()             {}

// UnsafeDnsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DnsServer will
// result in compilation errors.
type UnsafeDnsServer interface {
	mustEmbedUnimplementedDnsServer()
}

func RegisterDnsServer(s grpc.ServiceRegistrar, srv DnsServer) {
	// If the following call pancis, it indicates UnimplementedDnsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Dns_ServiceDesc, srv)
}

func _Dns_ListOperatorByoDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperatorByoDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServer).ListOperatorByoDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dns_ListOperatorByoDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServer).ListOperatorByoDomains(ctx, req.(*ListOperatorByoDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dns_AddOperatorByoDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOperatorByoDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServer).AddOperatorByoDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dns_AddOperatorByoDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServer).AddOperatorByoDomain(ctx, req.(*AddOperatorByoDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dns_DeleteOperatorByoDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOperatorByoDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServer).DeleteOperatorByoDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dns_DeleteOperatorByoDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServer).DeleteOperatorByoDomain(ctx, req.(*DeleteOperatorByoDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dns_ServiceDesc is the grpc.ServiceDesc for Dns service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dns_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.service.v1.Dns",
	HandlerType: (*DnsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOperatorByoDomains",
			Handler:    _Dns_ListOperatorByoDomains_Handler,
		},
		{
			MethodName: "AddOperatorByoDomain",
			Handler:    _Dns_AddOperatorByoDomain_Handler,
		},
		{
			MethodName: "DeleteOperatorByoDomain",
			Handler:    _Dns_DeleteOperatorByoDomain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/service/v1/dns.proto",
}
