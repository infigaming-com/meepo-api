syntax = "proto3";

package api.review.service.v1;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/infigaming-com/meepo-api/review/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.review.service.v1";

// Review service provides review functionality.
service Review {
	rpc CreateWithdraw(CreateWithdrawRequest) returns (CreateWithdrawResponse) {
		option (google.api.http) = {
			post: "/v1/review/withdraw"
			body: "*"
		};
	}
	rpc ReviewTicket(ReviewTicketRequest) returns (ReviewTicketResponse) {}
	rpc AddComment(AddCommentRequest) returns (AddCommentResponse) {}
	rpc ListTickets(ListTicketsRequest) returns (ListTicketsResponse) {}
	rpc GetTicket(GetTicketRequest) returns (GetTicketResponse) {}
}

message CreateWithdrawRequest {
	google.protobuf.Struct request = 1;  // JSON data for REST API
}

message CreateWithdrawResponse {
	int64 ticket_id = 1;
}

message ReviewTicketRequest {
	int64 ticket_id = 1;
	int64 reviewer_user_id = 2;
	// action: approve, reject, manual_payout
	string action = 3;
	string review_comment = 4;
}

message ReviewTicketResponse {}

message AddCommentRequest {
	int64 ticket_id = 1;
	int64 author_user_id = 2;
	string content = 3;
}

message AddCommentResponse {
	int64 comment_id = 1;
}

message ListTicketsRequest {
	optional int64 user_id = 2;
	optional int64 operator_id = 3;
	optional int64 ticket_id = 4;
	optional string currency = 5;
	optional string status = 6;
	optional google.protobuf.Timestamp start_time = 7;
	optional google.protobuf.Timestamp end_time = 8;
	optional int32 page = 9;
	optional int32 page_size = 10;
}

message ListTicketsResponse {
	message Ticket {
		google.protobuf.Timestamp created_at = 1;
		string operator = 2;
		int64 ticket_id = 3;
		int64 user_id = 4;
		int32 vip_level = 5;
		repeated string user_tags = 6;
		string before_balance = 7;
		string before_balance_usd = 8;
		string amount = 9;
		string amount_usd = 10;
		string after_balance = 11;
		string after_balance_usd = 12;
		string currency = 13;
		string payment_channel = 14;
		string protocol = 15;
		string fee = 16;
		string status = 17;	// pending, approved, rejected, manual_payout, paying, paid, failed
		string reviewer_username = 18;
		int32 review_duration = 19;
	}
	repeated Ticket tickets = 1;
	int32 page = 2;
	int32 page_size = 3;
	int32 total_count = 4;
	string total_amount = 5;
	int32 total_pending_count = 6;
	string total_pending_amount = 7;
	int32 total_paying_count = 8;
	string total_paying_amount = 9;
	int32 total_paid_count = 10;
	string total_paid_amount = 11;
	int32 total_failed_count = 12;
	string total_failed_amount = 13;
	int32 total_rejected_count = 14;
	string total_rejected_amount = 15;
	int32 average_review_time = 16;
}

message GetTicketRequest {
	int64 ticket_id = 1;
}

message GetTicketResponse {
	message Ticket {
		int64 id = 1;
		string type = 2;
		string request = 3;
		string response = 4;
		int64 user_id = 5;
		int64 operator_id = 6;
		string currency = 7;
		string ticket_status = 8;
		int64 reviewer_user_id = 9;
		string reviewer_comment = 10;
		string payment_status = 11;
		int64 payment_transaction_id = 12;
		string payment_transaction_error = 13;
		string wallet_status = 14;
		int64 wallet_freeze_transaction_id = 15;
		int64 wallet_settle_transaction_id = 16;
		string wallet_settle_error = 17;
		int64 wallet_rollback_transaction_id = 18;
		string wallet_rollback_error = 19;
		int64 created_at = 20;
		int64 updated_at = 21;
		int64 reviewed_at = 22;
	}
	Ticket ticket = 1;
}
