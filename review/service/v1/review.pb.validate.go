// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: review/service/v1/review.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateWithdrawRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWithdrawRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWithdrawRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWithdrawRequestMultiError, or nil if none found.
func (m *CreateWithdrawRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWithdrawRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWithdrawRequestData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWithdrawRequestValidationError{
					field:  "WithdrawRequestData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWithdrawRequestValidationError{
					field:  "WithdrawRequestData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWithdrawRequestData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWithdrawRequestValidationError{
				field:  "WithdrawRequestData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWithdrawRequestMultiError(errors)
	}

	return nil
}

// CreateWithdrawRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWithdrawRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWithdrawRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWithdrawRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWithdrawRequestMultiError) AllErrors() []error { return m }

// CreateWithdrawRequestValidationError is the validation error returned by
// CreateWithdrawRequest.Validate if the designated constraints aren't met.
type CreateWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWithdrawRequestValidationError) ErrorName() string {
	return "CreateWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWithdrawRequestValidationError{}

// Validate checks the field values on CreateWithdrawResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWithdrawResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWithdrawResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWithdrawResponseMultiError, or nil if none found.
func (m *CreateWithdrawResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWithdrawResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWithdrawResponseData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWithdrawResponseValidationError{
					field:  "WithdrawResponseData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWithdrawResponseValidationError{
					field:  "WithdrawResponseData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWithdrawResponseData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWithdrawResponseValidationError{
				field:  "WithdrawResponseData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWithdrawResponseMultiError(errors)
	}

	return nil
}

// CreateWithdrawResponseMultiError is an error wrapping multiple validation
// errors returned by CreateWithdrawResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateWithdrawResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWithdrawResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWithdrawResponseMultiError) AllErrors() []error { return m }

// CreateWithdrawResponseValidationError is the validation error returned by
// CreateWithdrawResponse.Validate if the designated constraints aren't met.
type CreateWithdrawResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWithdrawResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWithdrawResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWithdrawResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWithdrawResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWithdrawResponseValidationError) ErrorName() string {
	return "CreateWithdrawResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWithdrawResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWithdrawResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWithdrawResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWithdrawResponseValidationError{}

// Validate checks the field values on ApproveReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveReviewRequestMultiError, or nil if none found.
func (m *ApproveReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReviewId

	// no validation rules for Action

	// no validation rules for ApproveComment

	if len(errors) > 0 {
		return ApproveReviewRequestMultiError(errors)
	}

	return nil
}

// ApproveReviewRequestMultiError is an error wrapping multiple validation
// errors returned by ApproveReviewRequest.ValidateAll() if the designated
// constraints aren't met.
type ApproveReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveReviewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveReviewRequestMultiError) AllErrors() []error { return m }

// ApproveReviewRequestValidationError is the validation error returned by
// ApproveReviewRequest.Validate if the designated constraints aren't met.
type ApproveReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveReviewRequestValidationError) ErrorName() string {
	return "ApproveReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveReviewRequestValidationError{}

// Validate checks the field values on ApproveReviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveReviewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveReviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveReviewResponseMultiError, or nil if none found.
func (m *ApproveReviewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveReviewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApproveReviewResponseMultiError(errors)
	}

	return nil
}

// ApproveReviewResponseMultiError is an error wrapping multiple validation
// errors returned by ApproveReviewResponse.ValidateAll() if the designated
// constraints aren't met.
type ApproveReviewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveReviewResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveReviewResponseMultiError) AllErrors() []error { return m }

// ApproveReviewResponseValidationError is the validation error returned by
// ApproveReviewResponse.Validate if the designated constraints aren't met.
type ApproveReviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveReviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveReviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveReviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveReviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveReviewResponseValidationError) ErrorName() string {
	return "ApproveReviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveReviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveReviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveReviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveReviewResponseValidationError{}

// Validate checks the field values on AddReviewCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddReviewCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddReviewCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddReviewCommentRequestMultiError, or nil if none found.
func (m *AddReviewCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddReviewCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReviewId

	// no validation rules for AuthorUserId

	// no validation rules for Content

	if len(errors) > 0 {
		return AddReviewCommentRequestMultiError(errors)
	}

	return nil
}

// AddReviewCommentRequestMultiError is an error wrapping multiple validation
// errors returned by AddReviewCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type AddReviewCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddReviewCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddReviewCommentRequestMultiError) AllErrors() []error { return m }

// AddReviewCommentRequestValidationError is the validation error returned by
// AddReviewCommentRequest.Validate if the designated constraints aren't met.
type AddReviewCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddReviewCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddReviewCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddReviewCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddReviewCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddReviewCommentRequestValidationError) ErrorName() string {
	return "AddReviewCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddReviewCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddReviewCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddReviewCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddReviewCommentRequestValidationError{}

// Validate checks the field values on AddReviewCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddReviewCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddReviewCommentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddReviewCommentResponseMultiError, or nil if none found.
func (m *AddReviewCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddReviewCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddReviewCommentResponseMultiError(errors)
	}

	return nil
}

// AddReviewCommentResponseMultiError is an error wrapping multiple validation
// errors returned by AddReviewCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type AddReviewCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddReviewCommentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddReviewCommentResponseMultiError) AllErrors() []error { return m }

// AddReviewCommentResponseValidationError is the validation error returned by
// AddReviewCommentResponse.Validate if the designated constraints aren't met.
type AddReviewCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddReviewCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddReviewCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddReviewCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddReviewCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddReviewCommentResponseValidationError) ErrorName() string {
	return "AddReviewCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddReviewCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddReviewCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddReviewCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddReviewCommentResponseValidationError{}

// Validate checks the field values on ListReviewsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReviewsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReviewsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReviewsRequestMultiError, or nil if none found.
func (m *ListReviewsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReviewsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.ReviewId != nil {
		// no validation rules for ReviewId
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if m.Currency != nil {
		// no validation rules for Currency
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListReviewsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListReviewsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListReviewsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListReviewsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListReviewsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListReviewsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListReviewsRequestMultiError(errors)
	}

	return nil
}

// ListReviewsRequestMultiError is an error wrapping multiple validation errors
// returned by ListReviewsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListReviewsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReviewsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReviewsRequestMultiError) AllErrors() []error { return m }

// ListReviewsRequestValidationError is the validation error returned by
// ListReviewsRequest.Validate if the designated constraints aren't met.
type ListReviewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReviewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReviewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReviewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReviewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReviewsRequestValidationError) ErrorName() string {
	return "ListReviewsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListReviewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReviewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReviewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReviewsRequestValidationError{}

// Validate checks the field values on ListReviewsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReviewsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReviewsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReviewsResponseMultiError, or nil if none found.
func (m *ListReviewsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReviewsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListReviewsResponseMultiError(errors)
	}

	return nil
}

// ListReviewsResponseMultiError is an error wrapping multiple validation
// errors returned by ListReviewsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListReviewsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReviewsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReviewsResponseMultiError) AllErrors() []error { return m }

// ListReviewsResponseValidationError is the validation error returned by
// ListReviewsResponse.Validate if the designated constraints aren't met.
type ListReviewsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReviewsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReviewsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReviewsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReviewsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReviewsResponseValidationError) ErrorName() string {
	return "ListReviewsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListReviewsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReviewsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReviewsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReviewsResponseValidationError{}

// Validate checks the field values on GetReviewRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReviewRequestMultiError, or nil if none found.
func (m *GetReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReviewId

	if len(errors) > 0 {
		return GetReviewRequestMultiError(errors)
	}

	return nil
}

// GetReviewRequestMultiError is an error wrapping multiple validation errors
// returned by GetReviewRequest.ValidateAll() if the designated constraints
// aren't met.
type GetReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReviewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReviewRequestMultiError) AllErrors() []error { return m }

// GetReviewRequestValidationError is the validation error returned by
// GetReviewRequest.Validate if the designated constraints aren't met.
type GetReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewRequestValidationError) ErrorName() string { return "GetReviewRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewRequestValidationError{}

// Validate checks the field values on GetReviewResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetReviewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReviewResponseMultiError, or nil if none found.
func (m *GetReviewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReviewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetReviewResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetReviewResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReviewResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetReviewResponseMultiError(errors)
	}

	return nil
}

// GetReviewResponseMultiError is an error wrapping multiple validation errors
// returned by GetReviewResponse.ValidateAll() if the designated constraints
// aren't met.
type GetReviewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReviewResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReviewResponseMultiError) AllErrors() []error { return m }

// GetReviewResponseValidationError is the validation error returned by
// GetReviewResponse.Validate if the designated constraints aren't met.
type GetReviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewResponseValidationError) ErrorName() string {
	return "GetReviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewResponseValidationError{}

// Validate checks the field values on GetReviewResponse_Comment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReviewResponse_Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReviewResponse_Comment with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReviewResponse_CommentMultiError, or nil if none found.
func (m *GetReviewResponse_Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReviewResponse_Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuthorUserName

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReviewResponse_CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReviewResponse_CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReviewResponse_CommentValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetReviewResponse_CommentMultiError(errors)
	}

	return nil
}

// GetReviewResponse_CommentMultiError is an error wrapping multiple validation
// errors returned by GetReviewResponse_Comment.ValidateAll() if the
// designated constraints aren't met.
type GetReviewResponse_CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReviewResponse_CommentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReviewResponse_CommentMultiError) AllErrors() []error { return m }

// GetReviewResponse_CommentValidationError is the validation error returned by
// GetReviewResponse_Comment.Validate if the designated constraints aren't met.
type GetReviewResponse_CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewResponse_CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewResponse_CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewResponse_CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewResponse_CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewResponse_CommentValidationError) ErrorName() string {
	return "GetReviewResponse_CommentValidationError"
}

// Error satisfies the builtin error interface
func (e GetReviewResponse_CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewResponse_Comment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewResponse_CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewResponse_CommentValidationError{}
