// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: payment/service/v1/payment.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPaymentCreatePaymentChannel = "/payment.service.v1.Payment/CreatePaymentChannel"
const OperationPaymentCreatePaymentMethod = "/payment.service.v1.Payment/CreatePaymentMethod"
const OperationPaymentDepositCallback = "/payment.service.v1.Payment/DepositCallback"
const OperationPaymentGetAddress = "/payment.service.v1.Payment/GetAddress"
const OperationPaymentGetPaymentChannelPage = "/payment.service.v1.Payment/GetPaymentChannelPage"
const OperationPaymentGetPaymentMethodList = "/payment.service.v1.Payment/GetPaymentMethodList"
const OperationPaymentGetSupportedPaymentMethodList = "/payment.service.v1.Payment/GetSupportedPaymentMethodList"
const OperationPaymentGetTransactionPage = "/payment.service.v1.Payment/GetTransactionPage"
const OperationPaymentInitiateDeposit = "/payment.service.v1.Payment/InitiateDeposit"
const OperationPaymentOperatorDepositCallback = "/payment.service.v1.Payment/OperatorDepositCallback"
const OperationPaymentOperatorWithdrawCallback = "/payment.service.v1.Payment/OperatorWithdrawCallback"
const OperationPaymentUpdatePaymentChannel = "/payment.service.v1.Payment/UpdatePaymentChannel"
const OperationPaymentWithdrawCallback = "/payment.service.v1.Payment/WithdrawCallback"

type PaymentHTTPServer interface {
	// CreatePaymentChannel Create payment channel
	// Creates a new payment channel with specified configuration
	// Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
	CreatePaymentChannel(context.Context, *CreatePaymentChannelRequest) (*CreatePaymentChannelResponse, error)
	// CreatePaymentMethod Create payment channel
	// Creates a new payment channel with specified configuration
	// Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
	CreatePaymentMethod(context.Context, *CreatePaymentMethodRequest) (*CreatePaymentMethodResponse, error)
	// DepositCallback Deposit callback
	// Handles callbacks from payment gateways for deposit status updates
	// This endpoint is called by payment providers to notify of completed or failed deposits
	// Error code: DEPOSIT_CALLBACK_FAILED(50006) - Failed to process deposit callback
	DepositCallback(context.Context, *DepositCallbackRequest) (*DepositCallbackResponse, error)
	GetAddress(context.Context, *GetAddressRequest) (*GetAddressResponse, error)
	// GetPaymentChannelPage Get payment channel page with pagination and filters
	// Retrieves a paginated list of payment channels with optional filtering
	// Error code: GET_PAYMENT_CHANNEL_PAGE_FAILED(50003) - Failed to get payment channel page
	GetPaymentChannelPage(context.Context, *GetPaymentChannelPageRequest) (*GetPaymentChannelPageResponse, error)
	// GetPaymentMethodList Get list of payment methods
	// Retrieves all available payment methods supported by the system
	// Error code: GET_PAYMENT_METHOD_LIST_FAILED(50001) - Failed to get payment method list
	GetPaymentMethodList(context.Context, *GetPaymentMethodListRequest) (*GetPaymentMethodListResponse, error)
	// GetSupportedPaymentMethodList Get list of payment methods
	// Retrieves all available payment methods supported by the system
	// Error code: GET_PAYMENT_METHOD_LIST_FAILED(50001) - Failed to get payment method list
	GetSupportedPaymentMethodList(context.Context, *GetSupportedPaymentMethodListRequest) (*GetSupportedPaymentMethodListResponse, error)
	// GetTransactionPage Get transaction page with pagination and filters
	// Retrieves a paginated list of transactions with optional filtering
	// Error code: GET_TRANSACTION_PAGE_FAILED(50008) - Failed to get transaction page
	GetTransactionPage(context.Context, *GetTransactionPageRequest) (*GetTransactionPageResponse, error)
	// InitiateDeposit Initiate a deposit transaction
	// Starts a new deposit process and returns payment information
	// Error code: INITIATE_DEPOSIT_FAILED(50004) - Failed to initiate deposit transaction
	InitiateDeposit(context.Context, *InitiateDepositRequest) (*InitiateDepositResponse, error)
	// OperatorDepositCallback Deposit callback
	// Handles callbacks from payment gateways for deposit status updates
	// This endpoint is called by payment providers to notify of completed or failed deposits
	// Error code: DEPOSIT_CALLBACK_FAILED(50006) - Failed to process deposit callback
	OperatorDepositCallback(context.Context, *DepositCallbackRequest) (*DepositCallbackResponse, error)
	// OperatorWithdrawCallback Withdraw callback
	// Handles callbacks from payment gateways for withdrawal status updates
	// This endpoint is called by payment providers to notify of completed or failed withdrawals
	// Error code: WITHDRAW_CALLBACK_FAILED(50007) - Failed to process withdrawal callback
	OperatorWithdrawCallback(context.Context, *WithdrawCallbackRequest) (*WithdrawCallbackResponse, error)
	// UpdatePaymentChannel Create payment channel
	// Creates a new payment channel with specified configuration
	// Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
	UpdatePaymentChannel(context.Context, *UpdatePaymentChannelRequest) (*UpdatePaymentChannelResponse, error)
	// WithdrawCallback Withdraw callback
	// Handles callbacks from payment gateways for withdrawal status updates
	// This endpoint is called by payment providers to notify of completed or failed withdrawals
	// Error code: WITHDRAW_CALLBACK_FAILED(50007) - Failed to process withdrawal callback
	WithdrawCallback(context.Context, *WithdrawCallbackRequest) (*WithdrawCallbackResponse, error)
}

func RegisterPaymentHTTPServer(s *http.Server, srv PaymentHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/payment/supportedmethod/list", _Payment_GetSupportedPaymentMethodList0_HTTP_Handler(srv))
	r.POST("/v1/payment/method/create", _Payment_CreatePaymentMethod0_HTTP_Handler(srv))
	r.POST("/v1/payment/method/list", _Payment_GetPaymentMethodList0_HTTP_Handler(srv))
	r.POST("/v1/payment/channel/update", _Payment_UpdatePaymentChannel0_HTTP_Handler(srv))
	r.POST("/v1/payment/channel/create", _Payment_CreatePaymentChannel0_HTTP_Handler(srv))
	r.POST("/v1/payment/address/get", _Payment_GetAddress0_HTTP_Handler(srv))
	r.POST("/v1/payment/deposit/initiate", _Payment_InitiateDeposit0_HTTP_Handler(srv))
	r.POST("/v1/payment/deposit/callback", _Payment_DepositCallback0_HTTP_Handler(srv))
	r.POST("/v1/payment/withdraw/callback", _Payment_WithdrawCallback0_HTTP_Handler(srv))
	r.POST("/v1/payment/operator/deposit/callback", _Payment_OperatorDepositCallback0_HTTP_Handler(srv))
	r.POST("/v1/payment/operator/withdraw/callback", _Payment_OperatorWithdrawCallback0_HTTP_Handler(srv))
	r.POST("/v1/payment/transaction/page", _Payment_GetTransactionPage0_HTTP_Handler(srv))
	r.POST("/v1/payment/channel/page", _Payment_GetPaymentChannelPage0_HTTP_Handler(srv))
}

func _Payment_GetSupportedPaymentMethodList0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSupportedPaymentMethodListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentGetSupportedPaymentMethodList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSupportedPaymentMethodList(ctx, req.(*GetSupportedPaymentMethodListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSupportedPaymentMethodListResponse)
		return ctx.Result(200, reply)
	}
}

func _Payment_CreatePaymentMethod0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePaymentMethodRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentCreatePaymentMethod)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePaymentMethod(ctx, req.(*CreatePaymentMethodRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePaymentMethodResponse)
		return ctx.Result(200, reply)
	}
}

func _Payment_GetPaymentMethodList0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPaymentMethodListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentGetPaymentMethodList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPaymentMethodList(ctx, req.(*GetPaymentMethodListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPaymentMethodListResponse)
		return ctx.Result(200, reply)
	}
}

func _Payment_UpdatePaymentChannel0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePaymentChannelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentUpdatePaymentChannel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePaymentChannel(ctx, req.(*UpdatePaymentChannelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePaymentChannelResponse)
		return ctx.Result(200, reply)
	}
}

func _Payment_CreatePaymentChannel0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePaymentChannelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentCreatePaymentChannel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePaymentChannel(ctx, req.(*CreatePaymentChannelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePaymentChannelResponse)
		return ctx.Result(200, reply)
	}
}

func _Payment_GetAddress0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAddressRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentGetAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAddress(ctx, req.(*GetAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAddressResponse)
		return ctx.Result(200, reply)
	}
}

func _Payment_InitiateDeposit0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InitiateDepositRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentInitiateDeposit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InitiateDeposit(ctx, req.(*InitiateDepositRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InitiateDepositResponse)
		return ctx.Result(200, reply)
	}
}

func _Payment_DepositCallback0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DepositCallbackRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentDepositCallback)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DepositCallback(ctx, req.(*DepositCallbackRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DepositCallbackResponse)
		return ctx.Result(200, reply)
	}
}

func _Payment_WithdrawCallback0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WithdrawCallbackRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentWithdrawCallback)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WithdrawCallback(ctx, req.(*WithdrawCallbackRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WithdrawCallbackResponse)
		return ctx.Result(200, reply)
	}
}

func _Payment_OperatorDepositCallback0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DepositCallbackRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentOperatorDepositCallback)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OperatorDepositCallback(ctx, req.(*DepositCallbackRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DepositCallbackResponse)
		return ctx.Result(200, reply)
	}
}

func _Payment_OperatorWithdrawCallback0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WithdrawCallbackRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentOperatorWithdrawCallback)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OperatorWithdrawCallback(ctx, req.(*WithdrawCallbackRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WithdrawCallbackResponse)
		return ctx.Result(200, reply)
	}
}

func _Payment_GetTransactionPage0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTransactionPageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentGetTransactionPage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTransactionPage(ctx, req.(*GetTransactionPageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTransactionPageResponse)
		return ctx.Result(200, reply)
	}
}

func _Payment_GetPaymentChannelPage0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPaymentChannelPageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentGetPaymentChannelPage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPaymentChannelPage(ctx, req.(*GetPaymentChannelPageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPaymentChannelPageResponse)
		return ctx.Result(200, reply)
	}
}

type PaymentHTTPClient interface {
	CreatePaymentChannel(ctx context.Context, req *CreatePaymentChannelRequest, opts ...http.CallOption) (rsp *CreatePaymentChannelResponse, err error)
	CreatePaymentMethod(ctx context.Context, req *CreatePaymentMethodRequest, opts ...http.CallOption) (rsp *CreatePaymentMethodResponse, err error)
	DepositCallback(ctx context.Context, req *DepositCallbackRequest, opts ...http.CallOption) (rsp *DepositCallbackResponse, err error)
	GetAddress(ctx context.Context, req *GetAddressRequest, opts ...http.CallOption) (rsp *GetAddressResponse, err error)
	GetPaymentChannelPage(ctx context.Context, req *GetPaymentChannelPageRequest, opts ...http.CallOption) (rsp *GetPaymentChannelPageResponse, err error)
	GetPaymentMethodList(ctx context.Context, req *GetPaymentMethodListRequest, opts ...http.CallOption) (rsp *GetPaymentMethodListResponse, err error)
	GetSupportedPaymentMethodList(ctx context.Context, req *GetSupportedPaymentMethodListRequest, opts ...http.CallOption) (rsp *GetSupportedPaymentMethodListResponse, err error)
	GetTransactionPage(ctx context.Context, req *GetTransactionPageRequest, opts ...http.CallOption) (rsp *GetTransactionPageResponse, err error)
	InitiateDeposit(ctx context.Context, req *InitiateDepositRequest, opts ...http.CallOption) (rsp *InitiateDepositResponse, err error)
	OperatorDepositCallback(ctx context.Context, req *DepositCallbackRequest, opts ...http.CallOption) (rsp *DepositCallbackResponse, err error)
	OperatorWithdrawCallback(ctx context.Context, req *WithdrawCallbackRequest, opts ...http.CallOption) (rsp *WithdrawCallbackResponse, err error)
	UpdatePaymentChannel(ctx context.Context, req *UpdatePaymentChannelRequest, opts ...http.CallOption) (rsp *UpdatePaymentChannelResponse, err error)
	WithdrawCallback(ctx context.Context, req *WithdrawCallbackRequest, opts ...http.CallOption) (rsp *WithdrawCallbackResponse, err error)
}

type PaymentHTTPClientImpl struct {
	cc *http.Client
}

func NewPaymentHTTPClient(client *http.Client) PaymentHTTPClient {
	return &PaymentHTTPClientImpl{client}
}

func (c *PaymentHTTPClientImpl) CreatePaymentChannel(ctx context.Context, in *CreatePaymentChannelRequest, opts ...http.CallOption) (*CreatePaymentChannelResponse, error) {
	var out CreatePaymentChannelResponse
	pattern := "/v1/payment/channel/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPaymentCreatePaymentChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PaymentHTTPClientImpl) CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, opts ...http.CallOption) (*CreatePaymentMethodResponse, error) {
	var out CreatePaymentMethodResponse
	pattern := "/v1/payment/method/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPaymentCreatePaymentMethod))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PaymentHTTPClientImpl) DepositCallback(ctx context.Context, in *DepositCallbackRequest, opts ...http.CallOption) (*DepositCallbackResponse, error) {
	var out DepositCallbackResponse
	pattern := "/v1/payment/deposit/callback"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPaymentDepositCallback))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PaymentHTTPClientImpl) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...http.CallOption) (*GetAddressResponse, error) {
	var out GetAddressResponse
	pattern := "/v1/payment/address/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPaymentGetAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PaymentHTTPClientImpl) GetPaymentChannelPage(ctx context.Context, in *GetPaymentChannelPageRequest, opts ...http.CallOption) (*GetPaymentChannelPageResponse, error) {
	var out GetPaymentChannelPageResponse
	pattern := "/v1/payment/channel/page"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPaymentGetPaymentChannelPage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PaymentHTTPClientImpl) GetPaymentMethodList(ctx context.Context, in *GetPaymentMethodListRequest, opts ...http.CallOption) (*GetPaymentMethodListResponse, error) {
	var out GetPaymentMethodListResponse
	pattern := "/v1/payment/method/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPaymentGetPaymentMethodList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PaymentHTTPClientImpl) GetSupportedPaymentMethodList(ctx context.Context, in *GetSupportedPaymentMethodListRequest, opts ...http.CallOption) (*GetSupportedPaymentMethodListResponse, error) {
	var out GetSupportedPaymentMethodListResponse
	pattern := "/v1/payment/supportedmethod/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPaymentGetSupportedPaymentMethodList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PaymentHTTPClientImpl) GetTransactionPage(ctx context.Context, in *GetTransactionPageRequest, opts ...http.CallOption) (*GetTransactionPageResponse, error) {
	var out GetTransactionPageResponse
	pattern := "/v1/payment/transaction/page"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPaymentGetTransactionPage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PaymentHTTPClientImpl) InitiateDeposit(ctx context.Context, in *InitiateDepositRequest, opts ...http.CallOption) (*InitiateDepositResponse, error) {
	var out InitiateDepositResponse
	pattern := "/v1/payment/deposit/initiate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPaymentInitiateDeposit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PaymentHTTPClientImpl) OperatorDepositCallback(ctx context.Context, in *DepositCallbackRequest, opts ...http.CallOption) (*DepositCallbackResponse, error) {
	var out DepositCallbackResponse
	pattern := "/v1/payment/operator/deposit/callback"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPaymentOperatorDepositCallback))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PaymentHTTPClientImpl) OperatorWithdrawCallback(ctx context.Context, in *WithdrawCallbackRequest, opts ...http.CallOption) (*WithdrawCallbackResponse, error) {
	var out WithdrawCallbackResponse
	pattern := "/v1/payment/operator/withdraw/callback"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPaymentOperatorWithdrawCallback))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PaymentHTTPClientImpl) UpdatePaymentChannel(ctx context.Context, in *UpdatePaymentChannelRequest, opts ...http.CallOption) (*UpdatePaymentChannelResponse, error) {
	var out UpdatePaymentChannelResponse
	pattern := "/v1/payment/channel/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPaymentUpdatePaymentChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PaymentHTTPClientImpl) WithdrawCallback(ctx context.Context, in *WithdrawCallbackRequest, opts ...http.CallOption) (*WithdrawCallbackResponse, error) {
	var out WithdrawCallbackResponse
	pattern := "/v1/payment/withdraw/callback"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPaymentWithdrawCallback))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
