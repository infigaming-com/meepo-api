// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: payment/service/v1/payment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetSupportedPaymentMethodListRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetSupportedPaymentMethodListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSupportedPaymentMethodListRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSupportedPaymentMethodListRequestMultiError, or nil if none found.
func (m *GetSupportedPaymentMethodListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSupportedPaymentMethodListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSupportedPaymentMethodListRequestMultiError(errors)
	}

	return nil
}

// GetSupportedPaymentMethodListRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetSupportedPaymentMethodListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSupportedPaymentMethodListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSupportedPaymentMethodListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSupportedPaymentMethodListRequestMultiError) AllErrors() []error { return m }

// GetSupportedPaymentMethodListRequestValidationError is the validation error
// returned by GetSupportedPaymentMethodListRequest.Validate if the designated
// constraints aren't met.
type GetSupportedPaymentMethodListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSupportedPaymentMethodListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSupportedPaymentMethodListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSupportedPaymentMethodListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSupportedPaymentMethodListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSupportedPaymentMethodListRequestValidationError) ErrorName() string {
	return "GetSupportedPaymentMethodListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSupportedPaymentMethodListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSupportedPaymentMethodListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSupportedPaymentMethodListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSupportedPaymentMethodListRequestValidationError{}

// Validate checks the field values on GetPaymentMethodListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentMethodListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentMethodListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentMethodListRequestMultiError, or nil if none found.
func (m *GetPaymentMethodListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentMethodListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	// no validation rules for Psp

	// no validation rules for Page

	// no validation rules for PageSize

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPaymentMethodListRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPaymentMethodListRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaymentMethodListRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if len(errors) > 0 {
		return GetPaymentMethodListRequestMultiError(errors)
	}

	return nil
}

// GetPaymentMethodListRequestMultiError is an error wrapping multiple
// validation errors returned by GetPaymentMethodListRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPaymentMethodListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentMethodListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentMethodListRequestMultiError) AllErrors() []error { return m }

// GetPaymentMethodListRequestValidationError is the validation error returned
// by GetPaymentMethodListRequest.Validate if the designated constraints
// aren't met.
type GetPaymentMethodListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentMethodListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentMethodListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentMethodListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentMethodListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentMethodListRequestValidationError) ErrorName() string {
	return "GetPaymentMethodListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentMethodListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentMethodListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentMethodListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentMethodListRequestValidationError{}

// Validate checks the field values on PaymentMethodInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PaymentMethodInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentMethodInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentMethodInfoMultiError, or nil if none found.
func (m *PaymentMethodInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentMethodInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Psp

	// no validation rules for SupportedType

	// no validation rules for Currency

	// no validation rules for CurrencyType

	// no validation rules for Contact

	// no validation rules for Country

	// no validation rules for PaymentMethod

	// no validation rules for SysFixedFee

	// no validation rules for SysFeeRate

	// no validation rules for SysMinAmount

	// no validation rules for SysMaxAmount

	// no validation rules for SysMinFee

	// no validation rules for PspFixedFee

	// no validation rules for PspFeeRate

	// no validation rules for PspMinAmount

	// no validation rules for PspMaxAmount

	// no validation rules for PspMinFee

	// no validation rules for Enable

	// no validation rules for Network

	// no validation rules for Protocol

	// no validation rules for Source

	// no validation rules for AverageTime

	// no validation rules for SuccessRate

	if all {
		switch v := interface{}(m.GetKeySchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMethodInfoValidationError{
					field:  "KeySchema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMethodInfoValidationError{
					field:  "KeySchema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKeySchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMethodInfoValidationError{
				field:  "KeySchema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PspId

	if len(errors) > 0 {
		return PaymentMethodInfoMultiError(errors)
	}

	return nil
}

// PaymentMethodInfoMultiError is an error wrapping multiple validation errors
// returned by PaymentMethodInfo.ValidateAll() if the designated constraints
// aren't met.
type PaymentMethodInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMethodInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMethodInfoMultiError) AllErrors() []error { return m }

// PaymentMethodInfoValidationError is the validation error returned by
// PaymentMethodInfo.Validate if the designated constraints aren't met.
type PaymentMethodInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMethodInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMethodInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMethodInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMethodInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMethodInfoValidationError) ErrorName() string {
	return "PaymentMethodInfoValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentMethodInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMethodInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMethodInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMethodInfoValidationError{}

// Validate checks the field values on GetSupportedPaymentMethodListResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetSupportedPaymentMethodListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSupportedPaymentMethodListResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSupportedPaymentMethodListResponseMultiError, or nil if none found.
func (m *GetSupportedPaymentMethodListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSupportedPaymentMethodListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPaymentMethods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSupportedPaymentMethodListResponseValidationError{
						field:  fmt.Sprintf("PaymentMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSupportedPaymentMethodListResponseValidationError{
						field:  fmt.Sprintf("PaymentMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSupportedPaymentMethodListResponseValidationError{
					field:  fmt.Sprintf("PaymentMethods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSupportedPaymentMethodListResponseMultiError(errors)
	}

	return nil
}

// GetSupportedPaymentMethodListResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetSupportedPaymentMethodListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSupportedPaymentMethodListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSupportedPaymentMethodListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSupportedPaymentMethodListResponseMultiError) AllErrors() []error { return m }

// GetSupportedPaymentMethodListResponseValidationError is the validation error
// returned by GetSupportedPaymentMethodListResponse.Validate if the
// designated constraints aren't met.
type GetSupportedPaymentMethodListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSupportedPaymentMethodListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSupportedPaymentMethodListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSupportedPaymentMethodListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSupportedPaymentMethodListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSupportedPaymentMethodListResponseValidationError) ErrorName() string {
	return "GetSupportedPaymentMethodListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSupportedPaymentMethodListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSupportedPaymentMethodListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSupportedPaymentMethodListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSupportedPaymentMethodListResponseValidationError{}

// Validate checks the field values on GetPaymentMethodListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentMethodListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentMethodListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentMethodListResponseMultiError, or nil if none found.
func (m *GetPaymentMethodListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentMethodListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPaymentMethods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPaymentMethodListResponseValidationError{
						field:  fmt.Sprintf("PaymentMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPaymentMethodListResponseValidationError{
						field:  fmt.Sprintf("PaymentMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPaymentMethodListResponseValidationError{
					field:  fmt.Sprintf("PaymentMethods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for TotalPages

	// no validation rules for TotalOn

	// no validation rules for TotalOff

	if len(errors) > 0 {
		return GetPaymentMethodListResponseMultiError(errors)
	}

	return nil
}

// GetPaymentMethodListResponseMultiError is an error wrapping multiple
// validation errors returned by GetPaymentMethodListResponse.ValidateAll() if
// the designated constraints aren't met.
type GetPaymentMethodListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentMethodListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentMethodListResponseMultiError) AllErrors() []error { return m }

// GetPaymentMethodListResponseValidationError is the validation error returned
// by GetPaymentMethodListResponse.Validate if the designated constraints
// aren't met.
type GetPaymentMethodListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentMethodListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentMethodListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentMethodListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentMethodListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentMethodListResponseValidationError) ErrorName() string {
	return "GetPaymentMethodListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentMethodListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentMethodListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentMethodListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentMethodListResponseValidationError{}

// Validate checks the field values on CreatePaymentMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentMethodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentMethodRequestMultiError, or nil if none found.
func (m *CreatePaymentMethodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentMethodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentMethodId

	// no validation rules for Contact

	// no validation rules for SysFixedFee

	// no validation rules for SysFeeRate

	// no validation rules for SysMinAmount

	// no validation rules for SysMaxAmount

	// no validation rules for SysMinFee

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePaymentMethodRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePaymentMethodRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentMethodRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePaymentMethodRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentMethodRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePaymentMethodRequest.ValidateAll() if
// the designated constraints aren't met.
type CreatePaymentMethodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentMethodRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentMethodRequestMultiError) AllErrors() []error { return m }

// CreatePaymentMethodRequestValidationError is the validation error returned
// by CreatePaymentMethodRequest.Validate if the designated constraints aren't met.
type CreatePaymentMethodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentMethodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentMethodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentMethodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentMethodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentMethodRequestValidationError) ErrorName() string {
	return "CreatePaymentMethodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentMethodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentMethodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentMethodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentMethodRequestValidationError{}

// Validate checks the field values on CreatePaymentMethodResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentMethodResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentMethodResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentMethodResponseMultiError, or nil if none found.
func (m *CreatePaymentMethodResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentMethodResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaymentMethod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePaymentMethodResponseValidationError{
					field:  "PaymentMethod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePaymentMethodResponseValidationError{
					field:  "PaymentMethod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentMethod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentMethodResponseValidationError{
				field:  "PaymentMethod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePaymentMethodResponseMultiError(errors)
	}

	return nil
}

// CreatePaymentMethodResponseMultiError is an error wrapping multiple
// validation errors returned by CreatePaymentMethodResponse.ValidateAll() if
// the designated constraints aren't met.
type CreatePaymentMethodResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentMethodResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentMethodResponseMultiError) AllErrors() []error { return m }

// CreatePaymentMethodResponseValidationError is the validation error returned
// by CreatePaymentMethodResponse.Validate if the designated constraints
// aren't met.
type CreatePaymentMethodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentMethodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentMethodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentMethodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentMethodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentMethodResponseValidationError) ErrorName() string {
	return "CreatePaymentMethodResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentMethodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentMethodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentMethodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentMethodResponseValidationError{}

// Validate checks the field values on UpdatePaymentChannelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePaymentChannelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePaymentChannelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePaymentChannelResponseMultiError, or nil if none found.
func (m *UpdatePaymentChannelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePaymentChannelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaymentMethods()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePaymentChannelResponseValidationError{
					field:  "PaymentMethods",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePaymentChannelResponseValidationError{
					field:  "PaymentMethods",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaymentMethods()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePaymentChannelResponseValidationError{
				field:  "PaymentMethods",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePaymentChannelResponseMultiError(errors)
	}

	return nil
}

// UpdatePaymentChannelResponseMultiError is an error wrapping multiple
// validation errors returned by UpdatePaymentChannelResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdatePaymentChannelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePaymentChannelResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePaymentChannelResponseMultiError) AllErrors() []error { return m }

// UpdatePaymentChannelResponseValidationError is the validation error returned
// by UpdatePaymentChannelResponse.Validate if the designated constraints
// aren't met.
type UpdatePaymentChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePaymentChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePaymentChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePaymentChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePaymentChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePaymentChannelResponseValidationError) ErrorName() string {
	return "UpdatePaymentChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePaymentChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePaymentChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePaymentChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePaymentChannelResponseValidationError{}

// Validate checks the field values on CreatePaymentChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentChannelRequestMultiError, or nil if none found.
func (m *CreatePaymentChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MerchantId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePaymentChannelRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePaymentChannelRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentChannelRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PaymentMethodId

	// no validation rules for Contact

	// no validation rules for FixedFee

	// no validation rules for FeeRate

	// no validation rules for MinFee

	// no validation rules for UserFixedFee

	// no validation rules for UserFeeRate

	// no validation rules for UserMinFee

	// no validation rules for MinAmount

	// no validation rules for MaxAmount

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePaymentChannelRequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePaymentChannelRequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentChannelRequestValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePaymentChannelRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentChannelRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePaymentChannelRequest.ValidateAll() if
// the designated constraints aren't met.
type CreatePaymentChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentChannelRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentChannelRequestMultiError) AllErrors() []error { return m }

// CreatePaymentChannelRequestValidationError is the validation error returned
// by CreatePaymentChannelRequest.Validate if the designated constraints
// aren't met.
type CreatePaymentChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentChannelRequestValidationError) ErrorName() string {
	return "CreatePaymentChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentChannelRequestValidationError{}

// Validate checks the field values on UpdatePaymentChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePaymentChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePaymentChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePaymentChannelRequestMultiError, or nil if none found.
func (m *UpdatePaymentChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePaymentChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentChannelId

	// no validation rules for Contact

	// no validation rules for FixedFee

	// no validation rules for FeeRate

	// no validation rules for MinFee

	// no validation rules for UserFixedFee

	// no validation rules for UserFeeRate

	// no validation rules for UserMinFee

	// no validation rules for MinAmount

	// no validation rules for MaxAmount

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePaymentChannelRequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePaymentChannelRequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePaymentChannelRequestValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Enable != nil {
		// no validation rules for Enable
	}

	if len(errors) > 0 {
		return UpdatePaymentChannelRequestMultiError(errors)
	}

	return nil
}

// UpdatePaymentChannelRequestMultiError is an error wrapping multiple
// validation errors returned by UpdatePaymentChannelRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdatePaymentChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePaymentChannelRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePaymentChannelRequestMultiError) AllErrors() []error { return m }

// UpdatePaymentChannelRequestValidationError is the validation error returned
// by UpdatePaymentChannelRequest.Validate if the designated constraints
// aren't met.
type UpdatePaymentChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePaymentChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePaymentChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePaymentChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePaymentChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePaymentChannelRequestValidationError) ErrorName() string {
	return "UpdatePaymentChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePaymentChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePaymentChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePaymentChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePaymentChannelRequestValidationError{}

// Validate checks the field values on CreatePaymentChannelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentChannelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentChannelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentChannelResponseMultiError, or nil if none found.
func (m *CreatePaymentChannelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentChannelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelId

	if len(errors) > 0 {
		return CreatePaymentChannelResponseMultiError(errors)
	}

	return nil
}

// CreatePaymentChannelResponseMultiError is an error wrapping multiple
// validation errors returned by CreatePaymentChannelResponse.ValidateAll() if
// the designated constraints aren't met.
type CreatePaymentChannelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentChannelResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentChannelResponseMultiError) AllErrors() []error { return m }

// CreatePaymentChannelResponseValidationError is the validation error returned
// by CreatePaymentChannelResponse.Validate if the designated constraints
// aren't met.
type CreatePaymentChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentChannelResponseValidationError) ErrorName() string {
	return "CreatePaymentChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentChannelResponseValidationError{}

// Validate checks the field values on PaymentChannelInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaymentChannelInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentChannelInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentChannelInfoMultiError, or nil if none found.
func (m *PaymentChannelInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentChannelInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelId

	// no validation rules for SupportType

	// no validation rules for Psp

	// no validation rules for Category

	// no validation rules for PaymentMethod

	// no validation rules for Tag

	// no validation rules for Name

	// no validation rules for PaymentMethodId

	// no validation rules for Currency

	// no validation rules for CurrencyType

	// no validation rules for Protocol

	// no validation rules for Network

	// no validation rules for Country

	// no validation rules for Method

	// no validation rules for Logo

	// no validation rules for MinAmount

	// no validation rules for MaxAmount

	// no validation rules for FixedFee

	// no validation rules for FeeRate

	// no validation rules for MinFee

	// no validation rules for PspMinAmount

	// no validation rules for PspMaxAmount

	// no validation rules for PspFixedFee

	// no validation rules for PspFeeRate

	// no validation rules for PspMinFee

	// no validation rules for SysMinAmount

	// no validation rules for SysMaxAmount

	// no validation rules for SysFixedFee

	// no validation rules for SysFeeRate

	// no validation rules for SysMinFee

	// no validation rules for UserFixedFee

	// no validation rules for UserFeeRate

	// no validation rules for UserMinFee

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentChannelInfoValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentChannelInfoValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentChannelInfoValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Enable

	// no validation rules for Contact

	// no validation rules for Eat

	// no validation rules for OperatorId

	// no validation rules for CompanyOperatorId

	// no validation rules for RetailerOperatorId

	// no validation rules for SystemOperatorId

	// no validation rules for OperatorName

	// no validation rules for CompanyOperatorName

	// no validation rules for RetailerOperatorName

	// no validation rules for SystemOperatorName

	// no validation rules for OperatorType

	// no validation rules for PspId

	if len(errors) > 0 {
		return PaymentChannelInfoMultiError(errors)
	}

	return nil
}

// PaymentChannelInfoMultiError is an error wrapping multiple validation errors
// returned by PaymentChannelInfo.ValidateAll() if the designated constraints
// aren't met.
type PaymentChannelInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentChannelInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentChannelInfoMultiError) AllErrors() []error { return m }

// PaymentChannelInfoValidationError is the validation error returned by
// PaymentChannelInfo.Validate if the designated constraints aren't met.
type PaymentChannelInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentChannelInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentChannelInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentChannelInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentChannelInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentChannelInfoValidationError) ErrorName() string {
	return "PaymentChannelInfoValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentChannelInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentChannelInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentChannelInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentChannelInfoValidationError{}

// Validate checks the field values on InitiateDepositRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitiateDepositRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitiateDepositRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitiateDepositRequestMultiError, or nil if none found.
func (m *InitiateDepositRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiateDepositRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for ChannelId

	if all {
		switch v := interface{}(m.GetExtra()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateDepositRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateDepositRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateDepositRequestValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InitiateDepositRequestMultiError(errors)
	}

	return nil
}

// InitiateDepositRequestMultiError is an error wrapping multiple validation
// errors returned by InitiateDepositRequest.ValidateAll() if the designated
// constraints aren't met.
type InitiateDepositRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiateDepositRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiateDepositRequestMultiError) AllErrors() []error { return m }

// InitiateDepositRequestValidationError is the validation error returned by
// InitiateDepositRequest.Validate if the designated constraints aren't met.
type InitiateDepositRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiateDepositRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiateDepositRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiateDepositRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiateDepositRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiateDepositRequestValidationError) ErrorName() string {
	return "InitiateDepositRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InitiateDepositRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiateDepositRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiateDepositRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiateDepositRequestValidationError{}

// Validate checks the field values on InitiateDepositResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitiateDepositResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitiateDepositResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitiateDepositResponseMultiError, or nil if none found.
func (m *InitiateDepositResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiateDepositResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for Status

	// no validation rules for PayUrl

	// no validation rules for QrCode

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateDepositResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateDepositResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateDepositResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExtra()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateDepositResponseValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateDepositResponseValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateDepositResponseValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InitiateDepositResponseMultiError(errors)
	}

	return nil
}

// InitiateDepositResponseMultiError is an error wrapping multiple validation
// errors returned by InitiateDepositResponse.ValidateAll() if the designated
// constraints aren't met.
type InitiateDepositResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiateDepositResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiateDepositResponseMultiError) AllErrors() []error { return m }

// InitiateDepositResponseValidationError is the validation error returned by
// InitiateDepositResponse.Validate if the designated constraints aren't met.
type InitiateDepositResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiateDepositResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiateDepositResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiateDepositResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiateDepositResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiateDepositResponseValidationError) ErrorName() string {
	return "InitiateDepositResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InitiateDepositResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiateDepositResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiateDepositResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiateDepositResponseValidationError{}

// Validate checks the field values on GetAddressRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAddressRequestMultiError, or nil if none found.
func (m *GetAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelId

	if all {
		switch v := interface{}(m.GetExtra()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAddressRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAddressRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAddressRequestValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAddressRequestMultiError(errors)
	}

	return nil
}

// GetAddressRequestMultiError is an error wrapping multiple validation errors
// returned by GetAddressRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAddressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAddressRequestMultiError) AllErrors() []error { return m }

// GetAddressRequestValidationError is the validation error returned by
// GetAddressRequest.Validate if the designated constraints aren't met.
type GetAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressRequestValidationError) ErrorName() string {
	return "GetAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressRequestValidationError{}

// Validate checks the field values on GetAddressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAddressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAddressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAddressResponseMultiError, or nil if none found.
func (m *GetAddressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAddressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAddressResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAddressResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAddressResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAddressResponseMultiError(errors)
	}

	return nil
}

// GetAddressResponseMultiError is an error wrapping multiple validation errors
// returned by GetAddressResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAddressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAddressResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAddressResponseMultiError) AllErrors() []error { return m }

// GetAddressResponseValidationError is the validation error returned by
// GetAddressResponse.Validate if the designated constraints aren't met.
type GetAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressResponseValidationError) ErrorName() string {
	return "GetAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressResponseValidationError{}

// Validate checks the field values on GetOperatorAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorAddressRequestMultiError, or nil if none found.
func (m *GetOperatorAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelId

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorAddressRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorAddressRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorAddressRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExtra()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorAddressRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorAddressRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorAddressRequestValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorAddressRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorAddressRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorAddressRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOperatorAddressRequestMultiError(errors)
	}

	return nil
}

// GetOperatorAddressRequestMultiError is an error wrapping multiple validation
// errors returned by GetOperatorAddressRequest.ValidateAll() if the
// designated constraints aren't met.
type GetOperatorAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorAddressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorAddressRequestMultiError) AllErrors() []error { return m }

// GetOperatorAddressRequestValidationError is the validation error returned by
// GetOperatorAddressRequest.Validate if the designated constraints aren't met.
type GetOperatorAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorAddressRequestValidationError) ErrorName() string {
	return "GetOperatorAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorAddressRequestValidationError{}

// Validate checks the field values on GetOperatorAddressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorAddressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorAddressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorAddressResponseMultiError, or nil if none found.
func (m *GetOperatorAddressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorAddressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorAddressResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorAddressResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorAddressResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOperatorAddressResponseMultiError(errors)
	}

	return nil
}

// GetOperatorAddressResponseMultiError is an error wrapping multiple
// validation errors returned by GetOperatorAddressResponse.ValidateAll() if
// the designated constraints aren't met.
type GetOperatorAddressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorAddressResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorAddressResponseMultiError) AllErrors() []error { return m }

// GetOperatorAddressResponseValidationError is the validation error returned
// by GetOperatorAddressResponse.Validate if the designated constraints aren't met.
type GetOperatorAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorAddressResponseValidationError) ErrorName() string {
	return "GetOperatorAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorAddressResponseValidationError{}

// Validate checks the field values on InitiateWithdrawRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitiateWithdrawRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitiateWithdrawRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitiateWithdrawRequestMultiError, or nil if none found.
func (m *InitiateWithdrawRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiateWithdrawRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for ReportingCurrency

	// no validation rules for UserId

	// no validation rules for ChannelId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateWithdrawRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateWithdrawRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateWithdrawRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExtra()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateWithdrawRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateWithdrawRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateWithdrawRequestValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InitiateWithdrawRequestMultiError(errors)
	}

	return nil
}

// InitiateWithdrawRequestMultiError is an error wrapping multiple validation
// errors returned by InitiateWithdrawRequest.ValidateAll() if the designated
// constraints aren't met.
type InitiateWithdrawRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiateWithdrawRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiateWithdrawRequestMultiError) AllErrors() []error { return m }

// InitiateWithdrawRequestValidationError is the validation error returned by
// InitiateWithdrawRequest.Validate if the designated constraints aren't met.
type InitiateWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiateWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiateWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiateWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiateWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiateWithdrawRequestValidationError) ErrorName() string {
	return "InitiateWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InitiateWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiateWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiateWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiateWithdrawRequestValidationError{}

// Validate checks the field values on InitiateWithdrawResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitiateWithdrawResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitiateWithdrawResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitiateWithdrawResponseMultiError, or nil if none found.
func (m *InitiateWithdrawResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiateWithdrawResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	// no validation rules for OperatorOrderNo

	// no validation rules for Amount

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateWithdrawResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateWithdrawResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateWithdrawResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InitiateWithdrawResponseMultiError(errors)
	}

	return nil
}

// InitiateWithdrawResponseMultiError is an error wrapping multiple validation
// errors returned by InitiateWithdrawResponse.ValidateAll() if the designated
// constraints aren't met.
type InitiateWithdrawResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiateWithdrawResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiateWithdrawResponseMultiError) AllErrors() []error { return m }

// InitiateWithdrawResponseValidationError is the validation error returned by
// InitiateWithdrawResponse.Validate if the designated constraints aren't met.
type InitiateWithdrawResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiateWithdrawResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiateWithdrawResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiateWithdrawResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiateWithdrawResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiateWithdrawResponseValidationError) ErrorName() string {
	return "InitiateWithdrawResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InitiateWithdrawResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiateWithdrawResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiateWithdrawResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiateWithdrawResponseValidationError{}

// Validate checks the field values on InitiateOperatorWithdrawRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitiateOperatorWithdrawRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitiateOperatorWithdrawRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InitiateOperatorWithdrawRequestMultiError, or nil if none found.
func (m *InitiateOperatorWithdrawRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiateOperatorWithdrawRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for ReportingCurrency

	// no validation rules for AdminUserId

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateOperatorWithdrawRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateOperatorWithdrawRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateOperatorWithdrawRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateOperatorWithdrawRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateOperatorWithdrawRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateOperatorWithdrawRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ChannelId

	// no validation rules for Memo

	if all {
		switch v := interface{}(m.GetExtra()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateOperatorWithdrawRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateOperatorWithdrawRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateOperatorWithdrawRequestValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InitiateOperatorWithdrawRequestMultiError(errors)
	}

	return nil
}

// InitiateOperatorWithdrawRequestMultiError is an error wrapping multiple
// validation errors returned by InitiateOperatorWithdrawRequest.ValidateAll()
// if the designated constraints aren't met.
type InitiateOperatorWithdrawRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiateOperatorWithdrawRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiateOperatorWithdrawRequestMultiError) AllErrors() []error { return m }

// InitiateOperatorWithdrawRequestValidationError is the validation error
// returned by InitiateOperatorWithdrawRequest.Validate if the designated
// constraints aren't met.
type InitiateOperatorWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiateOperatorWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiateOperatorWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiateOperatorWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiateOperatorWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiateOperatorWithdrawRequestValidationError) ErrorName() string {
	return "InitiateOperatorWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InitiateOperatorWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiateOperatorWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiateOperatorWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiateOperatorWithdrawRequestValidationError{}

// Validate checks the field values on InitiateOperatorWithdrawResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *InitiateOperatorWithdrawResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitiateOperatorWithdrawResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InitiateOperatorWithdrawResponseMultiError, or nil if none found.
func (m *InitiateOperatorWithdrawResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiateOperatorWithdrawResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	// no validation rules for OperatorOrderNo

	// no validation rules for Amount

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateOperatorWithdrawResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateOperatorWithdrawResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateOperatorWithdrawResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InitiateOperatorWithdrawResponseMultiError(errors)
	}

	return nil
}

// InitiateOperatorWithdrawResponseMultiError is an error wrapping multiple
// validation errors returned by
// InitiateOperatorWithdrawResponse.ValidateAll() if the designated
// constraints aren't met.
type InitiateOperatorWithdrawResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiateOperatorWithdrawResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiateOperatorWithdrawResponseMultiError) AllErrors() []error { return m }

// InitiateOperatorWithdrawResponseValidationError is the validation error
// returned by InitiateOperatorWithdrawResponse.Validate if the designated
// constraints aren't met.
type InitiateOperatorWithdrawResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiateOperatorWithdrawResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiateOperatorWithdrawResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiateOperatorWithdrawResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiateOperatorWithdrawResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiateOperatorWithdrawResponseValidationError) ErrorName() string {
	return "InitiateOperatorWithdrawResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InitiateOperatorWithdrawResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiateOperatorWithdrawResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiateOperatorWithdrawResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiateOperatorWithdrawResponseValidationError{}

// Validate checks the field values on DepositCallbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DepositCallbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DepositCallbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DepositCallbackRequestMultiError, or nil if none found.
func (m *DepositCallbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DepositCallbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaTransactionNo

	// no validation rules for GatewayOrderNo

	// no validation rules for TransactionNo

	// no validation rules for OrderStatus

	// no validation rules for PayTime

	// no validation rules for CreateTime

	// no validation rules for Amount

	// no validation rules for Money

	// no validation rules for Address

	// no validation rules for Sign

	// no validation rules for Timestamp

	// no validation rules for Nonce

	if len(errors) > 0 {
		return DepositCallbackRequestMultiError(errors)
	}

	return nil
}

// DepositCallbackRequestMultiError is an error wrapping multiple validation
// errors returned by DepositCallbackRequest.ValidateAll() if the designated
// constraints aren't met.
type DepositCallbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DepositCallbackRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DepositCallbackRequestMultiError) AllErrors() []error { return m }

// DepositCallbackRequestValidationError is the validation error returned by
// DepositCallbackRequest.Validate if the designated constraints aren't met.
type DepositCallbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepositCallbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepositCallbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepositCallbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepositCallbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepositCallbackRequestValidationError) ErrorName() string {
	return "DepositCallbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DepositCallbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepositCallbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepositCallbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepositCallbackRequestValidationError{}

// Validate checks the field values on DepositCallbackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DepositCallbackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DepositCallbackResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DepositCallbackResponseMultiError, or nil if none found.
func (m *DepositCallbackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DepositCallbackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return DepositCallbackResponseMultiError(errors)
	}

	return nil
}

// DepositCallbackResponseMultiError is an error wrapping multiple validation
// errors returned by DepositCallbackResponse.ValidateAll() if the designated
// constraints aren't met.
type DepositCallbackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DepositCallbackResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DepositCallbackResponseMultiError) AllErrors() []error { return m }

// DepositCallbackResponseValidationError is the validation error returned by
// DepositCallbackResponse.Validate if the designated constraints aren't met.
type DepositCallbackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepositCallbackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepositCallbackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepositCallbackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepositCallbackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepositCallbackResponseValidationError) ErrorName() string {
	return "DepositCallbackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DepositCallbackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepositCallbackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepositCallbackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepositCallbackResponseValidationError{}

// Validate checks the field values on WithdrawCallbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WithdrawCallbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawCallbackRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawCallbackRequestMultiError, or nil if none found.
func (m *WithdrawCallbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawCallbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaTransactionNo

	// no validation rules for GatewayOrderNo

	// no validation rules for TransactionNo

	// no validation rules for OrderStatus

	// no validation rules for PayTime

	// no validation rules for CreateTime

	// no validation rules for Amount

	// no validation rules for Fee

	// no validation rules for RealMoney

	// no validation rules for Sign

	// no validation rules for Timestamp

	// no validation rules for Nonce

	if len(errors) > 0 {
		return WithdrawCallbackRequestMultiError(errors)
	}

	return nil
}

// WithdrawCallbackRequestMultiError is an error wrapping multiple validation
// errors returned by WithdrawCallbackRequest.ValidateAll() if the designated
// constraints aren't met.
type WithdrawCallbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawCallbackRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawCallbackRequestMultiError) AllErrors() []error { return m }

// WithdrawCallbackRequestValidationError is the validation error returned by
// WithdrawCallbackRequest.Validate if the designated constraints aren't met.
type WithdrawCallbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawCallbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawCallbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawCallbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawCallbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawCallbackRequestValidationError) ErrorName() string {
	return "WithdrawCallbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WithdrawCallbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawCallbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawCallbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawCallbackRequestValidationError{}

// Validate checks the field values on WithdrawCallbackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WithdrawCallbackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawCallbackResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawCallbackResponseMultiError, or nil if none found.
func (m *WithdrawCallbackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawCallbackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return WithdrawCallbackResponseMultiError(errors)
	}

	return nil
}

// WithdrawCallbackResponseMultiError is an error wrapping multiple validation
// errors returned by WithdrawCallbackResponse.ValidateAll() if the designated
// constraints aren't met.
type WithdrawCallbackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawCallbackResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawCallbackResponseMultiError) AllErrors() []error { return m }

// WithdrawCallbackResponseValidationError is the validation error returned by
// WithdrawCallbackResponse.Validate if the designated constraints aren't met.
type WithdrawCallbackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawCallbackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawCallbackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawCallbackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawCallbackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawCallbackResponseValidationError) ErrorName() string {
	return "WithdrawCallbackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WithdrawCallbackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawCallbackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawCallbackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawCallbackResponseValidationError{}

// Validate checks the field values on TransactionInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransactionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionInfoMultiError, or nil if none found.
func (m *TransactionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	// no validation rules for PaTransactionId

	// no validation rules for GatewayTransactionId

	// no validation rules for OperatorId

	// no validation rules for CompanyOperatorId

	// no validation rules for RetailerOperatorId

	// no validation rules for SystemOperatorId

	// no validation rules for OperatorName

	// no validation rules for CompanyOperatorName

	// no validation rules for RetailerOperatorName

	// no validation rules for SystemOperatorName

	// no validation rules for UserId

	// no validation rules for Vip

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for ProcessingFee

	// no validation rules for PaymentMethod

	// no validation rules for PaymentChannel

	// no validation rules for Protocol

	// no validation rules for Network

	// no validation rules for Address

	// no validation rules for Type

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionInfoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AmountUsd

	// no validation rules for AmountSent

	// no validation rules for Gas

	// no validation rules for ReportingCurrency

	// no validation rules for AmountReportingCurrency

	// no validation rules for AmountSentReportingCurrency

	// no validation rules for ProcessingFeeReportingCurrency

	// no validation rules for AmountSentUsd

	// no validation rules for ProcessingFeeUsd

	if len(errors) > 0 {
		return TransactionInfoMultiError(errors)
	}

	return nil
}

// TransactionInfoMultiError is an error wrapping multiple validation errors
// returned by TransactionInfo.ValidateAll() if the designated constraints
// aren't met.
type TransactionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionInfoMultiError) AllErrors() []error { return m }

// TransactionInfoValidationError is the validation error returned by
// TransactionInfo.Validate if the designated constraints aren't met.
type TransactionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionInfoValidationError) ErrorName() string { return "TransactionInfoValidationError" }

// Error satisfies the builtin error interface
func (e TransactionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionInfoValidationError{}

// Validate checks the field values on TransactionDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransactionDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionDetailMultiError, or nil if none found.
func (m *TransactionDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransaction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionDetailValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionDetailValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionDetailValidationError{
				field:  "Transaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetChannel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionDetailValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionDetailValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionDetailValidationError{
				field:  "Channel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransactionDetailMultiError(errors)
	}

	return nil
}

// TransactionDetailMultiError is an error wrapping multiple validation errors
// returned by TransactionDetail.ValidateAll() if the designated constraints
// aren't met.
type TransactionDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionDetailMultiError) AllErrors() []error { return m }

// TransactionDetailValidationError is the validation error returned by
// TransactionDetail.Validate if the designated constraints aren't met.
type TransactionDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionDetailValidationError) ErrorName() string {
	return "TransactionDetailValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionDetailValidationError{}

// Validate checks the field values on GetTransactionPageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionPageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionPageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransactionPageRequestMultiError, or nil if none found.
func (m *GetTransactionPageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionPageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for TransactionId

	// no validation rules for Currency

	// no validation rules for PaymentMethod

	// no validation rules for PaymentChannel

	// no validation rules for Protocol

	// no validation rules for Network

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Agent

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransactionPageRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransactionPageRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionPageRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransactionPageRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransactionPageRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionPageRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Sort

	// no validation rules for MinAmount

	// no validation rules for MaxAmount

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransactionPageRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransactionPageRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionPageRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransactionPageRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransactionPageRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionPageRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransactionPageRequestMultiError(errors)
	}

	return nil
}

// GetTransactionPageRequestMultiError is an error wrapping multiple validation
// errors returned by GetTransactionPageRequest.ValidateAll() if the
// designated constraints aren't met.
type GetTransactionPageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionPageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionPageRequestMultiError) AllErrors() []error { return m }

// GetTransactionPageRequestValidationError is the validation error returned by
// GetTransactionPageRequest.Validate if the designated constraints aren't met.
type GetTransactionPageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionPageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionPageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionPageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionPageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionPageRequestValidationError) ErrorName() string {
	return "GetTransactionPageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionPageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionPageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionPageRequestValidationError{}

// Validate checks the field values on GetTransactionPageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionPageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionPageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransactionPageResponseMultiError, or nil if none found.
func (m *GetTransactionPageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionPageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTransactionPageResponseValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTransactionPageResponseValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTransactionPageResponseValidationError{
					field:  fmt.Sprintf("Transactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for TotalPages

	// no validation rules for TotalSuccessful

	// no validation rules for TotalProcessing

	// no validation rules for TotalFailed

	if len(errors) > 0 {
		return GetTransactionPageResponseMultiError(errors)
	}

	return nil
}

// GetTransactionPageResponseMultiError is an error wrapping multiple
// validation errors returned by GetTransactionPageResponse.ValidateAll() if
// the designated constraints aren't met.
type GetTransactionPageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionPageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionPageResponseMultiError) AllErrors() []error { return m }

// GetTransactionPageResponseValidationError is the validation error returned
// by GetTransactionPageResponse.Validate if the designated constraints aren't met.
type GetTransactionPageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionPageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionPageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionPageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionPageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionPageResponseValidationError) ErrorName() string {
	return "GetTransactionPageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionPageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionPageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionPageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionPageResponseValidationError{}

// Validate checks the field values on GetPaymentChannelPageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentChannelPageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentChannelPageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentChannelPageRequestMultiError, or nil if none found.
func (m *GetPaymentChannelPageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentChannelPageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for OperatorId

	// no validation rules for Type

	// no validation rules for Category

	// no validation rules for PaymentMethod

	// no validation rules for Currency

	// no validation rules for Protocol

	// no validation rules for Network

	// no validation rules for Country

	// no validation rules for Source

	// no validation rules for Enabled

	// no validation rules for Sort

	if len(errors) > 0 {
		return GetPaymentChannelPageRequestMultiError(errors)
	}

	return nil
}

// GetPaymentChannelPageRequestMultiError is an error wrapping multiple
// validation errors returned by GetPaymentChannelPageRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPaymentChannelPageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentChannelPageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentChannelPageRequestMultiError) AllErrors() []error { return m }

// GetPaymentChannelPageRequestValidationError is the validation error returned
// by GetPaymentChannelPageRequest.Validate if the designated constraints
// aren't met.
type GetPaymentChannelPageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentChannelPageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentChannelPageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentChannelPageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentChannelPageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentChannelPageRequestValidationError) ErrorName() string {
	return "GetPaymentChannelPageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentChannelPageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentChannelPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentChannelPageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentChannelPageRequestValidationError{}

// Validate checks the field values on GetOperatorPaymentChannelPageRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetOperatorPaymentChannelPageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorPaymentChannelPageRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOperatorPaymentChannelPageRequestMultiError, or nil if none found.
func (m *GetOperatorPaymentChannelPageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorPaymentChannelPageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Type

	// no validation rules for Category

	// no validation rules for PaymentMethod

	// no validation rules for Currency

	// no validation rules for Protocol

	// no validation rules for Network

	// no validation rules for Country

	// no validation rules for Source

	// no validation rules for Sort

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorPaymentChannelPageRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorPaymentChannelPageRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorPaymentChannelPageRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorPaymentChannelPageRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorPaymentChannelPageRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorPaymentChannelPageRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if len(errors) > 0 {
		return GetOperatorPaymentChannelPageRequestMultiError(errors)
	}

	return nil
}

// GetOperatorPaymentChannelPageRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetOperatorPaymentChannelPageRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorPaymentChannelPageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorPaymentChannelPageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorPaymentChannelPageRequestMultiError) AllErrors() []error { return m }

// GetOperatorPaymentChannelPageRequestValidationError is the validation error
// returned by GetOperatorPaymentChannelPageRequest.Validate if the designated
// constraints aren't met.
type GetOperatorPaymentChannelPageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorPaymentChannelPageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorPaymentChannelPageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorPaymentChannelPageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorPaymentChannelPageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorPaymentChannelPageRequestValidationError) ErrorName() string {
	return "GetOperatorPaymentChannelPageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorPaymentChannelPageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorPaymentChannelPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorPaymentChannelPageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorPaymentChannelPageRequestValidationError{}

// Validate checks the field values on GetPaymentChannelPageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentChannelPageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentChannelPageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPaymentChannelPageResponseMultiError, or nil if none found.
func (m *GetPaymentChannelPageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentChannelPageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPaymentChannels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPaymentChannelPageResponseValidationError{
						field:  fmt.Sprintf("PaymentChannels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPaymentChannelPageResponseValidationError{
						field:  fmt.Sprintf("PaymentChannels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPaymentChannelPageResponseValidationError{
					field:  fmt.Sprintf("PaymentChannels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for TotalPages

	// no validation rules for TotalEnableColnt

	// no validation rules for TotalDisableCount

	if len(errors) > 0 {
		return GetPaymentChannelPageResponseMultiError(errors)
	}

	return nil
}

// GetPaymentChannelPageResponseMultiError is an error wrapping multiple
// validation errors returned by GetPaymentChannelPageResponse.ValidateAll()
// if the designated constraints aren't met.
type GetPaymentChannelPageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentChannelPageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentChannelPageResponseMultiError) AllErrors() []error { return m }

// GetPaymentChannelPageResponseValidationError is the validation error
// returned by GetPaymentChannelPageResponse.Validate if the designated
// constraints aren't met.
type GetPaymentChannelPageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentChannelPageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentChannelPageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentChannelPageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentChannelPageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentChannelPageResponseValidationError) ErrorName() string {
	return "GetPaymentChannelPageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentChannelPageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentChannelPageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentChannelPageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentChannelPageResponseValidationError{}

// Validate checks the field values on GetTransactionDetailByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionDetailByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionDetailByIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTransactionDetailByIdRequestMultiError, or nil if none found.
func (m *GetTransactionDetailByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionDetailByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	if len(errors) > 0 {
		return GetTransactionDetailByIdRequestMultiError(errors)
	}

	return nil
}

// GetTransactionDetailByIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetTransactionDetailByIdRequest.ValidateAll()
// if the designated constraints aren't met.
type GetTransactionDetailByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionDetailByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionDetailByIdRequestMultiError) AllErrors() []error { return m }

// GetTransactionDetailByIdRequestValidationError is the validation error
// returned by GetTransactionDetailByIdRequest.Validate if the designated
// constraints aren't met.
type GetTransactionDetailByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionDetailByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionDetailByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionDetailByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionDetailByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionDetailByIdRequestValidationError) ErrorName() string {
	return "GetTransactionDetailByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionDetailByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionDetailByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionDetailByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionDetailByIdRequestValidationError{}

// Validate checks the field values on GetTransactionDetailByIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetTransactionDetailByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionDetailByIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTransactionDetailByIdResponseMultiError, or nil if none found.
func (m *GetTransactionDetailByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionDetailByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransactionDetailByIdResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransactionDetailByIdResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionDetailByIdResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransactionDetailByIdResponseMultiError(errors)
	}

	return nil
}

// GetTransactionDetailByIdResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetTransactionDetailByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTransactionDetailByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionDetailByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionDetailByIdResponseMultiError) AllErrors() []error { return m }

// GetTransactionDetailByIdResponseValidationError is the validation error
// returned by GetTransactionDetailByIdResponse.Validate if the designated
// constraints aren't met.
type GetTransactionDetailByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionDetailByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionDetailByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionDetailByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionDetailByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionDetailByIdResponseValidationError) ErrorName() string {
	return "GetTransactionDetailByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionDetailByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionDetailByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionDetailByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionDetailByIdResponseValidationError{}

// Validate checks the field values on GetChannelsByIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChannelsByIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChannelsByIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChannelsByIdsRequestMultiError, or nil if none found.
func (m *GetChannelsByIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChannelsByIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetChannelsByIdsRequestMultiError(errors)
	}

	return nil
}

// GetChannelsByIdsRequestMultiError is an error wrapping multiple validation
// errors returned by GetChannelsByIdsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetChannelsByIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChannelsByIdsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChannelsByIdsRequestMultiError) AllErrors() []error { return m }

// GetChannelsByIdsRequestValidationError is the validation error returned by
// GetChannelsByIdsRequest.Validate if the designated constraints aren't met.
type GetChannelsByIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChannelsByIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChannelsByIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChannelsByIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChannelsByIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChannelsByIdsRequestValidationError) ErrorName() string {
	return "GetChannelsByIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetChannelsByIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChannelsByIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChannelsByIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChannelsByIdsRequestValidationError{}

// Validate checks the field values on GetChannelsByIdsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetChannelsByIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChannelsByIdsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChannelsByIdsResponseMultiError, or nil if none found.
func (m *GetChannelsByIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChannelsByIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChannels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetChannelsByIdsResponseValidationError{
						field:  fmt.Sprintf("Channels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetChannelsByIdsResponseValidationError{
						field:  fmt.Sprintf("Channels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetChannelsByIdsResponseValidationError{
					field:  fmt.Sprintf("Channels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetChannelsByIdsResponseMultiError(errors)
	}

	return nil
}

// GetChannelsByIdsResponseMultiError is an error wrapping multiple validation
// errors returned by GetChannelsByIdsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetChannelsByIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChannelsByIdsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChannelsByIdsResponseMultiError) AllErrors() []error { return m }

// GetChannelsByIdsResponseValidationError is the validation error returned by
// GetChannelsByIdsResponse.Validate if the designated constraints aren't met.
type GetChannelsByIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChannelsByIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChannelsByIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChannelsByIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChannelsByIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChannelsByIdsResponseValidationError) ErrorName() string {
	return "GetChannelsByIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetChannelsByIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChannelsByIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChannelsByIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChannelsByIdsResponseValidationError{}

// Validate checks the field values on UpdatePaymentMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePaymentMethodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePaymentMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePaymentMethodRequestMultiError, or nil if none found.
func (m *UpdatePaymentMethodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePaymentMethodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentMethodId

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdatePaymentMethodRequestMultiError(errors)
	}

	return nil
}

// UpdatePaymentMethodRequestMultiError is an error wrapping multiple
// validation errors returned by UpdatePaymentMethodRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdatePaymentMethodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePaymentMethodRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePaymentMethodRequestMultiError) AllErrors() []error { return m }

// UpdatePaymentMethodRequestValidationError is the validation error returned
// by UpdatePaymentMethodRequest.Validate if the designated constraints aren't met.
type UpdatePaymentMethodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePaymentMethodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePaymentMethodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePaymentMethodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePaymentMethodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePaymentMethodRequestValidationError) ErrorName() string {
	return "UpdatePaymentMethodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePaymentMethodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePaymentMethodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePaymentMethodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePaymentMethodRequestValidationError{}

// Validate checks the field values on UpdatePaymentMethodResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePaymentMethodResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePaymentMethodResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePaymentMethodResponseMultiError, or nil if none found.
func (m *UpdatePaymentMethodResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePaymentMethodResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePaymentMethodResponseMultiError(errors)
	}

	return nil
}

// UpdatePaymentMethodResponseMultiError is an error wrapping multiple
// validation errors returned by UpdatePaymentMethodResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdatePaymentMethodResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePaymentMethodResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePaymentMethodResponseMultiError) AllErrors() []error { return m }

// UpdatePaymentMethodResponseValidationError is the validation error returned
// by UpdatePaymentMethodResponse.Validate if the designated constraints
// aren't met.
type UpdatePaymentMethodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePaymentMethodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePaymentMethodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePaymentMethodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePaymentMethodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePaymentMethodResponseValidationError) ErrorName() string {
	return "UpdatePaymentMethodResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePaymentMethodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePaymentMethodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePaymentMethodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePaymentMethodResponseValidationError{}

// Validate checks the field values on BankCard with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BankCard) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BankCard with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BankCardMultiError, or nil
// if none found.
func (m *BankCard) ValidateAll() error {
	return m.validate(true)
}

func (m *BankCard) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CardAccount

	// no validation rules for CardAccountFirstname

	// no validation rules for CardAccountLastname

	// no validation rules for CardIban

	// no validation rules for Currency

	// no validation rules for Country

	// no validation rules for Enabled

	if all {
		switch v := interface{}(m.GetCardDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BankCardValidationError{
					field:  "CardDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BankCardValidationError{
					field:  "CardDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCardDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BankCardValidationError{
				field:  "CardDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BankCardMultiError(errors)
	}

	return nil
}

// BankCardMultiError is an error wrapping multiple validation errors returned
// by BankCard.ValidateAll() if the designated constraints aren't met.
type BankCardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BankCardMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BankCardMultiError) AllErrors() []error { return m }

// BankCardValidationError is the validation error returned by
// BankCard.Validate if the designated constraints aren't met.
type BankCardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BankCardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BankCardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BankCardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BankCardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BankCardValidationError) ErrorName() string { return "BankCardValidationError" }

// Error satisfies the builtin error interface
func (e BankCardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBankCard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BankCardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BankCardValidationError{}

// Validate checks the field values on GetBankCardListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBankCardListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBankCardListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBankCardListRequestMultiError, or nil if none found.
func (m *GetBankCardListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBankCardListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetBankCardListRequestMultiError(errors)
	}

	return nil
}

// GetBankCardListRequestMultiError is an error wrapping multiple validation
// errors returned by GetBankCardListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBankCardListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBankCardListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBankCardListRequestMultiError) AllErrors() []error { return m }

// GetBankCardListRequestValidationError is the validation error returned by
// GetBankCardListRequest.Validate if the designated constraints aren't met.
type GetBankCardListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBankCardListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBankCardListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBankCardListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBankCardListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBankCardListRequestValidationError) ErrorName() string {
	return "GetBankCardListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBankCardListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBankCardListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBankCardListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBankCardListRequestValidationError{}

// Validate checks the field values on GetBankCardListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBankCardListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBankCardListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBankCardListResponseMultiError, or nil if none found.
func (m *GetBankCardListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBankCardListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBankCardLsit() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBankCardListResponseValidationError{
						field:  fmt.Sprintf("BankCardLsit[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBankCardListResponseValidationError{
						field:  fmt.Sprintf("BankCardLsit[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBankCardListResponseValidationError{
					field:  fmt.Sprintf("BankCardLsit[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBankCardListResponseMultiError(errors)
	}

	return nil
}

// GetBankCardListResponseMultiError is an error wrapping multiple validation
// errors returned by GetBankCardListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBankCardListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBankCardListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBankCardListResponseMultiError) AllErrors() []error { return m }

// GetBankCardListResponseValidationError is the validation error returned by
// GetBankCardListResponse.Validate if the designated constraints aren't met.
type GetBankCardListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBankCardListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBankCardListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBankCardListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBankCardListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBankCardListResponseValidationError) ErrorName() string {
	return "GetBankCardListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBankCardListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBankCardListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBankCardListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBankCardListResponseValidationError{}

// Validate checks the field values on AddBankCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddBankCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBankCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddBankCardRequestMultiError, or nil if none found.
func (m *AddBankCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBankCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	// no validation rules for Country

	if all {
		switch v := interface{}(m.GetBankCard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddBankCardRequestValidationError{
					field:  "BankCard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddBankCardRequestValidationError{
					field:  "BankCard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBankCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddBankCardRequestValidationError{
				field:  "BankCard",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddBankCardRequestMultiError(errors)
	}

	return nil
}

// AddBankCardRequestMultiError is an error wrapping multiple validation errors
// returned by AddBankCardRequest.ValidateAll() if the designated constraints
// aren't met.
type AddBankCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBankCardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBankCardRequestMultiError) AllErrors() []error { return m }

// AddBankCardRequestValidationError is the validation error returned by
// AddBankCardRequest.Validate if the designated constraints aren't met.
type AddBankCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBankCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBankCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBankCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBankCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBankCardRequestValidationError) ErrorName() string {
	return "AddBankCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddBankCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBankCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBankCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBankCardRequestValidationError{}

// Validate checks the field values on AddBankCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddBankCardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBankCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddBankCardResponseMultiError, or nil if none found.
func (m *AddBankCardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBankCardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddBankCardResponseMultiError(errors)
	}

	return nil
}

// AddBankCardResponseMultiError is an error wrapping multiple validation
// errors returned by AddBankCardResponse.ValidateAll() if the designated
// constraints aren't met.
type AddBankCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBankCardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBankCardResponseMultiError) AllErrors() []error { return m }

// AddBankCardResponseValidationError is the validation error returned by
// AddBankCardResponse.Validate if the designated constraints aren't met.
type AddBankCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBankCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBankCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBankCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBankCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBankCardResponseValidationError) ErrorName() string {
	return "AddBankCardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddBankCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBankCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBankCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBankCardResponseValidationError{}

// Validate checks the field values on UpdateBankCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBankCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBankCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBankCardRequestMultiError, or nil if none found.
func (m *UpdateBankCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBankCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBankCard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBankCardRequestValidationError{
					field:  "BankCard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBankCardRequestValidationError{
					field:  "BankCard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBankCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBankCardRequestValidationError{
				field:  "BankCard",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Currency != nil {
		// no validation rules for Currency
	}

	if m.Country != nil {
		// no validation rules for Country
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if len(errors) > 0 {
		return UpdateBankCardRequestMultiError(errors)
	}

	return nil
}

// UpdateBankCardRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBankCardRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBankCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBankCardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBankCardRequestMultiError) AllErrors() []error { return m }

// UpdateBankCardRequestValidationError is the validation error returned by
// UpdateBankCardRequest.Validate if the designated constraints aren't met.
type UpdateBankCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBankCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBankCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBankCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBankCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBankCardRequestValidationError) ErrorName() string {
	return "UpdateBankCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBankCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBankCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBankCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBankCardRequestValidationError{}

// Validate checks the field values on UpdateBankCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBankCardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBankCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBankCardResponseMultiError, or nil if none found.
func (m *UpdateBankCardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBankCardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateBankCardResponseMultiError(errors)
	}

	return nil
}

// UpdateBankCardResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateBankCardResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateBankCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBankCardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBankCardResponseMultiError) AllErrors() []error { return m }

// UpdateBankCardResponseValidationError is the validation error returned by
// UpdateBankCardResponse.Validate if the designated constraints aren't met.
type UpdateBankCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBankCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBankCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBankCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBankCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBankCardResponseValidationError) ErrorName() string {
	return "UpdateBankCardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBankCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBankCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBankCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBankCardResponseValidationError{}

// Validate checks the field values on DeleteBankCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBankCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBankCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBankCardRequestMultiError, or nil if none found.
func (m *DeleteBankCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBankCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BankCardId

	if len(errors) > 0 {
		return DeleteBankCardRequestMultiError(errors)
	}

	return nil
}

// DeleteBankCardRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteBankCardRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBankCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBankCardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBankCardRequestMultiError) AllErrors() []error { return m }

// DeleteBankCardRequestValidationError is the validation error returned by
// DeleteBankCardRequest.Validate if the designated constraints aren't met.
type DeleteBankCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBankCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBankCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBankCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBankCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBankCardRequestValidationError) ErrorName() string {
	return "DeleteBankCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBankCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBankCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBankCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBankCardRequestValidationError{}

// Validate checks the field values on DeleteBankCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBankCardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBankCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBankCardResponseMultiError, or nil if none found.
func (m *DeleteBankCardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBankCardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteBankCardResponseMultiError(errors)
	}

	return nil
}

// DeleteBankCardResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteBankCardResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteBankCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBankCardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBankCardResponseMultiError) AllErrors() []error { return m }

// DeleteBankCardResponseValidationError is the validation error returned by
// DeleteBankCardResponse.Validate if the designated constraints aren't met.
type DeleteBankCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBankCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBankCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBankCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBankCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBankCardResponseValidationError) ErrorName() string {
	return "DeleteBankCardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBankCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBankCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBankCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBankCardResponseValidationError{}

// Validate checks the field values on GetBankAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBankAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBankAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBankAccountRequestMultiError, or nil if none found.
func (m *GetBankAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBankAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelId

	if all {
		switch v := interface{}(m.GetExtra()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBankAccountRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBankAccountRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBankAccountRequestValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBankAccountRequestMultiError(errors)
	}

	return nil
}

// GetBankAccountRequestMultiError is an error wrapping multiple validation
// errors returned by GetBankAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBankAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBankAccountRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBankAccountRequestMultiError) AllErrors() []error { return m }

// GetBankAccountRequestValidationError is the validation error returned by
// GetBankAccountRequest.Validate if the designated constraints aren't met.
type GetBankAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBankAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBankAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBankAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBankAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBankAccountRequestValidationError) ErrorName() string {
	return "GetBankAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBankAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBankAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBankAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBankAccountRequestValidationError{}

// Validate checks the field values on GetBankAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBankAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBankAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBankAccountResponseMultiError, or nil if none found.
func (m *GetBankAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBankAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotifyUrl

	// no validation rules for ReferenceNumber

	// no validation rules for BankAccountName

	// no validation rules for BankAccountNumber

	if len(errors) > 0 {
		return GetBankAccountResponseMultiError(errors)
	}

	return nil
}

// GetBankAccountResponseMultiError is an error wrapping multiple validation
// errors returned by GetBankAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBankAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBankAccountResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBankAccountResponseMultiError) AllErrors() []error { return m }

// GetBankAccountResponseValidationError is the validation error returned by
// GetBankAccountResponse.Validate if the designated constraints aren't met.
type GetBankAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBankAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBankAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBankAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBankAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBankAccountResponseValidationError) ErrorName() string {
	return "GetBankAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBankAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBankAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBankAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBankAccountResponseValidationError{}

// Validate checks the field values on GetBankSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBankSchemaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBankSchemaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBankSchemaRequestMultiError, or nil if none found.
func (m *GetBankSchemaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBankSchemaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	if len(errors) > 0 {
		return GetBankSchemaRequestMultiError(errors)
	}

	return nil
}

// GetBankSchemaRequestMultiError is an error wrapping multiple validation
// errors returned by GetBankSchemaRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBankSchemaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBankSchemaRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBankSchemaRequestMultiError) AllErrors() []error { return m }

// GetBankSchemaRequestValidationError is the validation error returned by
// GetBankSchemaRequest.Validate if the designated constraints aren't met.
type GetBankSchemaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBankSchemaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBankSchemaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBankSchemaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBankSchemaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBankSchemaRequestValidationError) ErrorName() string {
	return "GetBankSchemaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBankSchemaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBankSchemaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBankSchemaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBankSchemaRequestValidationError{}

// Validate checks the field values on GetBankSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBankSchemaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBankSchemaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBankSchemaResponseMultiError, or nil if none found.
func (m *GetBankSchemaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBankSchemaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBankSchemaResponseValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBankSchemaResponseValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBankSchemaResponseValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBankSchemaResponseMultiError(errors)
	}

	return nil
}

// GetBankSchemaResponseMultiError is an error wrapping multiple validation
// errors returned by GetBankSchemaResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBankSchemaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBankSchemaResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBankSchemaResponseMultiError) AllErrors() []error { return m }

// GetBankSchemaResponseValidationError is the validation error returned by
// GetBankSchemaResponse.Validate if the designated constraints aren't met.
type GetBankSchemaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBankSchemaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBankSchemaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBankSchemaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBankSchemaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBankSchemaResponseValidationError) ErrorName() string {
	return "GetBankSchemaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBankSchemaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBankSchemaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBankSchemaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBankSchemaResponseValidationError{}

// Validate checks the field values on Crypto with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Crypto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Crypto with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CryptoMultiError, or nil if none found.
func (m *Crypto) ValidateAll() error {
	return m.validate(true)
}

func (m *Crypto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Crypto

	// no validation rules for Network

	if len(errors) > 0 {
		return CryptoMultiError(errors)
	}

	return nil
}

// CryptoMultiError is an error wrapping multiple validation errors returned by
// Crypto.ValidateAll() if the designated constraints aren't met.
type CryptoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CryptoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CryptoMultiError) AllErrors() []error { return m }

// CryptoValidationError is the validation error returned by Crypto.Validate if
// the designated constraints aren't met.
type CryptoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CryptoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CryptoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CryptoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CryptoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CryptoValidationError) ErrorName() string { return "CryptoValidationError" }

// Error satisfies the builtin error interface
func (e CryptoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCrypto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CryptoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CryptoValidationError{}

// Validate checks the field values on Currency with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Currency) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Currency with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CurrencyMultiError, or nil
// if none found.
func (m *Currency) ValidateAll() error {
	return m.validate(true)
}

func (m *Currency) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	// no validation rules for Country

	// no validation rules for PayWayCode

	// no validation rules for PayWayName

	// no validation rules for PayMin

	// no validation rules for PayMax

	if len(errors) > 0 {
		return CurrencyMultiError(errors)
	}

	return nil
}

// CurrencyMultiError is an error wrapping multiple validation errors returned
// by Currency.ValidateAll() if the designated constraints aren't met.
type CurrencyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrencyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrencyMultiError) AllErrors() []error { return m }

// CurrencyValidationError is the validation error returned by
// Currency.Validate if the designated constraints aren't met.
type CurrencyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrencyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrencyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrencyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrencyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrencyValidationError) ErrorName() string { return "CurrencyValidationError" }

// Error satisfies the builtin error interface
func (e CurrencyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrency.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrencyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrencyValidationError{}

// Validate checks the field values on BuyCryptoViaFiatCurrentListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BuyCryptoViaFiatCurrentListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuyCryptoViaFiatCurrentListRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BuyCryptoViaFiatCurrentListRequestMultiError, or nil if none found.
func (m *BuyCryptoViaFiatCurrentListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BuyCryptoViaFiatCurrentListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BuyCryptoViaFiatCurrentListRequestMultiError(errors)
	}

	return nil
}

// BuyCryptoViaFiatCurrentListRequestMultiError is an error wrapping multiple
// validation errors returned by
// BuyCryptoViaFiatCurrentListRequest.ValidateAll() if the designated
// constraints aren't met.
type BuyCryptoViaFiatCurrentListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuyCryptoViaFiatCurrentListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuyCryptoViaFiatCurrentListRequestMultiError) AllErrors() []error { return m }

// BuyCryptoViaFiatCurrentListRequestValidationError is the validation error
// returned by BuyCryptoViaFiatCurrentListRequest.Validate if the designated
// constraints aren't met.
type BuyCryptoViaFiatCurrentListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuyCryptoViaFiatCurrentListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuyCryptoViaFiatCurrentListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuyCryptoViaFiatCurrentListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuyCryptoViaFiatCurrentListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuyCryptoViaFiatCurrentListRequestValidationError) ErrorName() string {
	return "BuyCryptoViaFiatCurrentListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BuyCryptoViaFiatCurrentListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuyCryptoViaFiatCurrentListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuyCryptoViaFiatCurrentListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuyCryptoViaFiatCurrentListRequestValidationError{}

// Validate checks the field values on BuyCryptoViaFiatCurrentListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BuyCryptoViaFiatCurrentListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuyCryptoViaFiatCurrentListResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BuyCryptoViaFiatCurrentListResponseMultiError, or nil if none found.
func (m *BuyCryptoViaFiatCurrentListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BuyCryptoViaFiatCurrentListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCurrencies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BuyCryptoViaFiatCurrentListResponseValidationError{
						field:  fmt.Sprintf("Currencies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BuyCryptoViaFiatCurrentListResponseValidationError{
						field:  fmt.Sprintf("Currencies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BuyCryptoViaFiatCurrentListResponseValidationError{
					field:  fmt.Sprintf("Currencies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCrypto() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BuyCryptoViaFiatCurrentListResponseValidationError{
						field:  fmt.Sprintf("Crypto[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BuyCryptoViaFiatCurrentListResponseValidationError{
						field:  fmt.Sprintf("Crypto[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BuyCryptoViaFiatCurrentListResponseValidationError{
					field:  fmt.Sprintf("Crypto[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BuyCryptoViaFiatCurrentListResponseMultiError(errors)
	}

	return nil
}

// BuyCryptoViaFiatCurrentListResponseMultiError is an error wrapping multiple
// validation errors returned by
// BuyCryptoViaFiatCurrentListResponse.ValidateAll() if the designated
// constraints aren't met.
type BuyCryptoViaFiatCurrentListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuyCryptoViaFiatCurrentListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuyCryptoViaFiatCurrentListResponseMultiError) AllErrors() []error { return m }

// BuyCryptoViaFiatCurrentListResponseValidationError is the validation error
// returned by BuyCryptoViaFiatCurrentListResponse.Validate if the designated
// constraints aren't met.
type BuyCryptoViaFiatCurrentListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuyCryptoViaFiatCurrentListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuyCryptoViaFiatCurrentListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuyCryptoViaFiatCurrentListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuyCryptoViaFiatCurrentListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuyCryptoViaFiatCurrentListResponseValidationError) ErrorName() string {
	return "BuyCryptoViaFiatCurrentListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BuyCryptoViaFiatCurrentListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuyCryptoViaFiatCurrentListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuyCryptoViaFiatCurrentListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuyCryptoViaFiatCurrentListResponseValidationError{}

// Validate checks the field values on BuyCryptoViaFiatPriceQueryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BuyCryptoViaFiatPriceQueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuyCryptoViaFiatPriceQueryRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BuyCryptoViaFiatPriceQueryRequestMultiError, or nil if none found.
func (m *BuyCryptoViaFiatPriceQueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BuyCryptoViaFiatPriceQueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Amount

	// no validation rules for Fiat

	// no validation rules for PayWayCode

	// no validation rules for ChannelId

	if len(errors) > 0 {
		return BuyCryptoViaFiatPriceQueryRequestMultiError(errors)
	}

	return nil
}

// BuyCryptoViaFiatPriceQueryRequestMultiError is an error wrapping multiple
// validation errors returned by
// BuyCryptoViaFiatPriceQueryRequest.ValidateAll() if the designated
// constraints aren't met.
type BuyCryptoViaFiatPriceQueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuyCryptoViaFiatPriceQueryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuyCryptoViaFiatPriceQueryRequestMultiError) AllErrors() []error { return m }

// BuyCryptoViaFiatPriceQueryRequestValidationError is the validation error
// returned by BuyCryptoViaFiatPriceQueryRequest.Validate if the designated
// constraints aren't met.
type BuyCryptoViaFiatPriceQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuyCryptoViaFiatPriceQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuyCryptoViaFiatPriceQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuyCryptoViaFiatPriceQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuyCryptoViaFiatPriceQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuyCryptoViaFiatPriceQueryRequestValidationError) ErrorName() string {
	return "BuyCryptoViaFiatPriceQueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BuyCryptoViaFiatPriceQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuyCryptoViaFiatPriceQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuyCryptoViaFiatPriceQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuyCryptoViaFiatPriceQueryRequestValidationError{}

// Validate checks the field values on BuyCryptoViaFiatPriceQueryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BuyCryptoViaFiatPriceQueryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuyCryptoViaFiatPriceQueryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BuyCryptoViaFiatPriceQueryResponseMultiError, or nil if none found.
func (m *BuyCryptoViaFiatPriceQueryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BuyCryptoViaFiatPriceQueryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Crypto

	// no validation rules for CryptoPrice

	// no validation rules for CryptoQuantity

	// no validation rules for Fiat

	// no validation rules for RampFee

	// no validation rules for NetworkFee

	if len(errors) > 0 {
		return BuyCryptoViaFiatPriceQueryResponseMultiError(errors)
	}

	return nil
}

// BuyCryptoViaFiatPriceQueryResponseMultiError is an error wrapping multiple
// validation errors returned by
// BuyCryptoViaFiatPriceQueryResponse.ValidateAll() if the designated
// constraints aren't met.
type BuyCryptoViaFiatPriceQueryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuyCryptoViaFiatPriceQueryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuyCryptoViaFiatPriceQueryResponseMultiError) AllErrors() []error { return m }

// BuyCryptoViaFiatPriceQueryResponseValidationError is the validation error
// returned by BuyCryptoViaFiatPriceQueryResponse.Validate if the designated
// constraints aren't met.
type BuyCryptoViaFiatPriceQueryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuyCryptoViaFiatPriceQueryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuyCryptoViaFiatPriceQueryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuyCryptoViaFiatPriceQueryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuyCryptoViaFiatPriceQueryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuyCryptoViaFiatPriceQueryResponseValidationError) ErrorName() string {
	return "BuyCryptoViaFiatPriceQueryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BuyCryptoViaFiatPriceQueryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuyCryptoViaFiatPriceQueryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuyCryptoViaFiatPriceQueryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuyCryptoViaFiatPriceQueryResponseValidationError{}

// Validate checks the field values on BuyCryptoViaFiatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BuyCryptoViaFiatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuyCryptoViaFiatRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BuyCryptoViaFiatRequestMultiError, or nil if none found.
func (m *BuyCryptoViaFiatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BuyCryptoViaFiatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Amount

	// no validation rules for FiatCurrency

	// no validation rules for PayWayCode

	// no validation rules for ChannelId

	if len(errors) > 0 {
		return BuyCryptoViaFiatRequestMultiError(errors)
	}

	return nil
}

// BuyCryptoViaFiatRequestMultiError is an error wrapping multiple validation
// errors returned by BuyCryptoViaFiatRequest.ValidateAll() if the designated
// constraints aren't met.
type BuyCryptoViaFiatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuyCryptoViaFiatRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuyCryptoViaFiatRequestMultiError) AllErrors() []error { return m }

// BuyCryptoViaFiatRequestValidationError is the validation error returned by
// BuyCryptoViaFiatRequest.Validate if the designated constraints aren't met.
type BuyCryptoViaFiatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuyCryptoViaFiatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuyCryptoViaFiatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuyCryptoViaFiatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuyCryptoViaFiatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuyCryptoViaFiatRequestValidationError) ErrorName() string {
	return "BuyCryptoViaFiatRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BuyCryptoViaFiatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuyCryptoViaFiatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuyCryptoViaFiatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuyCryptoViaFiatRequestValidationError{}

// Validate checks the field values on BuyCryptoViaFiatResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BuyCryptoViaFiatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuyCryptoViaFiatResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BuyCryptoViaFiatResponseMultiError, or nil if none found.
func (m *BuyCryptoViaFiatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BuyCryptoViaFiatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PayUrl

	if len(errors) > 0 {
		return BuyCryptoViaFiatResponseMultiError(errors)
	}

	return nil
}

// BuyCryptoViaFiatResponseMultiError is an error wrapping multiple validation
// errors returned by BuyCryptoViaFiatResponse.ValidateAll() if the designated
// constraints aren't met.
type BuyCryptoViaFiatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuyCryptoViaFiatResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuyCryptoViaFiatResponseMultiError) AllErrors() []error { return m }

// BuyCryptoViaFiatResponseValidationError is the validation error returned by
// BuyCryptoViaFiatResponse.Validate if the designated constraints aren't met.
type BuyCryptoViaFiatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuyCryptoViaFiatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuyCryptoViaFiatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuyCryptoViaFiatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuyCryptoViaFiatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuyCryptoViaFiatResponseValidationError) ErrorName() string {
	return "BuyCryptoViaFiatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BuyCryptoViaFiatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuyCryptoViaFiatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuyCryptoViaFiatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuyCryptoViaFiatResponseValidationError{}

// Validate checks the field values on GetResponsibleGamblingStatusRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetResponsibleGamblingStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResponsibleGamblingStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetResponsibleGamblingStatusRequestMultiError, or nil if none found.
func (m *GetResponsibleGamblingStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResponsibleGamblingStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetResponsibleGamblingStatusRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetResponsibleGamblingStatusRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResponsibleGamblingStatusRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetResponsibleGamblingStatusRequestMultiError(errors)
	}

	return nil
}

// GetResponsibleGamblingStatusRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetResponsibleGamblingStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetResponsibleGamblingStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResponsibleGamblingStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResponsibleGamblingStatusRequestMultiError) AllErrors() []error { return m }

// GetResponsibleGamblingStatusRequestValidationError is the validation error
// returned by GetResponsibleGamblingStatusRequest.Validate if the designated
// constraints aren't met.
type GetResponsibleGamblingStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResponsibleGamblingStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResponsibleGamblingStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResponsibleGamblingStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResponsibleGamblingStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResponsibleGamblingStatusRequestValidationError) ErrorName() string {
	return "GetResponsibleGamblingStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetResponsibleGamblingStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResponsibleGamblingStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResponsibleGamblingStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResponsibleGamblingStatusRequestValidationError{}

// Validate checks the field values on GetResponsibleGamblingStatusResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetResponsibleGamblingStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResponsibleGamblingStatusResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetResponsibleGamblingStatusResponseMultiError, or nil if none found.
func (m *GetResponsibleGamblingStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResponsibleGamblingStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResponsibleGamblingStatuses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetResponsibleGamblingStatusResponseValidationError{
						field:  fmt.Sprintf("ResponsibleGamblingStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetResponsibleGamblingStatusResponseValidationError{
						field:  fmt.Sprintf("ResponsibleGamblingStatuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetResponsibleGamblingStatusResponseValidationError{
					field:  fmt.Sprintf("ResponsibleGamblingStatuses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetResponsibleGamblingStatusResponseMultiError(errors)
	}

	return nil
}

// GetResponsibleGamblingStatusResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetResponsibleGamblingStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetResponsibleGamblingStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResponsibleGamblingStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResponsibleGamblingStatusResponseMultiError) AllErrors() []error { return m }

// GetResponsibleGamblingStatusResponseValidationError is the validation error
// returned by GetResponsibleGamblingStatusResponse.Validate if the designated
// constraints aren't met.
type GetResponsibleGamblingStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResponsibleGamblingStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResponsibleGamblingStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResponsibleGamblingStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResponsibleGamblingStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResponsibleGamblingStatusResponseValidationError) ErrorName() string {
	return "GetResponsibleGamblingStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetResponsibleGamblingStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResponsibleGamblingStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResponsibleGamblingStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResponsibleGamblingStatusResponseValidationError{}

// Validate checks the field values on GetAddressResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAddressResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAddressResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAddressResponse_DataMultiError, or nil if none found.
func (m *GetAddressResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAddressResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	// no validation rules for Protocol

	// no validation rules for Network

	// no validation rules for Address

	if len(errors) > 0 {
		return GetAddressResponse_DataMultiError(errors)
	}

	return nil
}

// GetAddressResponse_DataMultiError is an error wrapping multiple validation
// errors returned by GetAddressResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type GetAddressResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAddressResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAddressResponse_DataMultiError) AllErrors() []error { return m }

// GetAddressResponse_DataValidationError is the validation error returned by
// GetAddressResponse_Data.Validate if the designated constraints aren't met.
type GetAddressResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressResponse_DataValidationError) ErrorName() string {
	return "GetAddressResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressResponse_DataValidationError{}

// Validate checks the field values on GetOperatorAddressResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorAddressResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorAddressResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOperatorAddressResponse_DataMultiError, or nil if none found.
func (m *GetOperatorAddressResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorAddressResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	// no validation rules for Protocol

	// no validation rules for Network

	// no validation rules for Address

	if len(errors) > 0 {
		return GetOperatorAddressResponse_DataMultiError(errors)
	}

	return nil
}

// GetOperatorAddressResponse_DataMultiError is an error wrapping multiple
// validation errors returned by GetOperatorAddressResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type GetOperatorAddressResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorAddressResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorAddressResponse_DataMultiError) AllErrors() []error { return m }

// GetOperatorAddressResponse_DataValidationError is the validation error
// returned by GetOperatorAddressResponse_Data.Validate if the designated
// constraints aren't met.
type GetOperatorAddressResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorAddressResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorAddressResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorAddressResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorAddressResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorAddressResponse_DataValidationError) ErrorName() string {
	return "GetOperatorAddressResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorAddressResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorAddressResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorAddressResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorAddressResponse_DataValidationError{}

// Validate checks the field values on
// GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatusMultiError,
// or nil if none found.
func (m *GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	// no validation rules for WithdrawalUsage

	// no validation rules for DepositUsage

	if len(errors) > 0 {
		return GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatusMultiError(errors)
	}

	return nil
}

// GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatusMultiError is
// an error wrapping multiple validation errors returned by
// GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatus.ValidateAll()
// if the designated constraints aren't met.
type GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatusMultiError) AllErrors() []error {
	return m
}

// GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatusValidationError
// is the validation error returned by
// GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatus.Validate if
// the designated constraints aren't met.
type GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatusValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatusValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatusValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatusValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatusValidationError) ErrorName() string {
	return "GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatusValidationError"
}

// Error satisfies the builtin error interface
func (e GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResponsibleGamblingStatusResponse_ResponsibleGamblingStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResponsibleGamblingStatusResponse_ResponsibleGamblingStatusValidationError{}
