// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: payment/service/v1/payment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetPaymentMethodListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentMethodListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentMethodListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentMethodListRequestMultiError, or nil if none found.
func (m *GetPaymentMethodListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentMethodListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPaymentMethodListRequestMultiError(errors)
	}

	return nil
}

// GetPaymentMethodListRequestMultiError is an error wrapping multiple
// validation errors returned by GetPaymentMethodListRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPaymentMethodListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentMethodListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentMethodListRequestMultiError) AllErrors() []error { return m }

// GetPaymentMethodListRequestValidationError is the validation error returned
// by GetPaymentMethodListRequest.Validate if the designated constraints
// aren't met.
type GetPaymentMethodListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentMethodListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentMethodListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentMethodListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentMethodListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentMethodListRequestValidationError) ErrorName() string {
	return "GetPaymentMethodListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentMethodListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentMethodListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentMethodListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentMethodListRequestValidationError{}

// Validate checks the field values on PaymentMethodInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PaymentMethodInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentMethodInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentMethodInfoMultiError, or nil if none found.
func (m *PaymentMethodInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentMethodInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Currency

	// no validation rules for Country

	// no validation rules for PaymentMethod

	if all {
		switch v := interface{}(m.GetKeySchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentMethodInfoValidationError{
					field:  "KeySchema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentMethodInfoValidationError{
					field:  "KeySchema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKeySchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentMethodInfoValidationError{
				field:  "KeySchema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PaymentMethodInfoMultiError(errors)
	}

	return nil
}

// PaymentMethodInfoMultiError is an error wrapping multiple validation errors
// returned by PaymentMethodInfo.ValidateAll() if the designated constraints
// aren't met.
type PaymentMethodInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMethodInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMethodInfoMultiError) AllErrors() []error { return m }

// PaymentMethodInfoValidationError is the validation error returned by
// PaymentMethodInfo.Validate if the designated constraints aren't met.
type PaymentMethodInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMethodInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMethodInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMethodInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMethodInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMethodInfoValidationError) ErrorName() string {
	return "PaymentMethodInfoValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentMethodInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMethodInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMethodInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMethodInfoValidationError{}

// Validate checks the field values on GetPaymentMethodListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentMethodListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentMethodListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentMethodListResponseMultiError, or nil if none found.
func (m *GetPaymentMethodListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentMethodListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPaymentMethods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPaymentMethodListResponseValidationError{
						field:  fmt.Sprintf("PaymentMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPaymentMethodListResponseValidationError{
						field:  fmt.Sprintf("PaymentMethods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPaymentMethodListResponseValidationError{
					field:  fmt.Sprintf("PaymentMethods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPaymentMethodListResponseMultiError(errors)
	}

	return nil
}

// GetPaymentMethodListResponseMultiError is an error wrapping multiple
// validation errors returned by GetPaymentMethodListResponse.ValidateAll() if
// the designated constraints aren't met.
type GetPaymentMethodListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentMethodListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentMethodListResponseMultiError) AllErrors() []error { return m }

// GetPaymentMethodListResponseValidationError is the validation error returned
// by GetPaymentMethodListResponse.Validate if the designated constraints
// aren't met.
type GetPaymentMethodListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentMethodListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentMethodListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentMethodListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentMethodListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentMethodListResponseValidationError) ErrorName() string {
	return "GetPaymentMethodListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentMethodListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentMethodListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentMethodListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentMethodListResponseValidationError{}

// Validate checks the field values on CreatePaymentChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentChannelRequestMultiError, or nil if none found.
func (m *CreatePaymentChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MerchantId

	// no validation rules for PaymentMethodId

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePaymentChannelRequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePaymentChannelRequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentChannelRequestValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePaymentChannelRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentChannelRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePaymentChannelRequest.ValidateAll() if
// the designated constraints aren't met.
type CreatePaymentChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentChannelRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentChannelRequestMultiError) AllErrors() []error { return m }

// CreatePaymentChannelRequestValidationError is the validation error returned
// by CreatePaymentChannelRequest.Validate if the designated constraints
// aren't met.
type CreatePaymentChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentChannelRequestValidationError) ErrorName() string {
	return "CreatePaymentChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentChannelRequestValidationError{}

// Validate checks the field values on CreatePaymentChannelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentChannelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentChannelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentChannelResponseMultiError, or nil if none found.
func (m *CreatePaymentChannelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentChannelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelId

	if len(errors) > 0 {
		return CreatePaymentChannelResponseMultiError(errors)
	}

	return nil
}

// CreatePaymentChannelResponseMultiError is an error wrapping multiple
// validation errors returned by CreatePaymentChannelResponse.ValidateAll() if
// the designated constraints aren't met.
type CreatePaymentChannelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentChannelResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentChannelResponseMultiError) AllErrors() []error { return m }

// CreatePaymentChannelResponseValidationError is the validation error returned
// by CreatePaymentChannelResponse.Validate if the designated constraints
// aren't met.
type CreatePaymentChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentChannelResponseValidationError) ErrorName() string {
	return "CreatePaymentChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentChannelResponseValidationError{}

// Validate checks the field values on PaymentChannelInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaymentChannelInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentChannelInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentChannelInfoMultiError, or nil if none found.
func (m *PaymentChannelInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentChannelInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelId

	// no validation rules for Type

	// no validation rules for Category

	// no validation rules for OperatorId

	// no validation rules for PaymentMethod

	// no validation rules for Tag

	// no validation rules for Name

	// no validation rules for PaymentMethodId

	// no validation rules for Currency

	// no validation rules for Country

	// no validation rules for Method

	// no validation rules for Logo

	// no validation rules for MinDepositAmount

	// no validation rules for MaxDepositAmount

	// no validation rules for MinWithdrawAmount

	// no validation rules for MaxWithdrawAmount

	// no validation rules for Eat

	if all {
		switch v := interface{}(m.GetDepositSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentChannelInfoValidationError{
					field:  "DepositSchema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentChannelInfoValidationError{
					field:  "DepositSchema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDepositSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentChannelInfoValidationError{
				field:  "DepositSchema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWithdrawSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PaymentChannelInfoValidationError{
					field:  "WithdrawSchema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PaymentChannelInfoValidationError{
					field:  "WithdrawSchema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWithdrawSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentChannelInfoValidationError{
				field:  "WithdrawSchema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PaymentChannelInfoMultiError(errors)
	}

	return nil
}

// PaymentChannelInfoMultiError is an error wrapping multiple validation errors
// returned by PaymentChannelInfo.ValidateAll() if the designated constraints
// aren't met.
type PaymentChannelInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentChannelInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentChannelInfoMultiError) AllErrors() []error { return m }

// PaymentChannelInfoValidationError is the validation error returned by
// PaymentChannelInfo.Validate if the designated constraints aren't met.
type PaymentChannelInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentChannelInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentChannelInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentChannelInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentChannelInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentChannelInfoValidationError) ErrorName() string {
	return "PaymentChannelInfoValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentChannelInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentChannelInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentChannelInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentChannelInfoValidationError{}

// Validate checks the field values on InitiateDepositRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitiateDepositRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitiateDepositRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitiateDepositRequestMultiError, or nil if none found.
func (m *InitiateDepositRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiateDepositRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for ChannelId

	if all {
		switch v := interface{}(m.GetExtra()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateDepositRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateDepositRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateDepositRequestValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InitiateDepositRequestMultiError(errors)
	}

	return nil
}

// InitiateDepositRequestMultiError is an error wrapping multiple validation
// errors returned by InitiateDepositRequest.ValidateAll() if the designated
// constraints aren't met.
type InitiateDepositRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiateDepositRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiateDepositRequestMultiError) AllErrors() []error { return m }

// InitiateDepositRequestValidationError is the validation error returned by
// InitiateDepositRequest.Validate if the designated constraints aren't met.
type InitiateDepositRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiateDepositRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiateDepositRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiateDepositRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiateDepositRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiateDepositRequestValidationError) ErrorName() string {
	return "InitiateDepositRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InitiateDepositRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiateDepositRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiateDepositRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiateDepositRequestValidationError{}

// Validate checks the field values on InitiateDepositResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitiateDepositResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitiateDepositResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitiateDepositResponseMultiError, or nil if none found.
func (m *InitiateDepositResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiateDepositResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for Status

	// no validation rules for PayUrl

	// no validation rules for QrCode

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateDepositResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateDepositResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateDepositResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExtra()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateDepositResponseValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateDepositResponseValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateDepositResponseValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InitiateDepositResponseMultiError(errors)
	}

	return nil
}

// InitiateDepositResponseMultiError is an error wrapping multiple validation
// errors returned by InitiateDepositResponse.ValidateAll() if the designated
// constraints aren't met.
type InitiateDepositResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiateDepositResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiateDepositResponseMultiError) AllErrors() []error { return m }

// InitiateDepositResponseValidationError is the validation error returned by
// InitiateDepositResponse.Validate if the designated constraints aren't met.
type InitiateDepositResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiateDepositResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiateDepositResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiateDepositResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiateDepositResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiateDepositResponseValidationError) ErrorName() string {
	return "InitiateDepositResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InitiateDepositResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiateDepositResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiateDepositResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiateDepositResponseValidationError{}

// Validate checks the field values on InitiateWithdrawRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitiateWithdrawRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitiateWithdrawRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitiateWithdrawRequestMultiError, or nil if none found.
func (m *InitiateWithdrawRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiateWithdrawRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for UserId

	// no validation rules for OperatorId

	// no validation rules for ChannelId

	if all {
		switch v := interface{}(m.GetExtra()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateWithdrawRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateWithdrawRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateWithdrawRequestValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InitiateWithdrawRequestMultiError(errors)
	}

	return nil
}

// InitiateWithdrawRequestMultiError is an error wrapping multiple validation
// errors returned by InitiateWithdrawRequest.ValidateAll() if the designated
// constraints aren't met.
type InitiateWithdrawRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiateWithdrawRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiateWithdrawRequestMultiError) AllErrors() []error { return m }

// InitiateWithdrawRequestValidationError is the validation error returned by
// InitiateWithdrawRequest.Validate if the designated constraints aren't met.
type InitiateWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiateWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiateWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiateWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiateWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiateWithdrawRequestValidationError) ErrorName() string {
	return "InitiateWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InitiateWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiateWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiateWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiateWithdrawRequestValidationError{}

// Validate checks the field values on InitiateWithdrawResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InitiateWithdrawResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitiateWithdrawResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InitiateWithdrawResponseMultiError, or nil if none found.
func (m *InitiateWithdrawResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InitiateWithdrawResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	// no validation rules for OperatorOrderNo

	// no validation rules for Amount

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InitiateWithdrawResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InitiateWithdrawResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InitiateWithdrawResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InitiateWithdrawResponseMultiError(errors)
	}

	return nil
}

// InitiateWithdrawResponseMultiError is an error wrapping multiple validation
// errors returned by InitiateWithdrawResponse.ValidateAll() if the designated
// constraints aren't met.
type InitiateWithdrawResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitiateWithdrawResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitiateWithdrawResponseMultiError) AllErrors() []error { return m }

// InitiateWithdrawResponseValidationError is the validation error returned by
// InitiateWithdrawResponse.Validate if the designated constraints aren't met.
type InitiateWithdrawResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitiateWithdrawResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitiateWithdrawResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitiateWithdrawResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitiateWithdrawResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitiateWithdrawResponseValidationError) ErrorName() string {
	return "InitiateWithdrawResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InitiateWithdrawResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitiateWithdrawResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitiateWithdrawResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitiateWithdrawResponseValidationError{}

// Validate checks the field values on DepositCallbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DepositCallbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DepositCallbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DepositCallbackRequestMultiError, or nil if none found.
func (m *DepositCallbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DepositCallbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaTransactionNo

	// no validation rules for GatewayOrderNo

	// no validation rules for TransactionNo

	// no validation rules for OrderStatus

	// no validation rules for PayTime

	// no validation rules for CreateTime

	// no validation rules for Amount

	// no validation rules for Money

	// no validation rules for Sign

	// no validation rules for Timestamp

	// no validation rules for Nonce

	if len(errors) > 0 {
		return DepositCallbackRequestMultiError(errors)
	}

	return nil
}

// DepositCallbackRequestMultiError is an error wrapping multiple validation
// errors returned by DepositCallbackRequest.ValidateAll() if the designated
// constraints aren't met.
type DepositCallbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DepositCallbackRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DepositCallbackRequestMultiError) AllErrors() []error { return m }

// DepositCallbackRequestValidationError is the validation error returned by
// DepositCallbackRequest.Validate if the designated constraints aren't met.
type DepositCallbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepositCallbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepositCallbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepositCallbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepositCallbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepositCallbackRequestValidationError) ErrorName() string {
	return "DepositCallbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DepositCallbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepositCallbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepositCallbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepositCallbackRequestValidationError{}

// Validate checks the field values on DepositCallbackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DepositCallbackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DepositCallbackResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DepositCallbackResponseMultiError, or nil if none found.
func (m *DepositCallbackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DepositCallbackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return DepositCallbackResponseMultiError(errors)
	}

	return nil
}

// DepositCallbackResponseMultiError is an error wrapping multiple validation
// errors returned by DepositCallbackResponse.ValidateAll() if the designated
// constraints aren't met.
type DepositCallbackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DepositCallbackResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DepositCallbackResponseMultiError) AllErrors() []error { return m }

// DepositCallbackResponseValidationError is the validation error returned by
// DepositCallbackResponse.Validate if the designated constraints aren't met.
type DepositCallbackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepositCallbackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepositCallbackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepositCallbackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepositCallbackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepositCallbackResponseValidationError) ErrorName() string {
	return "DepositCallbackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DepositCallbackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepositCallbackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepositCallbackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepositCallbackResponseValidationError{}

// Validate checks the field values on WithdrawCallbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WithdrawCallbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawCallbackRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawCallbackRequestMultiError, or nil if none found.
func (m *WithdrawCallbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawCallbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaTransactionNo

	// no validation rules for GatewayOrderNo

	// no validation rules for TransactionNo

	// no validation rules for OrderStatus

	// no validation rules for PayTime

	// no validation rules for CreateTime

	// no validation rules for Amount

	// no validation rules for Fee

	// no validation rules for RealMoney

	// no validation rules for Sign

	// no validation rules for Timestamp

	// no validation rules for Nonce

	if len(errors) > 0 {
		return WithdrawCallbackRequestMultiError(errors)
	}

	return nil
}

// WithdrawCallbackRequestMultiError is an error wrapping multiple validation
// errors returned by WithdrawCallbackRequest.ValidateAll() if the designated
// constraints aren't met.
type WithdrawCallbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawCallbackRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawCallbackRequestMultiError) AllErrors() []error { return m }

// WithdrawCallbackRequestValidationError is the validation error returned by
// WithdrawCallbackRequest.Validate if the designated constraints aren't met.
type WithdrawCallbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawCallbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawCallbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawCallbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawCallbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawCallbackRequestValidationError) ErrorName() string {
	return "WithdrawCallbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WithdrawCallbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawCallbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawCallbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawCallbackRequestValidationError{}

// Validate checks the field values on WithdrawCallbackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WithdrawCallbackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithdrawCallbackResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WithdrawCallbackResponseMultiError, or nil if none found.
func (m *WithdrawCallbackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WithdrawCallbackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return WithdrawCallbackResponseMultiError(errors)
	}

	return nil
}

// WithdrawCallbackResponseMultiError is an error wrapping multiple validation
// errors returned by WithdrawCallbackResponse.ValidateAll() if the designated
// constraints aren't met.
type WithdrawCallbackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithdrawCallbackResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithdrawCallbackResponseMultiError) AllErrors() []error { return m }

// WithdrawCallbackResponseValidationError is the validation error returned by
// WithdrawCallbackResponse.Validate if the designated constraints aren't met.
type WithdrawCallbackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawCallbackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawCallbackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawCallbackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawCallbackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawCallbackResponseValidationError) ErrorName() string {
	return "WithdrawCallbackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WithdrawCallbackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawCallbackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawCallbackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawCallbackResponseValidationError{}

// Validate checks the field values on TransactionInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransactionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionInfoMultiError, or nil if none found.
func (m *TransactionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	// no validation rules for OperatorTransactionId

	// no validation rules for GatewayTransactionId

	// no validation rules for OperatorId

	// no validation rules for UserId

	// no validation rules for Vip

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for Fee

	// no validation rules for PaymentMethod

	// no validation rules for PaymentChannel

	// no validation rules for Protocol

	// no validation rules for Type

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionInfoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransactionInfoMultiError(errors)
	}

	return nil
}

// TransactionInfoMultiError is an error wrapping multiple validation errors
// returned by TransactionInfo.ValidateAll() if the designated constraints
// aren't met.
type TransactionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionInfoMultiError) AllErrors() []error { return m }

// TransactionInfoValidationError is the validation error returned by
// TransactionInfo.Validate if the designated constraints aren't met.
type TransactionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionInfoValidationError) ErrorName() string { return "TransactionInfoValidationError" }

// Error satisfies the builtin error interface
func (e TransactionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionInfoValidationError{}

// Validate checks the field values on TransactionDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransactionDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionDetailMultiError, or nil if none found.
func (m *TransactionDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransaction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionDetailValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionDetailValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionDetailValidationError{
				field:  "Transaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetChannel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionDetailValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionDetailValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionDetailValidationError{
				field:  "Channel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransactionDetailMultiError(errors)
	}

	return nil
}

// TransactionDetailMultiError is an error wrapping multiple validation errors
// returned by TransactionDetail.ValidateAll() if the designated constraints
// aren't met.
type TransactionDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionDetailMultiError) AllErrors() []error { return m }

// TransactionDetailValidationError is the validation error returned by
// TransactionDetail.Validate if the designated constraints aren't met.
type TransactionDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionDetailValidationError) ErrorName() string {
	return "TransactionDetailValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionDetailValidationError{}

// Validate checks the field values on GetTransactionPageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionPageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionPageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransactionPageRequestMultiError, or nil if none found.
func (m *GetTransactionPageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionPageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for TransactionId

	// no validation rules for OperatorId

	// no validation rules for Currency

	// no validation rules for PaymentMethod

	// no validation rules for PaymentChannel

	// no validation rules for Protocol

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Agent

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransactionPageRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransactionPageRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionPageRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransactionPageRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransactionPageRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionPageRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Sort

	// no validation rules for Source

	// no validation rules for UserId

	// no validation rules for MinAmount

	// no validation rules for MaxAmount

	if len(errors) > 0 {
		return GetTransactionPageRequestMultiError(errors)
	}

	return nil
}

// GetTransactionPageRequestMultiError is an error wrapping multiple validation
// errors returned by GetTransactionPageRequest.ValidateAll() if the
// designated constraints aren't met.
type GetTransactionPageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionPageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionPageRequestMultiError) AllErrors() []error { return m }

// GetTransactionPageRequestValidationError is the validation error returned by
// GetTransactionPageRequest.Validate if the designated constraints aren't met.
type GetTransactionPageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionPageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionPageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionPageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionPageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionPageRequestValidationError) ErrorName() string {
	return "GetTransactionPageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionPageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionPageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionPageRequestValidationError{}

// Validate checks the field values on GetTransactionPageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionPageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionPageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransactionPageResponseMultiError, or nil if none found.
func (m *GetTransactionPageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionPageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTransactionPageResponseValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTransactionPageResponseValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTransactionPageResponseValidationError{
					field:  fmt.Sprintf("Transactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for TotalPages

	// no validation rules for TotalSuccessful

	// no validation rules for TotalProcessing

	// no validation rules for TotalFailed

	if len(errors) > 0 {
		return GetTransactionPageResponseMultiError(errors)
	}

	return nil
}

// GetTransactionPageResponseMultiError is an error wrapping multiple
// validation errors returned by GetTransactionPageResponse.ValidateAll() if
// the designated constraints aren't met.
type GetTransactionPageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionPageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionPageResponseMultiError) AllErrors() []error { return m }

// GetTransactionPageResponseValidationError is the validation error returned
// by GetTransactionPageResponse.Validate if the designated constraints aren't met.
type GetTransactionPageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionPageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionPageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionPageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionPageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionPageResponseValidationError) ErrorName() string {
	return "GetTransactionPageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionPageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionPageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionPageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionPageResponseValidationError{}

// Validate checks the field values on GetPaymentChannelPageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentChannelPageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentChannelPageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentChannelPageRequestMultiError, or nil if none found.
func (m *GetPaymentChannelPageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentChannelPageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for OperatorId

	// no validation rules for Type

	// no validation rules for Category

	// no validation rules for PaymentMethod

	// no validation rules for Currency

	// no validation rules for Country

	// no validation rules for Sort

	if len(errors) > 0 {
		return GetPaymentChannelPageRequestMultiError(errors)
	}

	return nil
}

// GetPaymentChannelPageRequestMultiError is an error wrapping multiple
// validation errors returned by GetPaymentChannelPageRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPaymentChannelPageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentChannelPageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentChannelPageRequestMultiError) AllErrors() []error { return m }

// GetPaymentChannelPageRequestValidationError is the validation error returned
// by GetPaymentChannelPageRequest.Validate if the designated constraints
// aren't met.
type GetPaymentChannelPageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentChannelPageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentChannelPageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentChannelPageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentChannelPageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentChannelPageRequestValidationError) ErrorName() string {
	return "GetPaymentChannelPageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentChannelPageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentChannelPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentChannelPageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentChannelPageRequestValidationError{}

// Validate checks the field values on GetPaymentChannelPageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentChannelPageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentChannelPageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPaymentChannelPageResponseMultiError, or nil if none found.
func (m *GetPaymentChannelPageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentChannelPageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPaymentChannels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPaymentChannelPageResponseValidationError{
						field:  fmt.Sprintf("PaymentChannels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPaymentChannelPageResponseValidationError{
						field:  fmt.Sprintf("PaymentChannels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPaymentChannelPageResponseValidationError{
					field:  fmt.Sprintf("PaymentChannels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for TotalPages

	if len(errors) > 0 {
		return GetPaymentChannelPageResponseMultiError(errors)
	}

	return nil
}

// GetPaymentChannelPageResponseMultiError is an error wrapping multiple
// validation errors returned by GetPaymentChannelPageResponse.ValidateAll()
// if the designated constraints aren't met.
type GetPaymentChannelPageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentChannelPageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentChannelPageResponseMultiError) AllErrors() []error { return m }

// GetPaymentChannelPageResponseValidationError is the validation error
// returned by GetPaymentChannelPageResponse.Validate if the designated
// constraints aren't met.
type GetPaymentChannelPageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentChannelPageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentChannelPageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentChannelPageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentChannelPageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentChannelPageResponseValidationError) ErrorName() string {
	return "GetPaymentChannelPageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentChannelPageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentChannelPageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentChannelPageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentChannelPageResponseValidationError{}

// Validate checks the field values on GetTransactionDetailByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionDetailByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionDetailByIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTransactionDetailByIdRequestMultiError, or nil if none found.
func (m *GetTransactionDetailByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionDetailByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	// no validation rules for Source

	if len(errors) > 0 {
		return GetTransactionDetailByIdRequestMultiError(errors)
	}

	return nil
}

// GetTransactionDetailByIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetTransactionDetailByIdRequest.ValidateAll()
// if the designated constraints aren't met.
type GetTransactionDetailByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionDetailByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionDetailByIdRequestMultiError) AllErrors() []error { return m }

// GetTransactionDetailByIdRequestValidationError is the validation error
// returned by GetTransactionDetailByIdRequest.Validate if the designated
// constraints aren't met.
type GetTransactionDetailByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionDetailByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionDetailByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionDetailByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionDetailByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionDetailByIdRequestValidationError) ErrorName() string {
	return "GetTransactionDetailByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionDetailByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionDetailByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionDetailByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionDetailByIdRequestValidationError{}

// Validate checks the field values on GetTransactionDetailByIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetTransactionDetailByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionDetailByIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTransactionDetailByIdResponseMultiError, or nil if none found.
func (m *GetTransactionDetailByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionDetailByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransactionDetailByIdResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransactionDetailByIdResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionDetailByIdResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransactionDetailByIdResponseMultiError(errors)
	}

	return nil
}

// GetTransactionDetailByIdResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetTransactionDetailByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTransactionDetailByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionDetailByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionDetailByIdResponseMultiError) AllErrors() []error { return m }

// GetTransactionDetailByIdResponseValidationError is the validation error
// returned by GetTransactionDetailByIdResponse.Validate if the designated
// constraints aren't met.
type GetTransactionDetailByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionDetailByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionDetailByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionDetailByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionDetailByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionDetailByIdResponseValidationError) ErrorName() string {
	return "GetTransactionDetailByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionDetailByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionDetailByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionDetailByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionDetailByIdResponseValidationError{}
