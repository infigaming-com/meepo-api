syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

package payment.service.v1;

option go_package = "github.com/infigaming-com/meepo-api/payment/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.payment.service.v1";

// Request to get payment method list
// This message is used to retrieve all available payment methods
message GetPaymentMethodListRequest {
}

// Details of a single payment method
// Contains information about a specific payment method including its ID, currency, and required fields schema
message PaymentMethodInfo {
  // Unique identifier for the payment method
  string id = 1;
  // Currency code supported by this payment method (e.g., USD, EUR, CNY)
  string currency = 2;
  // Country code where this payment method is available
  string country = 3;
  // Name of the payment method (e.g., CreditCard, AliPay, WeChatPay)
  string payment_method = 4 [json_name="paymentMethod"];
  // JSON schema defining the required fields for this payment method
  google.protobuf.Struct key_schema = 5 [json_name="keySchema"]; 
}

// Response for payment method list
// Contains a list of all available payment methods
message GetPaymentMethodListResponse {
  // List of payment methods available
  repeated PaymentMethodInfo payment_methods = 1 [json_name="paymentMethods"];
}

// Request to create a payment channel
// Used to create a new payment channel with specified merchant and method
message CreatePaymentChannelRequest {
  // ID of the merchant creating this channel
  string merchant_id = 1 [json_name="merchantId"];
  // ID of the Operator connect with this channel
  string operator_id = 2;
  // ID of the payment method to be used
  string payment_method_id = 3 [json_name="paymentMethodId"];
  // Type of channel (e.g., deposit, withdrawal)
  string type = 4;
  // Configuration fields for the payment channel in JSON format
  google.protobuf.Struct key = 5;
}

// Response for channel creation
// Returns the ID of the newly created payment channel
message CreatePaymentChannelResponse {
  // Unique identifier for the created channel
  string channel_id = 1 [json_name="channelId"];
}

// Payment channel information
// Detailed information about a specific payment channel
message PaymentChannelInfo {
  // Unique identifier for the channel
  string channel_id = 1 [json_name="channelId"];
  // Type of the channel (e.g., online, offline)
  string type = 2;
  // Category of the channel (e.g., bank, e-wallet)
  string category = 3;
  // ID of the operator who owns this channel
  string operator_id = 4 [json_name="operatorId"];
  // Payment method used in this channel
  string payment_method = 5 [json_name="paymentMethod"];
  // Tag for categorization or filtering
  string tag = 6;
  // Display name of the channel
  string name = 7;
  // ID of the payment method used
  string payment_method_id = 8 [json_name="paymentMethodId"];
  // Currency supported by this channel
  string currency = 9;
  // Crypto protocol supported by this channel
  string protocol = 10;
  // Crypto chian supported by this channel
  string network = 11;
  // Country where this channel is available
  string country = 12;
  // Specific method used (might be more detailed than payment_method)
  string method = 13;
  // URL to the logo image for this payment channel
  string logo = 14;
  // Minimum amount allowed for deposit transactions
  string min_deposit_amount = 15 [json_name="minDepositAmount"];
  // Maximum amount allowed for deposit transactions
  string max_deposit_amount = 16 [json_name="maxDepositAmount"];
  // Minimum amount allowed for withdrawal transactions
  string min_withdraw_amount = 17 [json_name="minWithdrawAmount"];
  // Maximum amount allowed for withdrawal transactions
  string max_withdraw_amount = 18 [json_name="maxWithdrawAmount"];
  // Estimated arrival time in minutes
  int32 eat = 19;
  // JSON schema defining deposit form fields required by this channel
  google.protobuf.Struct deposit_schema = 20 [json_name="depositSchema"];
  // JSON schema defining withdrawal form fields required by this channel
  google.protobuf.Struct withdraw_schema = 21 [json_name="withdrawSchema"];
}

// Request to initiate a deposit
// Used to start a deposit transaction
message InitiateDepositRequest {
  // Amount to deposit in smallest currency unit (e.g., cents)
  string amount = 1;
  // Currency code for the transaction
  string currency = 2;
  // ID of the channel to use for this deposit
  string channel_id = 3 [json_name="channelId"];
  // Additional information needed for the deposit
  // May include clientOrderId, productId, userInfo, etc.
  google.protobuf.Struct extra = 4;
}

// Response for deposit initiation
// Contains details about the initiated deposit transaction
message InitiateDepositResponse {
  // Unique identifier for the transaction
  int64 transaction_id = 1 [json_name="transactionId"];
  // Amount to be deposited in smallest currency unit
  string amount = 2;
  // Currency code for the transaction
  string currency = 3;
  // Current status of the transaction
  string status = 4;
  // URL to direct the user to for payment completion
  string pay_url = 5 [json_name="payUrl"];
  // QR code image (typically base64 encoded) for mobile payment
  string qr_code = 6 [json_name="qrCode"];
  // Timestamp when the transaction was created
  google.protobuf.Timestamp created_at = 7 [json_name="createdAt"];
  // Additional transaction information returned by payment provider
  google.protobuf.Struct extra = 8;
}

// Request to get address
// Used to get DC address
message GetAddressRequest {
  // ID of the channel to use for this deposit
  string channel_id = 1 [json_name="channelId"];
  // Additional information needed for the deposit
  // May include clientOrderId, productId, userInfo, etc.
  google.protobuf.Struct extra = 2;
}

// Response for deposit initiation
// Contains details about the initiated deposit transaction
message GetAddressResponse {
  message Data {
    // Crypto like btc, eth...
    string currency = 1;
    // Crypto protocol
    string protocol = 2;
    // Crypto chain
    string network = 3;
    // Digital Currency address
    string address = 4;
  }
  Data data = 1;
}

// Request to initiate a withdrawal
// Used to start a withdrawal transaction
message InitiateWithdrawRequest {
  // Amount to withdraw in smallest currency unit (e.g., cents)
  string amount = 1;
  // Currency code for the transaction
  string currency = 2;
  // ID of the user who initiated the withdrawal
  int64 user_id = 3 [json_name="userId"];
  // ID of the operator who owns this channel
  int64 operator_id = 4 [json_name="operatorId"];
  // ID of the channel to use for withdrawal
  string channel_id = 5 [json_name="channelId"];
  // Additional information needed for the withdrawal
  // May include account details, clientId, note, etc.
  google.protobuf.Struct extra = 6;
}

// Response for withdrawal initiation
// Contains details about the initiated withdrawal transaction
message InitiateWithdrawResponse {
  // Unique identifier for the transaction
  int64 transaction_id = 1 [json_name="transactionId"];
  // Order number from the operator's system
  string operator_order_no = 2 [json_name="operatorOrderNo"];
  // Amount to be withdrawn in smallest currency unit
  string amount = 3;
  // Current status of the transaction
  string status = 4;
  // Timestamp when the transaction was created
  google.protobuf.Timestamp created_at = 5 [json_name="createdAt"];
}

// Request for deposit callback
// Used by payment gateways to notify about deposit status changes
message DepositCallbackRequest {
  // Transaction number from the payment aggregator
  int64 pa_transaction_no = 1 [json_name="transactionNo"];
  // Order number from the payment gateway
  string gateway_order_no = 2 [json_name="gatewayOrderNo"];
  // Transaction number from the operator
  int64 transaction_no = 3 [json_name="operatorOrderNo"];
  // Current status of the order (e.g., SUCCESS, FAILED)
  string order_status = 4 [json_name="orderStatus"];
  // Time when payment was completed. Format: yyyy-MM-dd HH:mm:ss
  string pay_time = 5 [json_name="payTime"];
  // Time when order was created. Format: yyyy-MM-dd HH:mm:ss
  string create_time = 6 [json_name="createTime"];
  // Original amount of the order
  string amount = 7;
  // Actual amount paid
  string money = 8;
  // HMAC-SHA256 signature to verify request authenticity
  string sign = 9 [json_name="sign"];
  // Request timestamp to prevent replay attacks
  string timestamp = 10 [json_name="timestamp"];
  // Random string to ensure each request is unique
  string nonce = 11 [json_name="nonce"];
}

// Response for deposit callback
// Confirms receipt of callback notification
message DepositCallbackResponse {
  // Whether the callback was processed successfully
  bool success = 1;
  // Optional message, returns error reason on failure
  string message = 2;
}

// Request for withdraw callback
// Used by payment gateways to notify about withdrawal status changes
message WithdrawCallbackRequest {
  // Transaction number from the payment aggregator
  int64 pa_transaction_no = 1 [json_name="transactionNo"];
  // Order number from the payment gateway
  string gateway_order_no = 2 [json_name="gatewayOrderNo"];
  // Transaction number from the operator
  int64 transaction_no = 3 [json_name="operatorOrderNo"];
  // Current status of the order (e.g., SUCCESS, FAILED)
  string order_status = 4 [json_name="orderStatus"];
  // Time when withdrawal was processed. Format: yyyy-MM-dd HH:mm:ss
  string pay_time = 5 [json_name="payTime"];
  // Time when order was created. Format: yyyy-MM-dd HH:mm:ss
  string create_time = 6 [json_name="createTime"];
  // Original amount of the withdrawal order
  string amount = 7;
  // Service fee applied to the withdrawal
  string fee = 8;
  // Actual amount withdrawn after fees
  string real_money = 9 [json_name="realMoney"];
  // HMAC-SHA256 signature to verify request authenticity
  string sign = 10 [json_name="sign"];
  // Request timestamp to prevent replay attacks
  string timestamp = 11 [json_name="timestamp"];
  // Random string to ensure each request is unique
  string nonce = 12 [json_name="nonce"];
}

// Response for withdraw callback
// Confirms receipt of callback notification
message WithdrawCallbackResponse {
  // Whether the callback was processed successfully
  bool success = 1;
  // Optional message, returns error reason on failure
  string message = 2;
}

// Transaction type enum
// Defines possible types of financial transactions
enum TransactionType {
  // Default unspecified value
  TRANSACTION_TYPE_UNSPECIFIED = 0;
  // Money incoming to platform
  TRANSACTION_TYPE_DEPOSIT = 1;
  // Money outgoing from platform
  TRANSACTION_TYPE_WITHDRAW = 2;
}

// Transaction status enum
// Defines possible states of a transaction
enum TransactionStatus {
  // Default unspecified value
  TRANSACTION_STATUS_UNSPECIFIED = 0;
  // Transaction is in progress
  TRANSACTION_STATUS_PROCESSING = 1;
  // Transaction completed successfully
  TRANSACTION_STATUS_SUCCESSFUL = 2;
  // Transaction failed to complete
  TRANSACTION_STATUS_FAILED = 3;
}

// Sort enum
// Defines sort direction for queries
enum Sort {
  // Sort in descending order (newest first)
  DESC = 0;
  // Sort in ascending order (oldest first)
  ASC = 1;
}

// Request source enum
// Defines the source of the request
enum RequestSource {
  // Request from frontend user
  REQUEST_SOURCE_FRONTEND = 0;
  // Request from admin backend
  REQUEST_SOURCE_ADMIN = 1;
}

// Channel type enum
// Defines the purpose of a payment channel
enum ChannelType {
  // Channel for depositing funds
  CHANNEL_TYPE_DEPOSIT = 0;
  // Channel for withdrawing funds
  CHANNEL_TYPE_WITHDRAW = 1;
}

// Transaction information
// Detailed information about a specific transaction
message TransactionInfo {
  // Unique identifier for the transaction
  int64 transaction_id = 1 [json_name="transactionId"];
  // Transaction ID from the operator's system
  string pa_transaction_id = 2 [json_name="paTransactionId"];
  // Transaction ID from the payment gateway
  string gateway_transaction_id = 3 [json_name="gatewayTransactionId"];
  // Operator ID associated with the transaction
  string operator_id = 4 [json_name="operatorId"];
  // ID of the user who initiated the transaction
  int64 user_id = 5 [json_name="userId"];
  // VIP level of the user
  int32 vip = 6;
  // Transaction amount in smallest currency unit
  string amount = 7;
  // Currency code for the transaction
  string currency = 8;
  // Transaction fee in smallest currency unit
  string fee = 9;
  // Payment method used for the transaction
  string payment_method = 10 [json_name="paymentMethod"];
  // Payment channel used for the transaction
  string payment_channel = 11 [json_name="paymentChannel"];
  // Crypto Protocol used for the transaction
  string protocol = 12;
  // Crypto Network used for the transaction
  string network = 13;
  // Type of transaction (deposit or withdrawal)
  TransactionType type = 14;
  // Current status of the transaction
  TransactionStatus status = 15;
  // Timestamp when the transaction was created
  google.protobuf.Timestamp created_at = 16 [json_name="createdAt"];
  // Timestamp when the transaction was last updated
  google.protobuf.Timestamp updated_at = 17 [json_name="updatedAt"];
}

message TransactionDetail {
  // Transaction information
  TransactionInfo transaction = 1;
  // Channel information
  PaymentChannelInfo channel = 2;
}

// Request to get transaction page
// Used to retrieve a paginated list of transactions with optional filters
message GetTransactionPageRequest {
  // Page number to retrieve (1-based)
  int32 page = 1;
  // Number of items per page
  int32 page_size = 2 [json_name="pageSize"];
  
  // Optional transaction ID filter
  int64 transaction_id = 3 [json_name="transactionId"];
  // Optional operator ID filter
  string operator_id = 4 [json_name="operatorId"];
  // Optional currency filter
  string currency = 5;
  // Optional payment method filter
  string payment_method = 6 [json_name="paymentMethod"];
  // Optional payment channel filter
  string payment_channel = 7 [json_name="paymentChannel"];
  // Optional crypto protocol filter
  string protocol = 8;
  // Optional crypto network filter
  string network = 9;
  // Optional transaction type filter
  TransactionType type = 10;
  // Optional status filter
  TransactionStatus status = 11;
  // Optional agent filter
  string agent = 12;
  // Optional start time for date range filter
  google.protobuf.Timestamp start_time = 13 [json_name="startTime"];
  // Optional end time for date range filter
  google.protobuf.Timestamp end_time = 14 [json_name="endTime"];
  // Optional sort direction
  Sort sort = 15 [json_name="sort"];
  // Source of the request (frontend or admin)
  RequestSource source = 16 [json_name="source"];
  // Optional user ID filter
  int64 user_id = 17 [json_name="userId"];
  // Optional minimum amount filter
  string min_amount = 18 [json_name="minAmount"];
  // Optional maximum amount filter
  string max_amount = 19 [json_name="maxAmount"];
}

// Response for transaction page
// Contains paginated list of transactions and pagination metadata
message GetTransactionPageResponse {
  // List of transactions matching the filter criteria
  repeated TransactionInfo transactions = 1;
  // Total number of transactions matching the filter criteria
  int32 total_count = 2 [json_name="totalCount"];
  // Current page number
  int32 page = 3;
  // Number of items per page
  int32 page_size = 4 [json_name="pageSize"];
  // Total number of pages available
  int32 total_pages = 5 [json_name="totalPages"];
  // The following fields are only populated for admin requests
  // Total number of successful transactions
  int32 total_successful = 6 [json_name="totalSuccessful"];
  // Total number of processing transactions
  int32 total_processing = 7 [json_name="totalProcessing"];
  // Total number of failed transactions
  int32 total_failed = 8 [json_name="totalFailed"];
}

// Request to get payment channel page
// Used to retrieve a paginated list of payment channels with optional filters
message GetPaymentChannelPageRequest {
  // Page number to retrieve (1-based)
  int32 page = 1;
  // Number of items per page
  int32 page_size = 2 [json_name="pageSize"];
  
  // Optional operator ID filter
  string operator_id = 3 [json_name="operatorId"];
  // Optional channel type filter
  ChannelType type = 4;
  // Optional category filter
  string category = 5;
  // Optional payment method filter
  string payment_method = 6 [json_name="paymentMethod"];
  // Optional currency filter
  string currency = 7;
  // Optional crypto protocol
  string protocol = 8;
  // Optional crypto network filter
  string network = 9;
  // Optional country filter
  string country = 10;
  // Optional sort direction
  Sort sort = 11 [json_name="sort"];
}

// Response for payment channel page
// Contains paginated list of payment channels and pagination metadata
message GetPaymentChannelPageResponse {
  // List of payment channels matching the filter criteria
  repeated PaymentChannelInfo payment_channels = 1 [json_name="paymentChannels"];
  // Total number of channels matching the filter criteria
  int32 total_count = 2 [json_name="totalCount"];
  // Current page number
  int32 page = 3;
  // Number of items per page
  int32 page_size = 4 [json_name="pageSize"];
  // Total number of pages available
  int32 total_pages = 5 [json_name="totalPages"];
}

// Request to get transaction detail by ID
// Used to retrieve detailed information about a specific transaction
message GetTransactionDetailByIdRequest {
  // Unique identifier for the transaction
  int64 transaction_id = 1 [json_name="transactionId"];
  // Source of the request (frontend or admin)
  RequestSource source = 2 [json_name="source"];
}

// Response for transaction detail
// Contains detailed information about the requested transaction
message GetTransactionDetailByIdResponse {
  // Detailed transaction information including channel data
  TransactionDetail detail = 1;
}

message GetChannelsByIdsRequest {
	repeated string channel_ids = 1;
}

message GetChannelsByIdsResponse {
	message Channel {
		string channel_id = 1;
		string name = 2;
	}
	repeated Channel channels = 1;
}

// Payment Service
// Provides methods for managing payment methods, channels, and transactions
service Payment {
  // Get list of payment methods
  // Retrieves all available payment methods supported by the system
  // Error code: GET_PAYMENT_METHOD_LIST_FAILED(50001) - Failed to get payment method list
  rpc GetPaymentMethodList(GetPaymentMethodListRequest) returns (GetPaymentMethodListResponse) {
    option (google.api.http) = {
      post: "/v1/payment/method/list"
      body: "*"
    };
  }

  // Create payment channel
  // Creates a new payment channel with specified configuration
  // Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
  rpc CreatePaymentChannel(CreatePaymentChannelRequest) returns (CreatePaymentChannelResponse) {
    option (google.api.http) = {
      post: "/v1/payment/channel/create"
      body: "*"
    };
  }

  rpc GetAddress(GetAddressRequest) returns (GetAddressResponse) {
    option (google.api.http) = {
      post: "/v1/payment/address/get"
      body: "*"
    };
  }

  // Initiate a deposit transaction
  // Starts a new deposit process and returns payment information
  // Error code: INITIATE_DEPOSIT_FAILED(50004) - Failed to initiate deposit transaction
  rpc InitiateDeposit(InitiateDepositRequest) returns (InitiateDepositResponse) {
    option (google.api.http) = {
      post: "/v1/payment/deposit/initiate"
      body: "*"
    };
  }

  // Initiate a withdrawal transaction
  // Starts a new withdrawal process
  // Error code: INITIATE_WITHDRAW_FAILED(50005) - Failed to initiate withdrawal transaction
  rpc InitiateWithdraw(InitiateWithdrawRequest) returns (InitiateWithdrawResponse) {
    option (google.api.http) = {
      post: "/v1/payment/withdraw/initiate"
      body: "*"
    };
  }

  // Deposit callback
  // Handles callbacks from payment gateways for deposit status updates
  // This endpoint is called by payment providers to notify of completed or failed deposits
  // Error code: DEPOSIT_CALLBACK_FAILED(50006) - Failed to process deposit callback
  rpc DepositCallback(DepositCallbackRequest) returns (DepositCallbackResponse) {
    option (google.api.http) = {
      post: "/v1/payment/deposit/callback"
      body: "*"
    };
  }

  // Withdraw callback
  // Handles callbacks from payment gateways for withdrawal status updates
  // This endpoint is called by payment providers to notify of completed or failed withdrawals
  // Error code: WITHDRAW_CALLBACK_FAILED(50007) - Failed to process withdrawal callback
  rpc WithdrawCallback(WithdrawCallbackRequest) returns (WithdrawCallbackResponse) {
    option (google.api.http) = {
      post: "/v1/payment/withdraw/callback"
      body: "*"
    };
  }

  // Get transaction page with pagination and filters
  // Retrieves a paginated list of transactions with optional filtering
  // Error code: GET_TRANSACTION_PAGE_FAILED(50008) - Failed to get transaction page
  rpc GetTransactionPage(GetTransactionPageRequest) returns (GetTransactionPageResponse) {
    option (google.api.http) = {
      post: "/v1/payment/transaction/page"
      body: "*"
    };
  }

  // Get payment channel page with pagination and filters
  // Retrieves a paginated list of payment channels with optional filtering
  // Error code: GET_PAYMENT_CHANNEL_PAGE_FAILED(50003) - Failed to get payment channel page
  rpc GetPaymentChannelPage(GetPaymentChannelPageRequest) returns (GetPaymentChannelPageResponse) {
    option (google.api.http) = {
      post: "/v1/payment/channel/page"
      body: "*"
    };
  }

  // Get transaction detail
  // Retrieves detailed information about a specific transaction
  // Error code: GET_TRANSACTION_DETAIL_FAILED(50009) - Failed to get transaction detail
  rpc GetTransactionDetailById(GetTransactionDetailByIdRequest) returns (GetTransactionDetailByIdResponse) {
  }

  
	rpc GetChannelsByIds(GetChannelsByIdsRequest) returns (GetChannelsByIdsResponse) {
	}
}
