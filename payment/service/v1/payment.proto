syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

package payment.service.v1;

option go_package = "github.com/infigaming-com/meepo-api/payment/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.payment.service.v1";

// Request to get payment method list
message GetPaymentMethodListRequest {
}

// Details of a single payment method
message PaymentMethodInfo {
  string id = 1;
  string currency = 2;
  string country = 3;
  string payment_method = 4 [json_name="paymentMethod"];
  google.protobuf.Struct key_schema = 5 [json_name="keySchema"]; // Stores schema for required fields of the payment method
}

// Response for payment method list
message GetPaymentMethodListResponse {
  repeated PaymentMethodInfo payment_methods = 1 [json_name="paymentMethods"];
}

// Request to create a payment channel
message CreatePaymentChannelRequest {
  string merchant_id = 1 [json_name="merchantId"];
  string payment_method_id = 2 [json_name="paymentMethodId"];
  string type = 3;
  google.protobuf.Struct key = 4; // Stores configuration fields for the payment channel
}

// Response for channel creation
message CreatePaymentChannelResponse {
  string channel_id = 1 [json_name="channelId"];
}

// Request to get payment channel list
message GetPaymentChannelListRequest {
  string operator_id = 1 [json_name="operatorId"];
}

// Payment channel information
message PaymentChannelInfo {
  string channel_id = 1 [json_name="channelId"];
  string type = 2;
  string category = 3;
  string operator_id = 4 [json_name="operatorId"];
  string payment_method = 5 [json_name="paymentMethod"];
  string tag = 6;
  string name = 7;
  string payment_method_id = 8 [json_name="paymentMethodId"];
  string currency = 9;
  string country = 10;
  string method = 11;
  string logo = 12;
  int64 min_deposit_amount = 13 [json_name="minDepositAmount"];
  int64 max_deposit_amount = 14 [json_name="maxDepositAmount"];
  int64 min_withdraw_amount = 15 [json_name="minWithdrawAmount"];
  int64 max_withdraw_amount = 16 [json_name="maxWithdrawAmount"];
  int32 eat = 17;
  google.protobuf.Struct deposit_schema = 18 [json_name="depositSchema"];
  google.protobuf.Struct withdraw_schema = 19 [json_name="withdrawSchema"];
}

// Response for payment channel list
message GetPaymentChannelListResponse {
  repeated PaymentChannelInfo payment_channels = 1 [json_name="paymentChannels"];
}

// Request to initiate a deposit
message InitiateDepositRequest {
  int64 amount = 1;
  string currency = 2;
  string channel_id = 3 [json_name="channelId"];
  google.protobuf.Struct extra = 4; // Stores additional information like clientOrderId, productId, etc.
}

// Response for deposit initiation
message InitiateDepositResponse {
  int64 transaction_id = 1 [json_name="transactionId"];
  int64 amount = 2;
  string currency = 3;
  string status = 4;
  string pay_url = 5 [json_name="payUrl"];
  string qr_code = 6 [json_name="qrCode"];
  google.protobuf.Timestamp created_at = 7 [json_name="createdAt"];
  google.protobuf.Struct extra = 8; // Additional transaction information
}

// Request to initiate a withdrawal
message InitiateWithdrawRequest {
  int64 amount = 1;
  string channel_id = 2 [json_name="channelId"];
  google.protobuf.Struct extra = 3; // Stores additional information like clientId, note, etc.
}

// Response for withdrawal initiation
message InitiateWithdrawResponse {
  int64 transaction_id = 1 [json_name="transactionId"];
  string operator_order_no = 2 [json_name="operatorOrderNo"];
  int64 amount = 3;
  string status = 4;
  google.protobuf.Timestamp created_at = 5 [json_name="createdAt"];
}

// Request for deposit callback
message DepositCallbackRequest {
  int64 pa_transaction_no = 1 [json_name="transactionNo"];
  string gateway_order_no = 2 [json_name="gatewayOrderNo"];
  int64 transaction_no = 3 [json_name="operatorOrderNo"];
  string order_status = 4 [json_name="orderStatus"];
  string pay_time = 5 [json_name="payTime"];
  string create_time = 6 [json_name="createTime"];
  int64 amount = 7;
  int64 money = 8;
  string sign = 9 [json_name="sign"]; // HMAC-SHA256签名，用于验证请求的合法性
  string timestamp = 10 [json_name="timestamp"]; // 请求时间戳，用于防止重放攻击
  string nonce = 11 [json_name="nonce"]; // 随机字符串，确保每次请求的唯一性
}

// Response for deposit callback
message DepositCallbackResponse {
  bool success = 1;
  string message = 2; // 可选的消息，失败时返回错误原因
}

// Request for withdraw callback
message WithdrawCallbackRequest {
  int64 pa_transaction_no = 1 [json_name="transactionNo"]; // Operator order number
  string gateway_order_no = 2 [json_name="gatewayOrderNo"]; // Gateway order number
  int64 transaction_no = 3 [json_name="operatorOrderNo"]; // Operator order number
  string order_status = 4 [json_name="orderStatus"]; // Order status
  string pay_time = 5 [json_name="payTime"]; // Transaction time. Format: yyyy-MM-dd HH:mm:ss
  string create_time = 6 [json_name="createTime"]; // Creation time. Format: yyyy-MM-dd HH:mm:ss
  int64 amount = 7; // Order amount
  int64 fee = 8; // Service fee
  int64 real_money = 9 [json_name="realMoney"]; // Actual withdrawal amount
  string sign = 10 [json_name="sign"]; // HMAC-SHA256签名，用于验证请求的合法性
  string timestamp = 11 [json_name="timestamp"]; // 请求时间戳，用于防止重放攻击
  string nonce = 12 [json_name="nonce"]; // 随机字符串，确保每次请求的唯一性
}

// Response for withdraw callback
message WithdrawCallbackResponse {
  bool success = 1;
  string message = 2; // 可选的消息，失败时返回错误原因
}

// Transaction type enum
enum TransactionType {
  TRANSACTION_TYPE_UNSPECIFIED = 0;
  TRANSACTION_TYPE_DEPOSIT = 1;
  TRANSACTION_TYPE_WITHDRAW = 2;
}

// Transaction status enum
enum TransactionStatus {
  TRANSACTION_STATUS_UNSPECIFIED = 0;
  TRANSACTION_STATUS_PROCESSING = 1;
  TRANSACTION_STATUS_SUCCESSFUL = 2;
  TRANSACTION_STATUS_FAILED = 3;
}

// Sort enum
enum Sort {
  DESC = 0;
  ASC = 1;
}

// Channel type enum
enum ChannelType {
  CHANNEL_TYPE_DEPOSIT = 0;    // 充值
  CHANNEL_TYPE_WITHDRAW = 1;   // 提现
}

// Transaction information
message TransactionInfo {
  int64 transaction_id = 1 [json_name="transactionId"];
  int64 user_id = 2 [json_name="userId"];
  int64 amount = 3;
  string currency = 4;
  TransactionType type = 5;
  TransactionStatus status = 6;
  string payment_method = 7 [json_name="paymentMethod"];
  google.protobuf.Timestamp created_at = 8 [json_name="createdAt"];
  google.protobuf.Timestamp updated_at = 9 [json_name="updatedAt"];
}

// Request to get transaction page
message GetTransactionPageRequest {
  // Pagination parameters
  int32 page = 1;
  int32 page_size = 2 [json_name="pageSize"];
  
  // Filter parameters (all optional)
  // Optional transaction type filter
  TransactionType type = 3;
  // Optional currency filter
  string currency = 4;
  // Optional status filter
  TransactionStatus status = 5;
  // Optional date range filter
  google.protobuf.Timestamp start_time = 6 [json_name="startTime"];
  google.protobuf.Timestamp end_time = 7 [json_name="endTime"];
  // Optional payment method filter
  string payment_method = 8 [json_name="paymentMethod"];
  // Optional sort
  Sort sort = 9 [json_name="sort"];
}

// Response for transaction page
message GetTransactionPageResponse {
  repeated TransactionInfo transactions = 1;
  int32 total_count = 2 [json_name="totalCount"];
  int32 page = 3;
  int32 page_size = 4 [json_name="pageSize"];
  int32 total_pages = 5 [json_name="totalPages"];
}

// Request to get payment channel page
message GetPaymentChannelPageRequest {
  // Pagination parameters
  int32 page = 1;
  int32 page_size = 2 [json_name="pageSize"];
  
  // Filter parameters (all optional)
  // Optional operator id filter
  string operator_id = 3 [json_name="operatorId"];
  // Optional type filter
  ChannelType type = 4;
  // Optional category filter
  string category = 5;
  // Optional payment method filter
  string payment_method = 6 [json_name="paymentMethod"];
  // Optional currency filter
  string currency = 7;
  // Optional country filter
  string country = 8;
  // Optional sort
  Sort sort = 9 [json_name="sort"];
}

// Response for payment channel page
message GetPaymentChannelPageResponse {
  repeated PaymentChannelInfo payment_channels = 1 [json_name="paymentChannels"];
  int32 total_count = 2 [json_name="totalCount"];
  int32 page = 3;
  int32 page_size = 4 [json_name="pageSize"];
  int32 total_pages = 5 [json_name="totalPages"];
}

service Payment {
  // Get list of payment methods
  rpc GetPaymentMethodList(GetPaymentMethodListRequest) returns (GetPaymentMethodListResponse) {
    option (google.api.http) = {
      post: "/v1/payment/method/list"
      body: "*"
    };
  }

  // Create payment channel
  rpc CreatePaymentChannel(CreatePaymentChannelRequest) returns (CreatePaymentChannelResponse) {
    option (google.api.http) = {
      post: "/v1/payment/channel/create"
      body: "*"
    };
  }

  // Get list of payment channels
  rpc GetPaymentChannelList(GetPaymentChannelListRequest) returns (GetPaymentChannelListResponse) {
    option (google.api.http) = {
      post: "/v1/payment/channel/list"
      body: "*"
    };
  }

  // Initiate a deposit transaction
  rpc InitiateDeposit(InitiateDepositRequest) returns (InitiateDepositResponse) {
    option (google.api.http) = {
      post: "/v1/payment/deposit/initiate"
      body: "*"
    };
  }

  // Initiate a withdrawal transaction
  rpc InitiateWithdraw(InitiateWithdrawRequest) returns (InitiateWithdrawResponse) {
    option (google.api.http) = {
      post: "/v1/payment/withdraw/initiate"
      body: "*"
    };
  }

  // Deposit callback
  // This endpoint handles callbacks from payment gateways.
  rpc DepositCallback(DepositCallbackRequest) returns (DepositCallbackResponse) {
    option (google.api.http) = {
      post: "/v1/payment/deposit/callback"
      body: "*"
    };
  }

  // Withdraw callback
  // This endpoint handles callbacks from payment gateways for withdrawal results.
  rpc WithdrawCallback(WithdrawCallbackRequest) returns (WithdrawCallbackResponse) {
    option (google.api.http) = {
      post: "/v1/payment/withdraw/callback"
      body: "*"
    };
  }

  // Get transaction page with pagination and filters
  rpc GetTransactionPage(GetTransactionPageRequest) returns (GetTransactionPageResponse) {
    option (google.api.http) = {
      post: "/v1/payment/transaction/page"
      body: "*"
    };
  }

  // Get payment channel page with pagination and filters
  rpc GetPaymentChannelPage(GetPaymentChannelPageRequest) returns (GetPaymentChannelPageResponse) {
    option (google.api.http) = {
      post: "/v1/payment/channel/page"
      body: "*"
    };
  }
}