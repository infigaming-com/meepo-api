syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "common/common.proto";

package payment.service.v1;

option go_package = "github.com/infigaming-com/meepo-api/payment/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.payment.service.v1";

// Request to get payment method list
// This message is used to retrieve all available payment methods
message GetSupportedPaymentMethodListRequest {
  // Currency code supported by this payment method (e.g., USD, EUR, CNY)
  repeated string currency = 1;
}

message GetPaymentMethodListRequest {
  string currency = 1;
  string psp = 2;
  // Page number to retrieve (1-based)
  int32 page = 3;
  // Number of items per page
  int32 page_size = 4;
  optional bool enabled = 5;
	api.common.OperatorContext operator_context = 6;
}

// Details of a single payment method
// Contains information about a specific payment method including its ID, currency, and required fields schema
message PaymentMethodInfo {
  // Unique identifier for the payment method
  string id = 1;
  // Currency code supported by this payment method (e.g., USD, EUR, CNY)
  string psp = 2;
  // Payin or Payout
  string supported_type = 3;
  // Currency like USD, VND
  string currency = 4;
  // Currency type (e.g., Crypto, Fiat)
  string currency_type = 5;
  // Contact
  string contact = 6;
  // Country code where this payment method is available
  string country = 7;
  // Name of the payment method (e.g., CreditCard, AliPay, WeChatPay)
  string payment_method = 8;
  // Fixed Fee on the Amount
  string sys_fixed_fee = 9;
  // Rate Fee 
  string sys_fee_rate = 10;
  // Min Amount
  string sys_min_amount = 11;
  // Max Amount
  string sys_max_amount = 12;
  // Minmum Fee
  string sys_min_fee = 13;
  // Fixed Fee on the Amount
  string psp_fixed_fee = 14;
  // Rate Fee 
  string psp_fee_rate = 15;
  // Min Amount
  string psp_min_amount = 16;
  // Max Amount
  string psp_max_amount = 17;
  // Minmum Fee
  string psp_min_fee = 18;
  // Status bool
  bool enable = 19;
  // Crypto network
  string network = 20;
  // Crypto protocol
  string protocol = 21;
  // Source operator
  string source = 22;
  // Average Time
  int32 average_time = 23;
  // Success Rate
  string success_rate = 24;
  // JSON schema defining the required fields for this payment method
  google.protobuf.ListValue key_schema = 25; 
}

// Response for payment method list
// Contains a list of all available payment methods
message GetSupportedPaymentMethodListResponse {
  // List of payment methods available
  repeated PaymentMethodInfo payment_methods = 1;
}

// Response for payment method list
// Contains a list of all available payment methods
message GetPaymentMethodListResponse {
  // List of payment methods available
  repeated PaymentMethodInfo payment_methods = 1;
  // Current page number
  int32 page = 2;
  // Number of items per page
  int32 page_size = 3;
  // Total number of pages available
  int32 total_pages = 4;
  // The following fields are only populated for admin requests
  // Total number of successful transactions
  int32 total_on = 5;
  // Total number of processing transactions
  int32 total_off = 6;
}

// Request to create a payment channel
// Used to create a new payment channel with specified merchant and method
message CreatePaymentMethodRequest {
  // ID of the payment method to be used
  string payment_method_id = 1;
  // Currency Type
  string contact = 2;
  // Fixed Fee on the Amount
  string sys_fixed_fee = 3;
  // Rate Fee 
  string sys_fee_rate = 4;
  // Min Amount
  string sys_min_amount = 5;
  // Max Amount
  string sys_max_amount = 6;
  // Minmum Fee
  string sys_min_fee = 7;
  // ID of the Operator connect with this channel
	api.common.OperatorContext operator_context = 8;
}

message CreatePaymentMethodResponse {
  PaymentMethodInfo payment_method = 1;
}

message UpdatePaymentChannelResponse {
  PaymentChannelInfo payment_methods = 1;
}

// Request to create a payment channel
// Used to create a new payment channel with specified merchant and method
message CreatePaymentChannelRequest {
  // ID of the merchant creating this channel
  string merchant_id = 1;
  // ID of the Operator connect with this channel
	api.common.OperatorContext operator_context = 2;
  // ID of the payment method to be used
  string payment_method_id = 3;
  // Contact Info email
  string contact = 4;
  // PSP Fixed Fee on the Amount
  string fixed_fee = 5;
  // PSP Rate Fee 
  string fee_rate = 6;
  // Minimum Fee 
  string min_fee = 7;
  // User Fixed Fee on the Amount
  string user_fixed_fee = 8;
  // User Rate Fee 
  string user_fee_rate = 9;
  // Minimum Fee 
  string user_min_fee = 10;
  // Min Amount
  string min_amount = 11;
  // Max Amount
  string max_amount = 12;
  // Configuration fields for the payment channel in JSON format
  google.protobuf.Struct key = 13;
}

// Request to create a payment channel
// Used to create a new payment channel with specified merchant and method
message UpdatePaymentChannelRequest {
  // ID of the payment channel to be used
  string payment_channel_id = 1;
  // Contact Info email
  string contact = 2;
  // PSP Fixed Fee on the Amount
  string fixed_fee = 3;
  // PSP Rate Fee 
  string fee_rate = 4;
  // PSP Min Fee 
  string min_fee = 5;
  // User Fixed Fee on the Amount
  string user_fixed_fee = 6;
  // User Rate Fee 
  string user_fee_rate = 7;
  // User Min Fee 
  string user_min_fee = 8;
  // Min Amount
  string min_amount = 9;
  // Max Amount
  string max_amount = 10;
  // enable status
  optional bool enable = 11;
  // Configuration fields for the payment channel in JSON format
  google.protobuf.Struct key = 12;
}

// Response for channel creation
// Returns the ID of the newly created payment channel
message CreatePaymentChannelResponse {
  // Unique identifier for the created channel
  string channel_id = 1;
}

// Payment channel information
// Detailed information about a specific payment channel
message PaymentChannelInfo {
  // Unique identifier for the channel
  string channel_id = 1;
  // Type of the channel (e.g., online, offline)
  string support_type = 2;
  // Services Prvider
  string psp = 3;
  // Category of the channel (e.g., bank, e-wallet)
  string category = 4;
  // Payment method used in this channel
  string payment_method = 5;
  // Tag for categorization or filtering
  string tag = 6;
  // Display name of the channel
  string name = 7;
  // ID of the payment method used
  string payment_method_id = 8;
  // Currency supported by this channel
  string currency = 9;
  // Currency type (e.g., Crypto, Fiat)
  string currency_type = 10;
  // Crypto protocol supported by this channel
  string protocol = 11;
  // Crypto chian supported by this channel
  string network = 12;
  // Country where this channel is available
  string country = 13;
  // Specific method used (might be more detailed than payment_method)
  string method = 14;
  // URL to the logo image for this payment channel
  string logo = 15;
  // Minimum amount allowed for deposit transactions
  string min_amount = 16;
  // Maximum amount allowed for deposit transactions
  string max_amount = 17;
  // Fixed Fee on the Amount
  string fixed_fee = 18;
  // Rate Fee 
  string fee_rate = 19;
  // Minimum Fee 
  string min_fee = 20;
  // Minimum amount allowed for deposit transactions
  string psp_min_amount = 21;
  // Maximum amount allowed for deposit transactions
  string psp_max_amount = 22;
  // Fixed Fee on the Amount
  string psp_fixed_fee = 23;
  // Rate Fee 
  string psp_fee_rate = 24;
  // Minimum Fee 
  string psp_min_fee = 25;
  // Minimum amount allowed for deposit transactions
  string sys_min_amount = 26;
  // Maximum amount allowed for deposit transactions
  string sys_max_amount = 27;
  // Fixed Fee on the Amount
  string sys_fixed_fee = 28;
  // Rate Fee 
  string sys_fee_rate = 29;
  // Minimum Fee 
  string sys_min_fee = 30;
  // Fixed Fee on the Amount
  string user_fixed_fee = 31;
  // Rate Fee 
  string user_fee_rate = 32;
  // Minimum Fee 
  string user_min_fee = 33;
  // JSON schema defining deposit form fields required by this channel
  google.protobuf.ListValue schema = 34;
  // Status bool
  bool enable = 35;
  // Contact
  string contact = 36;
  int32 eat = 37;
  int64 operator_id = 38;
  int64 company_operator_id = 39;
  int64 retailer_operator_id = 40;
  int64 system_operator_id = 41;
  string operator_name = 42;
  string company_operator_name = 43;
  string retailer_operator_name = 44;
  string system_operator_name = 46;
  string operator_type = 47;
}

// Request to initiate a deposit
// Used to start a deposit transaction
message InitiateDepositRequest {
  // Amount to deposit in smallest currency unit (e.g., cents)
  string amount = 1;
  // Currency code for the transaction
  string currency = 2;
  // ID of the channel to use for this deposit
  string channel_id = 3 [json_name="channelId"];
  // Additional information needed for the deposit
  // May include clientOrderId, productId, userInfo, etc.
  google.protobuf.Struct extra = 4;
}

// Response for deposit initiation
// Contains details about the initiated deposit transaction
message InitiateDepositResponse {
  // Unique identifier for the transaction
  int64 transaction_id = 1 [json_name="transactionId"];
  // Amount to be deposited in smallest currency unit
  string amount = 2;
  // Currency code for the transaction
  string currency = 3;
  // Current status of the transaction
  string status = 4;
  // URL to direct the user to for payment completion
  string pay_url = 5 [json_name="payUrl"];
  // QR code image (typically base64 encoded) for mobile payment
  string qr_code = 6 [json_name="qrCode"];
  // Timestamp when the transaction was created
  google.protobuf.Timestamp created_at = 7 [json_name="createdAt"];
  // Additional transaction information returned by payment provider
  google.protobuf.Struct extra = 8;
}

// Request to get address
// Used to get DC address
message GetAddressRequest {
  // ID of the channel to use for this deposit
  string channel_id = 1 [json_name="channelId"];
  // Additional information needed for the deposit
  // May include clientOrderId, productId, userInfo, etc.
  google.protobuf.Struct extra = 2;
}

// Response for deposit initiation
// Contains details about the initiated deposit transaction
message GetAddressResponse {
  message Data {
    // Crypto like btc, eth...
    string currency = 1;
    // Crypto protocol
    string protocol = 2;
    // Crypto chain
    string network = 3;
    // Digital Currency address
    string address = 4;
  }
  Data data = 1;
}

// Request to get address
// Used to get DC address
message GetOperatorAddressRequest {
  // ID of the channel to use for this deposit
  string channel_id = 1;
  api.common.OperatorContext target_operator_context = 2;
  // Additional information needed for the deposit
  // May include clientOrderId, productId, userInfo, etc.
  google.protobuf.Struct extra = 3;
  api.common.OperatorContext operator_context = 4;

}

// Response for deposit initiation
// Contains details about the initiated deposit transaction
message GetOperatorAddressResponse {
  message Data {
    // Crypto like btc, eth...
    string currency = 1;
    // Crypto protocol
    string protocol = 3;
    // Crypto chain
    string network = 4;
    // Digital Currency address
    string address = 5;
  }
  Data data = 1;
}

// Request to initiate a withdrawal
// Used to start a withdrawal transaction
message InitiateWithdrawRequest {
  // Amount to withdraw in smallest currency unit (e.g., cents)
  string amount = 1;
  // Currency code for the transaction
  string currency = 2;
  // Currency code for the transaction report
  string reporting_currency = 3;
  // ID of the user who initiated the withdrawal
  int64 user_id = 4;
  // ID of the channel to use for withdrawal
  string channel_id = 5;
  // ID of the operator who owns this channel
  api.common.OperatorContext operator_context = 6;
  // Additional information needed for the withdrawal
  // May include account details, clientId, note, etc.
  google.protobuf.Struct extra = 7;
}

// Response for withdrawal initiation
// Contains details about the initiated withdrawal transaction
message InitiateWithdrawResponse {
  // Unique identifier for the transaction
  int64 transaction_id = 1 [json_name="transactionId"];
  // Order number from the operator's system
  string operator_order_no = 2 [json_name="operatorOrderNo"];
  // Amount to be withdrawn in smallest currency unit
  string amount = 3;
  // Current status of the transaction
  string status = 4;
  // Timestamp when the transaction was created
  google.protobuf.Timestamp created_at = 5 [json_name="createdAt"];
}

// Request to initiate a withdrawal
// Used to start a withdrawal transaction
message InitiateOperatorWithdrawRequest {
  // Amount to withdraw in smallest currency unit (e.g., cents)
  string amount = 1;
  // Currency code for the transaction
  string currency = 2;
  // Currency code for the transaction report
  string reporting_currency = 3;
  // admin user id
  int64 admin_user_id = 4;  
  // Target Operator ids
  api.common.OperatorContext target_operator_context = 5;
  // Operator ids
  api.common.OperatorContext operator_context = 6;
  // ID of the channel to use for withdrawal
  string channel_id = 7;
  // memo of crypto
  string memo = 8;
  // Additional information needed for the withdrawal
  // May include account details, clientId, note, etc.
  google.protobuf.Struct extra = 9;
}

// Response for withdrawal initiation
// Contains details about the initiated withdrawal transaction
message InitiateOperatorWithdrawResponse {
  // Unique identifier for the transaction
  int64 transaction_id = 1 [json_name="transactionId"];
  // Order number from the operator's system
  string operator_order_no = 2 [json_name="operatorOrderNo"];
  // Amount to be withdrawn in smallest currency unit
  string amount = 3;
  // Current status of the transaction
  string status = 4;
  // Timestamp when the transaction was created
  google.protobuf.Timestamp created_at = 5 [json_name="createdAt"];
}

// Request for deposit callback
// Used by payment gateways to notify about deposit status changes
message DepositCallbackRequest {
  // Transaction number from the payment aggregator
  int64 pa_transaction_no = 1 [json_name="transactionNo"];
  // Order number from the payment gateway
  string gateway_order_no = 2 [json_name="gatewayOrderNo"];
  // Transaction number from the operator
  int64 transaction_no = 3 [json_name="operatorOrderNo"];
  // Current status of the order (e.g., SUCCESS, FAILED)
  string order_status = 4 [json_name="orderStatus"];
  // Time when payment was completed. Format: yyyy-MM-dd HH:mm:ss
  string pay_time = 5 [json_name="payTime"];
  // Time when order was created. Format: yyyy-MM-dd HH:mm:ss
  string create_time = 6 [json_name="createTime"];
  // Original amount of the order
  string amount = 7;
  // Actual amount paid
  string money = 8;
  // Actual address
  string address = 9;
  // HMAC-SHA256 signature to verify request authenticity
  string sign = 10 [json_name="sign"];
  // Request timestamp to prevent replay attacks
  string timestamp = 11 [json_name="timestamp"];
  // Random string to ensure each request is unique
  string nonce = 12 [json_name="nonce"];
}

// Response for deposit callback
// Confirms receipt of callback notification
message DepositCallbackResponse {
  // Whether the callback was processed successfully
  bool success = 1;
  // Optional message, returns error reason on failure
  string message = 2;
}

// Request for withdraw callback
// Used by payment gateways to notify about withdrawal status changes
message WithdrawCallbackRequest {
  // Transaction number from the payment aggregator
  int64 pa_transaction_no = 1 [json_name="transactionNo"];
  // Order number from the payment gateway
  string gateway_order_no = 2 [json_name="gatewayOrderNo"];
  // Transaction number from the operator
  int64 transaction_no = 3 [json_name="operatorOrderNo"];
  // Current status of the order (e.g., SUCCESS, FAILED)
  string order_status = 4 [json_name="orderStatus"];
  // Time when withdrawal was processed. Format: yyyy-MM-dd HH:mm:ss
  string pay_time = 5 [json_name="payTime"];
  // Time when order was created. Format: yyyy-MM-dd HH:mm:ss
  string create_time = 6 [json_name="createTime"];
  // Original amount of the withdrawal order
  string amount = 7;
  // Service fee applied to the withdrawal
  string fee = 8;
  // Actual amount withdrawn after fees
  string real_money = 9 [json_name="realMoney"];
  // HMAC-SHA256 signature to verify request authenticity
  string sign = 10 [json_name="sign"];
  // Request timestamp to prevent replay attacks
  string timestamp = 11 [json_name="timestamp"];
  // Random string to ensure each request is unique
  string nonce = 12 [json_name="nonce"];
}

// Response for withdraw callback
// Confirms receipt of callback notification
message WithdrawCallbackResponse {
  // Whether the callback was processed successfully
  bool success = 1;
  // Optional message, returns error reason on failure
  string message = 2;
}

// Transaction type enum
// Defines possible types of financial transactions
enum TransactionType {
  // Default unspecified value
  TRANSACTION_TYPE_UNSPECIFIED = 0;
  // Money incoming to platform
  TRANSACTION_TYPE_DEPOSIT = 1;
  // Money outgoing from platform
  TRANSACTION_TYPE_WITHDRAW = 2;
}

// Transaction status enum
// Defines possible states of a transaction
enum TransactionStatus {
  // Default unspecified value
  TRANSACTION_STATUS_UNSPECIFIED = 0;
  // Transaction is in progress
  TRANSACTION_STATUS_PROCESSING = 1;
  // Transaction completed successfully
  TRANSACTION_STATUS_SUCCESSFUL = 2;
  // Transaction failed to complete
  TRANSACTION_STATUS_FAILED = 3;
}

// Sort enum
// Defines sort direction for queries
enum Sort {
  // Sort in descending order (newest first)
  DESC = 0;
  // Sort in ascending order (oldest first)
  ASC = 1;
}

// Request source enum
// Defines the source of the request
// enum RequestSource {
//   // Request from frontend user
//   REQUEST_SOURCE_FRONTEND = 0;
//   // Request from admin backend
//   REQUEST_SOURCE_ADMIN = 1;
// }

// Channel type enum
// Defines the purpose of a payment channel
enum ChannelType {
  // All Channel
  CHANNEL_TYPE_ALL = 0;
  // Channel for depositing funds
  CHANNEL_TYPE_DEPOSIT = 1;
  // Channel for withdrawing funds
  CHANNEL_TYPE_WITHDRAW = 2;
}

// Transaction information
// Detailed information about a specific transaction
message TransactionInfo {
  // Unique identifier for the transaction
  int64 transaction_id = 1;
  // Transaction ID from the operator's system
  string pa_transaction_id = 2;
  // Transaction ID from the payment gateway
  string gateway_transaction_id = 3;
  // Operator ID associated with the transaction
  int64 operator_id = 4;
  int64 company_operator_id = 5;
  int64 retailer_operator_id = 6;
  int64 system_operator_id = 7;
  string operator_name = 8;
  string company_operator_name = 9;
  string retailer_operator_name = 10;
  string system_operator_name = 11;
  // ID of the user who initiated the transaction
  int64 user_id = 12;
  // VIP level of the user
  int32 vip = 13;
  // Transaction amount in smallest currency unit
  string amount = 14;
  // Currency code for the transaction
  string currency = 15;
  // Transaction fee in smallest currency unit
  string processing_fee = 16;
  // Payment method used for the transaction
  string payment_method = 17;
  // Payment channel used for the transaction
  string payment_channel = 18;
  // Crypto Protocol used for the transaction
  string protocol = 19;
  // Crypto Network used for the transaction
  string network = 20;
  // Crypto Address
  string address = 21;
  // Type of transaction (deposit or withdrawal)
  TransactionType type = 22;
  // Current status of the transaction
  TransactionStatus status = 23;
  // Timestamp when the transaction was created
  google.protobuf.Timestamp created_at = 24;
  // Timestamp when the transaction was last updated
  google.protobuf.Timestamp updated_at = 25;
  // Transaction amount in USD
  string amount_usd = 26;
  // Transaction amount actually sent through
  string amount_sent = 27;
  string gas = 28;
  string reporting_currency = 29;
  string amount_reporting_currency = 30;
  string amount_sent_reporting_currency = 31;
}

message TransactionDetail {
  // Transaction information
  TransactionInfo transaction = 1;
  // Channel information
  PaymentChannelInfo channel = 2;
}

// Request to get transaction page
// Used to retrieve a paginated list of transactions with optional filters
message GetTransactionPageRequest {
  // Page number to retrieve (1-based)
  int32 page = 1;
  // Number of items per page
  int32 page_size = 2;
    // Optional transaction ID filter
  int64 transaction_id = 3;
  // Optional currency filter
  string currency = 4;
  // Optional payment method filter
  string payment_method = 5;
  // Optional payment channel filter
  string payment_channel = 6;
  // Optional crypto protocol filter
  string protocol = 7;
  // Optional crypto network filter
  string network = 8;
  // Optional transaction type filter
  TransactionType type = 9;
  // Optional status filter
  TransactionStatus status = 10;
  // Optional agent filter
  string agent = 11;
  // Optional start time for date range filter
  google.protobuf.Timestamp start_time = 12;
  // Optional end time for date range filter
  google.protobuf.Timestamp end_time = 13;
  // Optional sort direction
  Sort sort = 14;
  // Optional minimum amount filter
  string min_amount = 15;
  // Optional maximum amount filter
  string max_amount = 16;
  int64 user_id = 17;
  api.common.OperatorContextFilters operator_context_filters = 18;
  api.common.OperatorContext operator_context = 19;
}

// Response for transaction page
// Contains paginated list of transactions and pagination metadata
message GetTransactionPageResponse {
  // List of transactions matching the filter criteria
  repeated TransactionInfo transactions = 1;
  // Total number of transactions matching the filter criteria
  int32 total_count = 2;
  // Current page number
  int32 page = 3;
  // Number of items per page
  int32 page_size = 4;
  // Total number of pages available
  int32 total_pages = 5;
  // The following fields are only populated for admin requests
  // Total number of successful transactions
  int32 total_successful = 6;
  // Total number of processing transactions
  int32 total_processing = 7;
  // Total number of failed transactions
  int32 total_failed = 8;
}

// Request to get payment channel page
// Used to retrieve a paginated list of payment channels with optional filters
message GetPaymentChannelPageRequest {
  // Page number to retrieve (1-based)
  int32 page = 1;
  // Number of items per page
  int32 page_size = 2;
    // Optional operator ID filter
  string operator_id = 3;
  // Optional channel type filter
  ChannelType type = 4;
  // Optional category filter
  string category = 5;
  // Optional payment method filter
  string payment_method = 6;
  // Optional currency filter
  string currency = 7;
  // Optional crypto protocol
  string protocol = 8;
  // Optional crypto network filter
  string network = 9;
  // Optional country filter
  string country = 10;
  // Source of operator type
  string source = 11;
  // Status ture or false
  bool enabled = 12;
  // Optional sort direction
  Sort sort = 13;
}
// Operator to retrieve a paginated list of payment channels with optional filters
message GetOperatorPaymentChannelPageRequest {
  // Page number to retrieve (1-based)
  int32 page = 1;
  // Number of items per page
  int32 page_size = 2;
  // Optional channel type filter
  ChannelType type = 3;
  // Optional category filter
  string category = 4;
  // Optional payment method filter
  string payment_method = 5;
  // Optional currency filter
  string currency = 6;
  // Optional crypto protocol
  string protocol = 7;
  // Optional crypto network filter
  string network = 8;
  // Optional country filter
  string country = 9;
  // Source of operator type
  string source = 10;
  // Optional sort direction
  Sort sort = 11;
  // Status ture or false
  optional bool enabled = 12;
  // ID of the Operator connect with this channel
  api.common.OperatorContextFilters operator_context_filters = 13;
  // ID of the Operator connect with this channel
	api.common.OperatorContext operator_context = 14;
}

// Response for payment channel page
// Contains paginated list of payment channels and pagination metadata
message GetPaymentChannelPageResponse {
  // List of payment channels matching the filter criteria
  repeated PaymentChannelInfo payment_channels = 1;
  // Total number of channels matching the filter criteria
  int32 total_count = 2;
  // Current page number
  int32 page = 3;
  // Number of items per page
  int32 page_size = 4;
  // Total number of pages available
  int32 total_pages = 5;
  int32 total_enable_colnt = 6;
  int32 total_disable_count = 7;
}

// Request to get transaction detail by ID
// Used to retrieve detailed information about a specific transaction
message GetTransactionDetailByIdRequest {
  // Unique identifier for the transaction
  int64 transaction_id = 1;
  // // Source of the request (frontend or admin)
  // RequestSource source = 2 [json_name="source"];
}

// Response for transaction detail
// Contains detailed information about the requested transaction
message GetTransactionDetailByIdResponse {
  // Detailed transaction information including channel data
  TransactionDetail detail = 1;
}

message GetChannelsByIdsRequest {
	repeated string channel_ids = 1;
}

message GetChannelsByIdsResponse {
  repeated PaymentChannelInfo channels = 1;
}

message UpdatePaymentMethodRequest {
	string payment_method_id = 1;
	bool status = 2;
}

message UpdatePaymentMethodResponse {
	repeated string channel_ids = 1;
}

message BankCard {
  string id = 1;
  string card_number = 2;
  string card_account_firstname = 3;
  string card_account_lastname = 4;
  string min_amount = 5;
  string max_amount = 6;
  string currency = 7;
  string country = 8;
  bool enabled = 9;
}

message GetBankCardListRequest {
  
}

message GetBankCardListResponse {
  repeated BankCard bank_card_lsit = 1;
}

message AddBankCardRequest {
  BankCard bank_card = 1;
}

message AddBankCardResponse {
  BankCard bank_card = 1;
}

message UpdateBankCardRequest {
  BankCard bank_card = 1;
}

message UpdateBankCardResponse {
  BankCard bank_card = 1;
}

message DeleteBankCardRequest {
  string bank_card_id = 1;
}

message DeleteBankCardResponse {
  
}

// Payment Service
// Provides methods for managing payment methods, channels, and transactions
service Payment {
  // Get list of payment methods
  // Retrieves all available payment methods supported by the system
  // Error code: GET_PAYMENT_METHOD_LIST_FAILED(50001) - Failed to get payment method list
  rpc GetSupportedPaymentMethodList(GetSupportedPaymentMethodListRequest) returns (GetSupportedPaymentMethodListResponse) {
  }

  // Create payment channel
  // Creates a new payment channel with specified configuration
  // Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
  rpc CreatePaymentMethod(CreatePaymentMethodRequest) returns (CreatePaymentMethodResponse) {
  }

  // Get list of payment methods
  // Retrieves all available payment methods supported by the system
  // Error code: GET_PAYMENT_METHOD_LIST_FAILED(50001) - Failed to get payment method list
  rpc GetPaymentMethodList(GetPaymentMethodListRequest) returns (GetPaymentMethodListResponse) {
  }

  // Create payment channel
  // Creates a new payment channel with specified configuration
  // Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
  rpc UpdatePaymentChannel(UpdatePaymentChannelRequest) returns (UpdatePaymentChannelResponse) {
  }

  // Create payment channel
  // Creates a new payment channel with specified configuration
  // Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
  rpc CreatePaymentChannel(CreatePaymentChannelRequest) returns (CreatePaymentChannelResponse) {
  }

  rpc GetAddress(GetAddressRequest) returns (GetAddressResponse) {
    option (google.api.http) = {
      post: "/v1/payment/address/get"
      body: "*"
    };
  }

  // Initiate a deposit transaction
  // Starts a new deposit process and returns payment information
  // Error code: INITIATE_DEPOSIT_FAILED(50004) - Failed to initiate deposit transaction
  rpc InitiateDeposit(InitiateDepositRequest) returns (InitiateDepositResponse) {
    option (google.api.http) = {
      post: "/v1/payment/deposit/initiate"
      body: "*"
    };
  }

  // Initiate a withdrawal transaction
  // Starts a new withdrawal process
  // Error code: INITIATE_WITHDRAW_FAILED(50005) - Failed to initiate withdrawal transaction
  rpc InitiateWithdraw(InitiateWithdrawRequest) returns (InitiateWithdrawResponse) { }

  // Deposit callback
  // Handles callbacks from payment gateways for deposit status updates
  // This endpoint is called by payment providers to notify of completed or failed deposits
  // Error code: DEPOSIT_CALLBACK_FAILED(50006) - Failed to process deposit callback
  rpc DepositCallback(DepositCallbackRequest) returns (DepositCallbackResponse) {
    option (google.api.http) = {
      post: "/v1/payment/deposit/callback"
      body: "*"
    };
  }

  // Withdraw callback
  // Handles callbacks from payment gateways for withdrawal status updates
  // This endpoint is called by payment providers to notify of completed or failed withdrawals
  // Error code: WITHDRAW_CALLBACK_FAILED(50007) - Failed to process withdrawal callback
  rpc WithdrawCallback(WithdrawCallbackRequest) returns (WithdrawCallbackResponse) {
    option (google.api.http) = {
      post: "/v1/payment/withdraw/callback"
      body: "*"
    };
  }

  rpc GetOperatorAddress(GetOperatorAddressRequest) returns (GetOperatorAddressResponse) { }

  // Initiate a withdrawal transaction
  // Starts a new withdrawal process
  // Error code: INITIATE_WITHDRAW_FAILED(50005) - Failed to initiate withdrawal transaction
  rpc InitiateOperatorWithdraw(InitiateOperatorWithdrawRequest) returns (InitiateOperatorWithdrawResponse) { }


  // Deposit callback
  // Handles callbacks from payment gateways for deposit status updates
  // This endpoint is called by payment providers to notify of completed or failed deposits
  // Error code: DEPOSIT_CALLBACK_FAILED(50006) - Failed to process deposit callback
  rpc OperatorDepositCallback(DepositCallbackRequest) returns (DepositCallbackResponse) {
    option (google.api.http) = {
      post: "/v1/payment/operator/deposit/callback"
      body: "*"
    };
  }

  // Withdraw callback
  // Handles callbacks from payment gateways for withdrawal status updates
  // This endpoint is called by payment providers to notify of completed or failed withdrawals
  // Error code: WITHDRAW_CALLBACK_FAILED(50007) - Failed to process withdrawal callback
  rpc OperatorWithdrawCallback(WithdrawCallbackRequest) returns (WithdrawCallbackResponse) {
    option (google.api.http) = {
      post: "/v1/payment/operator/withdraw/callback"
      body: "*"
    };
  }

  // Get transaction page with pagination and filters
  // Retrieves a paginated list of transactions with optional filtering
  // Error code: GET_TRANSACTION_PAGE_FAILED(50008) - Failed to get transaction page
  rpc GetTransactionPage(GetTransactionPageRequest) returns (GetTransactionPageResponse) {
    option (google.api.http) = {
      post: "/v1/payment/transaction/page"
      body: "*"
    };
  }

  // Get payment channel page with pagination and filters
  // Retrieves a paginated list of payment channels with optional filtering
  // Error code: GET_PAYMENT_CHANNEL_PAGE_FAILED(50003) - Failed to get payment channel page
  rpc GetPaymentChannelPage(GetPaymentChannelPageRequest) returns (GetPaymentChannelPageResponse) {
    option (google.api.http) = {
      post: "/v1/payment/channel/page"
      body: "*"
    };
  }

  // Get transaction detail
  // Retrieves detailed information about a specific transaction
  // Error code: GET_TRANSACTION_DETAIL_FAILED(50009) - Failed to get transaction detail
  rpc GetTransactionDetailById(GetTransactionDetailByIdRequest) returns (GetTransactionDetailByIdResponse) {
  }

  rpc GetOperatorTransactionPage(GetTransactionPageRequest) returns (GetTransactionPageResponse) {
  }

  rpc GetOperatorTransactionDetailById(GetTransactionDetailByIdRequest) returns (GetTransactionDetailByIdResponse) {
  }
  
	rpc GetChannelsByIds(GetChannelsByIdsRequest) returns (GetChannelsByIdsResponse) {
	}

	rpc UpdatePaymentMethod(UpdatePaymentMethodRequest) returns (CreatePaymentMethodResponse) {
	}

  rpc GetOperatorPaymentChannelPage(GetOperatorPaymentChannelPageRequest) returns (GetPaymentChannelPageResponse) {
  }

  rpc GetBankCardList(GetBankCardListRequest) returns (GetBankCardListResponse) {
    option (google.api.http) = {
      post: "/v1/payment/bankcard/list"
      body: "*"
    };
  }

  rpc AddBankCard(AddBankCardRequest) returns (AddBankCardResponse) {
    option (google.api.http) = {
      post: "/v1/payment/bankcard/add"
      body: "*"
    };
  }

  rpc UpdateBankCard(UpdateBankCardRequest) returns (UpdateBankCardResponse) {
    option (google.api.http) = {
      post: "/v1/payment/bankcard/update"
      body: "*"
    };
  }

  rpc DeleteBankCard(DeleteBankCardRequest) returns (DeleteBankCardResponse) {
    option (google.api.http) = {
      post: "/v1/payment/bankcard/delete"
      body: "*"
    };
  }
}
