// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNSPECIFIED.String() && e.Code == 500
}

func ErrorUnspecified(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UNSPECIFIED.String(), fmt.Sprintf(format, args...))
}

func IsGetPaymentMethodListFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_PAYMENT_METHOD_LIST_FAILED.String() && e.Code == 500
}

func ErrorGetPaymentMethodListFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_PAYMENT_METHOD_LIST_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsCreatePaymentChannelFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CREATE_PAYMENT_CHANNEL_FAILED.String() && e.Code == 500
}

func ErrorCreatePaymentChannelFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CREATE_PAYMENT_CHANNEL_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetPaymentChannelPageFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_PAYMENT_CHANNEL_PAGE_FAILED.String() && e.Code == 500
}

func ErrorGetPaymentChannelPageFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_PAYMENT_CHANNEL_PAGE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsInitiateDepositFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INITIATE_DEPOSIT_FAILED.String() && e.Code == 500
}

func ErrorInitiateDepositFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INITIATE_DEPOSIT_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsInitiateWithdrawFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INITIATE_WITHDRAW_FAILED.String() && e.Code == 500
}

func ErrorInitiateWithdrawFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INITIATE_WITHDRAW_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsDepositCallbackFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DEPOSIT_CALLBACK_FAILED.String() && e.Code == 500
}

func ErrorDepositCallbackFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DEPOSIT_CALLBACK_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsWithdrawCallbackFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_WITHDRAW_CALLBACK_FAILED.String() && e.Code == 500
}

func ErrorWithdrawCallbackFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_WITHDRAW_CALLBACK_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetTransactionPageFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_TRANSACTION_PAGE_FAILED.String() && e.Code == 500
}

func ErrorGetTransactionPageFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_TRANSACTION_PAGE_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetTransactionDetailFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_TRANSACTION_DETAIL_FAILED.String() && e.Code == 500
}

func ErrorGetTransactionDetailFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_TRANSACTION_DETAIL_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetChannelListFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_CHANNEL_LIST_FAILED.String() && e.Code == 500
}

func ErrorGetChannelListFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_CHANNEL_LIST_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGetAddressFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_ADDRESS_FAILED.String() && e.Code == 500
}

func ErrorGetAddressFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_ADDRESS_FAILED.String(), fmt.Sprintf(format, args...))
}
