// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: payment/service/v1/payment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Payment_GetSupportedPaymentMethodList_FullMethodName    = "/payment.service.v1.Payment/GetSupportedPaymentMethodList"
	Payment_CreatePaymentMethod_FullMethodName              = "/payment.service.v1.Payment/CreatePaymentMethod"
	Payment_GetPaymentMethodList_FullMethodName             = "/payment.service.v1.Payment/GetPaymentMethodList"
	Payment_UpdatePaymentChannel_FullMethodName             = "/payment.service.v1.Payment/UpdatePaymentChannel"
	Payment_CreatePaymentChannel_FullMethodName             = "/payment.service.v1.Payment/CreatePaymentChannel"
	Payment_GetAddress_FullMethodName                       = "/payment.service.v1.Payment/GetAddress"
	Payment_InitiateDeposit_FullMethodName                  = "/payment.service.v1.Payment/InitiateDeposit"
	Payment_InitiateWithdraw_FullMethodName                 = "/payment.service.v1.Payment/InitiateWithdraw"
	Payment_DepositCallback_FullMethodName                  = "/payment.service.v1.Payment/DepositCallback"
	Payment_WithdrawCallback_FullMethodName                 = "/payment.service.v1.Payment/WithdrawCallback"
	Payment_GetOperatorAddress_FullMethodName               = "/payment.service.v1.Payment/GetOperatorAddress"
	Payment_InitiateOperatorWithdraw_FullMethodName         = "/payment.service.v1.Payment/InitiateOperatorWithdraw"
	Payment_OperatorDepositCallback_FullMethodName          = "/payment.service.v1.Payment/OperatorDepositCallback"
	Payment_OperatorWithdrawCallback_FullMethodName         = "/payment.service.v1.Payment/OperatorWithdrawCallback"
	Payment_GetTransactionPage_FullMethodName               = "/payment.service.v1.Payment/GetTransactionPage"
	Payment_GetPaymentChannelPage_FullMethodName            = "/payment.service.v1.Payment/GetPaymentChannelPage"
	Payment_GetTransactionDetailById_FullMethodName         = "/payment.service.v1.Payment/GetTransactionDetailById"
	Payment_GetOperatorTransactionPage_FullMethodName       = "/payment.service.v1.Payment/GetOperatorTransactionPage"
	Payment_GetOperatorTransactionDetailById_FullMethodName = "/payment.service.v1.Payment/GetOperatorTransactionDetailById"
	Payment_GetChannelsByIds_FullMethodName                 = "/payment.service.v1.Payment/GetChannelsByIds"
	Payment_UpdatePaymentMethod_FullMethodName              = "/payment.service.v1.Payment/UpdatePaymentMethod"
	Payment_GetOperatorPaymentChannelPage_FullMethodName    = "/payment.service.v1.Payment/GetOperatorPaymentChannelPage"
	Payment_GetBankCardList_FullMethodName                  = "/payment.service.v1.Payment/GetBankCardList"
	Payment_AddBankCard_FullMethodName                      = "/payment.service.v1.Payment/AddBankCard"
	Payment_UpdateBankCard_FullMethodName                   = "/payment.service.v1.Payment/UpdateBankCard"
	Payment_DeleteBankCard_FullMethodName                   = "/payment.service.v1.Payment/DeleteBankCard"
)

// PaymentClient is the client API for Payment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Payment Service
// Provides methods for managing payment methods, channels, and transactions
type PaymentClient interface {
	// Get list of payment methods
	// Retrieves all available payment methods supported by the system
	// Error code: GET_PAYMENT_METHOD_LIST_FAILED(50001) - Failed to get payment method list
	GetSupportedPaymentMethodList(ctx context.Context, in *GetSupportedPaymentMethodListRequest, opts ...grpc.CallOption) (*GetSupportedPaymentMethodListResponse, error)
	// Create payment channel
	// Creates a new payment channel with specified configuration
	// Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
	CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, opts ...grpc.CallOption) (*CreatePaymentMethodResponse, error)
	// Get list of payment methods
	// Retrieves all available payment methods supported by the system
	// Error code: GET_PAYMENT_METHOD_LIST_FAILED(50001) - Failed to get payment method list
	GetPaymentMethodList(ctx context.Context, in *GetPaymentMethodListRequest, opts ...grpc.CallOption) (*GetPaymentMethodListResponse, error)
	// Create payment channel
	// Creates a new payment channel with specified configuration
	// Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
	UpdatePaymentChannel(ctx context.Context, in *UpdatePaymentChannelRequest, opts ...grpc.CallOption) (*UpdatePaymentChannelResponse, error)
	// Create payment channel
	// Creates a new payment channel with specified configuration
	// Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
	CreatePaymentChannel(ctx context.Context, in *CreatePaymentChannelRequest, opts ...grpc.CallOption) (*CreatePaymentChannelResponse, error)
	GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressResponse, error)
	// Initiate a deposit transaction
	// Starts a new deposit process and returns payment information
	// Error code: INITIATE_DEPOSIT_FAILED(50004) - Failed to initiate deposit transaction
	InitiateDeposit(ctx context.Context, in *InitiateDepositRequest, opts ...grpc.CallOption) (*InitiateDepositResponse, error)
	// Initiate a withdrawal transaction
	// Starts a new withdrawal process
	// Error code: INITIATE_WITHDRAW_FAILED(50005) - Failed to initiate withdrawal transaction
	InitiateWithdraw(ctx context.Context, in *InitiateWithdrawRequest, opts ...grpc.CallOption) (*InitiateWithdrawResponse, error)
	// Deposit callback
	// Handles callbacks from payment gateways for deposit status updates
	// This endpoint is called by payment providers to notify of completed or failed deposits
	// Error code: DEPOSIT_CALLBACK_FAILED(50006) - Failed to process deposit callback
	DepositCallback(ctx context.Context, in *DepositCallbackRequest, opts ...grpc.CallOption) (*DepositCallbackResponse, error)
	// Withdraw callback
	// Handles callbacks from payment gateways for withdrawal status updates
	// This endpoint is called by payment providers to notify of completed or failed withdrawals
	// Error code: WITHDRAW_CALLBACK_FAILED(50007) - Failed to process withdrawal callback
	WithdrawCallback(ctx context.Context, in *WithdrawCallbackRequest, opts ...grpc.CallOption) (*WithdrawCallbackResponse, error)
	GetOperatorAddress(ctx context.Context, in *GetOperatorAddressRequest, opts ...grpc.CallOption) (*GetOperatorAddressResponse, error)
	// Initiate a withdrawal transaction
	// Starts a new withdrawal process
	// Error code: INITIATE_WITHDRAW_FAILED(50005) - Failed to initiate withdrawal transaction
	InitiateOperatorWithdraw(ctx context.Context, in *InitiateOperatorWithdrawRequest, opts ...grpc.CallOption) (*InitiateOperatorWithdrawResponse, error)
	// Deposit callback
	// Handles callbacks from payment gateways for deposit status updates
	// This endpoint is called by payment providers to notify of completed or failed deposits
	// Error code: DEPOSIT_CALLBACK_FAILED(50006) - Failed to process deposit callback
	OperatorDepositCallback(ctx context.Context, in *DepositCallbackRequest, opts ...grpc.CallOption) (*DepositCallbackResponse, error)
	// Withdraw callback
	// Handles callbacks from payment gateways for withdrawal status updates
	// This endpoint is called by payment providers to notify of completed or failed withdrawals
	// Error code: WITHDRAW_CALLBACK_FAILED(50007) - Failed to process withdrawal callback
	OperatorWithdrawCallback(ctx context.Context, in *WithdrawCallbackRequest, opts ...grpc.CallOption) (*WithdrawCallbackResponse, error)
	// Get transaction page with pagination and filters
	// Retrieves a paginated list of transactions with optional filtering
	// Error code: GET_TRANSACTION_PAGE_FAILED(50008) - Failed to get transaction page
	GetTransactionPage(ctx context.Context, in *GetTransactionPageRequest, opts ...grpc.CallOption) (*GetTransactionPageResponse, error)
	// Get payment channel page with pagination and filters
	// Retrieves a paginated list of payment channels with optional filtering
	// Error code: GET_PAYMENT_CHANNEL_PAGE_FAILED(50003) - Failed to get payment channel page
	GetPaymentChannelPage(ctx context.Context, in *GetPaymentChannelPageRequest, opts ...grpc.CallOption) (*GetPaymentChannelPageResponse, error)
	// Get transaction detail
	// Retrieves detailed information about a specific transaction
	// Error code: GET_TRANSACTION_DETAIL_FAILED(50009) - Failed to get transaction detail
	GetTransactionDetailById(ctx context.Context, in *GetTransactionDetailByIdRequest, opts ...grpc.CallOption) (*GetTransactionDetailByIdResponse, error)
	GetOperatorTransactionPage(ctx context.Context, in *GetTransactionPageRequest, opts ...grpc.CallOption) (*GetTransactionPageResponse, error)
	GetOperatorTransactionDetailById(ctx context.Context, in *GetTransactionDetailByIdRequest, opts ...grpc.CallOption) (*GetTransactionDetailByIdResponse, error)
	GetChannelsByIds(ctx context.Context, in *GetChannelsByIdsRequest, opts ...grpc.CallOption) (*GetChannelsByIdsResponse, error)
	UpdatePaymentMethod(ctx context.Context, in *UpdatePaymentMethodRequest, opts ...grpc.CallOption) (*CreatePaymentMethodResponse, error)
	GetOperatorPaymentChannelPage(ctx context.Context, in *GetOperatorPaymentChannelPageRequest, opts ...grpc.CallOption) (*GetPaymentChannelPageResponse, error)
	GetBankCardList(ctx context.Context, in *GetBankCardListRequest, opts ...grpc.CallOption) (*GetBankCardListResponse, error)
	AddBankCard(ctx context.Context, in *AddBankCardRequest, opts ...grpc.CallOption) (*AddBankCardResponse, error)
	UpdateBankCard(ctx context.Context, in *UpdateBankCardRequest, opts ...grpc.CallOption) (*UpdateBankCardResponse, error)
	DeleteBankCard(ctx context.Context, in *DeleteBankCardRequest, opts ...grpc.CallOption) (*DeleteBankCardResponse, error)
}

type paymentClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentClient(cc grpc.ClientConnInterface) PaymentClient {
	return &paymentClient{cc}
}

func (c *paymentClient) GetSupportedPaymentMethodList(ctx context.Context, in *GetSupportedPaymentMethodListRequest, opts ...grpc.CallOption) (*GetSupportedPaymentMethodListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSupportedPaymentMethodListResponse)
	err := c.cc.Invoke(ctx, Payment_GetSupportedPaymentMethodList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, opts ...grpc.CallOption) (*CreatePaymentMethodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentMethodResponse)
	err := c.cc.Invoke(ctx, Payment_CreatePaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) GetPaymentMethodList(ctx context.Context, in *GetPaymentMethodListRequest, opts ...grpc.CallOption) (*GetPaymentMethodListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentMethodListResponse)
	err := c.cc.Invoke(ctx, Payment_GetPaymentMethodList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) UpdatePaymentChannel(ctx context.Context, in *UpdatePaymentChannelRequest, opts ...grpc.CallOption) (*UpdatePaymentChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePaymentChannelResponse)
	err := c.cc.Invoke(ctx, Payment_UpdatePaymentChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) CreatePaymentChannel(ctx context.Context, in *CreatePaymentChannelRequest, opts ...grpc.CallOption) (*CreatePaymentChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentChannelResponse)
	err := c.cc.Invoke(ctx, Payment_CreatePaymentChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAddressResponse)
	err := c.cc.Invoke(ctx, Payment_GetAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) InitiateDeposit(ctx context.Context, in *InitiateDepositRequest, opts ...grpc.CallOption) (*InitiateDepositResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiateDepositResponse)
	err := c.cc.Invoke(ctx, Payment_InitiateDeposit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) InitiateWithdraw(ctx context.Context, in *InitiateWithdrawRequest, opts ...grpc.CallOption) (*InitiateWithdrawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiateWithdrawResponse)
	err := c.cc.Invoke(ctx, Payment_InitiateWithdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) DepositCallback(ctx context.Context, in *DepositCallbackRequest, opts ...grpc.CallOption) (*DepositCallbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositCallbackResponse)
	err := c.cc.Invoke(ctx, Payment_DepositCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) WithdrawCallback(ctx context.Context, in *WithdrawCallbackRequest, opts ...grpc.CallOption) (*WithdrawCallbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawCallbackResponse)
	err := c.cc.Invoke(ctx, Payment_WithdrawCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) GetOperatorAddress(ctx context.Context, in *GetOperatorAddressRequest, opts ...grpc.CallOption) (*GetOperatorAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperatorAddressResponse)
	err := c.cc.Invoke(ctx, Payment_GetOperatorAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) InitiateOperatorWithdraw(ctx context.Context, in *InitiateOperatorWithdrawRequest, opts ...grpc.CallOption) (*InitiateOperatorWithdrawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiateOperatorWithdrawResponse)
	err := c.cc.Invoke(ctx, Payment_InitiateOperatorWithdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) OperatorDepositCallback(ctx context.Context, in *DepositCallbackRequest, opts ...grpc.CallOption) (*DepositCallbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepositCallbackResponse)
	err := c.cc.Invoke(ctx, Payment_OperatorDepositCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) OperatorWithdrawCallback(ctx context.Context, in *WithdrawCallbackRequest, opts ...grpc.CallOption) (*WithdrawCallbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawCallbackResponse)
	err := c.cc.Invoke(ctx, Payment_OperatorWithdrawCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) GetTransactionPage(ctx context.Context, in *GetTransactionPageRequest, opts ...grpc.CallOption) (*GetTransactionPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionPageResponse)
	err := c.cc.Invoke(ctx, Payment_GetTransactionPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) GetPaymentChannelPage(ctx context.Context, in *GetPaymentChannelPageRequest, opts ...grpc.CallOption) (*GetPaymentChannelPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentChannelPageResponse)
	err := c.cc.Invoke(ctx, Payment_GetPaymentChannelPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) GetTransactionDetailById(ctx context.Context, in *GetTransactionDetailByIdRequest, opts ...grpc.CallOption) (*GetTransactionDetailByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionDetailByIdResponse)
	err := c.cc.Invoke(ctx, Payment_GetTransactionDetailById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) GetOperatorTransactionPage(ctx context.Context, in *GetTransactionPageRequest, opts ...grpc.CallOption) (*GetTransactionPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionPageResponse)
	err := c.cc.Invoke(ctx, Payment_GetOperatorTransactionPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) GetOperatorTransactionDetailById(ctx context.Context, in *GetTransactionDetailByIdRequest, opts ...grpc.CallOption) (*GetTransactionDetailByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionDetailByIdResponse)
	err := c.cc.Invoke(ctx, Payment_GetOperatorTransactionDetailById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) GetChannelsByIds(ctx context.Context, in *GetChannelsByIdsRequest, opts ...grpc.CallOption) (*GetChannelsByIdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChannelsByIdsResponse)
	err := c.cc.Invoke(ctx, Payment_GetChannelsByIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) UpdatePaymentMethod(ctx context.Context, in *UpdatePaymentMethodRequest, opts ...grpc.CallOption) (*CreatePaymentMethodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentMethodResponse)
	err := c.cc.Invoke(ctx, Payment_UpdatePaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) GetOperatorPaymentChannelPage(ctx context.Context, in *GetOperatorPaymentChannelPageRequest, opts ...grpc.CallOption) (*GetPaymentChannelPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentChannelPageResponse)
	err := c.cc.Invoke(ctx, Payment_GetOperatorPaymentChannelPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) GetBankCardList(ctx context.Context, in *GetBankCardListRequest, opts ...grpc.CallOption) (*GetBankCardListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBankCardListResponse)
	err := c.cc.Invoke(ctx, Payment_GetBankCardList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) AddBankCard(ctx context.Context, in *AddBankCardRequest, opts ...grpc.CallOption) (*AddBankCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBankCardResponse)
	err := c.cc.Invoke(ctx, Payment_AddBankCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) UpdateBankCard(ctx context.Context, in *UpdateBankCardRequest, opts ...grpc.CallOption) (*UpdateBankCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBankCardResponse)
	err := c.cc.Invoke(ctx, Payment_UpdateBankCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) DeleteBankCard(ctx context.Context, in *DeleteBankCardRequest, opts ...grpc.CallOption) (*DeleteBankCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBankCardResponse)
	err := c.cc.Invoke(ctx, Payment_DeleteBankCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServer is the server API for Payment service.
// All implementations must embed UnimplementedPaymentServer
// for forward compatibility.
//
// Payment Service
// Provides methods for managing payment methods, channels, and transactions
type PaymentServer interface {
	// Get list of payment methods
	// Retrieves all available payment methods supported by the system
	// Error code: GET_PAYMENT_METHOD_LIST_FAILED(50001) - Failed to get payment method list
	GetSupportedPaymentMethodList(context.Context, *GetSupportedPaymentMethodListRequest) (*GetSupportedPaymentMethodListResponse, error)
	// Create payment channel
	// Creates a new payment channel with specified configuration
	// Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
	CreatePaymentMethod(context.Context, *CreatePaymentMethodRequest) (*CreatePaymentMethodResponse, error)
	// Get list of payment methods
	// Retrieves all available payment methods supported by the system
	// Error code: GET_PAYMENT_METHOD_LIST_FAILED(50001) - Failed to get payment method list
	GetPaymentMethodList(context.Context, *GetPaymentMethodListRequest) (*GetPaymentMethodListResponse, error)
	// Create payment channel
	// Creates a new payment channel with specified configuration
	// Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
	UpdatePaymentChannel(context.Context, *UpdatePaymentChannelRequest) (*UpdatePaymentChannelResponse, error)
	// Create payment channel
	// Creates a new payment channel with specified configuration
	// Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
	CreatePaymentChannel(context.Context, *CreatePaymentChannelRequest) (*CreatePaymentChannelResponse, error)
	GetAddress(context.Context, *GetAddressRequest) (*GetAddressResponse, error)
	// Initiate a deposit transaction
	// Starts a new deposit process and returns payment information
	// Error code: INITIATE_DEPOSIT_FAILED(50004) - Failed to initiate deposit transaction
	InitiateDeposit(context.Context, *InitiateDepositRequest) (*InitiateDepositResponse, error)
	// Initiate a withdrawal transaction
	// Starts a new withdrawal process
	// Error code: INITIATE_WITHDRAW_FAILED(50005) - Failed to initiate withdrawal transaction
	InitiateWithdraw(context.Context, *InitiateWithdrawRequest) (*InitiateWithdrawResponse, error)
	// Deposit callback
	// Handles callbacks from payment gateways for deposit status updates
	// This endpoint is called by payment providers to notify of completed or failed deposits
	// Error code: DEPOSIT_CALLBACK_FAILED(50006) - Failed to process deposit callback
	DepositCallback(context.Context, *DepositCallbackRequest) (*DepositCallbackResponse, error)
	// Withdraw callback
	// Handles callbacks from payment gateways for withdrawal status updates
	// This endpoint is called by payment providers to notify of completed or failed withdrawals
	// Error code: WITHDRAW_CALLBACK_FAILED(50007) - Failed to process withdrawal callback
	WithdrawCallback(context.Context, *WithdrawCallbackRequest) (*WithdrawCallbackResponse, error)
	GetOperatorAddress(context.Context, *GetOperatorAddressRequest) (*GetOperatorAddressResponse, error)
	// Initiate a withdrawal transaction
	// Starts a new withdrawal process
	// Error code: INITIATE_WITHDRAW_FAILED(50005) - Failed to initiate withdrawal transaction
	InitiateOperatorWithdraw(context.Context, *InitiateOperatorWithdrawRequest) (*InitiateOperatorWithdrawResponse, error)
	// Deposit callback
	// Handles callbacks from payment gateways for deposit status updates
	// This endpoint is called by payment providers to notify of completed or failed deposits
	// Error code: DEPOSIT_CALLBACK_FAILED(50006) - Failed to process deposit callback
	OperatorDepositCallback(context.Context, *DepositCallbackRequest) (*DepositCallbackResponse, error)
	// Withdraw callback
	// Handles callbacks from payment gateways for withdrawal status updates
	// This endpoint is called by payment providers to notify of completed or failed withdrawals
	// Error code: WITHDRAW_CALLBACK_FAILED(50007) - Failed to process withdrawal callback
	OperatorWithdrawCallback(context.Context, *WithdrawCallbackRequest) (*WithdrawCallbackResponse, error)
	// Get transaction page with pagination and filters
	// Retrieves a paginated list of transactions with optional filtering
	// Error code: GET_TRANSACTION_PAGE_FAILED(50008) - Failed to get transaction page
	GetTransactionPage(context.Context, *GetTransactionPageRequest) (*GetTransactionPageResponse, error)
	// Get payment channel page with pagination and filters
	// Retrieves a paginated list of payment channels with optional filtering
	// Error code: GET_PAYMENT_CHANNEL_PAGE_FAILED(50003) - Failed to get payment channel page
	GetPaymentChannelPage(context.Context, *GetPaymentChannelPageRequest) (*GetPaymentChannelPageResponse, error)
	// Get transaction detail
	// Retrieves detailed information about a specific transaction
	// Error code: GET_TRANSACTION_DETAIL_FAILED(50009) - Failed to get transaction detail
	GetTransactionDetailById(context.Context, *GetTransactionDetailByIdRequest) (*GetTransactionDetailByIdResponse, error)
	GetOperatorTransactionPage(context.Context, *GetTransactionPageRequest) (*GetTransactionPageResponse, error)
	GetOperatorTransactionDetailById(context.Context, *GetTransactionDetailByIdRequest) (*GetTransactionDetailByIdResponse, error)
	GetChannelsByIds(context.Context, *GetChannelsByIdsRequest) (*GetChannelsByIdsResponse, error)
	UpdatePaymentMethod(context.Context, *UpdatePaymentMethodRequest) (*CreatePaymentMethodResponse, error)
	GetOperatorPaymentChannelPage(context.Context, *GetOperatorPaymentChannelPageRequest) (*GetPaymentChannelPageResponse, error)
	GetBankCardList(context.Context, *GetBankCardListRequest) (*GetBankCardListResponse, error)
	AddBankCard(context.Context, *AddBankCardRequest) (*AddBankCardResponse, error)
	UpdateBankCard(context.Context, *UpdateBankCardRequest) (*UpdateBankCardResponse, error)
	DeleteBankCard(context.Context, *DeleteBankCardRequest) (*DeleteBankCardResponse, error)
	mustEmbedUnimplementedPaymentServer()
}

// UnimplementedPaymentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentServer struct{}

func (UnimplementedPaymentServer) GetSupportedPaymentMethodList(context.Context, *GetSupportedPaymentMethodListRequest) (*GetSupportedPaymentMethodListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedPaymentMethodList not implemented")
}
func (UnimplementedPaymentServer) CreatePaymentMethod(context.Context, *CreatePaymentMethodRequest) (*CreatePaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentMethod not implemented")
}
func (UnimplementedPaymentServer) GetPaymentMethodList(context.Context, *GetPaymentMethodListRequest) (*GetPaymentMethodListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentMethodList not implemented")
}
func (UnimplementedPaymentServer) UpdatePaymentChannel(context.Context, *UpdatePaymentChannelRequest) (*UpdatePaymentChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentChannel not implemented")
}
func (UnimplementedPaymentServer) CreatePaymentChannel(context.Context, *CreatePaymentChannelRequest) (*CreatePaymentChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentChannel not implemented")
}
func (UnimplementedPaymentServer) GetAddress(context.Context, *GetAddressRequest) (*GetAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedPaymentServer) InitiateDeposit(context.Context, *InitiateDepositRequest) (*InitiateDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateDeposit not implemented")
}
func (UnimplementedPaymentServer) InitiateWithdraw(context.Context, *InitiateWithdrawRequest) (*InitiateWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateWithdraw not implemented")
}
func (UnimplementedPaymentServer) DepositCallback(context.Context, *DepositCallbackRequest) (*DepositCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositCallback not implemented")
}
func (UnimplementedPaymentServer) WithdrawCallback(context.Context, *WithdrawCallbackRequest) (*WithdrawCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawCallback not implemented")
}
func (UnimplementedPaymentServer) GetOperatorAddress(context.Context, *GetOperatorAddressRequest) (*GetOperatorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorAddress not implemented")
}
func (UnimplementedPaymentServer) InitiateOperatorWithdraw(context.Context, *InitiateOperatorWithdrawRequest) (*InitiateOperatorWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateOperatorWithdraw not implemented")
}
func (UnimplementedPaymentServer) OperatorDepositCallback(context.Context, *DepositCallbackRequest) (*DepositCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorDepositCallback not implemented")
}
func (UnimplementedPaymentServer) OperatorWithdrawCallback(context.Context, *WithdrawCallbackRequest) (*WithdrawCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorWithdrawCallback not implemented")
}
func (UnimplementedPaymentServer) GetTransactionPage(context.Context, *GetTransactionPageRequest) (*GetTransactionPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionPage not implemented")
}
func (UnimplementedPaymentServer) GetPaymentChannelPage(context.Context, *GetPaymentChannelPageRequest) (*GetPaymentChannelPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentChannelPage not implemented")
}
func (UnimplementedPaymentServer) GetTransactionDetailById(context.Context, *GetTransactionDetailByIdRequest) (*GetTransactionDetailByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionDetailById not implemented")
}
func (UnimplementedPaymentServer) GetOperatorTransactionPage(context.Context, *GetTransactionPageRequest) (*GetTransactionPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorTransactionPage not implemented")
}
func (UnimplementedPaymentServer) GetOperatorTransactionDetailById(context.Context, *GetTransactionDetailByIdRequest) (*GetTransactionDetailByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorTransactionDetailById not implemented")
}
func (UnimplementedPaymentServer) GetChannelsByIds(context.Context, *GetChannelsByIdsRequest) (*GetChannelsByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelsByIds not implemented")
}
func (UnimplementedPaymentServer) UpdatePaymentMethod(context.Context, *UpdatePaymentMethodRequest) (*CreatePaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentMethod not implemented")
}
func (UnimplementedPaymentServer) GetOperatorPaymentChannelPage(context.Context, *GetOperatorPaymentChannelPageRequest) (*GetPaymentChannelPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorPaymentChannelPage not implemented")
}
func (UnimplementedPaymentServer) GetBankCardList(context.Context, *GetBankCardListRequest) (*GetBankCardListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankCardList not implemented")
}
func (UnimplementedPaymentServer) AddBankCard(context.Context, *AddBankCardRequest) (*AddBankCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBankCard not implemented")
}
func (UnimplementedPaymentServer) UpdateBankCard(context.Context, *UpdateBankCardRequest) (*UpdateBankCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBankCard not implemented")
}
func (UnimplementedPaymentServer) DeleteBankCard(context.Context, *DeleteBankCardRequest) (*DeleteBankCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBankCard not implemented")
}
func (UnimplementedPaymentServer) mustEmbedUnimplementedPaymentServer() {}
func (UnimplementedPaymentServer) testEmbeddedByValue()                 {}

// UnsafePaymentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServer will
// result in compilation errors.
type UnsafePaymentServer interface {
	mustEmbedUnimplementedPaymentServer()
}

func RegisterPaymentServer(s grpc.ServiceRegistrar, srv PaymentServer) {
	// If the following call pancis, it indicates UnimplementedPaymentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Payment_ServiceDesc, srv)
}

func _Payment_GetSupportedPaymentMethodList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupportedPaymentMethodListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).GetSupportedPaymentMethodList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_GetSupportedPaymentMethodList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).GetSupportedPaymentMethodList(ctx, req.(*GetSupportedPaymentMethodListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_CreatePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).CreatePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_CreatePaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).CreatePaymentMethod(ctx, req.(*CreatePaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_GetPaymentMethodList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentMethodListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).GetPaymentMethodList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_GetPaymentMethodList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).GetPaymentMethodList(ctx, req.(*GetPaymentMethodListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_UpdatePaymentChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).UpdatePaymentChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_UpdatePaymentChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).UpdatePaymentChannel(ctx, req.(*UpdatePaymentChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_CreatePaymentChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).CreatePaymentChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_CreatePaymentChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).CreatePaymentChannel(ctx, req.(*CreatePaymentChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_GetAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).GetAddress(ctx, req.(*GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_InitiateDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).InitiateDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_InitiateDeposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).InitiateDeposit(ctx, req.(*InitiateDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_InitiateWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).InitiateWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_InitiateWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).InitiateWithdraw(ctx, req.(*InitiateWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_DepositCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).DepositCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_DepositCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).DepositCallback(ctx, req.(*DepositCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_WithdrawCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).WithdrawCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_WithdrawCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).WithdrawCallback(ctx, req.(*WithdrawCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_GetOperatorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).GetOperatorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_GetOperatorAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).GetOperatorAddress(ctx, req.(*GetOperatorAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_InitiateOperatorWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateOperatorWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).InitiateOperatorWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_InitiateOperatorWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).InitiateOperatorWithdraw(ctx, req.(*InitiateOperatorWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_OperatorDepositCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).OperatorDepositCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_OperatorDepositCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).OperatorDepositCallback(ctx, req.(*DepositCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_OperatorWithdrawCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).OperatorWithdrawCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_OperatorWithdrawCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).OperatorWithdrawCallback(ctx, req.(*WithdrawCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_GetTransactionPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).GetTransactionPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_GetTransactionPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).GetTransactionPage(ctx, req.(*GetTransactionPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_GetPaymentChannelPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentChannelPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).GetPaymentChannelPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_GetPaymentChannelPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).GetPaymentChannelPage(ctx, req.(*GetPaymentChannelPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_GetTransactionDetailById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionDetailByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).GetTransactionDetailById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_GetTransactionDetailById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).GetTransactionDetailById(ctx, req.(*GetTransactionDetailByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_GetOperatorTransactionPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).GetOperatorTransactionPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_GetOperatorTransactionPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).GetOperatorTransactionPage(ctx, req.(*GetTransactionPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_GetOperatorTransactionDetailById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionDetailByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).GetOperatorTransactionDetailById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_GetOperatorTransactionDetailById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).GetOperatorTransactionDetailById(ctx, req.(*GetTransactionDetailByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_GetChannelsByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelsByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).GetChannelsByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_GetChannelsByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).GetChannelsByIds(ctx, req.(*GetChannelsByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_UpdatePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).UpdatePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_UpdatePaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).UpdatePaymentMethod(ctx, req.(*UpdatePaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_GetOperatorPaymentChannelPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorPaymentChannelPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).GetOperatorPaymentChannelPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_GetOperatorPaymentChannelPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).GetOperatorPaymentChannelPage(ctx, req.(*GetOperatorPaymentChannelPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_GetBankCardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankCardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).GetBankCardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_GetBankCardList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).GetBankCardList(ctx, req.(*GetBankCardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_AddBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBankCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).AddBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_AddBankCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).AddBankCard(ctx, req.(*AddBankCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_UpdateBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBankCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).UpdateBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_UpdateBankCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).UpdateBankCard(ctx, req.(*UpdateBankCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_DeleteBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBankCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).DeleteBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_DeleteBankCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).DeleteBankCard(ctx, req.(*DeleteBankCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Payment_ServiceDesc is the grpc.ServiceDesc for Payment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Payment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.service.v1.Payment",
	HandlerType: (*PaymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSupportedPaymentMethodList",
			Handler:    _Payment_GetSupportedPaymentMethodList_Handler,
		},
		{
			MethodName: "CreatePaymentMethod",
			Handler:    _Payment_CreatePaymentMethod_Handler,
		},
		{
			MethodName: "GetPaymentMethodList",
			Handler:    _Payment_GetPaymentMethodList_Handler,
		},
		{
			MethodName: "UpdatePaymentChannel",
			Handler:    _Payment_UpdatePaymentChannel_Handler,
		},
		{
			MethodName: "CreatePaymentChannel",
			Handler:    _Payment_CreatePaymentChannel_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _Payment_GetAddress_Handler,
		},
		{
			MethodName: "InitiateDeposit",
			Handler:    _Payment_InitiateDeposit_Handler,
		},
		{
			MethodName: "InitiateWithdraw",
			Handler:    _Payment_InitiateWithdraw_Handler,
		},
		{
			MethodName: "DepositCallback",
			Handler:    _Payment_DepositCallback_Handler,
		},
		{
			MethodName: "WithdrawCallback",
			Handler:    _Payment_WithdrawCallback_Handler,
		},
		{
			MethodName: "GetOperatorAddress",
			Handler:    _Payment_GetOperatorAddress_Handler,
		},
		{
			MethodName: "InitiateOperatorWithdraw",
			Handler:    _Payment_InitiateOperatorWithdraw_Handler,
		},
		{
			MethodName: "OperatorDepositCallback",
			Handler:    _Payment_OperatorDepositCallback_Handler,
		},
		{
			MethodName: "OperatorWithdrawCallback",
			Handler:    _Payment_OperatorWithdrawCallback_Handler,
		},
		{
			MethodName: "GetTransactionPage",
			Handler:    _Payment_GetTransactionPage_Handler,
		},
		{
			MethodName: "GetPaymentChannelPage",
			Handler:    _Payment_GetPaymentChannelPage_Handler,
		},
		{
			MethodName: "GetTransactionDetailById",
			Handler:    _Payment_GetTransactionDetailById_Handler,
		},
		{
			MethodName: "GetOperatorTransactionPage",
			Handler:    _Payment_GetOperatorTransactionPage_Handler,
		},
		{
			MethodName: "GetOperatorTransactionDetailById",
			Handler:    _Payment_GetOperatorTransactionDetailById_Handler,
		},
		{
			MethodName: "GetChannelsByIds",
			Handler:    _Payment_GetChannelsByIds_Handler,
		},
		{
			MethodName: "UpdatePaymentMethod",
			Handler:    _Payment_UpdatePaymentMethod_Handler,
		},
		{
			MethodName: "GetOperatorPaymentChannelPage",
			Handler:    _Payment_GetOperatorPaymentChannelPage_Handler,
		},
		{
			MethodName: "GetBankCardList",
			Handler:    _Payment_GetBankCardList_Handler,
		},
		{
			MethodName: "AddBankCard",
			Handler:    _Payment_AddBankCard_Handler,
		},
		{
			MethodName: "UpdateBankCard",
			Handler:    _Payment_UpdateBankCard_Handler,
		},
		{
			MethodName: "DeleteBankCard",
			Handler:    _Payment_DeleteBankCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/service/v1/payment.proto",
}
