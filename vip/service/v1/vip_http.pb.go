// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: vip/service/v1/vip.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationVipClaimVipReward = "/api.vip.service.v1.Vip/ClaimVipReward"
const OperationVipGetClaimableVipRewards = "/api.vip.service.v1.Vip/GetClaimableVipRewards"
const OperationVipGetOperatorVipSettings = "/api.vip.service.v1.Vip/GetOperatorVipSettings"
const OperationVipGetUserVipLevel = "/api.vip.service.v1.Vip/GetUserVipLevel"
const OperationVipGetVipLevelConfigTemplate = "/api.vip.service.v1.Vip/GetVipLevelConfigTemplate"
const OperationVipGetVipSetting = "/api.vip.service.v1.Vip/GetVipSetting"
const OperationVipListVipLevelConfigTemplates = "/api.vip.service.v1.Vip/ListVipLevelConfigTemplates"
const OperationVipUpdateVipRewardSlider = "/api.vip.service.v1.Vip/UpdateVipRewardSlider"

type VipHTTPServer interface {
	ClaimVipReward(context.Context, *ClaimVipRewardRequest) (*ClaimVipRewardResponse, error)
	GetClaimableVipRewards(context.Context, *GetClaimableVipRewardsRequest) (*GetClaimableVipRewardsResponse, error)
	GetOperatorVipSettings(context.Context, *GetOperatorVipSettingsRequest) (*GetOperatorVipSettingsResponse, error)
	GetUserVipLevel(context.Context, *GetUserVipLevelRequest) (*GetUserVipLevelResponse, error)
	GetVipLevelConfigTemplate(context.Context, *GetVipLevelConfigTemplateRequest) (*GetVipLevelConfigTemplateResponse, error)
	GetVipSetting(context.Context, *GetVipSettingRequest) (*GetVipSettingResponse, error)
	ListVipLevelConfigTemplates(context.Context, *ListVipLevelConfigTemplatesRequest) (*ListVipLevelConfigTemplatesResponse, error)
	UpdateVipRewardSlider(context.Context, *UpdateVipRewardSliderRequest) (*UpdateVipRewardSliderResponse, error)
}

func RegisterVipHTTPServer(s *http.Server, srv VipHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/vip/setting/get", _Vip_GetVipSetting0_HTTP_Handler(srv))
	r.POST("/v1/vip/level-config-templates/list", _Vip_ListVipLevelConfigTemplates0_HTTP_Handler(srv))
	r.POST("/v1/vip/level-config-template/get", _Vip_GetVipLevelConfigTemplate0_HTTP_Handler(srv))
	r.POST("/v1/vip/operator-vip-settings/get", _Vip_GetOperatorVipSettings0_HTTP_Handler(srv))
	r.POST("/v1/vip/user-level/get", _Vip_GetUserVipLevel0_HTTP_Handler(srv))
	r.POST("/v1/vip/reward-slider/update", _Vip_UpdateVipRewardSlider0_HTTP_Handler(srv))
	r.POST("/v1/vip/reward/claimable", _Vip_GetClaimableVipRewards0_HTTP_Handler(srv))
	r.POST("/v1/vip/reward/claim", _Vip_ClaimVipReward0_HTTP_Handler(srv))
}

func _Vip_GetVipSetting0_HTTP_Handler(srv VipHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVipSettingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVipGetVipSetting)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVipSetting(ctx, req.(*GetVipSettingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetVipSettingResponse)
		return ctx.Result(200, reply)
	}
}

func _Vip_ListVipLevelConfigTemplates0_HTTP_Handler(srv VipHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListVipLevelConfigTemplatesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVipListVipLevelConfigTemplates)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListVipLevelConfigTemplates(ctx, req.(*ListVipLevelConfigTemplatesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListVipLevelConfigTemplatesResponse)
		return ctx.Result(200, reply)
	}
}

func _Vip_GetVipLevelConfigTemplate0_HTTP_Handler(srv VipHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVipLevelConfigTemplateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVipGetVipLevelConfigTemplate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVipLevelConfigTemplate(ctx, req.(*GetVipLevelConfigTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetVipLevelConfigTemplateResponse)
		return ctx.Result(200, reply)
	}
}

func _Vip_GetOperatorVipSettings0_HTTP_Handler(srv VipHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOperatorVipSettingsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVipGetOperatorVipSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOperatorVipSettings(ctx, req.(*GetOperatorVipSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOperatorVipSettingsResponse)
		return ctx.Result(200, reply)
	}
}

func _Vip_GetUserVipLevel0_HTTP_Handler(srv VipHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserVipLevelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVipGetUserVipLevel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserVipLevel(ctx, req.(*GetUserVipLevelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserVipLevelResponse)
		return ctx.Result(200, reply)
	}
}

func _Vip_UpdateVipRewardSlider0_HTTP_Handler(srv VipHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateVipRewardSliderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVipUpdateVipRewardSlider)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateVipRewardSlider(ctx, req.(*UpdateVipRewardSliderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateVipRewardSliderResponse)
		return ctx.Result(200, reply)
	}
}

func _Vip_GetClaimableVipRewards0_HTTP_Handler(srv VipHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetClaimableVipRewardsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVipGetClaimableVipRewards)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetClaimableVipRewards(ctx, req.(*GetClaimableVipRewardsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetClaimableVipRewardsResponse)
		return ctx.Result(200, reply)
	}
}

func _Vip_ClaimVipReward0_HTTP_Handler(srv VipHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClaimVipRewardRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVipClaimVipReward)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ClaimVipReward(ctx, req.(*ClaimVipRewardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClaimVipRewardResponse)
		return ctx.Result(200, reply)
	}
}

type VipHTTPClient interface {
	ClaimVipReward(ctx context.Context, req *ClaimVipRewardRequest, opts ...http.CallOption) (rsp *ClaimVipRewardResponse, err error)
	GetClaimableVipRewards(ctx context.Context, req *GetClaimableVipRewardsRequest, opts ...http.CallOption) (rsp *GetClaimableVipRewardsResponse, err error)
	GetOperatorVipSettings(ctx context.Context, req *GetOperatorVipSettingsRequest, opts ...http.CallOption) (rsp *GetOperatorVipSettingsResponse, err error)
	GetUserVipLevel(ctx context.Context, req *GetUserVipLevelRequest, opts ...http.CallOption) (rsp *GetUserVipLevelResponse, err error)
	GetVipLevelConfigTemplate(ctx context.Context, req *GetVipLevelConfigTemplateRequest, opts ...http.CallOption) (rsp *GetVipLevelConfigTemplateResponse, err error)
	GetVipSetting(ctx context.Context, req *GetVipSettingRequest, opts ...http.CallOption) (rsp *GetVipSettingResponse, err error)
	ListVipLevelConfigTemplates(ctx context.Context, req *ListVipLevelConfigTemplatesRequest, opts ...http.CallOption) (rsp *ListVipLevelConfigTemplatesResponse, err error)
	UpdateVipRewardSlider(ctx context.Context, req *UpdateVipRewardSliderRequest, opts ...http.CallOption) (rsp *UpdateVipRewardSliderResponse, err error)
}

type VipHTTPClientImpl struct {
	cc *http.Client
}

func NewVipHTTPClient(client *http.Client) VipHTTPClient {
	return &VipHTTPClientImpl{client}
}

func (c *VipHTTPClientImpl) ClaimVipReward(ctx context.Context, in *ClaimVipRewardRequest, opts ...http.CallOption) (*ClaimVipRewardResponse, error) {
	var out ClaimVipRewardResponse
	pattern := "/v1/vip/reward/claim"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVipClaimVipReward))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VipHTTPClientImpl) GetClaimableVipRewards(ctx context.Context, in *GetClaimableVipRewardsRequest, opts ...http.CallOption) (*GetClaimableVipRewardsResponse, error) {
	var out GetClaimableVipRewardsResponse
	pattern := "/v1/vip/reward/claimable"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVipGetClaimableVipRewards))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VipHTTPClientImpl) GetOperatorVipSettings(ctx context.Context, in *GetOperatorVipSettingsRequest, opts ...http.CallOption) (*GetOperatorVipSettingsResponse, error) {
	var out GetOperatorVipSettingsResponse
	pattern := "/v1/vip/operator-vip-settings/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVipGetOperatorVipSettings))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VipHTTPClientImpl) GetUserVipLevel(ctx context.Context, in *GetUserVipLevelRequest, opts ...http.CallOption) (*GetUserVipLevelResponse, error) {
	var out GetUserVipLevelResponse
	pattern := "/v1/vip/user-level/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVipGetUserVipLevel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VipHTTPClientImpl) GetVipLevelConfigTemplate(ctx context.Context, in *GetVipLevelConfigTemplateRequest, opts ...http.CallOption) (*GetVipLevelConfigTemplateResponse, error) {
	var out GetVipLevelConfigTemplateResponse
	pattern := "/v1/vip/level-config-template/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVipGetVipLevelConfigTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VipHTTPClientImpl) GetVipSetting(ctx context.Context, in *GetVipSettingRequest, opts ...http.CallOption) (*GetVipSettingResponse, error) {
	var out GetVipSettingResponse
	pattern := "/v1/vip/setting/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVipGetVipSetting))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VipHTTPClientImpl) ListVipLevelConfigTemplates(ctx context.Context, in *ListVipLevelConfigTemplatesRequest, opts ...http.CallOption) (*ListVipLevelConfigTemplatesResponse, error) {
	var out ListVipLevelConfigTemplatesResponse
	pattern := "/v1/vip/level-config-templates/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVipListVipLevelConfigTemplates))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VipHTTPClientImpl) UpdateVipRewardSlider(ctx context.Context, in *UpdateVipRewardSliderRequest, opts ...http.CallOption) (*UpdateVipRewardSliderResponse, error) {
	var out UpdateVipRewardSliderResponse
	pattern := "/v1/vip/reward-slider/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVipUpdateVipRewardSlider))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
