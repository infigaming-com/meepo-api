// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: vip/service/v1/vip.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on VipConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VipConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VipConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VipConfigMultiError, or nil
// if none found.
func (m *VipConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *VipConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SystemOperatorId

	// no validation rules for RetailerOperatorId

	// no validation rules for CompanyOperatorId

	// no validation rules for OperatorId

	// no validation rules for Enabled

	if len(errors) > 0 {
		return VipConfigMultiError(errors)
	}

	return nil
}

// VipConfigMultiError is an error wrapping multiple validation errors returned
// by VipConfig.ValidateAll() if the designated constraints aren't met.
type VipConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VipConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VipConfigMultiError) AllErrors() []error { return m }

// VipConfigValidationError is the validation error returned by
// VipConfig.Validate if the designated constraints aren't met.
type VipConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VipConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VipConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VipConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VipConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VipConfigValidationError) ErrorName() string { return "VipConfigValidationError" }

// Error satisfies the builtin error interface
func (e VipConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVipConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VipConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VipConfigValidationError{}

// Validate checks the field values on VipSetting with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VipSetting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VipSetting with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VipSettingMultiError, or
// nil if none found.
func (m *VipSetting) ValidateAll() error {
	return m.validate(true)
}

func (m *VipSetting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SystemOperatorId

	// no validation rules for RetailerOperatorId

	// no validation rules for CompanyOperatorId

	// no validation rules for OperatorId

	// no validation rules for BaseCurrency

	// no validation rules for RewardsSlider

	// no validation rules for FollowParent

	// no validation rules for Enabled

	// no validation rules for UpgradePayoutType

	// no validation rules for RakebackInstantPayoutType

	// no validation rules for RakebackDailyPayoutType

	// no validation rules for WeeklyRewardPayoutType

	// no validation rules for MonthlyRewardPayoutType

	// no validation rules for DepositXpRate

	// no validation rules for WageringXpRate

	// no validation rules for MaxHouseEdgeLimitPercent

	// no validation rules for StandardXpMultiplier

	// no validation rules for Timezone

	// no validation rules for DailyIssueAt

	// no validation rules for WeeklyIssueDow

	// no validation rules for WeeklyIssueAt

	// no validation rules for MonthlyIssueDom

	// no validation rules for MonthlyIssueAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for UpgradeBaseExpiryType

	// no validation rules for UpgradeBaseExpiryDays

	// no validation rules for UpgradeBaseExpiryHours

	// no validation rules for UpgradeIncrementalExpiryType

	// no validation rules for UpgradeIncrementalExpiryDays

	// no validation rules for UpgradeIncrementalExpiryHours

	// no validation rules for RakebackInstantExpiryType

	// no validation rules for RakebackInstantExpiryDays

	// no validation rules for RakebackInstantExpiryHours

	// no validation rules for RakebackDailyExpiryType

	// no validation rules for RakebackDailyExpiryDays

	// no validation rules for RakebackDailyExpiryHours

	// no validation rules for WeeklyRewardExpiryType

	// no validation rules for WeeklyRewardExpiryDays

	// no validation rules for WeeklyRewardExpiryHours

	// no validation rules for MonthlyRewardExpiryType

	// no validation rules for MonthlyRewardExpiryDays

	// no validation rules for MonthlyRewardExpiryHours

	if len(errors) > 0 {
		return VipSettingMultiError(errors)
	}

	return nil
}

// VipSettingMultiError is an error wrapping multiple validation errors
// returned by VipSetting.ValidateAll() if the designated constraints aren't met.
type VipSettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VipSettingMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VipSettingMultiError) AllErrors() []error { return m }

// VipSettingValidationError is the validation error returned by
// VipSetting.Validate if the designated constraints aren't met.
type VipSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VipSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VipSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VipSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VipSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VipSettingValidationError) ErrorName() string { return "VipSettingValidationError" }

// Error satisfies the builtin error interface
func (e VipSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVipSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VipSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VipSettingValidationError{}

// Validate checks the field values on GetVipSettingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVipSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipSettingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVipSettingRequestMultiError, or nil if none found.
func (m *GetVipSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipSettingRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipSettingRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipSettingRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Currency

	if len(errors) > 0 {
		return GetVipSettingRequestMultiError(errors)
	}

	return nil
}

// GetVipSettingRequestMultiError is an error wrapping multiple validation
// errors returned by GetVipSettingRequest.ValidateAll() if the designated
// constraints aren't met.
type GetVipSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipSettingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipSettingRequestMultiError) AllErrors() []error { return m }

// GetVipSettingRequestValidationError is the validation error returned by
// GetVipSettingRequest.Validate if the designated constraints aren't met.
type GetVipSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipSettingRequestValidationError) ErrorName() string {
	return "GetVipSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipSettingRequestValidationError{}

// Validate checks the field values on GetVipSettingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVipSettingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipSettingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVipSettingResponseMultiError, or nil if none found.
func (m *GetVipSettingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipSettingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDefaultSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipSettingResponseValidationError{
					field:  "DefaultSetting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipSettingResponseValidationError{
					field:  "DefaultSetting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefaultSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipSettingResponseValidationError{
				field:  "DefaultSetting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustomSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipSettingResponseValidationError{
					field:  "CustomSetting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipSettingResponseValidationError{
					field:  "CustomSetting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipSettingResponseValidationError{
				field:  "CustomSetting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FollowParent

	if all {
		switch v := interface{}(m.GetCustomOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipSettingResponseValidationError{
					field:  "CustomOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipSettingResponseValidationError{
					field:  "CustomOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipSettingResponseValidationError{
				field:  "CustomOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInheritedOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipSettingResponseValidationError{
					field:  "InheritedOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipSettingResponseValidationError{
					field:  "InheritedOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInheritedOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipSettingResponseValidationError{
				field:  "InheritedOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InheritedFromOperatorName

	for idx, item := range m.GetDefaultTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetVipSettingResponseValidationError{
						field:  fmt.Sprintf("DefaultTemplates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetVipSettingResponseValidationError{
						field:  fmt.Sprintf("DefaultTemplates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetVipSettingResponseValidationError{
					field:  fmt.Sprintf("DefaultTemplates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCustomTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetVipSettingResponseValidationError{
						field:  fmt.Sprintf("CustomTemplates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetVipSettingResponseValidationError{
						field:  fmt.Sprintf("CustomTemplates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetVipSettingResponseValidationError{
					field:  fmt.Sprintf("CustomTemplates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetVipSettingResponseMultiError(errors)
	}

	return nil
}

// GetVipSettingResponseMultiError is an error wrapping multiple validation
// errors returned by GetVipSettingResponse.ValidateAll() if the designated
// constraints aren't met.
type GetVipSettingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipSettingResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipSettingResponseMultiError) AllErrors() []error { return m }

// GetVipSettingResponseValidationError is the validation error returned by
// GetVipSettingResponse.Validate if the designated constraints aren't met.
type GetVipSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipSettingResponseValidationError) ErrorName() string {
	return "GetVipSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipSettingResponseValidationError{}

// Validate checks the field values on UpdateVipSettingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVipSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVipSettingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVipSettingRequestMultiError, or nil if none found.
func (m *UpdateVipSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVipSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVipSettingRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVipSettingRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVipSettingRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVipSettingRequestValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVipSettingRequestValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVipSettingRequestValidationError{
				field:  "Setting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateVipSettingRequestMultiError(errors)
	}

	return nil
}

// UpdateVipSettingRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateVipSettingRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateVipSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVipSettingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVipSettingRequestMultiError) AllErrors() []error { return m }

// UpdateVipSettingRequestValidationError is the validation error returned by
// UpdateVipSettingRequest.Validate if the designated constraints aren't met.
type UpdateVipSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVipSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVipSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVipSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVipSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVipSettingRequestValidationError) ErrorName() string {
	return "UpdateVipSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVipSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVipSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVipSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVipSettingRequestValidationError{}

// Validate checks the field values on UpdateVipSettingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVipSettingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVipSettingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVipSettingResponseMultiError, or nil if none found.
func (m *UpdateVipSettingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVipSettingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateVipSettingResponseMultiError(errors)
	}

	return nil
}

// UpdateVipSettingResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateVipSettingResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateVipSettingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVipSettingResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVipSettingResponseMultiError) AllErrors() []error { return m }

// UpdateVipSettingResponseValidationError is the validation error returned by
// UpdateVipSettingResponse.Validate if the designated constraints aren't met.
type UpdateVipSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVipSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVipSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVipSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVipSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVipSettingResponseValidationError) ErrorName() string {
	return "UpdateVipSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVipSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVipSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVipSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVipSettingResponseValidationError{}

// Validate checks the field values on VipLevelConfigTemplate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VipLevelConfigTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VipLevelConfigTemplate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VipLevelConfigTemplateMultiError, or nil if none found.
func (m *VipLevelConfigTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *VipLevelConfigTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SystemOperatorId

	// no validation rules for RetailerOperatorId

	// no validation rules for CompanyOperatorId

	// no validation rules for OperatorId

	// no validation rules for Name

	// no validation rules for StartLevel

	// no validation rules for EndLevel

	// no validation rules for BaseLevelUpgradeXp

	// no validation rules for IncrLevelUpgradeXp

	// no validation rules for BaseUpgradeRewardAmt

	// no validation rules for IncrUpgradeRewardAmt

	// no validation rules for UpgradeRewardWageringX

	// no validation rules for WeeklyXpLoss

	// no validation rules for MonthlyXpLoss

	// no validation rules for RakebackInstantEnabled

	// no validation rules for RakebackInstantRate

	// no validation rules for RakebackInstantReq

	// no validation rules for RakebackDailyEnabled

	// no validation rules for RakebackDailyRate

	// no validation rules for RakebackDailyReq

	// no validation rules for WeeklyRewardEnabled

	// no validation rules for WeeklyFixedRewardAmt

	// no validation rules for WeeklyTurnoverRate

	// no validation rules for WeeklyNetLossAmt

	// no validation rules for WeeklyAdjustRangePct

	// no validation rules for WeeklyActiveDaysReward

	// no validation rules for WeeklyWageringReq

	// no validation rules for MonthlyRewardEnabled

	// no validation rules for MonthlyFixedRewardAmt

	// no validation rules for MonthlyTurnoverRate

	// no validation rules for MonthlyNetLossAmt

	// no validation rules for MonthlyAdjustRangePct

	// no validation rules for MonthlyActiveDaysReward

	// no validation rules for MonthlyWageringReq

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for ImageUrl

	// no validation rules for XpLossEnabled

	if len(errors) > 0 {
		return VipLevelConfigTemplateMultiError(errors)
	}

	return nil
}

// VipLevelConfigTemplateMultiError is an error wrapping multiple validation
// errors returned by VipLevelConfigTemplate.ValidateAll() if the designated
// constraints aren't met.
type VipLevelConfigTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VipLevelConfigTemplateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VipLevelConfigTemplateMultiError) AllErrors() []error { return m }

// VipLevelConfigTemplateValidationError is the validation error returned by
// VipLevelConfigTemplate.Validate if the designated constraints aren't met.
type VipLevelConfigTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VipLevelConfigTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VipLevelConfigTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VipLevelConfigTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VipLevelConfigTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VipLevelConfigTemplateValidationError) ErrorName() string {
	return "VipLevelConfigTemplateValidationError"
}

// Error satisfies the builtin error interface
func (e VipLevelConfigTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVipLevelConfigTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VipLevelConfigTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VipLevelConfigTemplateValidationError{}

// Validate checks the field values on ListVipLevelConfigTemplatesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListVipLevelConfigTemplatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVipLevelConfigTemplatesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListVipLevelConfigTemplatesRequestMultiError, or nil if none found.
func (m *ListVipLevelConfigTemplatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVipLevelConfigTemplatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListVipLevelConfigTemplatesRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListVipLevelConfigTemplatesRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListVipLevelConfigTemplatesRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SettingId

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListVipLevelConfigTemplatesRequestMultiError(errors)
	}

	return nil
}

// ListVipLevelConfigTemplatesRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListVipLevelConfigTemplatesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListVipLevelConfigTemplatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVipLevelConfigTemplatesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVipLevelConfigTemplatesRequestMultiError) AllErrors() []error { return m }

// ListVipLevelConfigTemplatesRequestValidationError is the validation error
// returned by ListVipLevelConfigTemplatesRequest.Validate if the designated
// constraints aren't met.
type ListVipLevelConfigTemplatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVipLevelConfigTemplatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVipLevelConfigTemplatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVipLevelConfigTemplatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVipLevelConfigTemplatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVipLevelConfigTemplatesRequestValidationError) ErrorName() string {
	return "ListVipLevelConfigTemplatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListVipLevelConfigTemplatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVipLevelConfigTemplatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVipLevelConfigTemplatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVipLevelConfigTemplatesRequestValidationError{}

// Validate checks the field values on ListVipLevelConfigTemplatesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListVipLevelConfigTemplatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVipLevelConfigTemplatesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListVipLevelConfigTemplatesResponseMultiError, or nil if none found.
func (m *ListVipLevelConfigTemplatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVipLevelConfigTemplatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListVipLevelConfigTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListVipLevelConfigTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListVipLevelConfigTemplatesResponseValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListVipLevelConfigTemplatesResponseMultiError(errors)
	}

	return nil
}

// ListVipLevelConfigTemplatesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListVipLevelConfigTemplatesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListVipLevelConfigTemplatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVipLevelConfigTemplatesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVipLevelConfigTemplatesResponseMultiError) AllErrors() []error { return m }

// ListVipLevelConfigTemplatesResponseValidationError is the validation error
// returned by ListVipLevelConfigTemplatesResponse.Validate if the designated
// constraints aren't met.
type ListVipLevelConfigTemplatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVipLevelConfigTemplatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVipLevelConfigTemplatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVipLevelConfigTemplatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVipLevelConfigTemplatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVipLevelConfigTemplatesResponseValidationError) ErrorName() string {
	return "ListVipLevelConfigTemplatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListVipLevelConfigTemplatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVipLevelConfigTemplatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVipLevelConfigTemplatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVipLevelConfigTemplatesResponseValidationError{}

// Validate checks the field values on GetVipLevelConfigTemplateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetVipLevelConfigTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipLevelConfigTemplateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetVipLevelConfigTemplateRequestMultiError, or nil if none found.
func (m *GetVipLevelConfigTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipLevelConfigTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipLevelConfigTemplateRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipLevelConfigTemplateRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipLevelConfigTemplateRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TemplateId

	if len(errors) > 0 {
		return GetVipLevelConfigTemplateRequestMultiError(errors)
	}

	return nil
}

// GetVipLevelConfigTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetVipLevelConfigTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type GetVipLevelConfigTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipLevelConfigTemplateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipLevelConfigTemplateRequestMultiError) AllErrors() []error { return m }

// GetVipLevelConfigTemplateRequestValidationError is the validation error
// returned by GetVipLevelConfigTemplateRequest.Validate if the designated
// constraints aren't met.
type GetVipLevelConfigTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipLevelConfigTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipLevelConfigTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipLevelConfigTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipLevelConfigTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipLevelConfigTemplateRequestValidationError) ErrorName() string {
	return "GetVipLevelConfigTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipLevelConfigTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipLevelConfigTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipLevelConfigTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipLevelConfigTemplateRequestValidationError{}

// Validate checks the field values on GetVipLevelConfigTemplateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetVipLevelConfigTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipLevelConfigTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetVipLevelConfigTemplateResponseMultiError, or nil if none found.
func (m *GetVipLevelConfigTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipLevelConfigTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipLevelConfigTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipLevelConfigTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipLevelConfigTemplateResponseValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVipLevelConfigTemplateResponseMultiError(errors)
	}

	return nil
}

// GetVipLevelConfigTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetVipLevelConfigTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type GetVipLevelConfigTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipLevelConfigTemplateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipLevelConfigTemplateResponseMultiError) AllErrors() []error { return m }

// GetVipLevelConfigTemplateResponseValidationError is the validation error
// returned by GetVipLevelConfigTemplateResponse.Validate if the designated
// constraints aren't met.
type GetVipLevelConfigTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipLevelConfigTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipLevelConfigTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipLevelConfigTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipLevelConfigTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipLevelConfigTemplateResponseValidationError) ErrorName() string {
	return "GetVipLevelConfigTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipLevelConfigTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipLevelConfigTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipLevelConfigTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipLevelConfigTemplateResponseValidationError{}

// Validate checks the field values on CreateVipLevelConfigTemplateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateVipLevelConfigTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVipLevelConfigTemplateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateVipLevelConfigTemplateRequestMultiError, or nil if none found.
func (m *CreateVipLevelConfigTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVipLevelConfigTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateVipLevelConfigTemplateRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateVipLevelConfigTemplateRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVipLevelConfigTemplateRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateVipLevelConfigTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateVipLevelConfigTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVipLevelConfigTemplateRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SettingId

	if len(errors) > 0 {
		return CreateVipLevelConfigTemplateRequestMultiError(errors)
	}

	return nil
}

// CreateVipLevelConfigTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateVipLevelConfigTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateVipLevelConfigTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVipLevelConfigTemplateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVipLevelConfigTemplateRequestMultiError) AllErrors() []error { return m }

// CreateVipLevelConfigTemplateRequestValidationError is the validation error
// returned by CreateVipLevelConfigTemplateRequest.Validate if the designated
// constraints aren't met.
type CreateVipLevelConfigTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVipLevelConfigTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVipLevelConfigTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVipLevelConfigTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVipLevelConfigTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVipLevelConfigTemplateRequestValidationError) ErrorName() string {
	return "CreateVipLevelConfigTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVipLevelConfigTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVipLevelConfigTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVipLevelConfigTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVipLevelConfigTemplateRequestValidationError{}

// Validate checks the field values on CreateVipLevelConfigTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateVipLevelConfigTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVipLevelConfigTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateVipLevelConfigTemplateResponseMultiError, or nil if none found.
func (m *CreateVipLevelConfigTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVipLevelConfigTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateVipLevelConfigTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateVipLevelConfigTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVipLevelConfigTemplateResponseValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateVipLevelConfigTemplateResponseMultiError(errors)
	}

	return nil
}

// CreateVipLevelConfigTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateVipLevelConfigTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateVipLevelConfigTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVipLevelConfigTemplateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVipLevelConfigTemplateResponseMultiError) AllErrors() []error { return m }

// CreateVipLevelConfigTemplateResponseValidationError is the validation error
// returned by CreateVipLevelConfigTemplateResponse.Validate if the designated
// constraints aren't met.
type CreateVipLevelConfigTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVipLevelConfigTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVipLevelConfigTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVipLevelConfigTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVipLevelConfigTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVipLevelConfigTemplateResponseValidationError) ErrorName() string {
	return "CreateVipLevelConfigTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVipLevelConfigTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVipLevelConfigTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVipLevelConfigTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVipLevelConfigTemplateResponseValidationError{}

// Validate checks the field values on UpdateVipLevelConfigTemplateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateVipLevelConfigTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVipLevelConfigTemplateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateVipLevelConfigTemplateRequestMultiError, or nil if none found.
func (m *UpdateVipLevelConfigTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVipLevelConfigTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVipLevelConfigTemplateRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVipLevelConfigTemplateRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVipLevelConfigTemplateRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVipLevelConfigTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVipLevelConfigTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVipLevelConfigTemplateRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateVipLevelConfigTemplateRequestMultiError(errors)
	}

	return nil
}

// UpdateVipLevelConfigTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateVipLevelConfigTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateVipLevelConfigTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVipLevelConfigTemplateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVipLevelConfigTemplateRequestMultiError) AllErrors() []error { return m }

// UpdateVipLevelConfigTemplateRequestValidationError is the validation error
// returned by UpdateVipLevelConfigTemplateRequest.Validate if the designated
// constraints aren't met.
type UpdateVipLevelConfigTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVipLevelConfigTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVipLevelConfigTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVipLevelConfigTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVipLevelConfigTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVipLevelConfigTemplateRequestValidationError) ErrorName() string {
	return "UpdateVipLevelConfigTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVipLevelConfigTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVipLevelConfigTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVipLevelConfigTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVipLevelConfigTemplateRequestValidationError{}

// Validate checks the field values on UpdateVipLevelConfigTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateVipLevelConfigTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVipLevelConfigTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateVipLevelConfigTemplateResponseMultiError, or nil if none found.
func (m *UpdateVipLevelConfigTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVipLevelConfigTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateVipLevelConfigTemplateResponseMultiError(errors)
	}

	return nil
}

// UpdateVipLevelConfigTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateVipLevelConfigTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateVipLevelConfigTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVipLevelConfigTemplateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVipLevelConfigTemplateResponseMultiError) AllErrors() []error { return m }

// UpdateVipLevelConfigTemplateResponseValidationError is the validation error
// returned by UpdateVipLevelConfigTemplateResponse.Validate if the designated
// constraints aren't met.
type UpdateVipLevelConfigTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVipLevelConfigTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVipLevelConfigTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVipLevelConfigTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVipLevelConfigTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVipLevelConfigTemplateResponseValidationError) ErrorName() string {
	return "UpdateVipLevelConfigTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVipLevelConfigTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVipLevelConfigTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVipLevelConfigTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVipLevelConfigTemplateResponseValidationError{}

// Validate checks the field values on DeleteVipLevelConfigTemplateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteVipLevelConfigTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteVipLevelConfigTemplateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteVipLevelConfigTemplateRequestMultiError, or nil if none found.
func (m *DeleteVipLevelConfigTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteVipLevelConfigTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteVipLevelConfigTemplateRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteVipLevelConfigTemplateRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteVipLevelConfigTemplateRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TemplateId

	if len(errors) > 0 {
		return DeleteVipLevelConfigTemplateRequestMultiError(errors)
	}

	return nil
}

// DeleteVipLevelConfigTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteVipLevelConfigTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteVipLevelConfigTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteVipLevelConfigTemplateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteVipLevelConfigTemplateRequestMultiError) AllErrors() []error { return m }

// DeleteVipLevelConfigTemplateRequestValidationError is the validation error
// returned by DeleteVipLevelConfigTemplateRequest.Validate if the designated
// constraints aren't met.
type DeleteVipLevelConfigTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVipLevelConfigTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVipLevelConfigTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVipLevelConfigTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVipLevelConfigTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVipLevelConfigTemplateRequestValidationError) ErrorName() string {
	return "DeleteVipLevelConfigTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVipLevelConfigTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVipLevelConfigTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVipLevelConfigTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVipLevelConfigTemplateRequestValidationError{}

// Validate checks the field values on DeleteVipLevelConfigTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteVipLevelConfigTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteVipLevelConfigTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteVipLevelConfigTemplateResponseMultiError, or nil if none found.
func (m *DeleteVipLevelConfigTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteVipLevelConfigTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteVipLevelConfigTemplateResponseMultiError(errors)
	}

	return nil
}

// DeleteVipLevelConfigTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteVipLevelConfigTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteVipLevelConfigTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteVipLevelConfigTemplateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteVipLevelConfigTemplateResponseMultiError) AllErrors() []error { return m }

// DeleteVipLevelConfigTemplateResponseValidationError is the validation error
// returned by DeleteVipLevelConfigTemplateResponse.Validate if the designated
// constraints aren't met.
type DeleteVipLevelConfigTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVipLevelConfigTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVipLevelConfigTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVipLevelConfigTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVipLevelConfigTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVipLevelConfigTemplateResponseValidationError) ErrorName() string {
	return "DeleteVipLevelConfigTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVipLevelConfigTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVipLevelConfigTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVipLevelConfigTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVipLevelConfigTemplateResponseValidationError{}

// Validate checks the field values on VipMember with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VipMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VipMember with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VipMemberMultiError, or nil
// if none found.
func (m *VipMember) ValidateAll() error {
	return m.validate(true)
}

func (m *VipMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SystemOperatorId

	// no validation rules for RetailerOperatorId

	// no validation rules for CompanyOperatorId

	// no validation rules for OperatorId

	// no validation rules for UserId

	// no validation rules for CurrentLevelId

	// no validation rules for CurrentXp

	// no validation rules for TotalXp

	// no validation rules for LastLevelUpAt

	// no validation rules for LastInstantUpgradeAt

	if len(errors) > 0 {
		return VipMemberMultiError(errors)
	}

	return nil
}

// VipMemberMultiError is an error wrapping multiple validation errors returned
// by VipMember.ValidateAll() if the designated constraints aren't met.
type VipMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VipMemberMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VipMemberMultiError) AllErrors() []error { return m }

// VipMemberValidationError is the validation error returned by
// VipMember.Validate if the designated constraints aren't met.
type VipMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VipMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VipMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VipMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VipMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VipMemberValidationError) ErrorName() string { return "VipMemberValidationError" }

// Error satisfies the builtin error interface
func (e VipMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVipMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VipMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VipMemberValidationError{}

// Validate checks the field values on GetUserVipLevelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserVipLevelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserVipLevelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserVipLevelRequestMultiError, or nil if none found.
func (m *GetUserVipLevelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserVipLevelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserVipLevelRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserVipLevelRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserVipLevelRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserVipLevelRequestMultiError(errors)
	}

	return nil
}

// GetUserVipLevelRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserVipLevelRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserVipLevelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserVipLevelRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserVipLevelRequestMultiError) AllErrors() []error { return m }

// GetUserVipLevelRequestValidationError is the validation error returned by
// GetUserVipLevelRequest.Validate if the designated constraints aren't met.
type GetUserVipLevelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserVipLevelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserVipLevelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserVipLevelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserVipLevelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserVipLevelRequestValidationError) ErrorName() string {
	return "GetUserVipLevelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserVipLevelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserVipLevelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserVipLevelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserVipLevelRequestValidationError{}

// Validate checks the field values on GetUserVipLevelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserVipLevelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserVipLevelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserVipLevelResponseMultiError, or nil if none found.
func (m *GetUserVipLevelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserVipLevelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVipMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserVipLevelResponseValidationError{
					field:  "VipMember",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserVipLevelResponseValidationError{
					field:  "VipMember",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVipMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserVipLevelResponseValidationError{
				field:  "VipMember",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserVipLevelResponseMultiError(errors)
	}

	return nil
}

// GetUserVipLevelResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserVipLevelResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserVipLevelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserVipLevelResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserVipLevelResponseMultiError) AllErrors() []error { return m }

// GetUserVipLevelResponseValidationError is the validation error returned by
// GetUserVipLevelResponse.Validate if the designated constraints aren't met.
type GetUserVipLevelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserVipLevelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserVipLevelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserVipLevelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserVipLevelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserVipLevelResponseValidationError) ErrorName() string {
	return "GetUserVipLevelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserVipLevelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserVipLevelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserVipLevelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserVipLevelResponseValidationError{}

// Validate checks the field values on UpdateVipRewardSliderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVipRewardSliderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVipRewardSliderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVipRewardSliderRequestMultiError, or nil if none found.
func (m *UpdateVipRewardSliderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVipRewardSliderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rackback

	// no validation rules for Lossback

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVipRewardSliderRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVipRewardSliderRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVipRewardSliderRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	// no validation rules for Type

	// no validation rules for Currency

	if len(errors) > 0 {
		return UpdateVipRewardSliderRequestMultiError(errors)
	}

	return nil
}

// UpdateVipRewardSliderRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateVipRewardSliderRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateVipRewardSliderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVipRewardSliderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVipRewardSliderRequestMultiError) AllErrors() []error { return m }

// UpdateVipRewardSliderRequestValidationError is the validation error returned
// by UpdateVipRewardSliderRequest.Validate if the designated constraints
// aren't met.
type UpdateVipRewardSliderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVipRewardSliderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVipRewardSliderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVipRewardSliderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVipRewardSliderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVipRewardSliderRequestValidationError) ErrorName() string {
	return "UpdateVipRewardSliderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVipRewardSliderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVipRewardSliderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVipRewardSliderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVipRewardSliderRequestValidationError{}

// Validate checks the field values on UpdateVipRewardSliderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVipRewardSliderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVipRewardSliderResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateVipRewardSliderResponseMultiError, or nil if none found.
func (m *UpdateVipRewardSliderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVipRewardSliderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateVipRewardSliderResponseMultiError(errors)
	}

	return nil
}

// UpdateVipRewardSliderResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateVipRewardSliderResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateVipRewardSliderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVipRewardSliderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVipRewardSliderResponseMultiError) AllErrors() []error { return m }

// UpdateVipRewardSliderResponseValidationError is the validation error
// returned by UpdateVipRewardSliderResponse.Validate if the designated
// constraints aren't met.
type UpdateVipRewardSliderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVipRewardSliderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVipRewardSliderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVipRewardSliderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVipRewardSliderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVipRewardSliderResponseValidationError) ErrorName() string {
	return "UpdateVipRewardSliderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVipRewardSliderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVipRewardSliderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVipRewardSliderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVipRewardSliderResponseValidationError{}

// Validate checks the field values on GetClaimableVipRewardsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClaimableVipRewardsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClaimableVipRewardsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetClaimableVipRewardsRequestMultiError, or nil if none found.
func (m *GetClaimableVipRewardsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClaimableVipRewardsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetClaimableVipRewardsRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetClaimableVipRewardsRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClaimableVipRewardsRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Currency

	if len(errors) > 0 {
		return GetClaimableVipRewardsRequestMultiError(errors)
	}

	return nil
}

// GetClaimableVipRewardsRequestMultiError is an error wrapping multiple
// validation errors returned by GetClaimableVipRewardsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetClaimableVipRewardsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClaimableVipRewardsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClaimableVipRewardsRequestMultiError) AllErrors() []error { return m }

// GetClaimableVipRewardsRequestValidationError is the validation error
// returned by GetClaimableVipRewardsRequest.Validate if the designated
// constraints aren't met.
type GetClaimableVipRewardsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClaimableVipRewardsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClaimableVipRewardsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClaimableVipRewardsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClaimableVipRewardsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClaimableVipRewardsRequestValidationError) ErrorName() string {
	return "GetClaimableVipRewardsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClaimableVipRewardsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClaimableVipRewardsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClaimableVipRewardsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClaimableVipRewardsRequestValidationError{}

// Validate checks the field values on GetClaimableVipRewardsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClaimableVipRewardsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClaimableVipRewardsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetClaimableVipRewardsResponseMultiError, or nil if none found.
func (m *GetClaimableVipRewardsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClaimableVipRewardsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetClaimableRewards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetClaimableVipRewardsResponseValidationError{
						field:  fmt.Sprintf("ClaimableRewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetClaimableVipRewardsResponseValidationError{
						field:  fmt.Sprintf("ClaimableRewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetClaimableVipRewardsResponseValidationError{
					field:  fmt.Sprintf("ClaimableRewards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetClaimableVipRewardsResponseMultiError(errors)
	}

	return nil
}

// GetClaimableVipRewardsResponseMultiError is an error wrapping multiple
// validation errors returned by GetClaimableVipRewardsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetClaimableVipRewardsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClaimableVipRewardsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClaimableVipRewardsResponseMultiError) AllErrors() []error { return m }

// GetClaimableVipRewardsResponseValidationError is the validation error
// returned by GetClaimableVipRewardsResponse.Validate if the designated
// constraints aren't met.
type GetClaimableVipRewardsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClaimableVipRewardsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClaimableVipRewardsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClaimableVipRewardsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClaimableVipRewardsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClaimableVipRewardsResponseValidationError) ErrorName() string {
	return "GetClaimableVipRewardsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClaimableVipRewardsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClaimableVipRewardsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClaimableVipRewardsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClaimableVipRewardsResponseValidationError{}

// Validate checks the field values on ClaimVipRewardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClaimVipRewardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClaimVipRewardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClaimVipRewardRequestMultiError, or nil if none found.
func (m *ClaimVipRewardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClaimVipRewardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RewardKind

	// no validation rules for Currency

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClaimVipRewardRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClaimVipRewardRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClaimVipRewardRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ClaimVipRewardRequestMultiError(errors)
	}

	return nil
}

// ClaimVipRewardRequestMultiError is an error wrapping multiple validation
// errors returned by ClaimVipRewardRequest.ValidateAll() if the designated
// constraints aren't met.
type ClaimVipRewardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClaimVipRewardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClaimVipRewardRequestMultiError) AllErrors() []error { return m }

// ClaimVipRewardRequestValidationError is the validation error returned by
// ClaimVipRewardRequest.Validate if the designated constraints aren't met.
type ClaimVipRewardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClaimVipRewardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClaimVipRewardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClaimVipRewardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClaimVipRewardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClaimVipRewardRequestValidationError) ErrorName() string {
	return "ClaimVipRewardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClaimVipRewardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClaimVipRewardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClaimVipRewardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClaimVipRewardRequestValidationError{}

// Validate checks the field values on ClaimVipRewardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClaimVipRewardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClaimVipRewardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClaimVipRewardResponseMultiError, or nil if none found.
func (m *ClaimVipRewardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClaimVipRewardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClaimableAmount

	// no validation rules for ClaimableAmountCurrency

	// no validation rules for ClaimTransactionId

	if len(errors) > 0 {
		return ClaimVipRewardResponseMultiError(errors)
	}

	return nil
}

// ClaimVipRewardResponseMultiError is an error wrapping multiple validation
// errors returned by ClaimVipRewardResponse.ValidateAll() if the designated
// constraints aren't met.
type ClaimVipRewardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClaimVipRewardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClaimVipRewardResponseMultiError) AllErrors() []error { return m }

// ClaimVipRewardResponseValidationError is the validation error returned by
// ClaimVipRewardResponse.Validate if the designated constraints aren't met.
type ClaimVipRewardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClaimVipRewardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClaimVipRewardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClaimVipRewardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClaimVipRewardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClaimVipRewardResponseValidationError) ErrorName() string {
	return "ClaimVipRewardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClaimVipRewardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClaimVipRewardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClaimVipRewardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClaimVipRewardResponseValidationError{}

// Validate checks the field values on GetOperatorVipSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorVipSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorVipSettingsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOperatorVipSettingsRequestMultiError, or nil if none found.
func (m *GetOperatorVipSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorVipSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorVipSettingsRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorVipSettingsRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorVipSettingsRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Currency

	if len(errors) > 0 {
		return GetOperatorVipSettingsRequestMultiError(errors)
	}

	return nil
}

// GetOperatorVipSettingsRequestMultiError is an error wrapping multiple
// validation errors returned by GetOperatorVipSettingsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetOperatorVipSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorVipSettingsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorVipSettingsRequestMultiError) AllErrors() []error { return m }

// GetOperatorVipSettingsRequestValidationError is the validation error
// returned by GetOperatorVipSettingsRequest.Validate if the designated
// constraints aren't met.
type GetOperatorVipSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorVipSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorVipSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorVipSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorVipSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorVipSettingsRequestValidationError) ErrorName() string {
	return "GetOperatorVipSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorVipSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorVipSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorVipSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorVipSettingsRequestValidationError{}

// Validate checks the field values on GetOperatorVipSettingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorVipSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorVipSettingsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOperatorVipSettingsResponseMultiError, or nil if none found.
func (m *GetOperatorVipSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorVipSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorVipSettingsResponseValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorVipSettingsResponseValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorVipSettingsResponseValidationError{
				field:  "Setting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetVipLevelConfigTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOperatorVipSettingsResponseValidationError{
						field:  fmt.Sprintf("VipLevelConfigTemplates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOperatorVipSettingsResponseValidationError{
						field:  fmt.Sprintf("VipLevelConfigTemplates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOperatorVipSettingsResponseValidationError{
					field:  fmt.Sprintf("VipLevelConfigTemplates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOperatorVipSettingsResponseMultiError(errors)
	}

	return nil
}

// GetOperatorVipSettingsResponseMultiError is an error wrapping multiple
// validation errors returned by GetOperatorVipSettingsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetOperatorVipSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorVipSettingsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorVipSettingsResponseMultiError) AllErrors() []error { return m }

// GetOperatorVipSettingsResponseValidationError is the validation error
// returned by GetOperatorVipSettingsResponse.Validate if the designated
// constraints aren't met.
type GetOperatorVipSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorVipSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorVipSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorVipSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorVipSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorVipSettingsResponseValidationError) ErrorName() string {
	return "GetOperatorVipSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorVipSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorVipSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorVipSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorVipSettingsResponseValidationError{}

// Validate checks the field values on ConfirmClaimVipRewardRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmClaimVipRewardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmClaimVipRewardRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmClaimVipRewardRequestMultiError, or nil if none found.
func (m *ConfirmClaimVipRewardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmClaimVipRewardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfirmClaimVipRewardRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfirmClaimVipRewardRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfirmClaimVipRewardRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClaimTransactionId

	// no validation rules for ClaimCurrency

	if len(errors) > 0 {
		return ConfirmClaimVipRewardRequestMultiError(errors)
	}

	return nil
}

// ConfirmClaimVipRewardRequestMultiError is an error wrapping multiple
// validation errors returned by ConfirmClaimVipRewardRequest.ValidateAll() if
// the designated constraints aren't met.
type ConfirmClaimVipRewardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmClaimVipRewardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmClaimVipRewardRequestMultiError) AllErrors() []error { return m }

// ConfirmClaimVipRewardRequestValidationError is the validation error returned
// by ConfirmClaimVipRewardRequest.Validate if the designated constraints
// aren't met.
type ConfirmClaimVipRewardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmClaimVipRewardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmClaimVipRewardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmClaimVipRewardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmClaimVipRewardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmClaimVipRewardRequestValidationError) ErrorName() string {
	return "ConfirmClaimVipRewardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmClaimVipRewardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmClaimVipRewardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmClaimVipRewardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmClaimVipRewardRequestValidationError{}

// Validate checks the field values on ConfirmClaimVipRewardResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmClaimVipRewardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmClaimVipRewardResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ConfirmClaimVipRewardResponseMultiError, or nil if none found.
func (m *ConfirmClaimVipRewardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmClaimVipRewardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConfirmClaimVipRewardResponseMultiError(errors)
	}

	return nil
}

// ConfirmClaimVipRewardResponseMultiError is an error wrapping multiple
// validation errors returned by ConfirmClaimVipRewardResponse.ValidateAll()
// if the designated constraints aren't met.
type ConfirmClaimVipRewardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmClaimVipRewardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmClaimVipRewardResponseMultiError) AllErrors() []error { return m }

// ConfirmClaimVipRewardResponseValidationError is the validation error
// returned by ConfirmClaimVipRewardResponse.Validate if the designated
// constraints aren't met.
type ConfirmClaimVipRewardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmClaimVipRewardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmClaimVipRewardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmClaimVipRewardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmClaimVipRewardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmClaimVipRewardResponseValidationError) ErrorName() string {
	return "ConfirmClaimVipRewardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmClaimVipRewardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmClaimVipRewardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmClaimVipRewardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmClaimVipRewardResponseValidationError{}

// Validate checks the field values on
// GetClaimableVipRewardsResponse_ClaimableVipReward with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetClaimableVipRewardsResponse_ClaimableVipReward) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetClaimableVipRewardsResponse_ClaimableVipReward with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetClaimableVipRewardsResponse_ClaimableVipRewardMultiError, or nil if none found.
func (m *GetClaimableVipRewardsResponse_ClaimableVipReward) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClaimableVipRewardsResponse_ClaimableVipReward) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RewardKind

	// no validation rules for Claimable

	// no validation rules for ClaimableAt

	if len(errors) > 0 {
		return GetClaimableVipRewardsResponse_ClaimableVipRewardMultiError(errors)
	}

	return nil
}

// GetClaimableVipRewardsResponse_ClaimableVipRewardMultiError is an error
// wrapping multiple validation errors returned by
// GetClaimableVipRewardsResponse_ClaimableVipReward.ValidateAll() if the
// designated constraints aren't met.
type GetClaimableVipRewardsResponse_ClaimableVipRewardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClaimableVipRewardsResponse_ClaimableVipRewardMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClaimableVipRewardsResponse_ClaimableVipRewardMultiError) AllErrors() []error { return m }

// GetClaimableVipRewardsResponse_ClaimableVipRewardValidationError is the
// validation error returned by
// GetClaimableVipRewardsResponse_ClaimableVipReward.Validate if the
// designated constraints aren't met.
type GetClaimableVipRewardsResponse_ClaimableVipRewardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClaimableVipRewardsResponse_ClaimableVipRewardValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetClaimableVipRewardsResponse_ClaimableVipRewardValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetClaimableVipRewardsResponse_ClaimableVipRewardValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetClaimableVipRewardsResponse_ClaimableVipRewardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClaimableVipRewardsResponse_ClaimableVipRewardValidationError) ErrorName() string {
	return "GetClaimableVipRewardsResponse_ClaimableVipRewardValidationError"
}

// Error satisfies the builtin error interface
func (e GetClaimableVipRewardsResponse_ClaimableVipRewardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClaimableVipRewardsResponse_ClaimableVipReward.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClaimableVipRewardsResponse_ClaimableVipRewardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClaimableVipRewardsResponse_ClaimableVipRewardValidationError{}
