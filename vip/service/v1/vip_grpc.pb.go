// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: vip/service/v1/vip.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Vip_GetVipSetting_FullMethodName                = "/api.vip.service.v1.Vip/GetVipSetting"
	Vip_UpdateVipSetting_FullMethodName             = "/api.vip.service.v1.Vip/UpdateVipSetting"
	Vip_ListVipLevelConfigTemplates_FullMethodName  = "/api.vip.service.v1.Vip/ListVipLevelConfigTemplates"
	Vip_GetVipLevelConfigTemplate_FullMethodName    = "/api.vip.service.v1.Vip/GetVipLevelConfigTemplate"
	Vip_CreateVipLevelConfigTemplate_FullMethodName = "/api.vip.service.v1.Vip/CreateVipLevelConfigTemplate"
	Vip_UpdateVipLevelConfigTemplate_FullMethodName = "/api.vip.service.v1.Vip/UpdateVipLevelConfigTemplate"
	Vip_DeleteVipLevelConfigTemplate_FullMethodName = "/api.vip.service.v1.Vip/DeleteVipLevelConfigTemplate"
	Vip_GetOperatorVipSettings_FullMethodName       = "/api.vip.service.v1.Vip/GetOperatorVipSettings"
	Vip_GetUserVipLevel_FullMethodName              = "/api.vip.service.v1.Vip/GetUserVipLevel"
	Vip_UpdateVipRewardSlider_FullMethodName        = "/api.vip.service.v1.Vip/UpdateVipRewardSlider"
	Vip_GetClaimableVipRewards_FullMethodName       = "/api.vip.service.v1.Vip/GetClaimableVipRewards"
	Vip_ClaimVipReward_FullMethodName               = "/api.vip.service.v1.Vip/ClaimVipReward"
)

// VipClient is the client API for Vip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VipClient interface {
	GetVipSetting(ctx context.Context, in *GetVipSettingRequest, opts ...grpc.CallOption) (*GetVipSettingResponse, error)
	UpdateVipSetting(ctx context.Context, in *UpdateVipSettingRequest, opts ...grpc.CallOption) (*UpdateVipSettingResponse, error)
	ListVipLevelConfigTemplates(ctx context.Context, in *ListVipLevelConfigTemplatesRequest, opts ...grpc.CallOption) (*ListVipLevelConfigTemplatesResponse, error)
	GetVipLevelConfigTemplate(ctx context.Context, in *GetVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*GetVipLevelConfigTemplateResponse, error)
	CreateVipLevelConfigTemplate(ctx context.Context, in *CreateVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*CreateVipLevelConfigTemplateResponse, error)
	UpdateVipLevelConfigTemplate(ctx context.Context, in *UpdateVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*UpdateVipLevelConfigTemplateResponse, error)
	DeleteVipLevelConfigTemplate(ctx context.Context, in *DeleteVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*DeleteVipLevelConfigTemplateResponse, error)
	GetOperatorVipSettings(ctx context.Context, in *GetOperatorVipSettingsRequest, opts ...grpc.CallOption) (*GetOperatorVipSettingsResponse, error)
	GetUserVipLevel(ctx context.Context, in *GetUserVipLevelRequest, opts ...grpc.CallOption) (*GetUserVipLevelResponse, error)
	UpdateVipRewardSlider(ctx context.Context, in *UpdateVipRewardSliderRequest, opts ...grpc.CallOption) (*UpdateVipRewardSliderResponse, error)
	GetClaimableVipRewards(ctx context.Context, in *GetClaimableVipRewardsRequest, opts ...grpc.CallOption) (*GetClaimableVipRewardsResponse, error)
	ClaimVipReward(ctx context.Context, in *ClaimVipRewardRequest, opts ...grpc.CallOption) (*ClaimVipRewardResponse, error)
}

type vipClient struct {
	cc grpc.ClientConnInterface
}

func NewVipClient(cc grpc.ClientConnInterface) VipClient {
	return &vipClient{cc}
}

func (c *vipClient) GetVipSetting(ctx context.Context, in *GetVipSettingRequest, opts ...grpc.CallOption) (*GetVipSettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipSettingResponse)
	err := c.cc.Invoke(ctx, Vip_GetVipSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) UpdateVipSetting(ctx context.Context, in *UpdateVipSettingRequest, opts ...grpc.CallOption) (*UpdateVipSettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVipSettingResponse)
	err := c.cc.Invoke(ctx, Vip_UpdateVipSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) ListVipLevelConfigTemplates(ctx context.Context, in *ListVipLevelConfigTemplatesRequest, opts ...grpc.CallOption) (*ListVipLevelConfigTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVipLevelConfigTemplatesResponse)
	err := c.cc.Invoke(ctx, Vip_ListVipLevelConfigTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetVipLevelConfigTemplate(ctx context.Context, in *GetVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*GetVipLevelConfigTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipLevelConfigTemplateResponse)
	err := c.cc.Invoke(ctx, Vip_GetVipLevelConfigTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) CreateVipLevelConfigTemplate(ctx context.Context, in *CreateVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*CreateVipLevelConfigTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVipLevelConfigTemplateResponse)
	err := c.cc.Invoke(ctx, Vip_CreateVipLevelConfigTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) UpdateVipLevelConfigTemplate(ctx context.Context, in *UpdateVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*UpdateVipLevelConfigTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVipLevelConfigTemplateResponse)
	err := c.cc.Invoke(ctx, Vip_UpdateVipLevelConfigTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) DeleteVipLevelConfigTemplate(ctx context.Context, in *DeleteVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*DeleteVipLevelConfigTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVipLevelConfigTemplateResponse)
	err := c.cc.Invoke(ctx, Vip_DeleteVipLevelConfigTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetOperatorVipSettings(ctx context.Context, in *GetOperatorVipSettingsRequest, opts ...grpc.CallOption) (*GetOperatorVipSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperatorVipSettingsResponse)
	err := c.cc.Invoke(ctx, Vip_GetOperatorVipSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetUserVipLevel(ctx context.Context, in *GetUserVipLevelRequest, opts ...grpc.CallOption) (*GetUserVipLevelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserVipLevelResponse)
	err := c.cc.Invoke(ctx, Vip_GetUserVipLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) UpdateVipRewardSlider(ctx context.Context, in *UpdateVipRewardSliderRequest, opts ...grpc.CallOption) (*UpdateVipRewardSliderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVipRewardSliderResponse)
	err := c.cc.Invoke(ctx, Vip_UpdateVipRewardSlider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetClaimableVipRewards(ctx context.Context, in *GetClaimableVipRewardsRequest, opts ...grpc.CallOption) (*GetClaimableVipRewardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClaimableVipRewardsResponse)
	err := c.cc.Invoke(ctx, Vip_GetClaimableVipRewards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) ClaimVipReward(ctx context.Context, in *ClaimVipRewardRequest, opts ...grpc.CallOption) (*ClaimVipRewardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClaimVipRewardResponse)
	err := c.cc.Invoke(ctx, Vip_ClaimVipReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VipServer is the server API for Vip service.
// All implementations must embed UnimplementedVipServer
// for forward compatibility.
type VipServer interface {
	GetVipSetting(context.Context, *GetVipSettingRequest) (*GetVipSettingResponse, error)
	UpdateVipSetting(context.Context, *UpdateVipSettingRequest) (*UpdateVipSettingResponse, error)
	ListVipLevelConfigTemplates(context.Context, *ListVipLevelConfigTemplatesRequest) (*ListVipLevelConfigTemplatesResponse, error)
	GetVipLevelConfigTemplate(context.Context, *GetVipLevelConfigTemplateRequest) (*GetVipLevelConfigTemplateResponse, error)
	CreateVipLevelConfigTemplate(context.Context, *CreateVipLevelConfigTemplateRequest) (*CreateVipLevelConfigTemplateResponse, error)
	UpdateVipLevelConfigTemplate(context.Context, *UpdateVipLevelConfigTemplateRequest) (*UpdateVipLevelConfigTemplateResponse, error)
	DeleteVipLevelConfigTemplate(context.Context, *DeleteVipLevelConfigTemplateRequest) (*DeleteVipLevelConfigTemplateResponse, error)
	GetOperatorVipSettings(context.Context, *GetOperatorVipSettingsRequest) (*GetOperatorVipSettingsResponse, error)
	GetUserVipLevel(context.Context, *GetUserVipLevelRequest) (*GetUserVipLevelResponse, error)
	UpdateVipRewardSlider(context.Context, *UpdateVipRewardSliderRequest) (*UpdateVipRewardSliderResponse, error)
	GetClaimableVipRewards(context.Context, *GetClaimableVipRewardsRequest) (*GetClaimableVipRewardsResponse, error)
	ClaimVipReward(context.Context, *ClaimVipRewardRequest) (*ClaimVipRewardResponse, error)
	mustEmbedUnimplementedVipServer()
}

// UnimplementedVipServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVipServer struct{}

func (UnimplementedVipServer) GetVipSetting(context.Context, *GetVipSettingRequest) (*GetVipSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipSetting not implemented")
}
func (UnimplementedVipServer) UpdateVipSetting(context.Context, *UpdateVipSettingRequest) (*UpdateVipSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVipSetting not implemented")
}
func (UnimplementedVipServer) ListVipLevelConfigTemplates(context.Context, *ListVipLevelConfigTemplatesRequest) (*ListVipLevelConfigTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVipLevelConfigTemplates not implemented")
}
func (UnimplementedVipServer) GetVipLevelConfigTemplate(context.Context, *GetVipLevelConfigTemplateRequest) (*GetVipLevelConfigTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipLevelConfigTemplate not implemented")
}
func (UnimplementedVipServer) CreateVipLevelConfigTemplate(context.Context, *CreateVipLevelConfigTemplateRequest) (*CreateVipLevelConfigTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVipLevelConfigTemplate not implemented")
}
func (UnimplementedVipServer) UpdateVipLevelConfigTemplate(context.Context, *UpdateVipLevelConfigTemplateRequest) (*UpdateVipLevelConfigTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVipLevelConfigTemplate not implemented")
}
func (UnimplementedVipServer) DeleteVipLevelConfigTemplate(context.Context, *DeleteVipLevelConfigTemplateRequest) (*DeleteVipLevelConfigTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVipLevelConfigTemplate not implemented")
}
func (UnimplementedVipServer) GetOperatorVipSettings(context.Context, *GetOperatorVipSettingsRequest) (*GetOperatorVipSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorVipSettings not implemented")
}
func (UnimplementedVipServer) GetUserVipLevel(context.Context, *GetUserVipLevelRequest) (*GetUserVipLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserVipLevel not implemented")
}
func (UnimplementedVipServer) UpdateVipRewardSlider(context.Context, *UpdateVipRewardSliderRequest) (*UpdateVipRewardSliderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVipRewardSlider not implemented")
}
func (UnimplementedVipServer) GetClaimableVipRewards(context.Context, *GetClaimableVipRewardsRequest) (*GetClaimableVipRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClaimableVipRewards not implemented")
}
func (UnimplementedVipServer) ClaimVipReward(context.Context, *ClaimVipRewardRequest) (*ClaimVipRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimVipReward not implemented")
}
func (UnimplementedVipServer) mustEmbedUnimplementedVipServer() {}
func (UnimplementedVipServer) testEmbeddedByValue()             {}

// UnsafeVipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VipServer will
// result in compilation errors.
type UnsafeVipServer interface {
	mustEmbedUnimplementedVipServer()
}

func RegisterVipServer(s grpc.ServiceRegistrar, srv VipServer) {
	// If the following call pancis, it indicates UnimplementedVipServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Vip_ServiceDesc, srv)
}

func _Vip_GetVipSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetVipSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetVipSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetVipSetting(ctx, req.(*GetVipSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_UpdateVipSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVipSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).UpdateVipSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_UpdateVipSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).UpdateVipSetting(ctx, req.(*UpdateVipSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_ListVipLevelConfigTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVipLevelConfigTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).ListVipLevelConfigTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_ListVipLevelConfigTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).ListVipLevelConfigTemplates(ctx, req.(*ListVipLevelConfigTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetVipLevelConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipLevelConfigTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetVipLevelConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetVipLevelConfigTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetVipLevelConfigTemplate(ctx, req.(*GetVipLevelConfigTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_CreateVipLevelConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVipLevelConfigTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).CreateVipLevelConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_CreateVipLevelConfigTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).CreateVipLevelConfigTemplate(ctx, req.(*CreateVipLevelConfigTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_UpdateVipLevelConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVipLevelConfigTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).UpdateVipLevelConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_UpdateVipLevelConfigTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).UpdateVipLevelConfigTemplate(ctx, req.(*UpdateVipLevelConfigTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_DeleteVipLevelConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVipLevelConfigTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).DeleteVipLevelConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_DeleteVipLevelConfigTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).DeleteVipLevelConfigTemplate(ctx, req.(*DeleteVipLevelConfigTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetOperatorVipSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorVipSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetOperatorVipSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetOperatorVipSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetOperatorVipSettings(ctx, req.(*GetOperatorVipSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetUserVipLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserVipLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetUserVipLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetUserVipLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetUserVipLevel(ctx, req.(*GetUserVipLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_UpdateVipRewardSlider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVipRewardSliderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).UpdateVipRewardSlider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_UpdateVipRewardSlider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).UpdateVipRewardSlider(ctx, req.(*UpdateVipRewardSliderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetClaimableVipRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClaimableVipRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetClaimableVipRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetClaimableVipRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetClaimableVipRewards(ctx, req.(*GetClaimableVipRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_ClaimVipReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimVipRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).ClaimVipReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_ClaimVipReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).ClaimVipReward(ctx, req.(*ClaimVipRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vip_ServiceDesc is the grpc.ServiceDesc for Vip service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vip_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.vip.service.v1.Vip",
	HandlerType: (*VipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVipSetting",
			Handler:    _Vip_GetVipSetting_Handler,
		},
		{
			MethodName: "UpdateVipSetting",
			Handler:    _Vip_UpdateVipSetting_Handler,
		},
		{
			MethodName: "ListVipLevelConfigTemplates",
			Handler:    _Vip_ListVipLevelConfigTemplates_Handler,
		},
		{
			MethodName: "GetVipLevelConfigTemplate",
			Handler:    _Vip_GetVipLevelConfigTemplate_Handler,
		},
		{
			MethodName: "CreateVipLevelConfigTemplate",
			Handler:    _Vip_CreateVipLevelConfigTemplate_Handler,
		},
		{
			MethodName: "UpdateVipLevelConfigTemplate",
			Handler:    _Vip_UpdateVipLevelConfigTemplate_Handler,
		},
		{
			MethodName: "DeleteVipLevelConfigTemplate",
			Handler:    _Vip_DeleteVipLevelConfigTemplate_Handler,
		},
		{
			MethodName: "GetOperatorVipSettings",
			Handler:    _Vip_GetOperatorVipSettings_Handler,
		},
		{
			MethodName: "GetUserVipLevel",
			Handler:    _Vip_GetUserVipLevel_Handler,
		},
		{
			MethodName: "UpdateVipRewardSlider",
			Handler:    _Vip_UpdateVipRewardSlider_Handler,
		},
		{
			MethodName: "GetClaimableVipRewards",
			Handler:    _Vip_GetClaimableVipRewards_Handler,
		},
		{
			MethodName: "ClaimVipReward",
			Handler:    _Vip_ClaimVipReward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vip/service/v1/vip.proto",
}
