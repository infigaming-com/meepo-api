// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: vip/service/v1/vip.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Vip_ListVipConfigs_FullMethodName               = "/api.vip.service.v1.Vip/ListVipConfigs"
	Vip_GetVipConfig_FullMethodName                 = "/api.vip.service.v1.Vip/GetVipConfig"
	Vip_UpdateVipConfig_FullMethodName              = "/api.vip.service.v1.Vip/UpdateVipConfig"
	Vip_GetVipSetting_FullMethodName                = "/api.vip.service.v1.Vip/GetVipSetting"
	Vip_UpdateVipSetting_FullMethodName             = "/api.vip.service.v1.Vip/UpdateVipSetting"
	Vip_GetVipRewardExpiry_FullMethodName           = "/api.vip.service.v1.Vip/GetVipRewardExpiry"
	Vip_UpdateVipRewardExpiry_FullMethodName        = "/api.vip.service.v1.Vip/UpdateVipRewardExpiry"
	Vip_ListVipLevelConfigTemplates_FullMethodName  = "/api.vip.service.v1.Vip/ListVipLevelConfigTemplates"
	Vip_GetVipLevelConfigTemplate_FullMethodName    = "/api.vip.service.v1.Vip/GetVipLevelConfigTemplate"
	Vip_CreateVipLevelConfigTemplate_FullMethodName = "/api.vip.service.v1.Vip/CreateVipLevelConfigTemplate"
	Vip_UpdateVipLevelConfigTemplate_FullMethodName = "/api.vip.service.v1.Vip/UpdateVipLevelConfigTemplate"
	Vip_DeleteVipLevelConfigTemplate_FullMethodName = "/api.vip.service.v1.Vip/DeleteVipLevelConfigTemplate"
	Vip_ListVipMembers_FullMethodName               = "/api.vip.service.v1.Vip/ListVipMembers"
	Vip_GetVipMember_FullMethodName                 = "/api.vip.service.v1.Vip/GetVipMember"
	Vip_UpdateVipMember_FullMethodName              = "/api.vip.service.v1.Vip/UpdateVipMember"
	Vip_ListVipXpLedger_FullMethodName              = "/api.vip.service.v1.Vip/ListVipXpLedger"
	Vip_GetVipXpLedger_FullMethodName               = "/api.vip.service.v1.Vip/GetVipXpLedger"
	Vip_AddVipXpLedger_FullMethodName               = "/api.vip.service.v1.Vip/AddVipXpLedger"
	Vip_ListVipRewardLedger_FullMethodName          = "/api.vip.service.v1.Vip/ListVipRewardLedger"
	Vip_GetVipRewardLedger_FullMethodName           = "/api.vip.service.v1.Vip/GetVipRewardLedger"
	Vip_IssueVipReward_FullMethodName               = "/api.vip.service.v1.Vip/IssueVipReward"
	Vip_UpdateVipRewardStatus_FullMethodName        = "/api.vip.service.v1.Vip/UpdateVipRewardStatus"
	Vip_GetVipSettlementState_FullMethodName        = "/api.vip.service.v1.Vip/GetVipSettlementState"
	Vip_UpdateVipSettlementState_FullMethodName     = "/api.vip.service.v1.Vip/UpdateVipSettlementState"
	Vip_GetVipStatistics_FullMethodName             = "/api.vip.service.v1.Vip/GetVipStatistics"
	Vip_GetVipUserProgress_FullMethodName           = "/api.vip.service.v1.Vip/GetVipUserProgress"
	Vip_BatchUpdateVipLevels_FullMethodName         = "/api.vip.service.v1.Vip/BatchUpdateVipLevels"
	Vip_RecalculateVipLevels_FullMethodName         = "/api.vip.service.v1.Vip/RecalculateVipLevels"
	Vip_GetMyVipInfo_FullMethodName                 = "/api.vip.service.v1.Vip/GetMyVipInfo"
	Vip_GetVipLevels_FullMethodName                 = "/api.vip.service.v1.Vip/GetVipLevels"
	Vip_GetMyXpHistory_FullMethodName               = "/api.vip.service.v1.Vip/GetMyXpHistory"
	Vip_GetUpgradeProgress_FullMethodName           = "/api.vip.service.v1.Vip/GetUpgradeProgress"
	Vip_GetMyRewards_FullMethodName                 = "/api.vip.service.v1.Vip/GetMyRewards"
	Vip_ClaimReward_FullMethodName                  = "/api.vip.service.v1.Vip/ClaimReward"
	Vip_GetClaimableRewards_FullMethodName          = "/api.vip.service.v1.Vip/GetClaimableRewards"
	Vip_GetVipSettings_FullMethodName               = "/api.vip.service.v1.Vip/GetVipSettings"
	Vip_AddXp_FullMethodName                        = "/api.vip.service.v1.Vip/AddXp"
	Vip_CheckLevelUp_FullMethodName                 = "/api.vip.service.v1.Vip/CheckLevelUp"
	Vip_IssueRewards_FullMethodName                 = "/api.vip.service.v1.Vip/IssueRewards"
)

// VipClient is the client API for Vip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VIP系统服务 - 实现backoffice的所有VIP接口
type VipClient interface {
	// VIP配置开关管理
	ListVipConfigs(ctx context.Context, in *ListVipConfigsRequest, opts ...grpc.CallOption) (*ListVipConfigsResponse, error)
	GetVipConfig(ctx context.Context, in *GetVipConfigRequest, opts ...grpc.CallOption) (*GetVipConfigResponse, error)
	UpdateVipConfig(ctx context.Context, in *UpdateVipConfigRequest, opts ...grpc.CallOption) (*UpdateVipConfigResponse, error)
	// VIP设置管理
	GetVipSetting(ctx context.Context, in *GetVipSettingRequest, opts ...grpc.CallOption) (*GetVipSettingResponse, error)
	UpdateVipSetting(ctx context.Context, in *UpdateVipSettingRequest, opts ...grpc.CallOption) (*UpdateVipSettingResponse, error)
	// 奖励过期配置
	GetVipRewardExpiry(ctx context.Context, in *GetVipRewardExpiryRequest, opts ...grpc.CallOption) (*GetVipRewardExpiryResponse, error)
	UpdateVipRewardExpiry(ctx context.Context, in *UpdateVipRewardExpiryRequest, opts ...grpc.CallOption) (*UpdateVipRewardExpiryResponse, error)
	ListVipLevelConfigTemplates(ctx context.Context, in *ListVipLevelConfigTemplatesRequest, opts ...grpc.CallOption) (*ListVipLevelConfigTemplatesResponse, error)
	GetVipLevelConfigTemplate(ctx context.Context, in *GetVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*GetVipLevelConfigTemplateResponse, error)
	CreateVipLevelConfigTemplate(ctx context.Context, in *CreateVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*CreateVipLevelConfigTemplateResponse, error)
	UpdateVipLevelConfigTemplate(ctx context.Context, in *UpdateVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*UpdateVipLevelConfigTemplateResponse, error)
	DeleteVipLevelConfigTemplate(ctx context.Context, in *DeleteVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*DeleteVipLevelConfigTemplateResponse, error)
	ListVipMembers(ctx context.Context, in *ListVipMembersRequest, opts ...grpc.CallOption) (*ListVipMembersResponse, error)
	GetVipMember(ctx context.Context, in *GetVipMemberRequest, opts ...grpc.CallOption) (*GetVipMemberResponse, error)
	UpdateVipMember(ctx context.Context, in *UpdateVipMemberRequest, opts ...grpc.CallOption) (*UpdateVipMemberResponse, error)
	ListVipXpLedger(ctx context.Context, in *ListVipXpLedgerRequest, opts ...grpc.CallOption) (*ListVipXpLedgerResponse, error)
	GetVipXpLedger(ctx context.Context, in *GetVipXpLedgerRequest, opts ...grpc.CallOption) (*GetVipXpLedgerResponse, error)
	AddVipXpLedger(ctx context.Context, in *AddVipXpLedgerRequest, opts ...grpc.CallOption) (*AddVipXpLedgerResponse, error)
	ListVipRewardLedger(ctx context.Context, in *ListVipRewardLedgerRequest, opts ...grpc.CallOption) (*ListVipRewardLedgerResponse, error)
	GetVipRewardLedger(ctx context.Context, in *GetVipRewardLedgerRequest, opts ...grpc.CallOption) (*GetVipRewardLedgerResponse, error)
	IssueVipReward(ctx context.Context, in *IssueVipRewardRequest, opts ...grpc.CallOption) (*IssueVipRewardResponse, error)
	UpdateVipRewardStatus(ctx context.Context, in *UpdateVipRewardStatusRequest, opts ...grpc.CallOption) (*UpdateVipRewardStatusResponse, error)
	GetVipSettlementState(ctx context.Context, in *GetVipSettlementStateRequest, opts ...grpc.CallOption) (*GetVipSettlementStateResponse, error)
	UpdateVipSettlementState(ctx context.Context, in *UpdateVipSettlementStateRequest, opts ...grpc.CallOption) (*UpdateVipSettlementStateResponse, error)
	GetVipStatistics(ctx context.Context, in *GetVipStatisticsRequest, opts ...grpc.CallOption) (*GetVipStatisticsResponse, error)
	GetVipUserProgress(ctx context.Context, in *GetVipUserProgressRequest, opts ...grpc.CallOption) (*GetVipUserProgressResponse, error)
	BatchUpdateVipLevels(ctx context.Context, in *BatchUpdateVipLevelsRequest, opts ...grpc.CallOption) (*BatchUpdateVipLevelsResponse, error)
	RecalculateVipLevels(ctx context.Context, in *RecalculateVipLevelsRequest, opts ...grpc.CallOption) (*RecalculateVipLevelsResponse, error)
	// 获取当前用户的VIP信息
	GetMyVipInfo(ctx context.Context, in *GetMyVipInfoRequest, opts ...grpc.CallOption) (*GetMyVipInfoResponse, error)
	// 获取VIP等级列表和奖励信息
	GetVipLevels(ctx context.Context, in *GetVipLevelsRequest, opts ...grpc.CallOption) (*GetVipLevelsResponse, error)
	// 获取XP历史记录
	GetMyXpHistory(ctx context.Context, in *GetMyXpHistoryRequest, opts ...grpc.CallOption) (*GetMyXpHistoryResponse, error)
	// 获取升级进度
	GetUpgradeProgress(ctx context.Context, in *GetUpgradeProgressRequest, opts ...grpc.CallOption) (*GetUpgradeProgressResponse, error)
	// 获取我的奖励列表
	GetMyRewards(ctx context.Context, in *GetMyRewardsRequest, opts ...grpc.CallOption) (*GetMyRewardsResponse, error)
	// 领取奖励
	ClaimReward(ctx context.Context, in *ClaimRewardRequest, opts ...grpc.CallOption) (*ClaimRewardResponse, error)
	// 获取可领取的奖励
	GetClaimableRewards(ctx context.Context, in *GetClaimableRewardsRequest, opts ...grpc.CallOption) (*GetClaimableRewardsResponse, error)
	// 获取VIP系统设置（用户可见部分）
	GetVipSettings(ctx context.Context, in *GetVipSettingsRequest, opts ...grpc.CallOption) (*GetVipSettingsResponse, error)
	// 添加XP记录（供游戏/支付服务调用）
	AddXp(ctx context.Context, in *AddXpRequest, opts ...grpc.CallOption) (*AddXpResponse, error)
	// 触发等级检查（供游戏/支付服务调用）
	CheckLevelUp(ctx context.Context, in *CheckLevelUpRequest, opts ...grpc.CallOption) (*CheckLevelUpResponse, error)
	// 发放奖励（供调度服务调用）
	IssueRewards(ctx context.Context, in *IssueRewardsRequest, opts ...grpc.CallOption) (*IssueRewardsResponse, error)
}

type vipClient struct {
	cc grpc.ClientConnInterface
}

func NewVipClient(cc grpc.ClientConnInterface) VipClient {
	return &vipClient{cc}
}

func (c *vipClient) ListVipConfigs(ctx context.Context, in *ListVipConfigsRequest, opts ...grpc.CallOption) (*ListVipConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVipConfigsResponse)
	err := c.cc.Invoke(ctx, Vip_ListVipConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetVipConfig(ctx context.Context, in *GetVipConfigRequest, opts ...grpc.CallOption) (*GetVipConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipConfigResponse)
	err := c.cc.Invoke(ctx, Vip_GetVipConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) UpdateVipConfig(ctx context.Context, in *UpdateVipConfigRequest, opts ...grpc.CallOption) (*UpdateVipConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVipConfigResponse)
	err := c.cc.Invoke(ctx, Vip_UpdateVipConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetVipSetting(ctx context.Context, in *GetVipSettingRequest, opts ...grpc.CallOption) (*GetVipSettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipSettingResponse)
	err := c.cc.Invoke(ctx, Vip_GetVipSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) UpdateVipSetting(ctx context.Context, in *UpdateVipSettingRequest, opts ...grpc.CallOption) (*UpdateVipSettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVipSettingResponse)
	err := c.cc.Invoke(ctx, Vip_UpdateVipSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetVipRewardExpiry(ctx context.Context, in *GetVipRewardExpiryRequest, opts ...grpc.CallOption) (*GetVipRewardExpiryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipRewardExpiryResponse)
	err := c.cc.Invoke(ctx, Vip_GetVipRewardExpiry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) UpdateVipRewardExpiry(ctx context.Context, in *UpdateVipRewardExpiryRequest, opts ...grpc.CallOption) (*UpdateVipRewardExpiryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVipRewardExpiryResponse)
	err := c.cc.Invoke(ctx, Vip_UpdateVipRewardExpiry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) ListVipLevelConfigTemplates(ctx context.Context, in *ListVipLevelConfigTemplatesRequest, opts ...grpc.CallOption) (*ListVipLevelConfigTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVipLevelConfigTemplatesResponse)
	err := c.cc.Invoke(ctx, Vip_ListVipLevelConfigTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetVipLevelConfigTemplate(ctx context.Context, in *GetVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*GetVipLevelConfigTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipLevelConfigTemplateResponse)
	err := c.cc.Invoke(ctx, Vip_GetVipLevelConfigTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) CreateVipLevelConfigTemplate(ctx context.Context, in *CreateVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*CreateVipLevelConfigTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVipLevelConfigTemplateResponse)
	err := c.cc.Invoke(ctx, Vip_CreateVipLevelConfigTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) UpdateVipLevelConfigTemplate(ctx context.Context, in *UpdateVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*UpdateVipLevelConfigTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVipLevelConfigTemplateResponse)
	err := c.cc.Invoke(ctx, Vip_UpdateVipLevelConfigTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) DeleteVipLevelConfigTemplate(ctx context.Context, in *DeleteVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*DeleteVipLevelConfigTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVipLevelConfigTemplateResponse)
	err := c.cc.Invoke(ctx, Vip_DeleteVipLevelConfigTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) ListVipMembers(ctx context.Context, in *ListVipMembersRequest, opts ...grpc.CallOption) (*ListVipMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVipMembersResponse)
	err := c.cc.Invoke(ctx, Vip_ListVipMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetVipMember(ctx context.Context, in *GetVipMemberRequest, opts ...grpc.CallOption) (*GetVipMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipMemberResponse)
	err := c.cc.Invoke(ctx, Vip_GetVipMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) UpdateVipMember(ctx context.Context, in *UpdateVipMemberRequest, opts ...grpc.CallOption) (*UpdateVipMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVipMemberResponse)
	err := c.cc.Invoke(ctx, Vip_UpdateVipMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) ListVipXpLedger(ctx context.Context, in *ListVipXpLedgerRequest, opts ...grpc.CallOption) (*ListVipXpLedgerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVipXpLedgerResponse)
	err := c.cc.Invoke(ctx, Vip_ListVipXpLedger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetVipXpLedger(ctx context.Context, in *GetVipXpLedgerRequest, opts ...grpc.CallOption) (*GetVipXpLedgerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipXpLedgerResponse)
	err := c.cc.Invoke(ctx, Vip_GetVipXpLedger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) AddVipXpLedger(ctx context.Context, in *AddVipXpLedgerRequest, opts ...grpc.CallOption) (*AddVipXpLedgerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddVipXpLedgerResponse)
	err := c.cc.Invoke(ctx, Vip_AddVipXpLedger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) ListVipRewardLedger(ctx context.Context, in *ListVipRewardLedgerRequest, opts ...grpc.CallOption) (*ListVipRewardLedgerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVipRewardLedgerResponse)
	err := c.cc.Invoke(ctx, Vip_ListVipRewardLedger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetVipRewardLedger(ctx context.Context, in *GetVipRewardLedgerRequest, opts ...grpc.CallOption) (*GetVipRewardLedgerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipRewardLedgerResponse)
	err := c.cc.Invoke(ctx, Vip_GetVipRewardLedger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) IssueVipReward(ctx context.Context, in *IssueVipRewardRequest, opts ...grpc.CallOption) (*IssueVipRewardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IssueVipRewardResponse)
	err := c.cc.Invoke(ctx, Vip_IssueVipReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) UpdateVipRewardStatus(ctx context.Context, in *UpdateVipRewardStatusRequest, opts ...grpc.CallOption) (*UpdateVipRewardStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVipRewardStatusResponse)
	err := c.cc.Invoke(ctx, Vip_UpdateVipRewardStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetVipSettlementState(ctx context.Context, in *GetVipSettlementStateRequest, opts ...grpc.CallOption) (*GetVipSettlementStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipSettlementStateResponse)
	err := c.cc.Invoke(ctx, Vip_GetVipSettlementState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) UpdateVipSettlementState(ctx context.Context, in *UpdateVipSettlementStateRequest, opts ...grpc.CallOption) (*UpdateVipSettlementStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVipSettlementStateResponse)
	err := c.cc.Invoke(ctx, Vip_UpdateVipSettlementState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetVipStatistics(ctx context.Context, in *GetVipStatisticsRequest, opts ...grpc.CallOption) (*GetVipStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipStatisticsResponse)
	err := c.cc.Invoke(ctx, Vip_GetVipStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetVipUserProgress(ctx context.Context, in *GetVipUserProgressRequest, opts ...grpc.CallOption) (*GetVipUserProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipUserProgressResponse)
	err := c.cc.Invoke(ctx, Vip_GetVipUserProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) BatchUpdateVipLevels(ctx context.Context, in *BatchUpdateVipLevelsRequest, opts ...grpc.CallOption) (*BatchUpdateVipLevelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchUpdateVipLevelsResponse)
	err := c.cc.Invoke(ctx, Vip_BatchUpdateVipLevels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) RecalculateVipLevels(ctx context.Context, in *RecalculateVipLevelsRequest, opts ...grpc.CallOption) (*RecalculateVipLevelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecalculateVipLevelsResponse)
	err := c.cc.Invoke(ctx, Vip_RecalculateVipLevels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetMyVipInfo(ctx context.Context, in *GetMyVipInfoRequest, opts ...grpc.CallOption) (*GetMyVipInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyVipInfoResponse)
	err := c.cc.Invoke(ctx, Vip_GetMyVipInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetVipLevels(ctx context.Context, in *GetVipLevelsRequest, opts ...grpc.CallOption) (*GetVipLevelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipLevelsResponse)
	err := c.cc.Invoke(ctx, Vip_GetVipLevels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetMyXpHistory(ctx context.Context, in *GetMyXpHistoryRequest, opts ...grpc.CallOption) (*GetMyXpHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyXpHistoryResponse)
	err := c.cc.Invoke(ctx, Vip_GetMyXpHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetUpgradeProgress(ctx context.Context, in *GetUpgradeProgressRequest, opts ...grpc.CallOption) (*GetUpgradeProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUpgradeProgressResponse)
	err := c.cc.Invoke(ctx, Vip_GetUpgradeProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetMyRewards(ctx context.Context, in *GetMyRewardsRequest, opts ...grpc.CallOption) (*GetMyRewardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyRewardsResponse)
	err := c.cc.Invoke(ctx, Vip_GetMyRewards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) ClaimReward(ctx context.Context, in *ClaimRewardRequest, opts ...grpc.CallOption) (*ClaimRewardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClaimRewardResponse)
	err := c.cc.Invoke(ctx, Vip_ClaimReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetClaimableRewards(ctx context.Context, in *GetClaimableRewardsRequest, opts ...grpc.CallOption) (*GetClaimableRewardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClaimableRewardsResponse)
	err := c.cc.Invoke(ctx, Vip_GetClaimableRewards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) GetVipSettings(ctx context.Context, in *GetVipSettingsRequest, opts ...grpc.CallOption) (*GetVipSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipSettingsResponse)
	err := c.cc.Invoke(ctx, Vip_GetVipSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) AddXp(ctx context.Context, in *AddXpRequest, opts ...grpc.CallOption) (*AddXpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddXpResponse)
	err := c.cc.Invoke(ctx, Vip_AddXp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) CheckLevelUp(ctx context.Context, in *CheckLevelUpRequest, opts ...grpc.CallOption) (*CheckLevelUpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckLevelUpResponse)
	err := c.cc.Invoke(ctx, Vip_CheckLevelUp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) IssueRewards(ctx context.Context, in *IssueRewardsRequest, opts ...grpc.CallOption) (*IssueRewardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IssueRewardsResponse)
	err := c.cc.Invoke(ctx, Vip_IssueRewards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VipServer is the server API for Vip service.
// All implementations must embed UnimplementedVipServer
// for forward compatibility.
//
// VIP系统服务 - 实现backoffice的所有VIP接口
type VipServer interface {
	// VIP配置开关管理
	ListVipConfigs(context.Context, *ListVipConfigsRequest) (*ListVipConfigsResponse, error)
	GetVipConfig(context.Context, *GetVipConfigRequest) (*GetVipConfigResponse, error)
	UpdateVipConfig(context.Context, *UpdateVipConfigRequest) (*UpdateVipConfigResponse, error)
	// VIP设置管理
	GetVipSetting(context.Context, *GetVipSettingRequest) (*GetVipSettingResponse, error)
	UpdateVipSetting(context.Context, *UpdateVipSettingRequest) (*UpdateVipSettingResponse, error)
	// 奖励过期配置
	GetVipRewardExpiry(context.Context, *GetVipRewardExpiryRequest) (*GetVipRewardExpiryResponse, error)
	UpdateVipRewardExpiry(context.Context, *UpdateVipRewardExpiryRequest) (*UpdateVipRewardExpiryResponse, error)
	ListVipLevelConfigTemplates(context.Context, *ListVipLevelConfigTemplatesRequest) (*ListVipLevelConfigTemplatesResponse, error)
	GetVipLevelConfigTemplate(context.Context, *GetVipLevelConfigTemplateRequest) (*GetVipLevelConfigTemplateResponse, error)
	CreateVipLevelConfigTemplate(context.Context, *CreateVipLevelConfigTemplateRequest) (*CreateVipLevelConfigTemplateResponse, error)
	UpdateVipLevelConfigTemplate(context.Context, *UpdateVipLevelConfigTemplateRequest) (*UpdateVipLevelConfigTemplateResponse, error)
	DeleteVipLevelConfigTemplate(context.Context, *DeleteVipLevelConfigTemplateRequest) (*DeleteVipLevelConfigTemplateResponse, error)
	ListVipMembers(context.Context, *ListVipMembersRequest) (*ListVipMembersResponse, error)
	GetVipMember(context.Context, *GetVipMemberRequest) (*GetVipMemberResponse, error)
	UpdateVipMember(context.Context, *UpdateVipMemberRequest) (*UpdateVipMemberResponse, error)
	ListVipXpLedger(context.Context, *ListVipXpLedgerRequest) (*ListVipXpLedgerResponse, error)
	GetVipXpLedger(context.Context, *GetVipXpLedgerRequest) (*GetVipXpLedgerResponse, error)
	AddVipXpLedger(context.Context, *AddVipXpLedgerRequest) (*AddVipXpLedgerResponse, error)
	ListVipRewardLedger(context.Context, *ListVipRewardLedgerRequest) (*ListVipRewardLedgerResponse, error)
	GetVipRewardLedger(context.Context, *GetVipRewardLedgerRequest) (*GetVipRewardLedgerResponse, error)
	IssueVipReward(context.Context, *IssueVipRewardRequest) (*IssueVipRewardResponse, error)
	UpdateVipRewardStatus(context.Context, *UpdateVipRewardStatusRequest) (*UpdateVipRewardStatusResponse, error)
	GetVipSettlementState(context.Context, *GetVipSettlementStateRequest) (*GetVipSettlementStateResponse, error)
	UpdateVipSettlementState(context.Context, *UpdateVipSettlementStateRequest) (*UpdateVipSettlementStateResponse, error)
	GetVipStatistics(context.Context, *GetVipStatisticsRequest) (*GetVipStatisticsResponse, error)
	GetVipUserProgress(context.Context, *GetVipUserProgressRequest) (*GetVipUserProgressResponse, error)
	BatchUpdateVipLevels(context.Context, *BatchUpdateVipLevelsRequest) (*BatchUpdateVipLevelsResponse, error)
	RecalculateVipLevels(context.Context, *RecalculateVipLevelsRequest) (*RecalculateVipLevelsResponse, error)
	// 获取当前用户的VIP信息
	GetMyVipInfo(context.Context, *GetMyVipInfoRequest) (*GetMyVipInfoResponse, error)
	// 获取VIP等级列表和奖励信息
	GetVipLevels(context.Context, *GetVipLevelsRequest) (*GetVipLevelsResponse, error)
	// 获取XP历史记录
	GetMyXpHistory(context.Context, *GetMyXpHistoryRequest) (*GetMyXpHistoryResponse, error)
	// 获取升级进度
	GetUpgradeProgress(context.Context, *GetUpgradeProgressRequest) (*GetUpgradeProgressResponse, error)
	// 获取我的奖励列表
	GetMyRewards(context.Context, *GetMyRewardsRequest) (*GetMyRewardsResponse, error)
	// 领取奖励
	ClaimReward(context.Context, *ClaimRewardRequest) (*ClaimRewardResponse, error)
	// 获取可领取的奖励
	GetClaimableRewards(context.Context, *GetClaimableRewardsRequest) (*GetClaimableRewardsResponse, error)
	// 获取VIP系统设置（用户可见部分）
	GetVipSettings(context.Context, *GetVipSettingsRequest) (*GetVipSettingsResponse, error)
	// 添加XP记录（供游戏/支付服务调用）
	AddXp(context.Context, *AddXpRequest) (*AddXpResponse, error)
	// 触发等级检查（供游戏/支付服务调用）
	CheckLevelUp(context.Context, *CheckLevelUpRequest) (*CheckLevelUpResponse, error)
	// 发放奖励（供调度服务调用）
	IssueRewards(context.Context, *IssueRewardsRequest) (*IssueRewardsResponse, error)
	mustEmbedUnimplementedVipServer()
}

// UnimplementedVipServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVipServer struct{}

func (UnimplementedVipServer) ListVipConfigs(context.Context, *ListVipConfigsRequest) (*ListVipConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVipConfigs not implemented")
}
func (UnimplementedVipServer) GetVipConfig(context.Context, *GetVipConfigRequest) (*GetVipConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipConfig not implemented")
}
func (UnimplementedVipServer) UpdateVipConfig(context.Context, *UpdateVipConfigRequest) (*UpdateVipConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVipConfig not implemented")
}
func (UnimplementedVipServer) GetVipSetting(context.Context, *GetVipSettingRequest) (*GetVipSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipSetting not implemented")
}
func (UnimplementedVipServer) UpdateVipSetting(context.Context, *UpdateVipSettingRequest) (*UpdateVipSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVipSetting not implemented")
}
func (UnimplementedVipServer) GetVipRewardExpiry(context.Context, *GetVipRewardExpiryRequest) (*GetVipRewardExpiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipRewardExpiry not implemented")
}
func (UnimplementedVipServer) UpdateVipRewardExpiry(context.Context, *UpdateVipRewardExpiryRequest) (*UpdateVipRewardExpiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVipRewardExpiry not implemented")
}
func (UnimplementedVipServer) ListVipLevelConfigTemplates(context.Context, *ListVipLevelConfigTemplatesRequest) (*ListVipLevelConfigTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVipLevelConfigTemplates not implemented")
}
func (UnimplementedVipServer) GetVipLevelConfigTemplate(context.Context, *GetVipLevelConfigTemplateRequest) (*GetVipLevelConfigTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipLevelConfigTemplate not implemented")
}
func (UnimplementedVipServer) CreateVipLevelConfigTemplate(context.Context, *CreateVipLevelConfigTemplateRequest) (*CreateVipLevelConfigTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVipLevelConfigTemplate not implemented")
}
func (UnimplementedVipServer) UpdateVipLevelConfigTemplate(context.Context, *UpdateVipLevelConfigTemplateRequest) (*UpdateVipLevelConfigTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVipLevelConfigTemplate not implemented")
}
func (UnimplementedVipServer) DeleteVipLevelConfigTemplate(context.Context, *DeleteVipLevelConfigTemplateRequest) (*DeleteVipLevelConfigTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVipLevelConfigTemplate not implemented")
}
func (UnimplementedVipServer) ListVipMembers(context.Context, *ListVipMembersRequest) (*ListVipMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVipMembers not implemented")
}
func (UnimplementedVipServer) GetVipMember(context.Context, *GetVipMemberRequest) (*GetVipMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipMember not implemented")
}
func (UnimplementedVipServer) UpdateVipMember(context.Context, *UpdateVipMemberRequest) (*UpdateVipMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVipMember not implemented")
}
func (UnimplementedVipServer) ListVipXpLedger(context.Context, *ListVipXpLedgerRequest) (*ListVipXpLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVipXpLedger not implemented")
}
func (UnimplementedVipServer) GetVipXpLedger(context.Context, *GetVipXpLedgerRequest) (*GetVipXpLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipXpLedger not implemented")
}
func (UnimplementedVipServer) AddVipXpLedger(context.Context, *AddVipXpLedgerRequest) (*AddVipXpLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVipXpLedger not implemented")
}
func (UnimplementedVipServer) ListVipRewardLedger(context.Context, *ListVipRewardLedgerRequest) (*ListVipRewardLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVipRewardLedger not implemented")
}
func (UnimplementedVipServer) GetVipRewardLedger(context.Context, *GetVipRewardLedgerRequest) (*GetVipRewardLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipRewardLedger not implemented")
}
func (UnimplementedVipServer) IssueVipReward(context.Context, *IssueVipRewardRequest) (*IssueVipRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueVipReward not implemented")
}
func (UnimplementedVipServer) UpdateVipRewardStatus(context.Context, *UpdateVipRewardStatusRequest) (*UpdateVipRewardStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVipRewardStatus not implemented")
}
func (UnimplementedVipServer) GetVipSettlementState(context.Context, *GetVipSettlementStateRequest) (*GetVipSettlementStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipSettlementState not implemented")
}
func (UnimplementedVipServer) UpdateVipSettlementState(context.Context, *UpdateVipSettlementStateRequest) (*UpdateVipSettlementStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVipSettlementState not implemented")
}
func (UnimplementedVipServer) GetVipStatistics(context.Context, *GetVipStatisticsRequest) (*GetVipStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipStatistics not implemented")
}
func (UnimplementedVipServer) GetVipUserProgress(context.Context, *GetVipUserProgressRequest) (*GetVipUserProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipUserProgress not implemented")
}
func (UnimplementedVipServer) BatchUpdateVipLevels(context.Context, *BatchUpdateVipLevelsRequest) (*BatchUpdateVipLevelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateVipLevels not implemented")
}
func (UnimplementedVipServer) RecalculateVipLevels(context.Context, *RecalculateVipLevelsRequest) (*RecalculateVipLevelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecalculateVipLevels not implemented")
}
func (UnimplementedVipServer) GetMyVipInfo(context.Context, *GetMyVipInfoRequest) (*GetMyVipInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyVipInfo not implemented")
}
func (UnimplementedVipServer) GetVipLevels(context.Context, *GetVipLevelsRequest) (*GetVipLevelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipLevels not implemented")
}
func (UnimplementedVipServer) GetMyXpHistory(context.Context, *GetMyXpHistoryRequest) (*GetMyXpHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyXpHistory not implemented")
}
func (UnimplementedVipServer) GetUpgradeProgress(context.Context, *GetUpgradeProgressRequest) (*GetUpgradeProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpgradeProgress not implemented")
}
func (UnimplementedVipServer) GetMyRewards(context.Context, *GetMyRewardsRequest) (*GetMyRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyRewards not implemented")
}
func (UnimplementedVipServer) ClaimReward(context.Context, *ClaimRewardRequest) (*ClaimRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimReward not implemented")
}
func (UnimplementedVipServer) GetClaimableRewards(context.Context, *GetClaimableRewardsRequest) (*GetClaimableRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClaimableRewards not implemented")
}
func (UnimplementedVipServer) GetVipSettings(context.Context, *GetVipSettingsRequest) (*GetVipSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipSettings not implemented")
}
func (UnimplementedVipServer) AddXp(context.Context, *AddXpRequest) (*AddXpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddXp not implemented")
}
func (UnimplementedVipServer) CheckLevelUp(context.Context, *CheckLevelUpRequest) (*CheckLevelUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLevelUp not implemented")
}
func (UnimplementedVipServer) IssueRewards(context.Context, *IssueRewardsRequest) (*IssueRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueRewards not implemented")
}
func (UnimplementedVipServer) mustEmbedUnimplementedVipServer() {}
func (UnimplementedVipServer) testEmbeddedByValue()             {}

// UnsafeVipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VipServer will
// result in compilation errors.
type UnsafeVipServer interface {
	mustEmbedUnimplementedVipServer()
}

func RegisterVipServer(s grpc.ServiceRegistrar, srv VipServer) {
	// If the following call pancis, it indicates UnimplementedVipServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Vip_ServiceDesc, srv)
}

func _Vip_ListVipConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVipConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).ListVipConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_ListVipConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).ListVipConfigs(ctx, req.(*ListVipConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetVipConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetVipConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetVipConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetVipConfig(ctx, req.(*GetVipConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_UpdateVipConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVipConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).UpdateVipConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_UpdateVipConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).UpdateVipConfig(ctx, req.(*UpdateVipConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetVipSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetVipSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetVipSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetVipSetting(ctx, req.(*GetVipSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_UpdateVipSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVipSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).UpdateVipSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_UpdateVipSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).UpdateVipSetting(ctx, req.(*UpdateVipSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetVipRewardExpiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipRewardExpiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetVipRewardExpiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetVipRewardExpiry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetVipRewardExpiry(ctx, req.(*GetVipRewardExpiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_UpdateVipRewardExpiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVipRewardExpiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).UpdateVipRewardExpiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_UpdateVipRewardExpiry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).UpdateVipRewardExpiry(ctx, req.(*UpdateVipRewardExpiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_ListVipLevelConfigTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVipLevelConfigTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).ListVipLevelConfigTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_ListVipLevelConfigTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).ListVipLevelConfigTemplates(ctx, req.(*ListVipLevelConfigTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetVipLevelConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipLevelConfigTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetVipLevelConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetVipLevelConfigTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetVipLevelConfigTemplate(ctx, req.(*GetVipLevelConfigTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_CreateVipLevelConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVipLevelConfigTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).CreateVipLevelConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_CreateVipLevelConfigTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).CreateVipLevelConfigTemplate(ctx, req.(*CreateVipLevelConfigTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_UpdateVipLevelConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVipLevelConfigTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).UpdateVipLevelConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_UpdateVipLevelConfigTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).UpdateVipLevelConfigTemplate(ctx, req.(*UpdateVipLevelConfigTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_DeleteVipLevelConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVipLevelConfigTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).DeleteVipLevelConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_DeleteVipLevelConfigTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).DeleteVipLevelConfigTemplate(ctx, req.(*DeleteVipLevelConfigTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_ListVipMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVipMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).ListVipMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_ListVipMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).ListVipMembers(ctx, req.(*ListVipMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetVipMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetVipMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetVipMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetVipMember(ctx, req.(*GetVipMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_UpdateVipMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVipMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).UpdateVipMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_UpdateVipMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).UpdateVipMember(ctx, req.(*UpdateVipMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_ListVipXpLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVipXpLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).ListVipXpLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_ListVipXpLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).ListVipXpLedger(ctx, req.(*ListVipXpLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetVipXpLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipXpLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetVipXpLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetVipXpLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetVipXpLedger(ctx, req.(*GetVipXpLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_AddVipXpLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVipXpLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).AddVipXpLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_AddVipXpLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).AddVipXpLedger(ctx, req.(*AddVipXpLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_ListVipRewardLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVipRewardLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).ListVipRewardLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_ListVipRewardLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).ListVipRewardLedger(ctx, req.(*ListVipRewardLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetVipRewardLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipRewardLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetVipRewardLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetVipRewardLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetVipRewardLedger(ctx, req.(*GetVipRewardLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_IssueVipReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueVipRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).IssueVipReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_IssueVipReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).IssueVipReward(ctx, req.(*IssueVipRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_UpdateVipRewardStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVipRewardStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).UpdateVipRewardStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_UpdateVipRewardStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).UpdateVipRewardStatus(ctx, req.(*UpdateVipRewardStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetVipSettlementState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipSettlementStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetVipSettlementState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetVipSettlementState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetVipSettlementState(ctx, req.(*GetVipSettlementStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_UpdateVipSettlementState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVipSettlementStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).UpdateVipSettlementState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_UpdateVipSettlementState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).UpdateVipSettlementState(ctx, req.(*UpdateVipSettlementStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetVipStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetVipStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetVipStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetVipStatistics(ctx, req.(*GetVipStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetVipUserProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipUserProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetVipUserProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetVipUserProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetVipUserProgress(ctx, req.(*GetVipUserProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_BatchUpdateVipLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateVipLevelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).BatchUpdateVipLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_BatchUpdateVipLevels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).BatchUpdateVipLevels(ctx, req.(*BatchUpdateVipLevelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_RecalculateVipLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecalculateVipLevelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).RecalculateVipLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_RecalculateVipLevels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).RecalculateVipLevels(ctx, req.(*RecalculateVipLevelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetMyVipInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyVipInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetMyVipInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetMyVipInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetMyVipInfo(ctx, req.(*GetMyVipInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetVipLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipLevelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetVipLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetVipLevels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetVipLevels(ctx, req.(*GetVipLevelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetMyXpHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyXpHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetMyXpHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetMyXpHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetMyXpHistory(ctx, req.(*GetMyXpHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetUpgradeProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpgradeProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetUpgradeProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetUpgradeProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetUpgradeProgress(ctx, req.(*GetUpgradeProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetMyRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetMyRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetMyRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetMyRewards(ctx, req.(*GetMyRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_ClaimReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).ClaimReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_ClaimReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).ClaimReward(ctx, req.(*ClaimRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetClaimableRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClaimableRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetClaimableRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetClaimableRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetClaimableRewards(ctx, req.(*GetClaimableRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_GetVipSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).GetVipSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_GetVipSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).GetVipSettings(ctx, req.(*GetVipSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_AddXp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddXpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).AddXp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_AddXp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).AddXp(ctx, req.(*AddXpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_CheckLevelUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLevelUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).CheckLevelUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_CheckLevelUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).CheckLevelUp(ctx, req.(*CheckLevelUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_IssueRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).IssueRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vip_IssueRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).IssueRewards(ctx, req.(*IssueRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vip_ServiceDesc is the grpc.ServiceDesc for Vip service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vip_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.vip.service.v1.Vip",
	HandlerType: (*VipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVipConfigs",
			Handler:    _Vip_ListVipConfigs_Handler,
		},
		{
			MethodName: "GetVipConfig",
			Handler:    _Vip_GetVipConfig_Handler,
		},
		{
			MethodName: "UpdateVipConfig",
			Handler:    _Vip_UpdateVipConfig_Handler,
		},
		{
			MethodName: "GetVipSetting",
			Handler:    _Vip_GetVipSetting_Handler,
		},
		{
			MethodName: "UpdateVipSetting",
			Handler:    _Vip_UpdateVipSetting_Handler,
		},
		{
			MethodName: "GetVipRewardExpiry",
			Handler:    _Vip_GetVipRewardExpiry_Handler,
		},
		{
			MethodName: "UpdateVipRewardExpiry",
			Handler:    _Vip_UpdateVipRewardExpiry_Handler,
		},
		{
			MethodName: "ListVipLevelConfigTemplates",
			Handler:    _Vip_ListVipLevelConfigTemplates_Handler,
		},
		{
			MethodName: "GetVipLevelConfigTemplate",
			Handler:    _Vip_GetVipLevelConfigTemplate_Handler,
		},
		{
			MethodName: "CreateVipLevelConfigTemplate",
			Handler:    _Vip_CreateVipLevelConfigTemplate_Handler,
		},
		{
			MethodName: "UpdateVipLevelConfigTemplate",
			Handler:    _Vip_UpdateVipLevelConfigTemplate_Handler,
		},
		{
			MethodName: "DeleteVipLevelConfigTemplate",
			Handler:    _Vip_DeleteVipLevelConfigTemplate_Handler,
		},
		{
			MethodName: "ListVipMembers",
			Handler:    _Vip_ListVipMembers_Handler,
		},
		{
			MethodName: "GetVipMember",
			Handler:    _Vip_GetVipMember_Handler,
		},
		{
			MethodName: "UpdateVipMember",
			Handler:    _Vip_UpdateVipMember_Handler,
		},
		{
			MethodName: "ListVipXpLedger",
			Handler:    _Vip_ListVipXpLedger_Handler,
		},
		{
			MethodName: "GetVipXpLedger",
			Handler:    _Vip_GetVipXpLedger_Handler,
		},
		{
			MethodName: "AddVipXpLedger",
			Handler:    _Vip_AddVipXpLedger_Handler,
		},
		{
			MethodName: "ListVipRewardLedger",
			Handler:    _Vip_ListVipRewardLedger_Handler,
		},
		{
			MethodName: "GetVipRewardLedger",
			Handler:    _Vip_GetVipRewardLedger_Handler,
		},
		{
			MethodName: "IssueVipReward",
			Handler:    _Vip_IssueVipReward_Handler,
		},
		{
			MethodName: "UpdateVipRewardStatus",
			Handler:    _Vip_UpdateVipRewardStatus_Handler,
		},
		{
			MethodName: "GetVipSettlementState",
			Handler:    _Vip_GetVipSettlementState_Handler,
		},
		{
			MethodName: "UpdateVipSettlementState",
			Handler:    _Vip_UpdateVipSettlementState_Handler,
		},
		{
			MethodName: "GetVipStatistics",
			Handler:    _Vip_GetVipStatistics_Handler,
		},
		{
			MethodName: "GetVipUserProgress",
			Handler:    _Vip_GetVipUserProgress_Handler,
		},
		{
			MethodName: "BatchUpdateVipLevels",
			Handler:    _Vip_BatchUpdateVipLevels_Handler,
		},
		{
			MethodName: "RecalculateVipLevels",
			Handler:    _Vip_RecalculateVipLevels_Handler,
		},
		{
			MethodName: "GetMyVipInfo",
			Handler:    _Vip_GetMyVipInfo_Handler,
		},
		{
			MethodName: "GetVipLevels",
			Handler:    _Vip_GetVipLevels_Handler,
		},
		{
			MethodName: "GetMyXpHistory",
			Handler:    _Vip_GetMyXpHistory_Handler,
		},
		{
			MethodName: "GetUpgradeProgress",
			Handler:    _Vip_GetUpgradeProgress_Handler,
		},
		{
			MethodName: "GetMyRewards",
			Handler:    _Vip_GetMyRewards_Handler,
		},
		{
			MethodName: "ClaimReward",
			Handler:    _Vip_ClaimReward_Handler,
		},
		{
			MethodName: "GetClaimableRewards",
			Handler:    _Vip_GetClaimableRewards_Handler,
		},
		{
			MethodName: "GetVipSettings",
			Handler:    _Vip_GetVipSettings_Handler,
		},
		{
			MethodName: "AddXp",
			Handler:    _Vip_AddXp_Handler,
		},
		{
			MethodName: "CheckLevelUp",
			Handler:    _Vip_CheckLevelUp_Handler,
		},
		{
			MethodName: "IssueRewards",
			Handler:    _Vip_IssueRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vip/service/v1/vip.proto",
}
