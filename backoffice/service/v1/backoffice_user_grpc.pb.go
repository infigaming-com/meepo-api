// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Backoffice_User_ListUsers_FullMethodName             = "/api.backoffice.service.v1.Backoffice_User/ListUsers"
	Backoffice_User_GetUserOverview_FullMethodName       = "/api.backoffice.service.v1.Backoffice_User/GetUserOverview"
	Backoffice_User_GetUserProfile_FullMethodName        = "/api.backoffice.service.v1.Backoffice_User/GetUserProfile"
	Backoffice_User_AddOperatorUserTag_FullMethodName    = "/api.backoffice.service.v1.Backoffice_User/AddOperatorUserTag"
	Backoffice_User_DeleteOperatorUserTag_FullMethodName = "/api.backoffice.service.v1.Backoffice_User/DeleteOperatorUserTag"
	Backoffice_User_GetOperatorUserTags_FullMethodName   = "/api.backoffice.service.v1.Backoffice_User/GetOperatorUserTags"
	Backoffice_User_AddUserTag_FullMethodName            = "/api.backoffice.service.v1.Backoffice_User/AddUserTag"
	Backoffice_User_DeleteUserTag_FullMethodName         = "/api.backoffice.service.v1.Backoffice_User/DeleteUserTag"
	Backoffice_User_AddUserComment_FullMethodName        = "/api.backoffice.service.v1.Backoffice_User/AddUserComment"
)

// Backoffice_UserClient is the client API for Backoffice_User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Backoffice_UserClient interface {
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	GetUserOverview(ctx context.Context, in *GetUserOverviewRequest, opts ...grpc.CallOption) (*GetUserOverviewResponse, error)
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	AddOperatorUserTag(ctx context.Context, in *AddOperatorUserTagRequest, opts ...grpc.CallOption) (*AddOperatorUserTagResponse, error)
	DeleteOperatorUserTag(ctx context.Context, in *DeleteOperatorUserTagRequest, opts ...grpc.CallOption) (*DeleteOperatorUserTagResponse, error)
	GetOperatorUserTags(ctx context.Context, in *GetOperatorUserTagsRequest, opts ...grpc.CallOption) (*GetOperatorUserTagsResponse, error)
	AddUserTag(ctx context.Context, in *AddUserTagRequest, opts ...grpc.CallOption) (*AddUserTagResponse, error)
	DeleteUserTag(ctx context.Context, in *DeleteUserTagRequest, opts ...grpc.CallOption) (*DeleteUserTagResponse, error)
	AddUserComment(ctx context.Context, in *AddUserCommentRequest, opts ...grpc.CallOption) (*AddUserCommentResponse, error)
}

type backoffice_UserClient struct {
	cc grpc.ClientConnInterface
}

func NewBackoffice_UserClient(cc grpc.ClientConnInterface) Backoffice_UserClient {
	return &backoffice_UserClient{cc}
}

func (c *backoffice_UserClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, Backoffice_User_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_UserClient) GetUserOverview(ctx context.Context, in *GetUserOverviewRequest, opts ...grpc.CallOption) (*GetUserOverviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserOverviewResponse)
	err := c.cc.Invoke(ctx, Backoffice_User_GetUserOverview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_UserClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, Backoffice_User_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_UserClient) AddOperatorUserTag(ctx context.Context, in *AddOperatorUserTagRequest, opts ...grpc.CallOption) (*AddOperatorUserTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOperatorUserTagResponse)
	err := c.cc.Invoke(ctx, Backoffice_User_AddOperatorUserTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_UserClient) DeleteOperatorUserTag(ctx context.Context, in *DeleteOperatorUserTagRequest, opts ...grpc.CallOption) (*DeleteOperatorUserTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOperatorUserTagResponse)
	err := c.cc.Invoke(ctx, Backoffice_User_DeleteOperatorUserTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_UserClient) GetOperatorUserTags(ctx context.Context, in *GetOperatorUserTagsRequest, opts ...grpc.CallOption) (*GetOperatorUserTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperatorUserTagsResponse)
	err := c.cc.Invoke(ctx, Backoffice_User_GetOperatorUserTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_UserClient) AddUserTag(ctx context.Context, in *AddUserTagRequest, opts ...grpc.CallOption) (*AddUserTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserTagResponse)
	err := c.cc.Invoke(ctx, Backoffice_User_AddUserTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_UserClient) DeleteUserTag(ctx context.Context, in *DeleteUserTagRequest, opts ...grpc.CallOption) (*DeleteUserTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserTagResponse)
	err := c.cc.Invoke(ctx, Backoffice_User_DeleteUserTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_UserClient) AddUserComment(ctx context.Context, in *AddUserCommentRequest, opts ...grpc.CallOption) (*AddUserCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserCommentResponse)
	err := c.cc.Invoke(ctx, Backoffice_User_AddUserComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Backoffice_UserServer is the server API for Backoffice_User service.
// All implementations must embed UnimplementedBackoffice_UserServer
// for forward compatibility.
type Backoffice_UserServer interface {
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	GetUserOverview(context.Context, *GetUserOverviewRequest) (*GetUserOverviewResponse, error)
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	AddOperatorUserTag(context.Context, *AddOperatorUserTagRequest) (*AddOperatorUserTagResponse, error)
	DeleteOperatorUserTag(context.Context, *DeleteOperatorUserTagRequest) (*DeleteOperatorUserTagResponse, error)
	GetOperatorUserTags(context.Context, *GetOperatorUserTagsRequest) (*GetOperatorUserTagsResponse, error)
	AddUserTag(context.Context, *AddUserTagRequest) (*AddUserTagResponse, error)
	DeleteUserTag(context.Context, *DeleteUserTagRequest) (*DeleteUserTagResponse, error)
	AddUserComment(context.Context, *AddUserCommentRequest) (*AddUserCommentResponse, error)
	mustEmbedUnimplementedBackoffice_UserServer()
}

// UnimplementedBackoffice_UserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackoffice_UserServer struct{}

func (UnimplementedBackoffice_UserServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedBackoffice_UserServer) GetUserOverview(context.Context, *GetUserOverviewRequest) (*GetUserOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOverview not implemented")
}
func (UnimplementedBackoffice_UserServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedBackoffice_UserServer) AddOperatorUserTag(context.Context, *AddOperatorUserTagRequest) (*AddOperatorUserTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOperatorUserTag not implemented")
}
func (UnimplementedBackoffice_UserServer) DeleteOperatorUserTag(context.Context, *DeleteOperatorUserTagRequest) (*DeleteOperatorUserTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOperatorUserTag not implemented")
}
func (UnimplementedBackoffice_UserServer) GetOperatorUserTags(context.Context, *GetOperatorUserTagsRequest) (*GetOperatorUserTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorUserTags not implemented")
}
func (UnimplementedBackoffice_UserServer) AddUserTag(context.Context, *AddUserTagRequest) (*AddUserTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserTag not implemented")
}
func (UnimplementedBackoffice_UserServer) DeleteUserTag(context.Context, *DeleteUserTagRequest) (*DeleteUserTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserTag not implemented")
}
func (UnimplementedBackoffice_UserServer) AddUserComment(context.Context, *AddUserCommentRequest) (*AddUserCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserComment not implemented")
}
func (UnimplementedBackoffice_UserServer) mustEmbedUnimplementedBackoffice_UserServer() {}
func (UnimplementedBackoffice_UserServer) testEmbeddedByValue()                         {}

// UnsafeBackoffice_UserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Backoffice_UserServer will
// result in compilation errors.
type UnsafeBackoffice_UserServer interface {
	mustEmbedUnimplementedBackoffice_UserServer()
}

func RegisterBackoffice_UserServer(s grpc.ServiceRegistrar, srv Backoffice_UserServer) {
	// If the following call pancis, it indicates UnimplementedBackoffice_UserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Backoffice_User_ServiceDesc, srv)
}

func _Backoffice_User_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_UserServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_User_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_UserServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_User_GetUserOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_UserServer).GetUserOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_User_GetUserOverview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_UserServer).GetUserOverview(ctx, req.(*GetUserOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_User_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_UserServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_User_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_UserServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_User_AddOperatorUserTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOperatorUserTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_UserServer).AddOperatorUserTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_User_AddOperatorUserTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_UserServer).AddOperatorUserTag(ctx, req.(*AddOperatorUserTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_User_DeleteOperatorUserTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOperatorUserTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_UserServer).DeleteOperatorUserTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_User_DeleteOperatorUserTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_UserServer).DeleteOperatorUserTag(ctx, req.(*DeleteOperatorUserTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_User_GetOperatorUserTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorUserTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_UserServer).GetOperatorUserTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_User_GetOperatorUserTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_UserServer).GetOperatorUserTags(ctx, req.(*GetOperatorUserTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_User_AddUserTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_UserServer).AddUserTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_User_AddUserTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_UserServer).AddUserTag(ctx, req.(*AddUserTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_User_DeleteUserTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_UserServer).DeleteUserTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_User_DeleteUserTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_UserServer).DeleteUserTag(ctx, req.(*DeleteUserTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_User_AddUserComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_UserServer).AddUserComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_User_AddUserComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_UserServer).AddUserComment(ctx, req.(*AddUserCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Backoffice_User_ServiceDesc is the grpc.ServiceDesc for Backoffice_User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backoffice_User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.Backoffice_User",
	HandlerType: (*Backoffice_UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUsers",
			Handler:    _Backoffice_User_ListUsers_Handler,
		},
		{
			MethodName: "GetUserOverview",
			Handler:    _Backoffice_User_GetUserOverview_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _Backoffice_User_GetUserProfile_Handler,
		},
		{
			MethodName: "AddOperatorUserTag",
			Handler:    _Backoffice_User_AddOperatorUserTag_Handler,
		},
		{
			MethodName: "DeleteOperatorUserTag",
			Handler:    _Backoffice_User_DeleteOperatorUserTag_Handler,
		},
		{
			MethodName: "GetOperatorUserTags",
			Handler:    _Backoffice_User_GetOperatorUserTags_Handler,
		},
		{
			MethodName: "AddUserTag",
			Handler:    _Backoffice_User_AddUserTag_Handler,
		},
		{
			MethodName: "DeleteUserTag",
			Handler:    _Backoffice_User_DeleteUserTag_Handler,
		},
		{
			MethodName: "AddUserComment",
			Handler:    _Backoffice_User_AddUserComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_user.proto",
}
