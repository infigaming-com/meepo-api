// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_user.proto

package v1

import (
	context "context"
	v1 "github.com/infigaming-com/meepo-api/user/service/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackofficeUser_ListUsers_FullMethodName                           = "/api.backoffice.service.v1.BackofficeUser/ListUsers"
	BackofficeUser_GetUserOverview_FullMethodName                     = "/api.backoffice.service.v1.BackofficeUser/GetUserOverview"
	BackofficeUser_GetUserProfile_FullMethodName                      = "/api.backoffice.service.v1.BackofficeUser/GetUserProfile"
	BackofficeUser_AddUserComment_FullMethodName                      = "/api.backoffice.service.v1.BackofficeUser/AddUserComment"
	BackofficeUser_ListUserComments_FullMethodName                    = "/api.backoffice.service.v1.BackofficeUser/ListUserComments"
	BackofficeUser_SendEmailVerificationCode_FullMethodName           = "/api.backoffice.service.v1.BackofficeUser/SendEmailVerificationCode"
	BackofficeUser_UpdateUser_FullMethodName                          = "/api.backoffice.service.v1.BackofficeUser/UpdateUser"
	BackofficeUser_SetOperatorTagsConfig_FullMethodName               = "/api.backoffice.service.v1.BackofficeUser/SetOperatorTagsConfig"
	BackofficeUser_SetOperatorTags_FullMethodName                     = "/api.backoffice.service.v1.BackofficeUser/SetOperatorTags"
	BackofficeUser_GetOperatorTagsConfig_FullMethodName               = "/api.backoffice.service.v1.BackofficeUser/GetOperatorTagsConfig"
	BackofficeUser_GetOperatorTags_FullMethodName                     = "/api.backoffice.service.v1.BackofficeUser/GetOperatorTags"
	BackofficeUser_GetUserTags_FullMethodName                         = "/api.backoffice.service.v1.BackofficeUser/GetUserTags"
	BackofficeUser_SetUserTags_FullMethodName                         = "/api.backoffice.service.v1.BackofficeUser/SetUserTags"
	BackofficeUser_DeleteUserResponsibleGamblingConfig_FullMethodName = "/api.backoffice.service.v1.BackofficeUser/DeleteUserResponsibleGamblingConfig"
	BackofficeUser_GetUserResponsibleGamblingConfig_FullMethodName    = "/api.backoffice.service.v1.BackofficeUser/GetUserResponsibleGamblingConfig"
	BackofficeUser_UserIdentityAudit_FullMethodName                   = "/api.backoffice.service.v1.BackofficeUser/UserIdentityAudit"
	BackofficeUser_UserIdentityList_FullMethodName                    = "/api.backoffice.service.v1.BackofficeUser/UserIdentityList"
)

// BackofficeUserClient is the client API for BackofficeUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackofficeUserClient interface {
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	GetUserOverview(ctx context.Context, in *GetUserOverviewRequest, opts ...grpc.CallOption) (*GetUserOverviewResponse, error)
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*v1.GetUserProfileResponse, error)
	AddUserComment(ctx context.Context, in *AddUserCommentRequest, opts ...grpc.CallOption) (*AddUserCommentResponse, error)
	ListUserComments(ctx context.Context, in *ListUserCommentsRequest, opts ...grpc.CallOption) (*ListUserCommentsResponse, error)
	SendEmailVerificationCode(ctx context.Context, in *SendEmailVerificationCodeRequest, opts ...grpc.CallOption) (*SendEmailVerificationCodeResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// SetOperatorTagConfig sets or updates the follow_parent flag for an operator.
	// It will reverse the follow_parent flag if the record exists.
	// If the record doesn't exist, it will create a new one with follow_parent set to false.
	SetOperatorTagsConfig(ctx context.Context, in *SetOperatorTagsConfigRequest, opts ...grpc.CallOption) (*SetOperatorTagsConfigResponse, error)
	// SetOperatorTags sets or updates the tags for an operator.
	SetOperatorTags(ctx context.Context, in *SetOperatorTagsRequest, opts ...grpc.CallOption) (*SetOperatorTagsResponse, error)
	// GetOperatorTagConfig returns follow-parent flag for the given operator ID.
	GetOperatorTagsConfig(ctx context.Context, in *GetOperatorTagsConfigRequest, opts ...grpc.CallOption) (*GetOperatorTagsConfigResponse, error)
	// GetOperatorTags retrieves all tags of an operator or parent operator if follow_parent is true.
	GetOperatorTags(ctx context.Context, in *GetOperatorTagsRequest, opts ...grpc.CallOption) (*GetOperatorTagsResponse, error)
	// GetUserTags retrieves all active tags associated with a user and also exists in the related operator's tag list.
	GetUserTags(ctx context.Context, in *GetUserTagsRequest, opts ...grpc.CallOption) (*GetUserTagsResponse, error)
	SetUserTags(ctx context.Context, in *SetUserTagsRequest, opts ...grpc.CallOption) (*SetUserTagsResponse, error)
	DeleteUserResponsibleGamblingConfig(ctx context.Context, in *DeleteUserResponsibleGamblingConfigRequest, opts ...grpc.CallOption) (*v1.DeleteResponsibleGamblingConfigResponse, error)
	GetUserResponsibleGamblingConfig(ctx context.Context, in *GetUserResponsibleGamblingConfigRequest, opts ...grpc.CallOption) (*v1.GetResponsibleGamblingConfigResponse, error)
	UserIdentityAudit(ctx context.Context, in *UserIdentityAuditRequest, opts ...grpc.CallOption) (*v1.UserIdentityAuditResponse, error)
	UserIdentityList(ctx context.Context, in *UserIdentityListRequest, opts ...grpc.CallOption) (*v1.UserIdentityListResponse, error)
}

type backofficeUserClient struct {
	cc grpc.ClientConnInterface
}

func NewBackofficeUserClient(cc grpc.ClientConnInterface) BackofficeUserClient {
	return &backofficeUserClient{cc}
}

func (c *backofficeUserClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, BackofficeUser_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeUserClient) GetUserOverview(ctx context.Context, in *GetUserOverviewRequest, opts ...grpc.CallOption) (*GetUserOverviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserOverviewResponse)
	err := c.cc.Invoke(ctx, BackofficeUser_GetUserOverview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeUserClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*v1.GetUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetUserProfileResponse)
	err := c.cc.Invoke(ctx, BackofficeUser_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeUserClient) AddUserComment(ctx context.Context, in *AddUserCommentRequest, opts ...grpc.CallOption) (*AddUserCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserCommentResponse)
	err := c.cc.Invoke(ctx, BackofficeUser_AddUserComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeUserClient) ListUserComments(ctx context.Context, in *ListUserCommentsRequest, opts ...grpc.CallOption) (*ListUserCommentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserCommentsResponse)
	err := c.cc.Invoke(ctx, BackofficeUser_ListUserComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeUserClient) SendEmailVerificationCode(ctx context.Context, in *SendEmailVerificationCodeRequest, opts ...grpc.CallOption) (*SendEmailVerificationCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailVerificationCodeResponse)
	err := c.cc.Invoke(ctx, BackofficeUser_SendEmailVerificationCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeUserClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, BackofficeUser_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeUserClient) SetOperatorTagsConfig(ctx context.Context, in *SetOperatorTagsConfigRequest, opts ...grpc.CallOption) (*SetOperatorTagsConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetOperatorTagsConfigResponse)
	err := c.cc.Invoke(ctx, BackofficeUser_SetOperatorTagsConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeUserClient) SetOperatorTags(ctx context.Context, in *SetOperatorTagsRequest, opts ...grpc.CallOption) (*SetOperatorTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetOperatorTagsResponse)
	err := c.cc.Invoke(ctx, BackofficeUser_SetOperatorTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeUserClient) GetOperatorTagsConfig(ctx context.Context, in *GetOperatorTagsConfigRequest, opts ...grpc.CallOption) (*GetOperatorTagsConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperatorTagsConfigResponse)
	err := c.cc.Invoke(ctx, BackofficeUser_GetOperatorTagsConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeUserClient) GetOperatorTags(ctx context.Context, in *GetOperatorTagsRequest, opts ...grpc.CallOption) (*GetOperatorTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperatorTagsResponse)
	err := c.cc.Invoke(ctx, BackofficeUser_GetOperatorTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeUserClient) GetUserTags(ctx context.Context, in *GetUserTagsRequest, opts ...grpc.CallOption) (*GetUserTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserTagsResponse)
	err := c.cc.Invoke(ctx, BackofficeUser_GetUserTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeUserClient) SetUserTags(ctx context.Context, in *SetUserTagsRequest, opts ...grpc.CallOption) (*SetUserTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUserTagsResponse)
	err := c.cc.Invoke(ctx, BackofficeUser_SetUserTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeUserClient) DeleteUserResponsibleGamblingConfig(ctx context.Context, in *DeleteUserResponsibleGamblingConfigRequest, opts ...grpc.CallOption) (*v1.DeleteResponsibleGamblingConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DeleteResponsibleGamblingConfigResponse)
	err := c.cc.Invoke(ctx, BackofficeUser_DeleteUserResponsibleGamblingConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeUserClient) GetUserResponsibleGamblingConfig(ctx context.Context, in *GetUserResponsibleGamblingConfigRequest, opts ...grpc.CallOption) (*v1.GetResponsibleGamblingConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetResponsibleGamblingConfigResponse)
	err := c.cc.Invoke(ctx, BackofficeUser_GetUserResponsibleGamblingConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeUserClient) UserIdentityAudit(ctx context.Context, in *UserIdentityAuditRequest, opts ...grpc.CallOption) (*v1.UserIdentityAuditResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.UserIdentityAuditResponse)
	err := c.cc.Invoke(ctx, BackofficeUser_UserIdentityAudit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeUserClient) UserIdentityList(ctx context.Context, in *UserIdentityListRequest, opts ...grpc.CallOption) (*v1.UserIdentityListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.UserIdentityListResponse)
	err := c.cc.Invoke(ctx, BackofficeUser_UserIdentityList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackofficeUserServer is the server API for BackofficeUser service.
// All implementations must embed UnimplementedBackofficeUserServer
// for forward compatibility.
type BackofficeUserServer interface {
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	GetUserOverview(context.Context, *GetUserOverviewRequest) (*GetUserOverviewResponse, error)
	GetUserProfile(context.Context, *GetUserProfileRequest) (*v1.GetUserProfileResponse, error)
	AddUserComment(context.Context, *AddUserCommentRequest) (*AddUserCommentResponse, error)
	ListUserComments(context.Context, *ListUserCommentsRequest) (*ListUserCommentsResponse, error)
	SendEmailVerificationCode(context.Context, *SendEmailVerificationCodeRequest) (*SendEmailVerificationCodeResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// SetOperatorTagConfig sets or updates the follow_parent flag for an operator.
	// It will reverse the follow_parent flag if the record exists.
	// If the record doesn't exist, it will create a new one with follow_parent set to false.
	SetOperatorTagsConfig(context.Context, *SetOperatorTagsConfigRequest) (*SetOperatorTagsConfigResponse, error)
	// SetOperatorTags sets or updates the tags for an operator.
	SetOperatorTags(context.Context, *SetOperatorTagsRequest) (*SetOperatorTagsResponse, error)
	// GetOperatorTagConfig returns follow-parent flag for the given operator ID.
	GetOperatorTagsConfig(context.Context, *GetOperatorTagsConfigRequest) (*GetOperatorTagsConfigResponse, error)
	// GetOperatorTags retrieves all tags of an operator or parent operator if follow_parent is true.
	GetOperatorTags(context.Context, *GetOperatorTagsRequest) (*GetOperatorTagsResponse, error)
	// GetUserTags retrieves all active tags associated with a user and also exists in the related operator's tag list.
	GetUserTags(context.Context, *GetUserTagsRequest) (*GetUserTagsResponse, error)
	SetUserTags(context.Context, *SetUserTagsRequest) (*SetUserTagsResponse, error)
	DeleteUserResponsibleGamblingConfig(context.Context, *DeleteUserResponsibleGamblingConfigRequest) (*v1.DeleteResponsibleGamblingConfigResponse, error)
	GetUserResponsibleGamblingConfig(context.Context, *GetUserResponsibleGamblingConfigRequest) (*v1.GetResponsibleGamblingConfigResponse, error)
	UserIdentityAudit(context.Context, *UserIdentityAuditRequest) (*v1.UserIdentityAuditResponse, error)
	UserIdentityList(context.Context, *UserIdentityListRequest) (*v1.UserIdentityListResponse, error)
	mustEmbedUnimplementedBackofficeUserServer()
}

// UnimplementedBackofficeUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackofficeUserServer struct{}

func (UnimplementedBackofficeUserServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedBackofficeUserServer) GetUserOverview(context.Context, *GetUserOverviewRequest) (*GetUserOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOverview not implemented")
}
func (UnimplementedBackofficeUserServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*v1.GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedBackofficeUserServer) AddUserComment(context.Context, *AddUserCommentRequest) (*AddUserCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserComment not implemented")
}
func (UnimplementedBackofficeUserServer) ListUserComments(context.Context, *ListUserCommentsRequest) (*ListUserCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserComments not implemented")
}
func (UnimplementedBackofficeUserServer) SendEmailVerificationCode(context.Context, *SendEmailVerificationCodeRequest) (*SendEmailVerificationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailVerificationCode not implemented")
}
func (UnimplementedBackofficeUserServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedBackofficeUserServer) SetOperatorTagsConfig(context.Context, *SetOperatorTagsConfigRequest) (*SetOperatorTagsConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOperatorTagsConfig not implemented")
}
func (UnimplementedBackofficeUserServer) SetOperatorTags(context.Context, *SetOperatorTagsRequest) (*SetOperatorTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOperatorTags not implemented")
}
func (UnimplementedBackofficeUserServer) GetOperatorTagsConfig(context.Context, *GetOperatorTagsConfigRequest) (*GetOperatorTagsConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorTagsConfig not implemented")
}
func (UnimplementedBackofficeUserServer) GetOperatorTags(context.Context, *GetOperatorTagsRequest) (*GetOperatorTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorTags not implemented")
}
func (UnimplementedBackofficeUserServer) GetUserTags(context.Context, *GetUserTagsRequest) (*GetUserTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTags not implemented")
}
func (UnimplementedBackofficeUserServer) SetUserTags(context.Context, *SetUserTagsRequest) (*SetUserTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserTags not implemented")
}
func (UnimplementedBackofficeUserServer) DeleteUserResponsibleGamblingConfig(context.Context, *DeleteUserResponsibleGamblingConfigRequest) (*v1.DeleteResponsibleGamblingConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserResponsibleGamblingConfig not implemented")
}
func (UnimplementedBackofficeUserServer) GetUserResponsibleGamblingConfig(context.Context, *GetUserResponsibleGamblingConfigRequest) (*v1.GetResponsibleGamblingConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserResponsibleGamblingConfig not implemented")
}
func (UnimplementedBackofficeUserServer) UserIdentityAudit(context.Context, *UserIdentityAuditRequest) (*v1.UserIdentityAuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserIdentityAudit not implemented")
}
func (UnimplementedBackofficeUserServer) UserIdentityList(context.Context, *UserIdentityListRequest) (*v1.UserIdentityListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserIdentityList not implemented")
}
func (UnimplementedBackofficeUserServer) mustEmbedUnimplementedBackofficeUserServer() {}
func (UnimplementedBackofficeUserServer) testEmbeddedByValue()                        {}

// UnsafeBackofficeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackofficeUserServer will
// result in compilation errors.
type UnsafeBackofficeUserServer interface {
	mustEmbedUnimplementedBackofficeUserServer()
}

func RegisterBackofficeUserServer(s grpc.ServiceRegistrar, srv BackofficeUserServer) {
	// If the following call pancis, it indicates UnimplementedBackofficeUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackofficeUser_ServiceDesc, srv)
}

func _BackofficeUser_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeUserServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeUser_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeUserServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeUser_GetUserOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeUserServer).GetUserOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeUser_GetUserOverview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeUserServer).GetUserOverview(ctx, req.(*GetUserOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeUser_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeUserServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeUser_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeUserServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeUser_AddUserComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeUserServer).AddUserComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeUser_AddUserComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeUserServer).AddUserComment(ctx, req.(*AddUserCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeUser_ListUserComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeUserServer).ListUserComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeUser_ListUserComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeUserServer).ListUserComments(ctx, req.(*ListUserCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeUser_SendEmailVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailVerificationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeUserServer).SendEmailVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeUser_SendEmailVerificationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeUserServer).SendEmailVerificationCode(ctx, req.(*SendEmailVerificationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeUser_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeUserServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeUser_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeUserServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeUser_SetOperatorTagsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOperatorTagsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeUserServer).SetOperatorTagsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeUser_SetOperatorTagsConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeUserServer).SetOperatorTagsConfig(ctx, req.(*SetOperatorTagsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeUser_SetOperatorTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOperatorTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeUserServer).SetOperatorTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeUser_SetOperatorTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeUserServer).SetOperatorTags(ctx, req.(*SetOperatorTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeUser_GetOperatorTagsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorTagsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeUserServer).GetOperatorTagsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeUser_GetOperatorTagsConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeUserServer).GetOperatorTagsConfig(ctx, req.(*GetOperatorTagsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeUser_GetOperatorTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeUserServer).GetOperatorTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeUser_GetOperatorTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeUserServer).GetOperatorTags(ctx, req.(*GetOperatorTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeUser_GetUserTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeUserServer).GetUserTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeUser_GetUserTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeUserServer).GetUserTags(ctx, req.(*GetUserTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeUser_SetUserTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeUserServer).SetUserTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeUser_SetUserTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeUserServer).SetUserTags(ctx, req.(*SetUserTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeUser_DeleteUserResponsibleGamblingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserResponsibleGamblingConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeUserServer).DeleteUserResponsibleGamblingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeUser_DeleteUserResponsibleGamblingConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeUserServer).DeleteUserResponsibleGamblingConfig(ctx, req.(*DeleteUserResponsibleGamblingConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeUser_GetUserResponsibleGamblingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserResponsibleGamblingConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeUserServer).GetUserResponsibleGamblingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeUser_GetUserResponsibleGamblingConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeUserServer).GetUserResponsibleGamblingConfig(ctx, req.(*GetUserResponsibleGamblingConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeUser_UserIdentityAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentityAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeUserServer).UserIdentityAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeUser_UserIdentityAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeUserServer).UserIdentityAudit(ctx, req.(*UserIdentityAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeUser_UserIdentityList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdentityListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeUserServer).UserIdentityList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeUser_UserIdentityList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeUserServer).UserIdentityList(ctx, req.(*UserIdentityListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackofficeUser_ServiceDesc is the grpc.ServiceDesc for BackofficeUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackofficeUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.BackofficeUser",
	HandlerType: (*BackofficeUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUsers",
			Handler:    _BackofficeUser_ListUsers_Handler,
		},
		{
			MethodName: "GetUserOverview",
			Handler:    _BackofficeUser_GetUserOverview_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _BackofficeUser_GetUserProfile_Handler,
		},
		{
			MethodName: "AddUserComment",
			Handler:    _BackofficeUser_AddUserComment_Handler,
		},
		{
			MethodName: "ListUserComments",
			Handler:    _BackofficeUser_ListUserComments_Handler,
		},
		{
			MethodName: "SendEmailVerificationCode",
			Handler:    _BackofficeUser_SendEmailVerificationCode_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _BackofficeUser_UpdateUser_Handler,
		},
		{
			MethodName: "SetOperatorTagsConfig",
			Handler:    _BackofficeUser_SetOperatorTagsConfig_Handler,
		},
		{
			MethodName: "SetOperatorTags",
			Handler:    _BackofficeUser_SetOperatorTags_Handler,
		},
		{
			MethodName: "GetOperatorTagsConfig",
			Handler:    _BackofficeUser_GetOperatorTagsConfig_Handler,
		},
		{
			MethodName: "GetOperatorTags",
			Handler:    _BackofficeUser_GetOperatorTags_Handler,
		},
		{
			MethodName: "GetUserTags",
			Handler:    _BackofficeUser_GetUserTags_Handler,
		},
		{
			MethodName: "SetUserTags",
			Handler:    _BackofficeUser_SetUserTags_Handler,
		},
		{
			MethodName: "DeleteUserResponsibleGamblingConfig",
			Handler:    _BackofficeUser_DeleteUserResponsibleGamblingConfig_Handler,
		},
		{
			MethodName: "GetUserResponsibleGamblingConfig",
			Handler:    _BackofficeUser_GetUserResponsibleGamblingConfig_Handler,
		},
		{
			MethodName: "UserIdentityAudit",
			Handler:    _BackofficeUser_UserIdentityAudit_Handler,
		},
		{
			MethodName: "UserIdentityList",
			Handler:    _BackofficeUser_UserIdentityList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_user.proto",
}
