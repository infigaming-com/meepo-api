// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_wallet.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetWalletsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetWalletsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWalletsRequestMultiError, or nil if none found.
func (m *GetWalletsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetWalletsRequestMultiError(errors)
	}

	return nil
}

// GetWalletsRequestMultiError is an error wrapping multiple validation errors
// returned by GetWalletsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetWalletsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletsRequestMultiError) AllErrors() []error { return m }

// GetWalletsRequestValidationError is the validation error returned by
// GetWalletsRequest.Validate if the designated constraints aren't met.
type GetWalletsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletsRequestValidationError) ErrorName() string {
	return "GetWalletsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletsRequestValidationError{}

// Validate checks the field values on GetWalletsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWalletsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWalletsResponseMultiError, or nil if none found.
func (m *GetWalletsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTotalAssets()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWalletsResponseValidationError{
					field:  "TotalAssets",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWalletsResponseValidationError{
					field:  "TotalAssets",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTotalAssets()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWalletsResponseValidationError{
				field:  "TotalAssets",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetWallets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWalletsResponseValidationError{
						field:  fmt.Sprintf("Wallets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWalletsResponseValidationError{
						field:  fmt.Sprintf("Wallets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWalletsResponseValidationError{
					field:  fmt.Sprintf("Wallets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWalletsResponseMultiError(errors)
	}

	return nil
}

// GetWalletsResponseMultiError is an error wrapping multiple validation errors
// returned by GetWalletsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetWalletsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletsResponseMultiError) AllErrors() []error { return m }

// GetWalletsResponseValidationError is the validation error returned by
// GetWalletsResponse.Validate if the designated constraints aren't met.
type GetWalletsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletsResponseValidationError) ErrorName() string {
	return "GetWalletsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletsResponseValidationError{}

// Validate checks the field values on GetWalletCreditsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWalletCreditsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletCreditsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWalletCreditsRequestMultiError, or nil if none found.
func (m *GetWalletCreditsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletCreditsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.TransactionType != nil {
		// no validation rules for TransactionType
	}

	if m.Currency != nil {
		// no validation rules for Currency
	}

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWalletCreditsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWalletCreditsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWalletCreditsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWalletCreditsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWalletCreditsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWalletCreditsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return GetWalletCreditsRequestMultiError(errors)
	}

	return nil
}

// GetWalletCreditsRequestMultiError is an error wrapping multiple validation
// errors returned by GetWalletCreditsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWalletCreditsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletCreditsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletCreditsRequestMultiError) AllErrors() []error { return m }

// GetWalletCreditsRequestValidationError is the validation error returned by
// GetWalletCreditsRequest.Validate if the designated constraints aren't met.
type GetWalletCreditsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletCreditsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletCreditsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletCreditsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletCreditsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletCreditsRequestValidationError) ErrorName() string {
	return "GetWalletCreditsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletCreditsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletCreditsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletCreditsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletCreditsRequestValidationError{}

// Validate checks the field values on GetWalletCreditsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWalletCreditsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletCreditsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWalletCreditsResponseMultiError, or nil if none found.
func (m *GetWalletCreditsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletCreditsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCredits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWalletCreditsResponseValidationError{
						field:  fmt.Sprintf("Credits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWalletCreditsResponseValidationError{
						field:  fmt.Sprintf("Credits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWalletCreditsResponseValidationError{
					field:  fmt.Sprintf("Credits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return GetWalletCreditsResponseMultiError(errors)
	}

	return nil
}

// GetWalletCreditsResponseMultiError is an error wrapping multiple validation
// errors returned by GetWalletCreditsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWalletCreditsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletCreditsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletCreditsResponseMultiError) AllErrors() []error { return m }

// GetWalletCreditsResponseValidationError is the validation error returned by
// GetWalletCreditsResponse.Validate if the designated constraints aren't met.
type GetWalletCreditsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletCreditsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletCreditsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletCreditsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletCreditsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletCreditsResponseValidationError) ErrorName() string {
	return "GetWalletCreditsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletCreditsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletCreditsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletCreditsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletCreditsResponseValidationError{}

// Validate checks the field values on ListWalletBalanceTransactionsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListWalletBalanceTransactionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWalletBalanceTransactionsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListWalletBalanceTransactionsRequestMultiError, or nil if none found.
func (m *ListWalletBalanceTransactionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWalletBalanceTransactionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.TransactionType != nil {
		// no validation rules for TransactionType
	}

	if m.Currency != nil {
		// no validation rules for Currency
	}

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWalletBalanceTransactionsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWalletBalanceTransactionsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWalletBalanceTransactionsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWalletBalanceTransactionsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWalletBalanceTransactionsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWalletBalanceTransactionsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListWalletBalanceTransactionsRequestMultiError(errors)
	}

	return nil
}

// ListWalletBalanceTransactionsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListWalletBalanceTransactionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWalletBalanceTransactionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWalletBalanceTransactionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWalletBalanceTransactionsRequestMultiError) AllErrors() []error { return m }

// ListWalletBalanceTransactionsRequestValidationError is the validation error
// returned by ListWalletBalanceTransactionsRequest.Validate if the designated
// constraints aren't met.
type ListWalletBalanceTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletBalanceTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletBalanceTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletBalanceTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletBalanceTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletBalanceTransactionsRequestValidationError) ErrorName() string {
	return "ListWalletBalanceTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletBalanceTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletBalanceTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletBalanceTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletBalanceTransactionsRequestValidationError{}

// Validate checks the field values on ListWalletBalanceTransactionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListWalletBalanceTransactionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWalletBalanceTransactionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListWalletBalanceTransactionsResponseMultiError, or nil if none found.
func (m *ListWalletBalanceTransactionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWalletBalanceTransactionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBalanceTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWalletBalanceTransactionsResponseValidationError{
						field:  fmt.Sprintf("BalanceTransactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWalletBalanceTransactionsResponseValidationError{
						field:  fmt.Sprintf("BalanceTransactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWalletBalanceTransactionsResponseValidationError{
					field:  fmt.Sprintf("BalanceTransactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListWalletBalanceTransactionsResponseMultiError(errors)
	}

	return nil
}

// ListWalletBalanceTransactionsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListWalletBalanceTransactionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWalletBalanceTransactionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWalletBalanceTransactionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWalletBalanceTransactionsResponseMultiError) AllErrors() []error { return m }

// ListWalletBalanceTransactionsResponseValidationError is the validation error
// returned by ListWalletBalanceTransactionsResponse.Validate if the
// designated constraints aren't met.
type ListWalletBalanceTransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletBalanceTransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWalletBalanceTransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWalletBalanceTransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWalletBalanceTransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWalletBalanceTransactionsResponseValidationError) ErrorName() string {
	return "ListWalletBalanceTransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletBalanceTransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletBalanceTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletBalanceTransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletBalanceTransactionsResponseValidationError{}

// Validate checks the field values on GetWalletCreditTransactionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetWalletCreditTransactionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletCreditTransactionsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetWalletCreditTransactionsRequestMultiError, or nil if none found.
func (m *GetWalletCreditTransactionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletCreditTransactionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreditId

	if len(errors) > 0 {
		return GetWalletCreditTransactionsRequestMultiError(errors)
	}

	return nil
}

// GetWalletCreditTransactionsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetWalletCreditTransactionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWalletCreditTransactionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletCreditTransactionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletCreditTransactionsRequestMultiError) AllErrors() []error { return m }

// GetWalletCreditTransactionsRequestValidationError is the validation error
// returned by GetWalletCreditTransactionsRequest.Validate if the designated
// constraints aren't met.
type GetWalletCreditTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletCreditTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletCreditTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletCreditTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletCreditTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletCreditTransactionsRequestValidationError) ErrorName() string {
	return "GetWalletCreditTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletCreditTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletCreditTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletCreditTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletCreditTransactionsRequestValidationError{}

// Validate checks the field values on GetWalletCreditTransactionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetWalletCreditTransactionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletCreditTransactionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetWalletCreditTransactionsResponseMultiError, or nil if none found.
func (m *GetWalletCreditTransactionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletCreditTransactionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCreditTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWalletCreditTransactionsResponseValidationError{
						field:  fmt.Sprintf("CreditTransactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWalletCreditTransactionsResponseValidationError{
						field:  fmt.Sprintf("CreditTransactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWalletCreditTransactionsResponseValidationError{
					field:  fmt.Sprintf("CreditTransactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return GetWalletCreditTransactionsResponseMultiError(errors)
	}

	return nil
}

// GetWalletCreditTransactionsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetWalletCreditTransactionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWalletCreditTransactionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletCreditTransactionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletCreditTransactionsResponseMultiError) AllErrors() []error { return m }

// GetWalletCreditTransactionsResponseValidationError is the validation error
// returned by GetWalletCreditTransactionsResponse.Validate if the designated
// constraints aren't met.
type GetWalletCreditTransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletCreditTransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletCreditTransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletCreditTransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletCreditTransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletCreditTransactionsResponseValidationError) ErrorName() string {
	return "GetWalletCreditTransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletCreditTransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletCreditTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletCreditTransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletCreditTransactionsResponseValidationError{}

// Validate checks the field values on UpdateWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWalletRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWalletRequestMultiError, or nil if none found.
func (m *UpdateWalletRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWalletRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Currency

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if len(errors) > 0 {
		return UpdateWalletRequestMultiError(errors)
	}

	return nil
}

// UpdateWalletRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWalletRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWalletRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWalletRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWalletRequestMultiError) AllErrors() []error { return m }

// UpdateWalletRequestValidationError is the validation error returned by
// UpdateWalletRequest.Validate if the designated constraints aren't met.
type UpdateWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWalletRequestValidationError) ErrorName() string {
	return "UpdateWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWalletRequestValidationError{}

// Validate checks the field values on UpdateWalletResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWalletResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWalletResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWalletResponseMultiError, or nil if none found.
func (m *UpdateWalletResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWalletResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateWalletResponseMultiError(errors)
	}

	return nil
}

// UpdateWalletResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateWalletResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateWalletResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWalletResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWalletResponseMultiError) AllErrors() []error { return m }

// UpdateWalletResponseValidationError is the validation error returned by
// UpdateWalletResponse.Validate if the designated constraints aren't met.
type UpdateWalletResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWalletResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWalletResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWalletResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWalletResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWalletResponseValidationError) ErrorName() string {
	return "UpdateWalletResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWalletResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWalletResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWalletResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWalletResponseValidationError{}

// Validate checks the field values on GetWalletsResponse_TotalAssets with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWalletsResponse_TotalAssets) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletsResponse_TotalAssets with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetWalletsResponse_TotalAssetsMultiError, or nil if none found.
func (m *GetWalletsResponse_TotalAssets) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletsResponse_TotalAssets) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Balance

	// no validation rules for Deposit

	// no validation rules for Withdraw

	// no validation rules for DepositMinusWithdraw

	// no validation rules for ValidTurnover

	if len(errors) > 0 {
		return GetWalletsResponse_TotalAssetsMultiError(errors)
	}

	return nil
}

// GetWalletsResponse_TotalAssetsMultiError is an error wrapping multiple
// validation errors returned by GetWalletsResponse_TotalAssets.ValidateAll()
// if the designated constraints aren't met.
type GetWalletsResponse_TotalAssetsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletsResponse_TotalAssetsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletsResponse_TotalAssetsMultiError) AllErrors() []error { return m }

// GetWalletsResponse_TotalAssetsValidationError is the validation error
// returned by GetWalletsResponse_TotalAssets.Validate if the designated
// constraints aren't met.
type GetWalletsResponse_TotalAssetsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletsResponse_TotalAssetsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletsResponse_TotalAssetsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletsResponse_TotalAssetsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletsResponse_TotalAssetsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletsResponse_TotalAssetsValidationError) ErrorName() string {
	return "GetWalletsResponse_TotalAssetsValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletsResponse_TotalAssetsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletsResponse_TotalAssets.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletsResponse_TotalAssetsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletsResponse_TotalAssetsValidationError{}

// Validate checks the field values on GetWalletsResponse_Credit with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWalletsResponse_Credit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletsResponse_Credit with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWalletsResponse_CreditMultiError, or nil if none found.
func (m *GetWalletsResponse_Credit) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletsResponse_Credit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWalletsResponse_CreditValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWalletsResponse_CreditValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWalletsResponse_CreditValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TransactionId

	// no validation rules for Cash

	// no validation rules for Bonus

	// no validation rules for TurnoverThreshold

	// no validation rules for Turnover

	// no validation rules for CashTurnover

	// no validation rules for BonusTurnover

	if len(errors) > 0 {
		return GetWalletsResponse_CreditMultiError(errors)
	}

	return nil
}

// GetWalletsResponse_CreditMultiError is an error wrapping multiple validation
// errors returned by GetWalletsResponse_Credit.ValidateAll() if the
// designated constraints aren't met.
type GetWalletsResponse_CreditMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletsResponse_CreditMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletsResponse_CreditMultiError) AllErrors() []error { return m }

// GetWalletsResponse_CreditValidationError is the validation error returned by
// GetWalletsResponse_Credit.Validate if the designated constraints aren't met.
type GetWalletsResponse_CreditValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletsResponse_CreditValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletsResponse_CreditValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletsResponse_CreditValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletsResponse_CreditValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletsResponse_CreditValidationError) ErrorName() string {
	return "GetWalletsResponse_CreditValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletsResponse_CreditValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletsResponse_Credit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletsResponse_CreditValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletsResponse_CreditValidationError{}

// Validate checks the field values on GetWalletsResponse_Wallet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWalletsResponse_Wallet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletsResponse_Wallet with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWalletsResponse_WalletMultiError, or nil if none found.
func (m *GetWalletsResponse_Wallet) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletsResponse_Wallet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	// no validation rules for Cash

	// no validation rules for Bonus

	// no validation rules for TurnoverThreshold

	// no validation rules for Turnover

	// no validation rules for CashTurnover

	// no validation rules for BonusTurnover

	for idx, item := range m.GetCredits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWalletsResponse_WalletValidationError{
						field:  fmt.Sprintf("Credits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWalletsResponse_WalletValidationError{
						field:  fmt.Sprintf("Credits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWalletsResponse_WalletValidationError{
					field:  fmt.Sprintf("Credits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWalletsResponse_WalletMultiError(errors)
	}

	return nil
}

// GetWalletsResponse_WalletMultiError is an error wrapping multiple validation
// errors returned by GetWalletsResponse_Wallet.ValidateAll() if the
// designated constraints aren't met.
type GetWalletsResponse_WalletMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletsResponse_WalletMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletsResponse_WalletMultiError) AllErrors() []error { return m }

// GetWalletsResponse_WalletValidationError is the validation error returned by
// GetWalletsResponse_Wallet.Validate if the designated constraints aren't met.
type GetWalletsResponse_WalletValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletsResponse_WalletValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletsResponse_WalletValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletsResponse_WalletValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletsResponse_WalletValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletsResponse_WalletValidationError) ErrorName() string {
	return "GetWalletsResponse_WalletValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletsResponse_WalletValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletsResponse_Wallet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletsResponse_WalletValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletsResponse_WalletValidationError{}

// Validate checks the field values on GetWalletCreditsResponse_Credit with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWalletCreditsResponse_Credit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletCreditsResponse_Credit with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetWalletCreditsResponse_CreditMultiError, or nil if none found.
func (m *GetWalletCreditsResponse_Credit) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletCreditsResponse_Credit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWalletCreditsResponse_CreditValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWalletCreditsResponse_CreditValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWalletCreditsResponse_CreditValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreditId

	// no validation rules for Type

	// no validation rules for VipLevel

	// no validation rules for BeforeBlanace

	// no validation rules for AfterBalance

	// no validation rules for Currency

	if len(errors) > 0 {
		return GetWalletCreditsResponse_CreditMultiError(errors)
	}

	return nil
}

// GetWalletCreditsResponse_CreditMultiError is an error wrapping multiple
// validation errors returned by GetWalletCreditsResponse_Credit.ValidateAll()
// if the designated constraints aren't met.
type GetWalletCreditsResponse_CreditMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletCreditsResponse_CreditMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletCreditsResponse_CreditMultiError) AllErrors() []error { return m }

// GetWalletCreditsResponse_CreditValidationError is the validation error
// returned by GetWalletCreditsResponse_Credit.Validate if the designated
// constraints aren't met.
type GetWalletCreditsResponse_CreditValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletCreditsResponse_CreditValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletCreditsResponse_CreditValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletCreditsResponse_CreditValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletCreditsResponse_CreditValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletCreditsResponse_CreditValidationError) ErrorName() string {
	return "GetWalletCreditsResponse_CreditValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletCreditsResponse_CreditValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletCreditsResponse_Credit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletCreditsResponse_CreditValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletCreditsResponse_CreditValidationError{}

// Validate checks the field values on
// ListWalletBalanceTransactionsResponse_BalanceTransaction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWalletBalanceTransactionsResponse_BalanceTransaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListWalletBalanceTransactionsResponse_BalanceTransaction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWalletBalanceTransactionsResponse_BalanceTransactionMultiError, or nil
// if none found.
func (m *ListWalletBalanceTransactionsResponse_BalanceTransaction) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWalletBalanceTransactionsResponse_BalanceTransaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWalletBalanceTransactionsResponse_BalanceTransactionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWalletBalanceTransactionsResponse_BalanceTransactionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWalletBalanceTransactionsResponse_BalanceTransactionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TransactionId

	// no validation rules for TransactionType

	// no validation rules for VipLevel

	// no validation rules for ChangeBalance

	// no validation rules for BeforeBalance

	// no validation rules for AfterBalance

	// no validation rules for Currency

	// no validation rules for RelatedTransactionId

	if len(errors) > 0 {
		return ListWalletBalanceTransactionsResponse_BalanceTransactionMultiError(errors)
	}

	return nil
}

// ListWalletBalanceTransactionsResponse_BalanceTransactionMultiError is an
// error wrapping multiple validation errors returned by
// ListWalletBalanceTransactionsResponse_BalanceTransaction.ValidateAll() if
// the designated constraints aren't met.
type ListWalletBalanceTransactionsResponse_BalanceTransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWalletBalanceTransactionsResponse_BalanceTransactionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWalletBalanceTransactionsResponse_BalanceTransactionMultiError) AllErrors() []error {
	return m
}

// ListWalletBalanceTransactionsResponse_BalanceTransactionValidationError is
// the validation error returned by
// ListWalletBalanceTransactionsResponse_BalanceTransaction.Validate if the
// designated constraints aren't met.
type ListWalletBalanceTransactionsResponse_BalanceTransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWalletBalanceTransactionsResponse_BalanceTransactionValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListWalletBalanceTransactionsResponse_BalanceTransactionValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListWalletBalanceTransactionsResponse_BalanceTransactionValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListWalletBalanceTransactionsResponse_BalanceTransactionValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ListWalletBalanceTransactionsResponse_BalanceTransactionValidationError) ErrorName() string {
	return "ListWalletBalanceTransactionsResponse_BalanceTransactionValidationError"
}

// Error satisfies the builtin error interface
func (e ListWalletBalanceTransactionsResponse_BalanceTransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWalletBalanceTransactionsResponse_BalanceTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWalletBalanceTransactionsResponse_BalanceTransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWalletBalanceTransactionsResponse_BalanceTransactionValidationError{}

// Validate checks the field values on
// GetWalletCreditTransactionsResponse_CreditTransaction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWalletCreditTransactionsResponse_CreditTransaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetWalletCreditTransactionsResponse_CreditTransaction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWalletCreditTransactionsResponse_CreditTransactionMultiError, or nil if
// none found.
func (m *GetWalletCreditTransactionsResponse_CreditTransaction) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletCreditTransactionsResponse_CreditTransaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWalletCreditTransactionsResponse_CreditTransactionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWalletCreditTransactionsResponse_CreditTransactionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWalletCreditTransactionsResponse_CreditTransactionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	if len(errors) > 0 {
		return GetWalletCreditTransactionsResponse_CreditTransactionMultiError(errors)
	}

	return nil
}

// GetWalletCreditTransactionsResponse_CreditTransactionMultiError is an error
// wrapping multiple validation errors returned by
// GetWalletCreditTransactionsResponse_CreditTransaction.ValidateAll() if the
// designated constraints aren't met.
type GetWalletCreditTransactionsResponse_CreditTransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletCreditTransactionsResponse_CreditTransactionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletCreditTransactionsResponse_CreditTransactionMultiError) AllErrors() []error {
	return m
}

// GetWalletCreditTransactionsResponse_CreditTransactionValidationError is the
// validation error returned by
// GetWalletCreditTransactionsResponse_CreditTransaction.Validate if the
// designated constraints aren't met.
type GetWalletCreditTransactionsResponse_CreditTransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletCreditTransactionsResponse_CreditTransactionValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetWalletCreditTransactionsResponse_CreditTransactionValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetWalletCreditTransactionsResponse_CreditTransactionValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetWalletCreditTransactionsResponse_CreditTransactionValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetWalletCreditTransactionsResponse_CreditTransactionValidationError) ErrorName() string {
	return "GetWalletCreditTransactionsResponse_CreditTransactionValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletCreditTransactionsResponse_CreditTransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletCreditTransactionsResponse_CreditTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletCreditTransactionsResponse_CreditTransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletCreditTransactionsResponse_CreditTransactionValidationError{}
