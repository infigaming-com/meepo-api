syntax = "proto3";

package api.backoffice.service.v1;

import "google/api/annotations.proto";
import "common/common.proto";

option go_package = "github.com/infigaming-com/meepo-api/backoffice/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.backoffice.service.v1";

service BackofficeOperator {
	rpc ListAllOperators(ListAllOperatorsRequest) returns (ListAllOperatorsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/list/all"
			body: "*"
		};
	}

	rpc CreateOperator(CreateOperatorRequest) returns (CreateOperatorResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/create"
			body: "*"
		};
	}

	// GetCurrentOperatorDetails returns the current operator details.
	rpc GetCurrentOperatorDetails(GetCurrentOperatorDetailsRequest) returns (GetCurrentOperatorDetailsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/current"
			body: "*"
		};
	}

	// ListOperatorsByParentOperatorId returns a list of operators by parent operator ID.
	rpc ListOperatorsByParentOperatorId(ListOperatorsByParentOperatorIdRequest) returns (ListOperatorsByParentOperatorIdResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/list/by-parent"
			body: "*"
		};
	}

	// ListRetailers returns a list of retailers by operator context in the middleware
	rpc ListRetailerOperators(ListRetailerOperatorsRequest) returns (ListRetailerOperatorsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/list/retailer"
			body: "*"
		};
	}

	// ListCompanies returns a list of companies by operator context in the middleware
	rpc ListCompanyOperators(ListCompanyOperatorsRequest) returns (ListCompanyOperatorsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/list/company"
			body: "*"
		};
	}

	// ListBottomOperators returns a list of bottom operators by operator context in the middleware
	rpc ListBottomOperators(ListBottomOperatorsRequest) returns (ListBottomOperatorsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/list/bottom"
			body: "*"
		};
	}

	// UpdateOperatorStatus updates the status of an operator
	rpc UpdateOperatorStatus(UpdateOperatorStatusRequest) returns (UpdateOperatorStatusResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/status/update"
			body: "*"
		};
	}
}

message ListAllOperatorsRequest {
	optional bool enabled = 1;
}

message ListAllOperatorsResponse {
	message Operator {
		int64 real_operator_id = 1;
		string operator_name = 2;
		bool enabled = 3;
		string operator_type = 4;
		int64 parent_operator_id = 5;
		api.common.OperatorContext operator_context = 6;
	}
	repeated Operator operators = 1;
}

message CreateOperatorRequest {
	string mode = 1;
	string operator_name = 2;
	string operator_key = 3;
	string reporting_currency = 4;
	string backoffice_timezone = 5;
	string operator_admin_email = 6;
	string verification_code = 7;
	repeated string supported_languages = 8;
	repeated string supported_currencies = 9; // Contains Fiat and Crypto currencies
}

message CreateOperatorResponse {
	string subdomain = 1;
	string backoffice_subdomain = 2;
	string operator_admin_email = 3;
	string password = 4;
}

message OperatorDetails {
	int64 id = 1; // real operator id
	string operator_name = 2;
	int64 parent_operator_id = 3;
	string parent_operator_name = 4;
	string operator_type = 5;
	string external_id = 6;
	string api_key = 7;
	string subdomain = 8;
	string backoffice_subdomain = 9;
	string backoffice_child_domain = 10;
	repeated string domain_pool = 11;
	bool enabled = 12;
	string mode = 13;
	string operator_key = 14;
	string reporting_currency = 15;
	string backoffice_timezone = 16;
	repeated string supported_languages = 17;
	repeated string supported_currencies = 18;
	string status = 19;
	bool is_maintenance = 20;
	int64 maintenance_start_time = 21;
	int64 maintenance_end_time = 22;
	int64 operator_id = 23; // operator id in the operator hierarchy
	int64 company_operator_id = 24; // company operator id in the operator hierarchy
	string company_operator_name = 25; // company operator name in the operator hierarchy, or empty string if not exists
	int64 retailer_operator_id = 26; // retailer operator id in the operator hierarchy
	string retailer_operator_name = 27; // retailer operator name in the operator hierarchy, or empty string if not exists
	int64 system_operator_id = 28; // system operator id in the operator hierarchy
	string system_operator_name = 29; // system operator name in the operator hierarchy, or empty string if not exists
	string config = 30;
}

message GetCurrentOperatorDetailsRequest {
}

message GetCurrentOperatorDetailsResponse {
	OperatorDetails operator_details = 1;
}

message ListOperatorsByParentOperatorIdRequest {
	optional string status = 1;
	optional int32 page = 2;
	optional int32 page_size = 3;
}

message ListOperatorsByParentOperatorIdResponse {
	repeated OperatorDetails operator_details_list = 1;
	int32 total = 2;
	int32 live_count = 3;
	int32 closed_count = 4;
	int32 pending_count = 5;
	int32 request_to_close_count = 6;
	int32 suspended_count = 7;
	int32 page = 8;
	int32 page_size = 9;
}

message ListRetailerOperatorsRequest {
	bool include_count = 1;
}

message ListRetailerOperatorsResponse {
	// OperatorInfo is the simplified information of a retailer operator, used for list retailer operators
	message OperatorInfo {
		api.common.OperatorContext operator_context = 1;
		string retailer_operator_name = 2;
		int32 company_operator_count = 3;
		int32 bottom_operator_count = 4;
		int32 bottom_live_operator_count = 5;
		bool status = 6;
		bool self_co_operation_enabled = 7;
	}
	repeated OperatorInfo retailer_operators = 1;
}

message ListCompanyOperatorsRequest {
	repeated int64 retailer_operator_ids = 1;
	bool include_count = 2;
}

message ListCompanyOperatorsResponse {
	// OperatorInfo is the simplified information of a company operator, used for list company operators
	message OperatorInfo {
		api.common.OperatorContext operator_context = 1;
		string company_operator_name = 2;
		string retailer_operator_name = 3;
		int32 bottom_operator_count = 4;
		int32 bottom_live_operator_count = 5;
		bool status = 6;
	}
	repeated OperatorInfo company_operators = 1;
}


message ListBottomOperatorsRequest {
	repeated int64 retailer_operator_ids = 1;
	repeated int64 company_operator_ids = 2;
}

message ListBottomOperatorsResponse {
	// OperatorInfo is the simplified information of a bottom operator, used for list bottom operators
	message OperatorInfo {
		api.common.OperatorContext operator_context = 1;
		string bottom_operator_name = 2;
		string retailer_operator_name = 3;
		string company_operator_name = 4;
		string mode = 5;
		string status = 6;
	}
	repeated OperatorInfo operators = 1;
}

message UpdateOperatorStatusRequest {
	int64 target_operator_id = 1; // target operator id
	string target_operator_type = 2; // target operator type
	api.common.OperatorContext target_operator_context = 3; // target operator context
	string action = 4; // action to update the status of target operator
}

message UpdateOperatorStatusResponse {
	string status = 1; // status of target operator after update
}