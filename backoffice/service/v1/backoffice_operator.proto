syntax = "proto3";

package api.backoffice.service.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "common/common.proto";
import "user/service/v1/user.proto";

option go_package = "github.com/infigaming-com/meepo-api/backoffice/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.backoffice.service.v1";

service BackofficeOperator {
	rpc ListAllOperators(ListAllOperatorsRequest) returns (ListAllOperatorsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/list/all"
			body: "*"
		};
	}

	rpc CreateOperator(CreateOperatorRequest) returns (CreateOperatorResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/create"
			body: "*"
		};
	}

	// GetCurrentOperatorDetails returns the current operator details.
	rpc GetCurrentOperatorDetails(GetCurrentOperatorDetailsRequest) returns (GetCurrentOperatorDetailsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/current"
			body: "*"
		};
	}

	// ListOperatorsByParentOperatorId returns a list of operators by parent operator ID.
	rpc ListOperatorsByParentOperatorId(ListOperatorsByParentOperatorIdRequest) returns (ListOperatorsByParentOperatorIdResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/list/by-parent"
			body: "*"
		};
	}

	// ListRetailers returns a list of retailers by operator context in the middleware
	rpc ListRetailerOperators(ListRetailerOperatorsRequest) returns (ListRetailerOperatorsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/list/retailer"
			body: "*"
		};
	}

	// ListCompanies returns a list of companies by operator context in the middleware
	rpc ListCompanyOperators(ListCompanyOperatorsRequest) returns (ListCompanyOperatorsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/list/company"
			body: "*"
		};
	}

	// ListBottomOperators returns a list of bottom operators by operator context in the middleware
	rpc ListBottomOperators(ListBottomOperatorsRequest) returns (ListBottomOperatorsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/list/bottom"
			body: "*"
		};
	}

	// UpdateOperatorStatus updates the status of an operator
	rpc UpdateOperatorStatus(UpdateOperatorStatusRequest) returns (UpdateOperatorStatusResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/status/update"
			body: "*"
		};
	}

	// List operators by admin email under specific operator
	rpc ListOperatorsByAdminEmail(ListOperatorsByAdminEmailRequest) returns (user.service.v1.ListOperatorsByAdminEmailResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/list-by-admin-email"
			body: "*"
		};
	}

	// AddOperatorByoSubdomain adds a byo subdomain for the given operator
	rpc AddOperatorByoSubdomain(AddOperatorByoSubdomainRequest) returns (AddOperatorByoSubdomainResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/byo-subdomains/add"
			body: "*"
		};
	}

	// DeleteOperatorByoSubdomain deletes a byo subdomain for the given operator
	rpc DeleteOperatorByoSubdomain(DeleteOperatorByoSubdomainRequest) returns (DeleteOperatorByoSubdomainResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/byo-subdomains/delete"
			body: "*"
		};
	}

	// AddOperatorBackofficeByoSubdomain adds a backoffice byo subdomain for the given operator
	rpc AddOperatorBackofficeByoSubdomain(AddOperatorBackofficeByoSubdomainRequest) returns (AddOperatorBackofficeByoSubdomainResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/backoffice-byo-subdomains/add"
			body: "*"
		};
	}

	// DeleteOperatorBackofficeByoSubdomain deletes a backoffice byo subdomain for the given operator
	rpc DeleteOperatorBackofficeByoSubdomain(DeleteOperatorBackofficeByoSubdomainRequest) returns (DeleteOperatorBackofficeByoSubdomainResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/backoffice-byo-subdomains/delete"
			body: "*"
		};
	}

	rpc GetOperatorAccountSettings(GetOperatorAccountSettingsRequest) returns (user.service.v1.GetOperatorAccountSettingsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/account-settings/get"
			body: "*"
		};
	}

	rpc UpdateOperatorAccountSettings(UpdateOperatorAccountSettingsRequest) returns (user.service.v1.UpdateOperatorAccountSettingsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/account-settings/update"
			body: "*"
		};
	}
	
	rpc AddRegisterLoginBlacklist(AddRegisterLoginBlacklistRequest) returns (user.service.v1.AddRegisterLoginBlacklistResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/register-login-blacklist/add"
			body: "*"
		};
	}
	
	rpc DeleteRegisterLoginBlacklist(DeleteRegisterLoginBlacklistRequest) returns (user.service.v1.DeleteRegisterLoginBlacklistResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/register-login-blacklist/delete"
			body: "*"
		};
	}
	
	rpc ListRegisterLoginBlacklist(ListRegisterLoginBlacklistRequest) returns (user.service.v1.ListRegisterLoginBlacklistResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/register-login-blacklist/list"
			body: "*"
		};
	}

	rpc SetOperatorRegisterLimitConfig(SetOperatorRegisterLimitConfigRequest) returns (user.service.v1.SetOperatorRegisterLimitConfigResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/register-limit-config/set"
			body: "*"
		};
	}
	
	rpc GetOperatorRegisterLimitConfig(GetOperatorRegisterLimitConfigRequest) returns (user.service.v1.GetOperatorRegisterLimitConfigResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/register-limit-config/get"
			body: "*"
		};
	}	
}

message ListAllOperatorsRequest {
	optional bool enabled = 1;
}

message ListAllOperatorsResponse {
	message Operator {
		int64 real_operator_id = 1;
		string operator_name = 2;
		bool enabled = 3;
		string operator_type = 4;
		int64 parent_operator_id = 5;
		api.common.OperatorContext operator_context = 6;
	}
	repeated Operator operators = 1;
}

message CreateOperatorRequest {
	string mode = 1;
	string operator_name = 2;
	string operator_key = 3;
	string reporting_currency = 4;
	string backoffice_timezone = 5;
	string operator_admin_email = 6;
	string verification_code = 7;
	repeated string supported_languages = 8;
	repeated string supported_currencies = 9; // Contains Fiat and Crypto currencies
	string template_name = 10;
}

message CreateOperatorResponse {
	string subdomain = 1;
	string backoffice_subdomain = 2;
	string operator_admin_email = 3;
	string password = 4;
}

message OperatorDetails {
	int64 id = 1; // real operator id
	string operator_name = 2;
	int64 parent_operator_id = 3;
	string parent_operator_name = 4;
	string operator_type = 5;
	string external_id = 6;
	string api_key = 7;
	string subdomain = 8;
	repeated string byo_subdomains = 9;
	string backoffice_subdomain = 10;
	repeated string backoffice_byo_subdomains = 11;
	string backoffice_child_domain = 12;
	repeated string domain_pool = 13;
	bool enabled = 14;
	string mode = 15;
	string operator_key = 16;
	string reporting_currency = 17;
	string backoffice_timezone = 18;
	repeated string supported_languages = 19;
	repeated string supported_currencies = 20;
	string status = 21;
	int64 status_start_time = 23;
	int64 status_end_time = 24;
	int64 operator_id = 25; // operator id in the operator hierarchy
	int64 company_operator_id = 26; // company operator id in the operator hierarchy
	string company_operator_name = 27; // company operator name in the operator hierarchy, or empty string if not exists
	int64 retailer_operator_id = 28; // retailer operator id in the operator hierarchy
	string retailer_operator_name = 29; // retailer operator name in the operator hierarchy, or empty string if not exists
	int64 system_operator_id = 30; // system operator id in the operator hierarchy
	string system_operator_name = 31; // system operator name in the operator hierarchy, or empty string if not exists
	string config = 32;
	string min_launch_balance = 33;
}

message GetCurrentOperatorDetailsRequest {
}

message GetCurrentOperatorDetailsResponse {
	OperatorDetails operator_details = 1;
}

message ListOperatorsByParentOperatorIdRequest {
	optional string status = 1;
	optional int32 page = 2;
	optional int32 page_size = 3;
}

message ListOperatorsByParentOperatorIdResponse {
	repeated OperatorDetails operator_details_list = 1;
	int32 total = 2;
	int32 live_count = 3;
	int32 closed_count = 4;
	int32 pending_count = 5;
	int32 request_to_close_count = 6;
	int32 suspended_count = 7;
	int32 page = 8;
	int32 page_size = 9;
}

message ListRetailerOperatorsRequest {
	bool include_count = 1;
}

message ListRetailerOperatorsResponse {
	// OperatorInfo is the simplified information of a retailer operator, used for list retailer operators
	message OperatorInfo {
		api.common.OperatorContext operator_context = 1;
		string retailer_operator_name = 2;
		int32 company_operator_count = 3;
		int32 bottom_operator_count = 4;
		int32 bottom_live_operator_count = 5;
		bool status = 6;
		bool self_co_operation_enabled = 7;
	}
	repeated OperatorInfo retailer_operators = 1;
}

message ListCompanyOperatorsRequest {
	repeated int64 retailer_operator_ids = 1;
	bool include_count = 2;
}

message ListCompanyOperatorsResponse {
	// OperatorInfo is the simplified information of a company operator, used for list company operators
	message OperatorInfo {
		api.common.OperatorContext operator_context = 1;
		string company_operator_name = 2;
		string retailer_operator_name = 3;
		int32 bottom_operator_count = 4;
		int32 bottom_live_operator_count = 5;
		bool status = 6;
	}
	repeated OperatorInfo company_operators = 1;
}


message ListBottomOperatorsRequest {
	repeated int64 retailer_operator_ids = 1;
	repeated int64 company_operator_ids = 2;
}

message ListBottomOperatorsResponse {
	// OperatorInfo is the simplified information of a bottom operator, used for list bottom operators
	message OperatorInfo {
		api.common.OperatorContext operator_context = 1;
		string bottom_operator_name = 2;
		string retailer_operator_name = 3;
		string company_operator_name = 4;
		string mode = 5;
		string status = 6;
		string subdomain = 7;
	}
	repeated OperatorInfo operators = 1;
}

message UpdateOperatorStatusRequest {
	api.common.OperatorContext target_operator_context = 1; // target operator context
	string action = 2; // action to update the status of target operator "pending", "live", "suspended", "request_to_close", "closed", "maintain",
	google.protobuf.Timestamp actionStart = 3; // action start
	google.protobuf.Timestamp actionEnd = 4; // action end
}

message UpdateOperatorStatusResponse {
	string status = 1; // status of target operator after update
}

message ListOperatorsByAdminEmailRequest {
	string email = 1;
}

message AddOperatorByoSubdomainRequest {
	api.common.OperatorContext target_operator_context = 1;
	string subdomain = 2;
}

message AddOperatorByoSubdomainResponse {
}

message DeleteOperatorByoSubdomainRequest {
	api.common.OperatorContext target_operator_context = 1;
	string subdomain = 2;
}

message DeleteOperatorByoSubdomainResponse {
}

message AddOperatorBackofficeByoSubdomainRequest {
	api.common.OperatorContext target_operator_context = 1;
	string subdomain = 2;
}

message AddOperatorBackofficeByoSubdomainResponse {
}

message DeleteOperatorBackofficeByoSubdomainRequest {
	api.common.OperatorContext target_operator_context = 1;
	string subdomain = 2;
}

message DeleteOperatorBackofficeByoSubdomainResponse {
}

message GetOperatorAccountSettingsRequest {
	api.common.OperatorContext target_operator_context = 1;
}

message UpdateOperatorAccountSettingsRequest {
	api.common.OperatorContext target_operator_context = 1;
	user.service.v1.OperatorAccountSettings account_settings = 2;
}

message AddRegisterLoginBlacklistRequest {
	api.common.OperatorContext target_operator_context = 1;
	string id_type = 2;
	repeated string ids = 3;
}

message DeleteRegisterLoginBlacklistRequest {
	api.common.OperatorContext target_operator_context = 1;
	string id_type = 2;
	repeated string ids = 3;
}

message ListRegisterLoginBlacklistRequest {
	api.common.OperatorContext target_operator_context = 1;
	string id_type = 2;
	optional int32 page = 3;
	optional int32 page_size = 4;
}


message SetOperatorRegisterLimitConfigRequest {
	api.common.OperatorContext target_operator_context = 1;
	map<string, user.service.v1.OperatorRegisterLimitConfig> config = 2;
}

message GetOperatorRegisterLimitConfigRequest {
	api.common.OperatorContext target_operator_context = 1;
}

