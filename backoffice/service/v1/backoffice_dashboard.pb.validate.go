// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_dashboard.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetOverviewDashboardRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOverviewDashboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOverviewDashboardRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOverviewDashboardRequestMultiError, or nil if none found.
func (m *GetOverviewDashboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOverviewDashboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOverviewDashboardRequestMultiError(errors)
	}

	return nil
}

// GetOverviewDashboardRequestMultiError is an error wrapping multiple
// validation errors returned by GetOverviewDashboardRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOverviewDashboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOverviewDashboardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOverviewDashboardRequestMultiError) AllErrors() []error { return m }

// GetOverviewDashboardRequestValidationError is the validation error returned
// by GetOverviewDashboardRequest.Validate if the designated constraints
// aren't met.
type GetOverviewDashboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOverviewDashboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOverviewDashboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOverviewDashboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOverviewDashboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOverviewDashboardRequestValidationError) ErrorName() string {
	return "GetOverviewDashboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOverviewDashboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOverviewDashboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOverviewDashboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOverviewDashboardRequestValidationError{}

// Validate checks the field values on GetOverviewDashboardResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOverviewDashboardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOverviewDashboardResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOverviewDashboardResponseMultiError, or nil if none found.
func (m *GetOverviewDashboardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOverviewDashboardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRegisteredUsers()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOverviewDashboardResponseValidationError{
					field:  "RegisteredUsers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOverviewDashboardResponseValidationError{
					field:  "RegisteredUsers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegisteredUsers()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOverviewDashboardResponseValidationError{
				field:  "RegisteredUsers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFirstDepositUsers()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOverviewDashboardResponseValidationError{
					field:  "FirstDepositUsers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOverviewDashboardResponseValidationError{
					field:  "FirstDepositUsers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFirstDepositUsers()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOverviewDashboardResponseValidationError{
				field:  "FirstDepositUsers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGgr()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOverviewDashboardResponseValidationError{
					field:  "Ggr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOverviewDashboardResponseValidationError{
					field:  "Ggr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGgr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOverviewDashboardResponseValidationError{
				field:  "Ggr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNgr()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOverviewDashboardResponseValidationError{
					field:  "Ngr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOverviewDashboardResponseValidationError{
					field:  "Ngr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNgr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOverviewDashboardResponseValidationError{
				field:  "Ngr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDepositAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOverviewDashboardResponseValidationError{
					field:  "DepositAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOverviewDashboardResponseValidationError{
					field:  "DepositAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDepositAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOverviewDashboardResponseValidationError{
				field:  "DepositAmount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWithdrawalAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOverviewDashboardResponseValidationError{
					field:  "WithdrawalAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOverviewDashboardResponseValidationError{
					field:  "WithdrawalAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWithdrawalAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOverviewDashboardResponseValidationError{
				field:  "WithdrawalAmount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDepositMinusWithdrawalAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOverviewDashboardResponseValidationError{
					field:  "DepositMinusWithdrawalAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOverviewDashboardResponseValidationError{
					field:  "DepositMinusWithdrawalAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDepositMinusWithdrawalAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOverviewDashboardResponseValidationError{
				field:  "DepositMinusWithdrawalAmount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetActiveUsers()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOverviewDashboardResponseValidationError{
					field:  "ActiveUsers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOverviewDashboardResponseValidationError{
					field:  "ActiveUsers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActiveUsers()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOverviewDashboardResponseValidationError{
				field:  "ActiveUsers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetActiveDevices()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOverviewDashboardResponseValidationError{
					field:  "ActiveDevices",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOverviewDashboardResponseValidationError{
					field:  "ActiveDevices",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActiveDevices()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOverviewDashboardResponseValidationError{
				field:  "ActiveDevices",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOverviewDashboardResponseMultiError(errors)
	}

	return nil
}

// GetOverviewDashboardResponseMultiError is an error wrapping multiple
// validation errors returned by GetOverviewDashboardResponse.ValidateAll() if
// the designated constraints aren't met.
type GetOverviewDashboardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOverviewDashboardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOverviewDashboardResponseMultiError) AllErrors() []error { return m }

// GetOverviewDashboardResponseValidationError is the validation error returned
// by GetOverviewDashboardResponse.Validate if the designated constraints
// aren't met.
type GetOverviewDashboardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOverviewDashboardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOverviewDashboardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOverviewDashboardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOverviewDashboardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOverviewDashboardResponseValidationError) ErrorName() string {
	return "GetOverviewDashboardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOverviewDashboardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOverviewDashboardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOverviewDashboardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOverviewDashboardResponseValidationError{}

// Validate checks the field values on GetTimeRangedDashboardRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTimeRangedDashboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTimeRangedDashboardRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTimeRangedDashboardRequestMultiError, or nil if none found.
func (m *GetTimeRangedDashboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTimeRangedDashboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimeRangeType

	// no validation rules for CustomDays

	if len(errors) > 0 {
		return GetTimeRangedDashboardRequestMultiError(errors)
	}

	return nil
}

// GetTimeRangedDashboardRequestMultiError is an error wrapping multiple
// validation errors returned by GetTimeRangedDashboardRequest.ValidateAll()
// if the designated constraints aren't met.
type GetTimeRangedDashboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTimeRangedDashboardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTimeRangedDashboardRequestMultiError) AllErrors() []error { return m }

// GetTimeRangedDashboardRequestValidationError is the validation error
// returned by GetTimeRangedDashboardRequest.Validate if the designated
// constraints aren't met.
type GetTimeRangedDashboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTimeRangedDashboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTimeRangedDashboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTimeRangedDashboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTimeRangedDashboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTimeRangedDashboardRequestValidationError) ErrorName() string {
	return "GetTimeRangedDashboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTimeRangedDashboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTimeRangedDashboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTimeRangedDashboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTimeRangedDashboardRequestValidationError{}

// Validate checks the field values on GetTimeRangedDashboardResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTimeRangedDashboardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTimeRangedDashboardResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTimeRangedDashboardResponseMultiError, or nil if none found.
func (m *GetTimeRangedDashboardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTimeRangedDashboardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGameData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTimeRangedDashboardResponseValidationError{
						field:  fmt.Sprintf("GameData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTimeRangedDashboardResponseValidationError{
						field:  fmt.Sprintf("GameData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTimeRangedDashboardResponseValidationError{
					field:  fmt.Sprintf("GameData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPaymentData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTimeRangedDashboardResponseValidationError{
						field:  fmt.Sprintf("PaymentData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTimeRangedDashboardResponseValidationError{
						field:  fmt.Sprintf("PaymentData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTimeRangedDashboardResponseValidationError{
					field:  fmt.Sprintf("PaymentData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetActiveUsersData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTimeRangedDashboardResponseValidationError{
						field:  fmt.Sprintf("ActiveUsersData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTimeRangedDashboardResponseValidationError{
						field:  fmt.Sprintf("ActiveUsersData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTimeRangedDashboardResponseValidationError{
					field:  fmt.Sprintf("ActiveUsersData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTimeRangedDashboardResponseMultiError(errors)
	}

	return nil
}

// GetTimeRangedDashboardResponseMultiError is an error wrapping multiple
// validation errors returned by GetTimeRangedDashboardResponse.ValidateAll()
// if the designated constraints aren't met.
type GetTimeRangedDashboardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTimeRangedDashboardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTimeRangedDashboardResponseMultiError) AllErrors() []error { return m }

// GetTimeRangedDashboardResponseValidationError is the validation error
// returned by GetTimeRangedDashboardResponse.Validate if the designated
// constraints aren't met.
type GetTimeRangedDashboardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTimeRangedDashboardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTimeRangedDashboardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTimeRangedDashboardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTimeRangedDashboardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTimeRangedDashboardResponseValidationError) ErrorName() string {
	return "GetTimeRangedDashboardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTimeRangedDashboardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTimeRangedDashboardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTimeRangedDashboardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTimeRangedDashboardResponseValidationError{}

// Validate checks the field values on GetTopUsersDashboardRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTopUsersDashboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTopUsersDashboardRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTopUsersDashboardRequestMultiError, or nil if none found.
func (m *GetTopUsersDashboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTopUsersDashboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimeRangeType

	if len(errors) > 0 {
		return GetTopUsersDashboardRequestMultiError(errors)
	}

	return nil
}

// GetTopUsersDashboardRequestMultiError is an error wrapping multiple
// validation errors returned by GetTopUsersDashboardRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTopUsersDashboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTopUsersDashboardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTopUsersDashboardRequestMultiError) AllErrors() []error { return m }

// GetTopUsersDashboardRequestValidationError is the validation error returned
// by GetTopUsersDashboardRequest.Validate if the designated constraints
// aren't met.
type GetTopUsersDashboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopUsersDashboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopUsersDashboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopUsersDashboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopUsersDashboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopUsersDashboardRequestValidationError) ErrorName() string {
	return "GetTopUsersDashboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopUsersDashboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopUsersDashboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopUsersDashboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopUsersDashboardRequestValidationError{}

// Validate checks the field values on GetTopUsersDashboardResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTopUsersDashboardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTopUsersDashboardResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTopUsersDashboardResponseMultiError, or nil if none found.
func (m *GetTopUsersDashboardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTopUsersDashboardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTopDepositUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTopUsersDashboardResponseValidationError{
						field:  fmt.Sprintf("TopDepositUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTopUsersDashboardResponseValidationError{
						field:  fmt.Sprintf("TopDepositUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopUsersDashboardResponseValidationError{
					field:  fmt.Sprintf("TopDepositUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTopWithdrawalUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTopUsersDashboardResponseValidationError{
						field:  fmt.Sprintf("TopWithdrawalUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTopUsersDashboardResponseValidationError{
						field:  fmt.Sprintf("TopWithdrawalUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopUsersDashboardResponseValidationError{
					field:  fmt.Sprintf("TopWithdrawalUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTopUsersDashboardResponseMultiError(errors)
	}

	return nil
}

// GetTopUsersDashboardResponseMultiError is an error wrapping multiple
// validation errors returned by GetTopUsersDashboardResponse.ValidateAll() if
// the designated constraints aren't met.
type GetTopUsersDashboardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTopUsersDashboardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTopUsersDashboardResponseMultiError) AllErrors() []error { return m }

// GetTopUsersDashboardResponseValidationError is the validation error returned
// by GetTopUsersDashboardResponse.Validate if the designated constraints
// aren't met.
type GetTopUsersDashboardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopUsersDashboardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopUsersDashboardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopUsersDashboardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopUsersDashboardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopUsersDashboardResponseValidationError) ErrorName() string {
	return "GetTopUsersDashboardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopUsersDashboardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopUsersDashboardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopUsersDashboardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopUsersDashboardResponseValidationError{}

// Validate checks the field values on GetTopOperatorsDashboardRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTopOperatorsDashboardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTopOperatorsDashboardRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTopOperatorsDashboardRequestMultiError, or nil if none found.
func (m *GetTopOperatorsDashboardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTopOperatorsDashboardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimeRangeType

	if len(errors) > 0 {
		return GetTopOperatorsDashboardRequestMultiError(errors)
	}

	return nil
}

// GetTopOperatorsDashboardRequestMultiError is an error wrapping multiple
// validation errors returned by GetTopOperatorsDashboardRequest.ValidateAll()
// if the designated constraints aren't met.
type GetTopOperatorsDashboardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTopOperatorsDashboardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTopOperatorsDashboardRequestMultiError) AllErrors() []error { return m }

// GetTopOperatorsDashboardRequestValidationError is the validation error
// returned by GetTopOperatorsDashboardRequest.Validate if the designated
// constraints aren't met.
type GetTopOperatorsDashboardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopOperatorsDashboardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopOperatorsDashboardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopOperatorsDashboardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopOperatorsDashboardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopOperatorsDashboardRequestValidationError) ErrorName() string {
	return "GetTopOperatorsDashboardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopOperatorsDashboardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopOperatorsDashboardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopOperatorsDashboardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopOperatorsDashboardRequestValidationError{}

// Validate checks the field values on GetTopOperatorsDashboardResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetTopOperatorsDashboardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTopOperatorsDashboardResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTopOperatorsDashboardResponseMultiError, or nil if none found.
func (m *GetTopOperatorsDashboardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTopOperatorsDashboardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTopGgrOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTopOperatorsDashboardResponseValidationError{
						field:  fmt.Sprintf("TopGgrOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTopOperatorsDashboardResponseValidationError{
						field:  fmt.Sprintf("TopGgrOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopOperatorsDashboardResponseValidationError{
					field:  fmt.Sprintf("TopGgrOperators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTopNgrOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTopOperatorsDashboardResponseValidationError{
						field:  fmt.Sprintf("TopNgrOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTopOperatorsDashboardResponseValidationError{
						field:  fmt.Sprintf("TopNgrOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopOperatorsDashboardResponseValidationError{
					field:  fmt.Sprintf("TopNgrOperators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTopDepositMinusWithdrawOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTopOperatorsDashboardResponseValidationError{
						field:  fmt.Sprintf("TopDepositMinusWithdrawOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTopOperatorsDashboardResponseValidationError{
						field:  fmt.Sprintf("TopDepositMinusWithdrawOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopOperatorsDashboardResponseValidationError{
					field:  fmt.Sprintf("TopDepositMinusWithdrawOperators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTopGgrGroupOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTopOperatorsDashboardResponseValidationError{
						field:  fmt.Sprintf("TopGgrGroupOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTopOperatorsDashboardResponseValidationError{
						field:  fmt.Sprintf("TopGgrGroupOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopOperatorsDashboardResponseValidationError{
					field:  fmt.Sprintf("TopGgrGroupOperators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTopNgrGroupOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTopOperatorsDashboardResponseValidationError{
						field:  fmt.Sprintf("TopNgrGroupOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTopOperatorsDashboardResponseValidationError{
						field:  fmt.Sprintf("TopNgrGroupOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopOperatorsDashboardResponseValidationError{
					field:  fmt.Sprintf("TopNgrGroupOperators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTopDepositMinusWithdrawGroupOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTopOperatorsDashboardResponseValidationError{
						field:  fmt.Sprintf("TopDepositMinusWithdrawGroupOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTopOperatorsDashboardResponseValidationError{
						field:  fmt.Sprintf("TopDepositMinusWithdrawGroupOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopOperatorsDashboardResponseValidationError{
					field:  fmt.Sprintf("TopDepositMinusWithdrawGroupOperators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTopGgrRetailerOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTopOperatorsDashboardResponseValidationError{
						field:  fmt.Sprintf("TopGgrRetailerOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTopOperatorsDashboardResponseValidationError{
						field:  fmt.Sprintf("TopGgrRetailerOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopOperatorsDashboardResponseValidationError{
					field:  fmt.Sprintf("TopGgrRetailerOperators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTopNgrRetailerOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTopOperatorsDashboardResponseValidationError{
						field:  fmt.Sprintf("TopNgrRetailerOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTopOperatorsDashboardResponseValidationError{
						field:  fmt.Sprintf("TopNgrRetailerOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopOperatorsDashboardResponseValidationError{
					field:  fmt.Sprintf("TopNgrRetailerOperators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTopDepositMinusWithdrawRetailerOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTopOperatorsDashboardResponseValidationError{
						field:  fmt.Sprintf("TopDepositMinusWithdrawRetailerOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTopOperatorsDashboardResponseValidationError{
						field:  fmt.Sprintf("TopDepositMinusWithdrawRetailerOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopOperatorsDashboardResponseValidationError{
					field:  fmt.Sprintf("TopDepositMinusWithdrawRetailerOperators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTopOperatorsDashboardResponseMultiError(errors)
	}

	return nil
}

// GetTopOperatorsDashboardResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetTopOperatorsDashboardResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTopOperatorsDashboardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTopOperatorsDashboardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTopOperatorsDashboardResponseMultiError) AllErrors() []error { return m }

// GetTopOperatorsDashboardResponseValidationError is the validation error
// returned by GetTopOperatorsDashboardResponse.Validate if the designated
// constraints aren't met.
type GetTopOperatorsDashboardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopOperatorsDashboardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopOperatorsDashboardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopOperatorsDashboardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopOperatorsDashboardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopOperatorsDashboardResponseValidationError) ErrorName() string {
	return "GetTopOperatorsDashboardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopOperatorsDashboardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopOperatorsDashboardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopOperatorsDashboardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopOperatorsDashboardResponseValidationError{}

// Validate checks the field values on
// GetOverviewDashboardResponse_RegisteredUsers with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOverviewDashboardResponse_RegisteredUsers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetOverviewDashboardResponse_RegisteredUsers with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetOverviewDashboardResponse_RegisteredUsersMultiError, or nil if none found.
func (m *GetOverviewDashboardResponse_RegisteredUsers) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOverviewDashboardResponse_RegisteredUsers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Today

	// no validation rules for Yesterday

	if len(errors) > 0 {
		return GetOverviewDashboardResponse_RegisteredUsersMultiError(errors)
	}

	return nil
}

// GetOverviewDashboardResponse_RegisteredUsersMultiError is an error wrapping
// multiple validation errors returned by
// GetOverviewDashboardResponse_RegisteredUsers.ValidateAll() if the
// designated constraints aren't met.
type GetOverviewDashboardResponse_RegisteredUsersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOverviewDashboardResponse_RegisteredUsersMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOverviewDashboardResponse_RegisteredUsersMultiError) AllErrors() []error { return m }

// GetOverviewDashboardResponse_RegisteredUsersValidationError is the
// validation error returned by
// GetOverviewDashboardResponse_RegisteredUsers.Validate if the designated
// constraints aren't met.
type GetOverviewDashboardResponse_RegisteredUsersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOverviewDashboardResponse_RegisteredUsersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOverviewDashboardResponse_RegisteredUsersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOverviewDashboardResponse_RegisteredUsersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOverviewDashboardResponse_RegisteredUsersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOverviewDashboardResponse_RegisteredUsersValidationError) ErrorName() string {
	return "GetOverviewDashboardResponse_RegisteredUsersValidationError"
}

// Error satisfies the builtin error interface
func (e GetOverviewDashboardResponse_RegisteredUsersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOverviewDashboardResponse_RegisteredUsers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOverviewDashboardResponse_RegisteredUsersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOverviewDashboardResponse_RegisteredUsersValidationError{}

// Validate checks the field values on
// GetOverviewDashboardResponse_FirstDepositUsers with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOverviewDashboardResponse_FirstDepositUsers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetOverviewDashboardResponse_FirstDepositUsers with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetOverviewDashboardResponse_FirstDepositUsersMultiError, or nil if none found.
func (m *GetOverviewDashboardResponse_FirstDepositUsers) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOverviewDashboardResponse_FirstDepositUsers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Today

	// no validation rules for Yesterday

	if len(errors) > 0 {
		return GetOverviewDashboardResponse_FirstDepositUsersMultiError(errors)
	}

	return nil
}

// GetOverviewDashboardResponse_FirstDepositUsersMultiError is an error
// wrapping multiple validation errors returned by
// GetOverviewDashboardResponse_FirstDepositUsers.ValidateAll() if the
// designated constraints aren't met.
type GetOverviewDashboardResponse_FirstDepositUsersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOverviewDashboardResponse_FirstDepositUsersMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOverviewDashboardResponse_FirstDepositUsersMultiError) AllErrors() []error { return m }

// GetOverviewDashboardResponse_FirstDepositUsersValidationError is the
// validation error returned by
// GetOverviewDashboardResponse_FirstDepositUsers.Validate if the designated
// constraints aren't met.
type GetOverviewDashboardResponse_FirstDepositUsersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOverviewDashboardResponse_FirstDepositUsersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOverviewDashboardResponse_FirstDepositUsersValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetOverviewDashboardResponse_FirstDepositUsersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOverviewDashboardResponse_FirstDepositUsersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOverviewDashboardResponse_FirstDepositUsersValidationError) ErrorName() string {
	return "GetOverviewDashboardResponse_FirstDepositUsersValidationError"
}

// Error satisfies the builtin error interface
func (e GetOverviewDashboardResponse_FirstDepositUsersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOverviewDashboardResponse_FirstDepositUsers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOverviewDashboardResponse_FirstDepositUsersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOverviewDashboardResponse_FirstDepositUsersValidationError{}

// Validate checks the field values on GetOverviewDashboardResponse_GGR with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOverviewDashboardResponse_GGR) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOverviewDashboardResponse_GGR with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOverviewDashboardResponse_GGRMultiError, or nil if none found.
func (m *GetOverviewDashboardResponse_GGR) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOverviewDashboardResponse_GGR) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Today

	// no validation rules for Yesterday

	if len(errors) > 0 {
		return GetOverviewDashboardResponse_GGRMultiError(errors)
	}

	return nil
}

// GetOverviewDashboardResponse_GGRMultiError is an error wrapping multiple
// validation errors returned by
// GetOverviewDashboardResponse_GGR.ValidateAll() if the designated
// constraints aren't met.
type GetOverviewDashboardResponse_GGRMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOverviewDashboardResponse_GGRMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOverviewDashboardResponse_GGRMultiError) AllErrors() []error { return m }

// GetOverviewDashboardResponse_GGRValidationError is the validation error
// returned by GetOverviewDashboardResponse_GGR.Validate if the designated
// constraints aren't met.
type GetOverviewDashboardResponse_GGRValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOverviewDashboardResponse_GGRValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOverviewDashboardResponse_GGRValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOverviewDashboardResponse_GGRValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOverviewDashboardResponse_GGRValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOverviewDashboardResponse_GGRValidationError) ErrorName() string {
	return "GetOverviewDashboardResponse_GGRValidationError"
}

// Error satisfies the builtin error interface
func (e GetOverviewDashboardResponse_GGRValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOverviewDashboardResponse_GGR.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOverviewDashboardResponse_GGRValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOverviewDashboardResponse_GGRValidationError{}

// Validate checks the field values on GetOverviewDashboardResponse_NGR with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOverviewDashboardResponse_NGR) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOverviewDashboardResponse_NGR with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOverviewDashboardResponse_NGRMultiError, or nil if none found.
func (m *GetOverviewDashboardResponse_NGR) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOverviewDashboardResponse_NGR) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Today

	// no validation rules for Yesterday

	if len(errors) > 0 {
		return GetOverviewDashboardResponse_NGRMultiError(errors)
	}

	return nil
}

// GetOverviewDashboardResponse_NGRMultiError is an error wrapping multiple
// validation errors returned by
// GetOverviewDashboardResponse_NGR.ValidateAll() if the designated
// constraints aren't met.
type GetOverviewDashboardResponse_NGRMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOverviewDashboardResponse_NGRMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOverviewDashboardResponse_NGRMultiError) AllErrors() []error { return m }

// GetOverviewDashboardResponse_NGRValidationError is the validation error
// returned by GetOverviewDashboardResponse_NGR.Validate if the designated
// constraints aren't met.
type GetOverviewDashboardResponse_NGRValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOverviewDashboardResponse_NGRValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOverviewDashboardResponse_NGRValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOverviewDashboardResponse_NGRValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOverviewDashboardResponse_NGRValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOverviewDashboardResponse_NGRValidationError) ErrorName() string {
	return "GetOverviewDashboardResponse_NGRValidationError"
}

// Error satisfies the builtin error interface
func (e GetOverviewDashboardResponse_NGRValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOverviewDashboardResponse_NGR.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOverviewDashboardResponse_NGRValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOverviewDashboardResponse_NGRValidationError{}

// Validate checks the field values on
// GetOverviewDashboardResponse_DepositAmount with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOverviewDashboardResponse_DepositAmount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetOverviewDashboardResponse_DepositAmount with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetOverviewDashboardResponse_DepositAmountMultiError, or nil if none found.
func (m *GetOverviewDashboardResponse_DepositAmount) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOverviewDashboardResponse_DepositAmount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Today

	// no validation rules for Yesterday

	if len(errors) > 0 {
		return GetOverviewDashboardResponse_DepositAmountMultiError(errors)
	}

	return nil
}

// GetOverviewDashboardResponse_DepositAmountMultiError is an error wrapping
// multiple validation errors returned by
// GetOverviewDashboardResponse_DepositAmount.ValidateAll() if the designated
// constraints aren't met.
type GetOverviewDashboardResponse_DepositAmountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOverviewDashboardResponse_DepositAmountMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOverviewDashboardResponse_DepositAmountMultiError) AllErrors() []error { return m }

// GetOverviewDashboardResponse_DepositAmountValidationError is the validation
// error returned by GetOverviewDashboardResponse_DepositAmount.Validate if
// the designated constraints aren't met.
type GetOverviewDashboardResponse_DepositAmountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOverviewDashboardResponse_DepositAmountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOverviewDashboardResponse_DepositAmountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOverviewDashboardResponse_DepositAmountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOverviewDashboardResponse_DepositAmountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOverviewDashboardResponse_DepositAmountValidationError) ErrorName() string {
	return "GetOverviewDashboardResponse_DepositAmountValidationError"
}

// Error satisfies the builtin error interface
func (e GetOverviewDashboardResponse_DepositAmountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOverviewDashboardResponse_DepositAmount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOverviewDashboardResponse_DepositAmountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOverviewDashboardResponse_DepositAmountValidationError{}

// Validate checks the field values on
// GetOverviewDashboardResponse_WithdrawalAmount with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOverviewDashboardResponse_WithdrawalAmount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetOverviewDashboardResponse_WithdrawalAmount with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetOverviewDashboardResponse_WithdrawalAmountMultiError, or nil if none found.
func (m *GetOverviewDashboardResponse_WithdrawalAmount) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOverviewDashboardResponse_WithdrawalAmount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Today

	// no validation rules for Yesterday

	if len(errors) > 0 {
		return GetOverviewDashboardResponse_WithdrawalAmountMultiError(errors)
	}

	return nil
}

// GetOverviewDashboardResponse_WithdrawalAmountMultiError is an error wrapping
// multiple validation errors returned by
// GetOverviewDashboardResponse_WithdrawalAmount.ValidateAll() if the
// designated constraints aren't met.
type GetOverviewDashboardResponse_WithdrawalAmountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOverviewDashboardResponse_WithdrawalAmountMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOverviewDashboardResponse_WithdrawalAmountMultiError) AllErrors() []error { return m }

// GetOverviewDashboardResponse_WithdrawalAmountValidationError is the
// validation error returned by
// GetOverviewDashboardResponse_WithdrawalAmount.Validate if the designated
// constraints aren't met.
type GetOverviewDashboardResponse_WithdrawalAmountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOverviewDashboardResponse_WithdrawalAmountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOverviewDashboardResponse_WithdrawalAmountValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetOverviewDashboardResponse_WithdrawalAmountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOverviewDashboardResponse_WithdrawalAmountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOverviewDashboardResponse_WithdrawalAmountValidationError) ErrorName() string {
	return "GetOverviewDashboardResponse_WithdrawalAmountValidationError"
}

// Error satisfies the builtin error interface
func (e GetOverviewDashboardResponse_WithdrawalAmountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOverviewDashboardResponse_WithdrawalAmount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOverviewDashboardResponse_WithdrawalAmountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOverviewDashboardResponse_WithdrawalAmountValidationError{}

// Validate checks the field values on
// GetOverviewDashboardResponse_DepositMinusWithdrawalAmount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOverviewDashboardResponse_DepositMinusWithdrawalAmount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetOverviewDashboardResponse_DepositMinusWithdrawalAmount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOverviewDashboardResponse_DepositMinusWithdrawalAmountMultiError, or nil
// if none found.
func (m *GetOverviewDashboardResponse_DepositMinusWithdrawalAmount) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOverviewDashboardResponse_DepositMinusWithdrawalAmount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Today

	// no validation rules for Yesterday

	if len(errors) > 0 {
		return GetOverviewDashboardResponse_DepositMinusWithdrawalAmountMultiError(errors)
	}

	return nil
}

// GetOverviewDashboardResponse_DepositMinusWithdrawalAmountMultiError is an
// error wrapping multiple validation errors returned by
// GetOverviewDashboardResponse_DepositMinusWithdrawalAmount.ValidateAll() if
// the designated constraints aren't met.
type GetOverviewDashboardResponse_DepositMinusWithdrawalAmountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOverviewDashboardResponse_DepositMinusWithdrawalAmountMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOverviewDashboardResponse_DepositMinusWithdrawalAmountMultiError) AllErrors() []error {
	return m
}

// GetOverviewDashboardResponse_DepositMinusWithdrawalAmountValidationError is
// the validation error returned by
// GetOverviewDashboardResponse_DepositMinusWithdrawalAmount.Validate if the
// designated constraints aren't met.
type GetOverviewDashboardResponse_DepositMinusWithdrawalAmountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOverviewDashboardResponse_DepositMinusWithdrawalAmountValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetOverviewDashboardResponse_DepositMinusWithdrawalAmountValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetOverviewDashboardResponse_DepositMinusWithdrawalAmountValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetOverviewDashboardResponse_DepositMinusWithdrawalAmountValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetOverviewDashboardResponse_DepositMinusWithdrawalAmountValidationError) ErrorName() string {
	return "GetOverviewDashboardResponse_DepositMinusWithdrawalAmountValidationError"
}

// Error satisfies the builtin error interface
func (e GetOverviewDashboardResponse_DepositMinusWithdrawalAmountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOverviewDashboardResponse_DepositMinusWithdrawalAmount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOverviewDashboardResponse_DepositMinusWithdrawalAmountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOverviewDashboardResponse_DepositMinusWithdrawalAmountValidationError{}

// Validate checks the field values on GetOverviewDashboardResponse_ActiveUsers
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetOverviewDashboardResponse_ActiveUsers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetOverviewDashboardResponse_ActiveUsers with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetOverviewDashboardResponse_ActiveUsersMultiError, or nil if none found.
func (m *GetOverviewDashboardResponse_ActiveUsers) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOverviewDashboardResponse_ActiveUsers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Today

	// no validation rules for Yesterday

	if len(errors) > 0 {
		return GetOverviewDashboardResponse_ActiveUsersMultiError(errors)
	}

	return nil
}

// GetOverviewDashboardResponse_ActiveUsersMultiError is an error wrapping
// multiple validation errors returned by
// GetOverviewDashboardResponse_ActiveUsers.ValidateAll() if the designated
// constraints aren't met.
type GetOverviewDashboardResponse_ActiveUsersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOverviewDashboardResponse_ActiveUsersMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOverviewDashboardResponse_ActiveUsersMultiError) AllErrors() []error { return m }

// GetOverviewDashboardResponse_ActiveUsersValidationError is the validation
// error returned by GetOverviewDashboardResponse_ActiveUsers.Validate if the
// designated constraints aren't met.
type GetOverviewDashboardResponse_ActiveUsersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOverviewDashboardResponse_ActiveUsersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOverviewDashboardResponse_ActiveUsersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOverviewDashboardResponse_ActiveUsersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOverviewDashboardResponse_ActiveUsersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOverviewDashboardResponse_ActiveUsersValidationError) ErrorName() string {
	return "GetOverviewDashboardResponse_ActiveUsersValidationError"
}

// Error satisfies the builtin error interface
func (e GetOverviewDashboardResponse_ActiveUsersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOverviewDashboardResponse_ActiveUsers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOverviewDashboardResponse_ActiveUsersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOverviewDashboardResponse_ActiveUsersValidationError{}

// Validate checks the field values on
// GetOverviewDashboardResponse_ActiveDevices with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOverviewDashboardResponse_ActiveDevices) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetOverviewDashboardResponse_ActiveDevices with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetOverviewDashboardResponse_ActiveDevicesMultiError, or nil if none found.
func (m *GetOverviewDashboardResponse_ActiveDevices) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOverviewDashboardResponse_ActiveDevices) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Today

	// no validation rules for Yesterday

	if len(errors) > 0 {
		return GetOverviewDashboardResponse_ActiveDevicesMultiError(errors)
	}

	return nil
}

// GetOverviewDashboardResponse_ActiveDevicesMultiError is an error wrapping
// multiple validation errors returned by
// GetOverviewDashboardResponse_ActiveDevices.ValidateAll() if the designated
// constraints aren't met.
type GetOverviewDashboardResponse_ActiveDevicesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOverviewDashboardResponse_ActiveDevicesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOverviewDashboardResponse_ActiveDevicesMultiError) AllErrors() []error { return m }

// GetOverviewDashboardResponse_ActiveDevicesValidationError is the validation
// error returned by GetOverviewDashboardResponse_ActiveDevices.Validate if
// the designated constraints aren't met.
type GetOverviewDashboardResponse_ActiveDevicesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOverviewDashboardResponse_ActiveDevicesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOverviewDashboardResponse_ActiveDevicesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOverviewDashboardResponse_ActiveDevicesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOverviewDashboardResponse_ActiveDevicesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOverviewDashboardResponse_ActiveDevicesValidationError) ErrorName() string {
	return "GetOverviewDashboardResponse_ActiveDevicesValidationError"
}

// Error satisfies the builtin error interface
func (e GetOverviewDashboardResponse_ActiveDevicesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOverviewDashboardResponse_ActiveDevices.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOverviewDashboardResponse_ActiveDevicesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOverviewDashboardResponse_ActiveDevicesValidationError{}

// Validate checks the field values on GetTimeRangedDashboardResponse_GameData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetTimeRangedDashboardResponse_GameData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetTimeRangedDashboardResponse_GameData with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetTimeRangedDashboardResponse_GameDataMultiError, or nil if none found.
func (m *GetTimeRangedDashboardResponse_GameData) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTimeRangedDashboardResponse_GameData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Time

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTimeRangedDashboardResponse_GameDataValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTimeRangedDashboardResponse_GameDataValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTimeRangedDashboardResponse_GameDataValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTimeRangedDashboardResponse_GameDataMultiError(errors)
	}

	return nil
}

// GetTimeRangedDashboardResponse_GameDataMultiError is an error wrapping
// multiple validation errors returned by
// GetTimeRangedDashboardResponse_GameData.ValidateAll() if the designated
// constraints aren't met.
type GetTimeRangedDashboardResponse_GameDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTimeRangedDashboardResponse_GameDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTimeRangedDashboardResponse_GameDataMultiError) AllErrors() []error { return m }

// GetTimeRangedDashboardResponse_GameDataValidationError is the validation
// error returned by GetTimeRangedDashboardResponse_GameData.Validate if the
// designated constraints aren't met.
type GetTimeRangedDashboardResponse_GameDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTimeRangedDashboardResponse_GameDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTimeRangedDashboardResponse_GameDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTimeRangedDashboardResponse_GameDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTimeRangedDashboardResponse_GameDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTimeRangedDashboardResponse_GameDataValidationError) ErrorName() string {
	return "GetTimeRangedDashboardResponse_GameDataValidationError"
}

// Error satisfies the builtin error interface
func (e GetTimeRangedDashboardResponse_GameDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTimeRangedDashboardResponse_GameData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTimeRangedDashboardResponse_GameDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTimeRangedDashboardResponse_GameDataValidationError{}

// Validate checks the field values on
// GetTimeRangedDashboardResponse_PaymentData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTimeRangedDashboardResponse_PaymentData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetTimeRangedDashboardResponse_PaymentData with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetTimeRangedDashboardResponse_PaymentDataMultiError, or nil if none found.
func (m *GetTimeRangedDashboardResponse_PaymentData) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTimeRangedDashboardResponse_PaymentData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Time

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTimeRangedDashboardResponse_PaymentDataValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTimeRangedDashboardResponse_PaymentDataValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTimeRangedDashboardResponse_PaymentDataValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTimeRangedDashboardResponse_PaymentDataMultiError(errors)
	}

	return nil
}

// GetTimeRangedDashboardResponse_PaymentDataMultiError is an error wrapping
// multiple validation errors returned by
// GetTimeRangedDashboardResponse_PaymentData.ValidateAll() if the designated
// constraints aren't met.
type GetTimeRangedDashboardResponse_PaymentDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTimeRangedDashboardResponse_PaymentDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTimeRangedDashboardResponse_PaymentDataMultiError) AllErrors() []error { return m }

// GetTimeRangedDashboardResponse_PaymentDataValidationError is the validation
// error returned by GetTimeRangedDashboardResponse_PaymentData.Validate if
// the designated constraints aren't met.
type GetTimeRangedDashboardResponse_PaymentDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTimeRangedDashboardResponse_PaymentDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTimeRangedDashboardResponse_PaymentDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTimeRangedDashboardResponse_PaymentDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTimeRangedDashboardResponse_PaymentDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTimeRangedDashboardResponse_PaymentDataValidationError) ErrorName() string {
	return "GetTimeRangedDashboardResponse_PaymentDataValidationError"
}

// Error satisfies the builtin error interface
func (e GetTimeRangedDashboardResponse_PaymentDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTimeRangedDashboardResponse_PaymentData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTimeRangedDashboardResponse_PaymentDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTimeRangedDashboardResponse_PaymentDataValidationError{}

// Validate checks the field values on
// GetTimeRangedDashboardResponse_ActiveUsersData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTimeRangedDashboardResponse_ActiveUsersData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetTimeRangedDashboardResponse_ActiveUsersData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetTimeRangedDashboardResponse_ActiveUsersDataMultiError, or nil if none found.
func (m *GetTimeRangedDashboardResponse_ActiveUsersData) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTimeRangedDashboardResponse_ActiveUsersData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Time

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTimeRangedDashboardResponse_ActiveUsersDataValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTimeRangedDashboardResponse_ActiveUsersDataValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTimeRangedDashboardResponse_ActiveUsersDataValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTimeRangedDashboardResponse_ActiveUsersDataMultiError(errors)
	}

	return nil
}

// GetTimeRangedDashboardResponse_ActiveUsersDataMultiError is an error
// wrapping multiple validation errors returned by
// GetTimeRangedDashboardResponse_ActiveUsersData.ValidateAll() if the
// designated constraints aren't met.
type GetTimeRangedDashboardResponse_ActiveUsersDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTimeRangedDashboardResponse_ActiveUsersDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTimeRangedDashboardResponse_ActiveUsersDataMultiError) AllErrors() []error { return m }

// GetTimeRangedDashboardResponse_ActiveUsersDataValidationError is the
// validation error returned by
// GetTimeRangedDashboardResponse_ActiveUsersData.Validate if the designated
// constraints aren't met.
type GetTimeRangedDashboardResponse_ActiveUsersDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTimeRangedDashboardResponse_ActiveUsersDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTimeRangedDashboardResponse_ActiveUsersDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetTimeRangedDashboardResponse_ActiveUsersDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTimeRangedDashboardResponse_ActiveUsersDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTimeRangedDashboardResponse_ActiveUsersDataValidationError) ErrorName() string {
	return "GetTimeRangedDashboardResponse_ActiveUsersDataValidationError"
}

// Error satisfies the builtin error interface
func (e GetTimeRangedDashboardResponse_ActiveUsersDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTimeRangedDashboardResponse_ActiveUsersData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTimeRangedDashboardResponse_ActiveUsersDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTimeRangedDashboardResponse_ActiveUsersDataValidationError{}

// Validate checks the field values on
// GetTimeRangedDashboardResponse_GameData_Data with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTimeRangedDashboardResponse_GameData_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetTimeRangedDashboardResponse_GameData_Data with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetTimeRangedDashboardResponse_GameData_DataMultiError, or nil if none found.
func (m *GetTimeRangedDashboardResponse_GameData_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTimeRangedDashboardResponse_GameData_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ggr

	// no validation rules for Ngr

	if len(errors) > 0 {
		return GetTimeRangedDashboardResponse_GameData_DataMultiError(errors)
	}

	return nil
}

// GetTimeRangedDashboardResponse_GameData_DataMultiError is an error wrapping
// multiple validation errors returned by
// GetTimeRangedDashboardResponse_GameData_Data.ValidateAll() if the
// designated constraints aren't met.
type GetTimeRangedDashboardResponse_GameData_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTimeRangedDashboardResponse_GameData_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTimeRangedDashboardResponse_GameData_DataMultiError) AllErrors() []error { return m }

// GetTimeRangedDashboardResponse_GameData_DataValidationError is the
// validation error returned by
// GetTimeRangedDashboardResponse_GameData_Data.Validate if the designated
// constraints aren't met.
type GetTimeRangedDashboardResponse_GameData_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTimeRangedDashboardResponse_GameData_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTimeRangedDashboardResponse_GameData_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTimeRangedDashboardResponse_GameData_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTimeRangedDashboardResponse_GameData_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTimeRangedDashboardResponse_GameData_DataValidationError) ErrorName() string {
	return "GetTimeRangedDashboardResponse_GameData_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetTimeRangedDashboardResponse_GameData_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTimeRangedDashboardResponse_GameData_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTimeRangedDashboardResponse_GameData_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTimeRangedDashboardResponse_GameData_DataValidationError{}

// Validate checks the field values on
// GetTimeRangedDashboardResponse_PaymentData_Data with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTimeRangedDashboardResponse_PaymentData_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetTimeRangedDashboardResponse_PaymentData_Data with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetTimeRangedDashboardResponse_PaymentData_DataMultiError, or nil if none found.
func (m *GetTimeRangedDashboardResponse_PaymentData_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTimeRangedDashboardResponse_PaymentData_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Deposit

	// no validation rules for Withdrawal

	if len(errors) > 0 {
		return GetTimeRangedDashboardResponse_PaymentData_DataMultiError(errors)
	}

	return nil
}

// GetTimeRangedDashboardResponse_PaymentData_DataMultiError is an error
// wrapping multiple validation errors returned by
// GetTimeRangedDashboardResponse_PaymentData_Data.ValidateAll() if the
// designated constraints aren't met.
type GetTimeRangedDashboardResponse_PaymentData_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTimeRangedDashboardResponse_PaymentData_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTimeRangedDashboardResponse_PaymentData_DataMultiError) AllErrors() []error { return m }

// GetTimeRangedDashboardResponse_PaymentData_DataValidationError is the
// validation error returned by
// GetTimeRangedDashboardResponse_PaymentData_Data.Validate if the designated
// constraints aren't met.
type GetTimeRangedDashboardResponse_PaymentData_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTimeRangedDashboardResponse_PaymentData_DataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetTimeRangedDashboardResponse_PaymentData_DataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetTimeRangedDashboardResponse_PaymentData_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTimeRangedDashboardResponse_PaymentData_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTimeRangedDashboardResponse_PaymentData_DataValidationError) ErrorName() string {
	return "GetTimeRangedDashboardResponse_PaymentData_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetTimeRangedDashboardResponse_PaymentData_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTimeRangedDashboardResponse_PaymentData_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTimeRangedDashboardResponse_PaymentData_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTimeRangedDashboardResponse_PaymentData_DataValidationError{}

// Validate checks the field values on
// GetTimeRangedDashboardResponse_ActiveUsersData_Data with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTimeRangedDashboardResponse_ActiveUsersData_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetTimeRangedDashboardResponse_ActiveUsersData_Data with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetTimeRangedDashboardResponse_ActiveUsersData_DataMultiError, or nil if
// none found.
func (m *GetTimeRangedDashboardResponse_ActiveUsersData_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTimeRangedDashboardResponse_ActiveUsersData_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActiveUsers

	if len(errors) > 0 {
		return GetTimeRangedDashboardResponse_ActiveUsersData_DataMultiError(errors)
	}

	return nil
}

// GetTimeRangedDashboardResponse_ActiveUsersData_DataMultiError is an error
// wrapping multiple validation errors returned by
// GetTimeRangedDashboardResponse_ActiveUsersData_Data.ValidateAll() if the
// designated constraints aren't met.
type GetTimeRangedDashboardResponse_ActiveUsersData_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTimeRangedDashboardResponse_ActiveUsersData_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTimeRangedDashboardResponse_ActiveUsersData_DataMultiError) AllErrors() []error { return m }

// GetTimeRangedDashboardResponse_ActiveUsersData_DataValidationError is the
// validation error returned by
// GetTimeRangedDashboardResponse_ActiveUsersData_Data.Validate if the
// designated constraints aren't met.
type GetTimeRangedDashboardResponse_ActiveUsersData_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTimeRangedDashboardResponse_ActiveUsersData_DataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetTimeRangedDashboardResponse_ActiveUsersData_DataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetTimeRangedDashboardResponse_ActiveUsersData_DataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetTimeRangedDashboardResponse_ActiveUsersData_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTimeRangedDashboardResponse_ActiveUsersData_DataValidationError) ErrorName() string {
	return "GetTimeRangedDashboardResponse_ActiveUsersData_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetTimeRangedDashboardResponse_ActiveUsersData_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTimeRangedDashboardResponse_ActiveUsersData_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTimeRangedDashboardResponse_ActiveUsersData_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTimeRangedDashboardResponse_ActiveUsersData_DataValidationError{}

// Validate checks the field values on GetTopUsersDashboardResponse_User with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetTopUsersDashboardResponse_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTopUsersDashboardResponse_User
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetTopUsersDashboardResponse_UserMultiError, or nil if none found.
func (m *GetTopUsersDashboardResponse_User) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTopUsersDashboardResponse_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Avatar

	// no validation rules for Country

	// no validation rules for VipLevel

	// no validation rules for Amount

	// no validation rules for OperatorName

	if len(errors) > 0 {
		return GetTopUsersDashboardResponse_UserMultiError(errors)
	}

	return nil
}

// GetTopUsersDashboardResponse_UserMultiError is an error wrapping multiple
// validation errors returned by
// GetTopUsersDashboardResponse_User.ValidateAll() if the designated
// constraints aren't met.
type GetTopUsersDashboardResponse_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTopUsersDashboardResponse_UserMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTopUsersDashboardResponse_UserMultiError) AllErrors() []error { return m }

// GetTopUsersDashboardResponse_UserValidationError is the validation error
// returned by GetTopUsersDashboardResponse_User.Validate if the designated
// constraints aren't met.
type GetTopUsersDashboardResponse_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopUsersDashboardResponse_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopUsersDashboardResponse_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopUsersDashboardResponse_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopUsersDashboardResponse_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopUsersDashboardResponse_UserValidationError) ErrorName() string {
	return "GetTopUsersDashboardResponse_UserValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopUsersDashboardResponse_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopUsersDashboardResponse_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopUsersDashboardResponse_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopUsersDashboardResponse_UserValidationError{}

// Validate checks the field values on
// GetTopOperatorsDashboardResponse_OperatorData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTopOperatorsDashboardResponse_OperatorData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetTopOperatorsDashboardResponse_OperatorData with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetTopOperatorsDashboardResponse_OperatorDataMultiError, or nil if none found.
func (m *GetTopOperatorsDashboardResponse_OperatorData) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTopOperatorsDashboardResponse_OperatorData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for OperatorName

	// no validation rules for Amount

	if len(errors) > 0 {
		return GetTopOperatorsDashboardResponse_OperatorDataMultiError(errors)
	}

	return nil
}

// GetTopOperatorsDashboardResponse_OperatorDataMultiError is an error wrapping
// multiple validation errors returned by
// GetTopOperatorsDashboardResponse_OperatorData.ValidateAll() if the
// designated constraints aren't met.
type GetTopOperatorsDashboardResponse_OperatorDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTopOperatorsDashboardResponse_OperatorDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTopOperatorsDashboardResponse_OperatorDataMultiError) AllErrors() []error { return m }

// GetTopOperatorsDashboardResponse_OperatorDataValidationError is the
// validation error returned by
// GetTopOperatorsDashboardResponse_OperatorData.Validate if the designated
// constraints aren't met.
type GetTopOperatorsDashboardResponse_OperatorDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopOperatorsDashboardResponse_OperatorDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopOperatorsDashboardResponse_OperatorDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetTopOperatorsDashboardResponse_OperatorDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopOperatorsDashboardResponse_OperatorDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopOperatorsDashboardResponse_OperatorDataValidationError) ErrorName() string {
	return "GetTopOperatorsDashboardResponse_OperatorDataValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopOperatorsDashboardResponse_OperatorDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopOperatorsDashboardResponse_OperatorData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopOperatorsDashboardResponse_OperatorDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopOperatorsDashboardResponse_OperatorDataValidationError{}
