syntax = "proto3";

package api.backoffice.service.v1;

import "google/api/annotations.proto";
import "bcpay/service/v1/bcpay.proto";
import "common/common.proto";

option go_package = "github.com/infigaming-com/meepo-api/backoffice/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.backoffice.service.v1";

// BackofficeBcpay service
// Provides methods for backoffice bcpay management
service BackofficeBcpay {
  
	rpc GetMerchant(GetMerchantRequest) returns (bcpay.service.v1.GetMerchantResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/bcpay/merchant/add"
      body: "*"
    };
  }

	rpc BankAccountList(BankAccountListRequest) returns (bcpay.service.v1.BankAccountListResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/bcpay/bankaccount/list"
      body: "*"
    };
	}

	rpc AddBankAccount(AddBankAccountRequest) returns (bcpay.service.v1.AddBankAccountResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/bcpay/bankaccount/add"
      body: "*"
    };
	}

	rpc UpdateBankAccount(UpdateBankAccountRequest) returns (bcpay.service.v1.UpdateBankAccountResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/bcpay/bankaccount/update"
      body: "*"
    };
	}

	rpc TransactionList(TransactionListRequest) returns (bcpay.service.v1.TransactionListResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/bcpay/transaction/list"
      body: "*"
    };
	}

	rpc AuditTransaction(AuditTransactionRequest) returns (bcpay.service.v1.AuditTransactionResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/bcpay/transaction/add"
      body: "*"
    };
	}
}


message GetMerchantRequest {
	string name = 1;
}

message BankAccountListRequest {
	string currency = 1;
  api.common.OperatorContextFilters operator_context_filters = 2;
}

message AddBankAccountRequest {
	bcpay.service.v1.BankAccount bank_account = 1;
}

message UpdateBankAccountRequest {
	bcpay.service.v1.BankAccount bank_account = 1;
}

message TransactionListRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
}

message AuditTransactionRequest {
	string transaction_id = 1;
	// audit a transaction "approve" or "deline"
	string audit = 2;
}
