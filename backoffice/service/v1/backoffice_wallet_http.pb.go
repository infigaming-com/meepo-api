// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_wallet.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackoffice_WalletGetWalletCreditTransactions = "/api.backoffice.service.v1.Backoffice_Wallet/GetWalletCreditTransactions"
const OperationBackoffice_WalletGetWallets = "/api.backoffice.service.v1.Backoffice_Wallet/GetWallets"
const OperationBackoffice_WalletUpdateWallet = "/api.backoffice.service.v1.Backoffice_Wallet/UpdateWallet"

type Backoffice_WalletHTTPServer interface {
	GetWalletCreditTransactions(context.Context, *GetWalletCreditTransactionsRequest) (*GetWalletCreditTransactionsResponse, error)
	GetWallets(context.Context, *GetWalletsRequest) (*GetWalletsResponse, error)
	UpdateWallet(context.Context, *UpdateWalletRequest) (*UpdateWalletResponse, error)
}

func RegisterBackoffice_WalletHTTPServer(s *http.Server, srv Backoffice_WalletHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/wallet/get", _Backoffice_Wallet_GetWallets0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/credit-transactions/get", _Backoffice_Wallet_GetWalletCreditTransactions0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/update", _Backoffice_Wallet_UpdateWallet0_HTTP_Handler(srv))
}

func _Backoffice_Wallet_GetWallets0_HTTP_Handler(srv Backoffice_WalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWalletsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_WalletGetWallets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWallets(ctx, req.(*GetWalletsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWalletsResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Wallet_GetWalletCreditTransactions0_HTTP_Handler(srv Backoffice_WalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWalletCreditTransactionsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_WalletGetWalletCreditTransactions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWalletCreditTransactions(ctx, req.(*GetWalletCreditTransactionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWalletCreditTransactionsResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Wallet_UpdateWallet0_HTTP_Handler(srv Backoffice_WalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateWalletRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_WalletUpdateWallet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateWallet(ctx, req.(*UpdateWalletRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateWalletResponse)
		return ctx.Result(200, reply)
	}
}

type Backoffice_WalletHTTPClient interface {
	GetWalletCreditTransactions(ctx context.Context, req *GetWalletCreditTransactionsRequest, opts ...http.CallOption) (rsp *GetWalletCreditTransactionsResponse, err error)
	GetWallets(ctx context.Context, req *GetWalletsRequest, opts ...http.CallOption) (rsp *GetWalletsResponse, err error)
	UpdateWallet(ctx context.Context, req *UpdateWalletRequest, opts ...http.CallOption) (rsp *UpdateWalletResponse, err error)
}

type Backoffice_WalletHTTPClientImpl struct {
	cc *http.Client
}

func NewBackoffice_WalletHTTPClient(client *http.Client) Backoffice_WalletHTTPClient {
	return &Backoffice_WalletHTTPClientImpl{client}
}

func (c *Backoffice_WalletHTTPClientImpl) GetWalletCreditTransactions(ctx context.Context, in *GetWalletCreditTransactionsRequest, opts ...http.CallOption) (*GetWalletCreditTransactionsResponse, error) {
	var out GetWalletCreditTransactionsResponse
	pattern := "/v1/backoffice/wallet/credit-transactions/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_WalletGetWalletCreditTransactions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_WalletHTTPClientImpl) GetWallets(ctx context.Context, in *GetWalletsRequest, opts ...http.CallOption) (*GetWalletsResponse, error) {
	var out GetWalletsResponse
	pattern := "/v1/backoffice/wallet/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_WalletGetWallets))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_WalletHTTPClientImpl) UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...http.CallOption) (*UpdateWalletResponse, error) {
	var out UpdateWalletResponse
	pattern := "/v1/backoffice/wallet/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_WalletUpdateWallet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
