// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_wallet.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/infigaming-com/meepo-api/wallet/service/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficeWalletAddWalletCurrency = "/api.backoffice.service.v1.BackofficeWallet/AddWalletCurrency"
const OperationBackofficeWalletDeleteDepositRewardSequences = "/api.backoffice.service.v1.BackofficeWallet/DeleteDepositRewardSequences"
const OperationBackofficeWalletGetDepositRewardConfig = "/api.backoffice.service.v1.BackofficeWallet/GetDepositRewardConfig"
const OperationBackofficeWalletGetExchangeRates = "/api.backoffice.service.v1.BackofficeWallet/GetExchangeRates"
const OperationBackofficeWalletGetOperatorBalance = "/api.backoffice.service.v1.BackofficeWallet/GetOperatorBalance"
const OperationBackofficeWalletGetWalletCreditTransactions = "/api.backoffice.service.v1.BackofficeWallet/GetWalletCreditTransactions"
const OperationBackofficeWalletGetWalletCredits = "/api.backoffice.service.v1.BackofficeWallet/GetWalletCredits"
const OperationBackofficeWalletGetWallets = "/api.backoffice.service.v1.BackofficeWallet/GetWallets"
const OperationBackofficeWalletListOperatorBalanceTransactions = "/api.backoffice.service.v1.BackofficeWallet/ListOperatorBalanceTransactions"
const OperationBackofficeWalletListOperatorBalances = "/api.backoffice.service.v1.BackofficeWallet/ListOperatorBalances"
const OperationBackofficeWalletListWalletBalanceTransactions = "/api.backoffice.service.v1.BackofficeWallet/ListWalletBalanceTransactions"
const OperationBackofficeWalletListWalletCurrencies = "/api.backoffice.service.v1.BackofficeWallet/ListWalletCurrencies"
const OperationBackofficeWalletOperatorBalanceFreeze = "/api.backoffice.service.v1.BackofficeWallet/OperatorBalanceFreeze"
const OperationBackofficeWalletOperatorBalanceRollback = "/api.backoffice.service.v1.BackofficeWallet/OperatorBalanceRollback"
const OperationBackofficeWalletOperatorBalanceSettle = "/api.backoffice.service.v1.BackofficeWallet/OperatorBalanceSettle"
const OperationBackofficeWalletOperatorSwap = "/api.backoffice.service.v1.BackofficeWallet/OperatorSwap"
const OperationBackofficeWalletOperatorTransfer = "/api.backoffice.service.v1.BackofficeWallet/OperatorTransfer"
const OperationBackofficeWalletSetDepositRewardSequences = "/api.backoffice.service.v1.BackofficeWallet/SetDepositRewardSequences"
const OperationBackofficeWalletUpdateOperatorBalance = "/api.backoffice.service.v1.BackofficeWallet/UpdateOperatorBalance"
const OperationBackofficeWalletUpdateWallet = "/api.backoffice.service.v1.BackofficeWallet/UpdateWallet"
const OperationBackofficeWalletUpdateWalletCurrency = "/api.backoffice.service.v1.BackofficeWallet/UpdateWalletCurrency"

type BackofficeWalletHTTPServer interface {
	AddWalletCurrency(context.Context, *AddWalletCurrencyRequest) (*AddWalletCurrencyResponse, error)
	// DeleteDepositRewardSequences DeleteDepositRewardSequences deletes a deposit reward sequence of a operator currency config
	DeleteDepositRewardSequences(context.Context, *DeleteDepositRewardSequencesRequest) (*v1.DeleteDepositRewardSequencesResponse, error)
	// GetDepositRewardConfig GetDepositRewardConfig returns the default and custom deposit reward config based on currency and operator context
	GetDepositRewardConfig(context.Context, *GetDepositRewardConfigRequest) (*v1.GetDepositRewardConfigResponse, error)
	GetExchangeRates(context.Context, *GetExchangeRatesRequest) (*GetExchangeRatesResponse, error)
	// GetOperatorBalance GetOperatorBalance gets the balances of an operator
	GetOperatorBalance(context.Context, *v1.GetOperatorBalanceRequest) (*v1.GetOperatorBalanceResponse, error)
	GetWalletCreditTransactions(context.Context, *GetWalletCreditTransactionsRequest) (*GetWalletCreditTransactionsResponse, error)
	GetWalletCredits(context.Context, *GetWalletCreditsRequest) (*GetWalletCreditsResponse, error)
	GetWallets(context.Context, *GetWalletsRequest) (*v1.GetWalletsResponse, error)
	// ListOperatorBalanceTransactions ListOperatorBalanceTransactions lists the balance transactions of an operator
	ListOperatorBalanceTransactions(context.Context, *ListOperatorBalanceTransactionsRequest) (*ListOperatorBalanceTransactionsResponse, error)
	// ListOperatorBalances ListOperatorBalances lists all operator balances which belong to the backoffice operator
	ListOperatorBalances(context.Context, *ListOperatorBalancesRequest) (*v1.ListBottomOperatorBalancesResponse, error)
	// ListWalletBalanceTransactions ListWalletBalanceTransactions provides balance transactions for a specific user in User transactions page.
	ListWalletBalanceTransactions(context.Context, *ListWalletBalanceTransactionsRequest) (*ListWalletBalanceTransactionsResponse, error)
	ListWalletCurrencies(context.Context, *ListWalletCurrenciesRequest) (*ListWalletCurrenciesResponse, error)
	// OperatorBalanceFreeze OperatorFreeze freezes cash of an operator
	OperatorBalanceFreeze(context.Context, *OperatorBalanceFreezeRequest) (*OperatorBalanceFreezeResponse, error)
	// OperatorBalanceRollback OperatorRollback rolls back frozen cash of an operator
	OperatorBalanceRollback(context.Context, *OperatorBalanceRollbackRequest) (*OperatorBalanceRollbackResponse, error)
	// OperatorBalanceSettle OperatorSettle settles frozen cash of an operator
	OperatorBalanceSettle(context.Context, *OperatorBalanceSettleRequest) (*OperatorBalanceSettleResponse, error)
	// OperatorSwap OperatorSwap swaps cash between two balances of the same company's operator
	OperatorSwap(context.Context, *OperatorSwapRequest) (*OperatorSwapResponse, error)
	// OperatorTransfer OperatorTransfer transfers cash from one operator to its company operator, only allow USD, USDT, USDC, 1:1 exchange
	OperatorTransfer(context.Context, *OperatorTransferRequest) (*OperatorTransferResponse, error)
	// SetDepositRewardSequences SetDepositRewardSequences sets the deposit reward sequences of a operator currency config
	SetDepositRewardSequences(context.Context, *SetDepositRewardSequencesRequest) (*v1.SetDepositRewardSequencesResponse, error)
	// UpdateOperatorBalance UpdateOperatorBalance updates an operator balanceï¼Œ now only support update the enabled status
	UpdateOperatorBalance(context.Context, *UpdateOperatorBalanceRequest) (*UpdateOperatorBalanceResponse, error)
	UpdateWallet(context.Context, *UpdateWalletRequest) (*UpdateWalletResponse, error)
	UpdateWalletCurrency(context.Context, *UpdateWalletCurrencyRequest) (*UpdateWalletCurrencyResponse, error)
}

func RegisterBackofficeWalletHTTPServer(s *http.Server, srv BackofficeWalletHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/wallet/get", _BackofficeWallet_GetWallets0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/credits/get", _BackofficeWallet_GetWalletCredits0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/balance-transactions/list", _BackofficeWallet_ListWalletBalanceTransactions0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/credit-transactions/get", _BackofficeWallet_GetWalletCreditTransactions0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/update", _BackofficeWallet_UpdateWallet0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/currencies/add", _BackofficeWallet_AddWalletCurrency0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/currencies/list", _BackofficeWallet_ListWalletCurrencies0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/currencies/update", _BackofficeWallet_UpdateWalletCurrency0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/operator/balances/list", _BackofficeWallet_ListOperatorBalances0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/exchange-rates/get", _BackofficeWallet_GetExchangeRates0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/operator/transfer", _BackofficeWallet_OperatorTransfer0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/operator/swap", _BackofficeWallet_OperatorSwap0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/operator/balance-freeze", _BackofficeWallet_OperatorBalanceFreeze0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/operator/balance-rollback", _BackofficeWallet_OperatorBalanceRollback0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/operator/balance-settle", _BackofficeWallet_OperatorBalanceSettle0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/operator/transactions/list", _BackofficeWallet_ListOperatorBalanceTransactions0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/operator/balance/update", _BackofficeWallet_UpdateOperatorBalance0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/operator/balance/get", _BackofficeWallet_GetOperatorBalance0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/deposit-reward/sequences/set", _BackofficeWallet_SetDepositRewardSequences0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/deposit-reward/sequences/delete", _BackofficeWallet_DeleteDepositRewardSequences0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/deposit-reward/config/get", _BackofficeWallet_GetDepositRewardConfig0_HTTP_Handler(srv))
}

func _BackofficeWallet_GetWallets0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWalletsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletGetWallets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWallets(ctx, req.(*GetWalletsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetWalletsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeWallet_GetWalletCredits0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWalletCreditsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletGetWalletCredits)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWalletCredits(ctx, req.(*GetWalletCreditsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWalletCreditsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeWallet_ListWalletBalanceTransactions0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWalletBalanceTransactionsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletListWalletBalanceTransactions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWalletBalanceTransactions(ctx, req.(*ListWalletBalanceTransactionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWalletBalanceTransactionsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeWallet_GetWalletCreditTransactions0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWalletCreditTransactionsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletGetWalletCreditTransactions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWalletCreditTransactions(ctx, req.(*GetWalletCreditTransactionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWalletCreditTransactionsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeWallet_UpdateWallet0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateWalletRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletUpdateWallet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateWallet(ctx, req.(*UpdateWalletRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateWalletResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeWallet_AddWalletCurrency0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddWalletCurrencyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletAddWalletCurrency)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddWalletCurrency(ctx, req.(*AddWalletCurrencyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddWalletCurrencyResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeWallet_ListWalletCurrencies0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWalletCurrenciesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletListWalletCurrencies)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWalletCurrencies(ctx, req.(*ListWalletCurrenciesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWalletCurrenciesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeWallet_UpdateWalletCurrency0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateWalletCurrencyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletUpdateWalletCurrency)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateWalletCurrency(ctx, req.(*UpdateWalletCurrencyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateWalletCurrencyResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeWallet_ListOperatorBalances0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOperatorBalancesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletListOperatorBalances)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOperatorBalances(ctx, req.(*ListOperatorBalancesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListBottomOperatorBalancesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeWallet_GetExchangeRates0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetExchangeRatesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletGetExchangeRates)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetExchangeRates(ctx, req.(*GetExchangeRatesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetExchangeRatesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeWallet_OperatorTransfer0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OperatorTransferRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletOperatorTransfer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OperatorTransfer(ctx, req.(*OperatorTransferRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OperatorTransferResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeWallet_OperatorSwap0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OperatorSwapRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletOperatorSwap)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OperatorSwap(ctx, req.(*OperatorSwapRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OperatorSwapResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeWallet_OperatorBalanceFreeze0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OperatorBalanceFreezeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletOperatorBalanceFreeze)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OperatorBalanceFreeze(ctx, req.(*OperatorBalanceFreezeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OperatorBalanceFreezeResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeWallet_OperatorBalanceRollback0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OperatorBalanceRollbackRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletOperatorBalanceRollback)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OperatorBalanceRollback(ctx, req.(*OperatorBalanceRollbackRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OperatorBalanceRollbackResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeWallet_OperatorBalanceSettle0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OperatorBalanceSettleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletOperatorBalanceSettle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OperatorBalanceSettle(ctx, req.(*OperatorBalanceSettleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OperatorBalanceSettleResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeWallet_ListOperatorBalanceTransactions0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOperatorBalanceTransactionsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletListOperatorBalanceTransactions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOperatorBalanceTransactions(ctx, req.(*ListOperatorBalanceTransactionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOperatorBalanceTransactionsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeWallet_UpdateOperatorBalance0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateOperatorBalanceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletUpdateOperatorBalance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOperatorBalance(ctx, req.(*UpdateOperatorBalanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateOperatorBalanceResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeWallet_GetOperatorBalance0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetOperatorBalanceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletGetOperatorBalance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOperatorBalance(ctx, req.(*v1.GetOperatorBalanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetOperatorBalanceResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeWallet_SetDepositRewardSequences0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetDepositRewardSequencesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletSetDepositRewardSequences)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetDepositRewardSequences(ctx, req.(*SetDepositRewardSequencesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.SetDepositRewardSequencesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeWallet_DeleteDepositRewardSequences0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDepositRewardSequencesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletDeleteDepositRewardSequences)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDepositRewardSequences(ctx, req.(*DeleteDepositRewardSequencesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DeleteDepositRewardSequencesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeWallet_GetDepositRewardConfig0_HTTP_Handler(srv BackofficeWalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDepositRewardConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeWalletGetDepositRewardConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDepositRewardConfig(ctx, req.(*GetDepositRewardConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetDepositRewardConfigResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficeWalletHTTPClient interface {
	AddWalletCurrency(ctx context.Context, req *AddWalletCurrencyRequest, opts ...http.CallOption) (rsp *AddWalletCurrencyResponse, err error)
	DeleteDepositRewardSequences(ctx context.Context, req *DeleteDepositRewardSequencesRequest, opts ...http.CallOption) (rsp *v1.DeleteDepositRewardSequencesResponse, err error)
	GetDepositRewardConfig(ctx context.Context, req *GetDepositRewardConfigRequest, opts ...http.CallOption) (rsp *v1.GetDepositRewardConfigResponse, err error)
	GetExchangeRates(ctx context.Context, req *GetExchangeRatesRequest, opts ...http.CallOption) (rsp *GetExchangeRatesResponse, err error)
	GetOperatorBalance(ctx context.Context, req *v1.GetOperatorBalanceRequest, opts ...http.CallOption) (rsp *v1.GetOperatorBalanceResponse, err error)
	GetWalletCreditTransactions(ctx context.Context, req *GetWalletCreditTransactionsRequest, opts ...http.CallOption) (rsp *GetWalletCreditTransactionsResponse, err error)
	GetWalletCredits(ctx context.Context, req *GetWalletCreditsRequest, opts ...http.CallOption) (rsp *GetWalletCreditsResponse, err error)
	GetWallets(ctx context.Context, req *GetWalletsRequest, opts ...http.CallOption) (rsp *v1.GetWalletsResponse, err error)
	ListOperatorBalanceTransactions(ctx context.Context, req *ListOperatorBalanceTransactionsRequest, opts ...http.CallOption) (rsp *ListOperatorBalanceTransactionsResponse, err error)
	ListOperatorBalances(ctx context.Context, req *ListOperatorBalancesRequest, opts ...http.CallOption) (rsp *v1.ListBottomOperatorBalancesResponse, err error)
	ListWalletBalanceTransactions(ctx context.Context, req *ListWalletBalanceTransactionsRequest, opts ...http.CallOption) (rsp *ListWalletBalanceTransactionsResponse, err error)
	ListWalletCurrencies(ctx context.Context, req *ListWalletCurrenciesRequest, opts ...http.CallOption) (rsp *ListWalletCurrenciesResponse, err error)
	OperatorBalanceFreeze(ctx context.Context, req *OperatorBalanceFreezeRequest, opts ...http.CallOption) (rsp *OperatorBalanceFreezeResponse, err error)
	OperatorBalanceRollback(ctx context.Context, req *OperatorBalanceRollbackRequest, opts ...http.CallOption) (rsp *OperatorBalanceRollbackResponse, err error)
	OperatorBalanceSettle(ctx context.Context, req *OperatorBalanceSettleRequest, opts ...http.CallOption) (rsp *OperatorBalanceSettleResponse, err error)
	OperatorSwap(ctx context.Context, req *OperatorSwapRequest, opts ...http.CallOption) (rsp *OperatorSwapResponse, err error)
	OperatorTransfer(ctx context.Context, req *OperatorTransferRequest, opts ...http.CallOption) (rsp *OperatorTransferResponse, err error)
	SetDepositRewardSequences(ctx context.Context, req *SetDepositRewardSequencesRequest, opts ...http.CallOption) (rsp *v1.SetDepositRewardSequencesResponse, err error)
	UpdateOperatorBalance(ctx context.Context, req *UpdateOperatorBalanceRequest, opts ...http.CallOption) (rsp *UpdateOperatorBalanceResponse, err error)
	UpdateWallet(ctx context.Context, req *UpdateWalletRequest, opts ...http.CallOption) (rsp *UpdateWalletResponse, err error)
	UpdateWalletCurrency(ctx context.Context, req *UpdateWalletCurrencyRequest, opts ...http.CallOption) (rsp *UpdateWalletCurrencyResponse, err error)
}

type BackofficeWalletHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficeWalletHTTPClient(client *http.Client) BackofficeWalletHTTPClient {
	return &BackofficeWalletHTTPClientImpl{client}
}

func (c *BackofficeWalletHTTPClientImpl) AddWalletCurrency(ctx context.Context, in *AddWalletCurrencyRequest, opts ...http.CallOption) (*AddWalletCurrencyResponse, error) {
	var out AddWalletCurrencyResponse
	pattern := "/v1/backoffice/wallet/currencies/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletAddWalletCurrency))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeWalletHTTPClientImpl) DeleteDepositRewardSequences(ctx context.Context, in *DeleteDepositRewardSequencesRequest, opts ...http.CallOption) (*v1.DeleteDepositRewardSequencesResponse, error) {
	var out v1.DeleteDepositRewardSequencesResponse
	pattern := "/v1/backoffice/wallet/deposit-reward/sequences/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletDeleteDepositRewardSequences))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeWalletHTTPClientImpl) GetDepositRewardConfig(ctx context.Context, in *GetDepositRewardConfigRequest, opts ...http.CallOption) (*v1.GetDepositRewardConfigResponse, error) {
	var out v1.GetDepositRewardConfigResponse
	pattern := "/v1/backoffice/wallet/deposit-reward/config/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletGetDepositRewardConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeWalletHTTPClientImpl) GetExchangeRates(ctx context.Context, in *GetExchangeRatesRequest, opts ...http.CallOption) (*GetExchangeRatesResponse, error) {
	var out GetExchangeRatesResponse
	pattern := "/v1/backoffice/wallet/exchange-rates/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletGetExchangeRates))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeWalletHTTPClientImpl) GetOperatorBalance(ctx context.Context, in *v1.GetOperatorBalanceRequest, opts ...http.CallOption) (*v1.GetOperatorBalanceResponse, error) {
	var out v1.GetOperatorBalanceResponse
	pattern := "/v1/backoffice/wallet/operator/balance/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletGetOperatorBalance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeWalletHTTPClientImpl) GetWalletCreditTransactions(ctx context.Context, in *GetWalletCreditTransactionsRequest, opts ...http.CallOption) (*GetWalletCreditTransactionsResponse, error) {
	var out GetWalletCreditTransactionsResponse
	pattern := "/v1/backoffice/wallet/credit-transactions/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletGetWalletCreditTransactions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeWalletHTTPClientImpl) GetWalletCredits(ctx context.Context, in *GetWalletCreditsRequest, opts ...http.CallOption) (*GetWalletCreditsResponse, error) {
	var out GetWalletCreditsResponse
	pattern := "/v1/backoffice/wallet/credits/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletGetWalletCredits))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeWalletHTTPClientImpl) GetWallets(ctx context.Context, in *GetWalletsRequest, opts ...http.CallOption) (*v1.GetWalletsResponse, error) {
	var out v1.GetWalletsResponse
	pattern := "/v1/backoffice/wallet/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletGetWallets))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeWalletHTTPClientImpl) ListOperatorBalanceTransactions(ctx context.Context, in *ListOperatorBalanceTransactionsRequest, opts ...http.CallOption) (*ListOperatorBalanceTransactionsResponse, error) {
	var out ListOperatorBalanceTransactionsResponse
	pattern := "/v1/backoffice/wallet/operator/transactions/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletListOperatorBalanceTransactions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeWalletHTTPClientImpl) ListOperatorBalances(ctx context.Context, in *ListOperatorBalancesRequest, opts ...http.CallOption) (*v1.ListBottomOperatorBalancesResponse, error) {
	var out v1.ListBottomOperatorBalancesResponse
	pattern := "/v1/backoffice/wallet/operator/balances/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletListOperatorBalances))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeWalletHTTPClientImpl) ListWalletBalanceTransactions(ctx context.Context, in *ListWalletBalanceTransactionsRequest, opts ...http.CallOption) (*ListWalletBalanceTransactionsResponse, error) {
	var out ListWalletBalanceTransactionsResponse
	pattern := "/v1/backoffice/wallet/balance-transactions/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletListWalletBalanceTransactions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeWalletHTTPClientImpl) ListWalletCurrencies(ctx context.Context, in *ListWalletCurrenciesRequest, opts ...http.CallOption) (*ListWalletCurrenciesResponse, error) {
	var out ListWalletCurrenciesResponse
	pattern := "/v1/backoffice/wallet/currencies/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletListWalletCurrencies))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeWalletHTTPClientImpl) OperatorBalanceFreeze(ctx context.Context, in *OperatorBalanceFreezeRequest, opts ...http.CallOption) (*OperatorBalanceFreezeResponse, error) {
	var out OperatorBalanceFreezeResponse
	pattern := "/v1/backoffice/wallet/operator/balance-freeze"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletOperatorBalanceFreeze))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeWalletHTTPClientImpl) OperatorBalanceRollback(ctx context.Context, in *OperatorBalanceRollbackRequest, opts ...http.CallOption) (*OperatorBalanceRollbackResponse, error) {
	var out OperatorBalanceRollbackResponse
	pattern := "/v1/backoffice/wallet/operator/balance-rollback"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletOperatorBalanceRollback))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeWalletHTTPClientImpl) OperatorBalanceSettle(ctx context.Context, in *OperatorBalanceSettleRequest, opts ...http.CallOption) (*OperatorBalanceSettleResponse, error) {
	var out OperatorBalanceSettleResponse
	pattern := "/v1/backoffice/wallet/operator/balance-settle"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletOperatorBalanceSettle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeWalletHTTPClientImpl) OperatorSwap(ctx context.Context, in *OperatorSwapRequest, opts ...http.CallOption) (*OperatorSwapResponse, error) {
	var out OperatorSwapResponse
	pattern := "/v1/backoffice/wallet/operator/swap"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletOperatorSwap))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeWalletHTTPClientImpl) OperatorTransfer(ctx context.Context, in *OperatorTransferRequest, opts ...http.CallOption) (*OperatorTransferResponse, error) {
	var out OperatorTransferResponse
	pattern := "/v1/backoffice/wallet/operator/transfer"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletOperatorTransfer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeWalletHTTPClientImpl) SetDepositRewardSequences(ctx context.Context, in *SetDepositRewardSequencesRequest, opts ...http.CallOption) (*v1.SetDepositRewardSequencesResponse, error) {
	var out v1.SetDepositRewardSequencesResponse
	pattern := "/v1/backoffice/wallet/deposit-reward/sequences/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletSetDepositRewardSequences))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeWalletHTTPClientImpl) UpdateOperatorBalance(ctx context.Context, in *UpdateOperatorBalanceRequest, opts ...http.CallOption) (*UpdateOperatorBalanceResponse, error) {
	var out UpdateOperatorBalanceResponse
	pattern := "/v1/backoffice/wallet/operator/balance/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletUpdateOperatorBalance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeWalletHTTPClientImpl) UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...http.CallOption) (*UpdateWalletResponse, error) {
	var out UpdateWalletResponse
	pattern := "/v1/backoffice/wallet/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletUpdateWallet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeWalletHTTPClientImpl) UpdateWalletCurrency(ctx context.Context, in *UpdateWalletCurrencyRequest, opts ...http.CallOption) (*UpdateWalletCurrencyResponse, error) {
	var out UpdateWalletCurrencyResponse
	pattern := "/v1/backoffice/wallet/currencies/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeWalletUpdateWalletCurrency))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
