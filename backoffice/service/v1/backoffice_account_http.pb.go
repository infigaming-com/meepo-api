// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_account.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficeAccountAccountInfo = "/api.backoffice.service.v1.BackofficeAccount/AccountInfo"
const OperationBackofficeAccountAddAccount = "/api.backoffice.service.v1.BackofficeAccount/AddAccount"
const OperationBackofficeAccountBind2fa = "/api.backoffice.service.v1.BackofficeAccount/Bind2fa"
const OperationBackofficeAccountGenerate2fa = "/api.backoffice.service.v1.BackofficeAccount/Generate2fa"
const OperationBackofficeAccountLogin = "/api.backoffice.service.v1.BackofficeAccount/Login"
const OperationBackofficeAccountRegister = "/api.backoffice.service.v1.BackofficeAccount/Register"
const OperationBackofficeAccountResetPassword = "/api.backoffice.service.v1.BackofficeAccount/ResetPassword"
const OperationBackofficeAccountSendEmailVerification = "/api.backoffice.service.v1.BackofficeAccount/SendEmailVerification"
const OperationBackofficeAccountSendMobileVerification = "/api.backoffice.service.v1.BackofficeAccount/SendMobileVerification"
const OperationBackofficeAccountSendRegisterVerificationCode = "/api.backoffice.service.v1.BackofficeAccount/SendRegisterVerificationCode"
const OperationBackofficeAccountUnbind2fa = "/api.backoffice.service.v1.BackofficeAccount/Unbind2fa"
const OperationBackofficeAccountUpdateAccount = "/api.backoffice.service.v1.BackofficeAccount/UpdateAccount"
const OperationBackofficeAccountVerifyEmail = "/api.backoffice.service.v1.BackofficeAccount/VerifyEmail"
const OperationBackofficeAccountVerifyMobile = "/api.backoffice.service.v1.BackofficeAccount/VerifyMobile"

type BackofficeAccountHTTPServer interface {
	AccountInfo(context.Context, *AccountInfoRequest) (*AccountInfoResponse, error)
	AddAccount(context.Context, *AddAccountRequest) (*AddAccountResponse, error)
	Bind2Fa(context.Context, *Bind2FaRequest) (*Bind2FaResponse, error)
	Generate2Fa(context.Context, *Generate2FaRequest) (*Generate2FaResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	SendEmailVerification(context.Context, *SendEmailVerificationRequest) (*SendEmailVerificationResponse, error)
	SendMobileVerification(context.Context, *SendMobileVerificationRequest) (*SendMobileVerificationResponse, error)
	SendRegisterVerificationCode(context.Context, *SendRegisterVerificationCodeRequest) (*SendRegisterVerificationCodeResponse, error)
	Unbind2Fa(context.Context, *Unbind2FaRequest) (*Unbind2FaResponse, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	VerifyMobile(context.Context, *VerifyMobileRequest) (*VerifyMobileResponse, error)
}

func RegisterBackofficeAccountHTTPServer(s *http.Server, srv BackofficeAccountHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/accounts/add", _BackofficeAccount_AddAccount0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/email/verification/send", _BackofficeAccount_SendEmailVerification0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/email/verify", _BackofficeAccount_VerifyEmail0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/mobile/verification/send", _BackofficeAccount_SendMobileVerification0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/mobile/verify", _BackofficeAccount_VerifyMobile0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/password/reset", _BackofficeAccount_ResetPassword0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/2fa/generate", _BackofficeAccount_Generate2Fa0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/2fa/bind", _BackofficeAccount_Bind2Fa0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/2fa/unbind", _BackofficeAccount_Unbind2Fa0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/update", _BackofficeAccount_UpdateAccount0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/login", _BackofficeAccount_Login1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/register", _BackofficeAccount_Register1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/register/verification/send", _BackofficeAccount_SendRegisterVerificationCode0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/info", _BackofficeAccount_AccountInfo0_HTTP_Handler(srv))
}

func _BackofficeAccount_AddAccount0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountAddAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddAccount(ctx, req.(*AddAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddAccountResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_SendEmailVerification0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendEmailVerificationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountSendEmailVerification)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendEmailVerification(ctx, req.(*SendEmailVerificationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendEmailVerificationResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_VerifyEmail0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VerifyEmailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountVerifyEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifyEmail(ctx, req.(*VerifyEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VerifyEmailResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_SendMobileVerification0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendMobileVerificationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountSendMobileVerification)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendMobileVerification(ctx, req.(*SendMobileVerificationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendMobileVerificationResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_VerifyMobile0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VerifyMobileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountVerifyMobile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifyMobile(ctx, req.(*VerifyMobileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VerifyMobileResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_ResetPassword0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResetPasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountResetPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ResetPassword(ctx, req.(*ResetPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResetPasswordResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_Generate2Fa0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Generate2FaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountGenerate2fa)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Generate2Fa(ctx, req.(*Generate2FaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Generate2FaResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_Bind2Fa0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Bind2FaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountBind2fa)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Bind2Fa(ctx, req.(*Bind2FaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Bind2FaResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_Unbind2Fa0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Unbind2FaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountUnbind2fa)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Unbind2Fa(ctx, req.(*Unbind2FaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Unbind2FaResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_UpdateAccount0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountUpdateAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAccount(ctx, req.(*UpdateAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAccountResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_Login1_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_Register1_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_SendRegisterVerificationCode0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendRegisterVerificationCodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountSendRegisterVerificationCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendRegisterVerificationCode(ctx, req.(*SendRegisterVerificationCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendRegisterVerificationCodeResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_AccountInfo0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AccountInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountAccountInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AccountInfo(ctx, req.(*AccountInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountInfoResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficeAccountHTTPClient interface {
	AccountInfo(ctx context.Context, req *AccountInfoRequest, opts ...http.CallOption) (rsp *AccountInfoResponse, err error)
	AddAccount(ctx context.Context, req *AddAccountRequest, opts ...http.CallOption) (rsp *AddAccountResponse, err error)
	Bind2Fa(ctx context.Context, req *Bind2FaRequest, opts ...http.CallOption) (rsp *Bind2FaResponse, err error)
	Generate2Fa(ctx context.Context, req *Generate2FaRequest, opts ...http.CallOption) (rsp *Generate2FaResponse, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginResponse, err error)
	Register(ctx context.Context, req *RegisterRequest, opts ...http.CallOption) (rsp *RegisterResponse, err error)
	ResetPassword(ctx context.Context, req *ResetPasswordRequest, opts ...http.CallOption) (rsp *ResetPasswordResponse, err error)
	SendEmailVerification(ctx context.Context, req *SendEmailVerificationRequest, opts ...http.CallOption) (rsp *SendEmailVerificationResponse, err error)
	SendMobileVerification(ctx context.Context, req *SendMobileVerificationRequest, opts ...http.CallOption) (rsp *SendMobileVerificationResponse, err error)
	SendRegisterVerificationCode(ctx context.Context, req *SendRegisterVerificationCodeRequest, opts ...http.CallOption) (rsp *SendRegisterVerificationCodeResponse, err error)
	Unbind2Fa(ctx context.Context, req *Unbind2FaRequest, opts ...http.CallOption) (rsp *Unbind2FaResponse, err error)
	UpdateAccount(ctx context.Context, req *UpdateAccountRequest, opts ...http.CallOption) (rsp *UpdateAccountResponse, err error)
	VerifyEmail(ctx context.Context, req *VerifyEmailRequest, opts ...http.CallOption) (rsp *VerifyEmailResponse, err error)
	VerifyMobile(ctx context.Context, req *VerifyMobileRequest, opts ...http.CallOption) (rsp *VerifyMobileResponse, err error)
}

type BackofficeAccountHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficeAccountHTTPClient(client *http.Client) BackofficeAccountHTTPClient {
	return &BackofficeAccountHTTPClientImpl{client}
}

func (c *BackofficeAccountHTTPClientImpl) AccountInfo(ctx context.Context, in *AccountInfoRequest, opts ...http.CallOption) (*AccountInfoResponse, error) {
	var out AccountInfoResponse
	pattern := "/v1/backoffice/accounts/info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountAccountInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) AddAccount(ctx context.Context, in *AddAccountRequest, opts ...http.CallOption) (*AddAccountResponse, error) {
	var out AddAccountResponse
	pattern := "/v1/backoffice/accounts/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountAddAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) Bind2Fa(ctx context.Context, in *Bind2FaRequest, opts ...http.CallOption) (*Bind2FaResponse, error) {
	var out Bind2FaResponse
	pattern := "/v1/backoffice/accounts/2fa/bind"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountBind2fa))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) Generate2Fa(ctx context.Context, in *Generate2FaRequest, opts ...http.CallOption) (*Generate2FaResponse, error) {
	var out Generate2FaResponse
	pattern := "/v1/backoffice/accounts/2fa/generate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountGenerate2fa))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginResponse, error) {
	var out LoginResponse
	pattern := "/v1/backoffice/accounts/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) Register(ctx context.Context, in *RegisterRequest, opts ...http.CallOption) (*RegisterResponse, error) {
	var out RegisterResponse
	pattern := "/v1/backoffice/accounts/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...http.CallOption) (*ResetPasswordResponse, error) {
	var out ResetPasswordResponse
	pattern := "/v1/backoffice/accounts/password/reset"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountResetPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) SendEmailVerification(ctx context.Context, in *SendEmailVerificationRequest, opts ...http.CallOption) (*SendEmailVerificationResponse, error) {
	var out SendEmailVerificationResponse
	pattern := "/v1/backoffice/accounts/email/verification/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountSendEmailVerification))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) SendMobileVerification(ctx context.Context, in *SendMobileVerificationRequest, opts ...http.CallOption) (*SendMobileVerificationResponse, error) {
	var out SendMobileVerificationResponse
	pattern := "/v1/backoffice/accounts/mobile/verification/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountSendMobileVerification))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) SendRegisterVerificationCode(ctx context.Context, in *SendRegisterVerificationCodeRequest, opts ...http.CallOption) (*SendRegisterVerificationCodeResponse, error) {
	var out SendRegisterVerificationCodeResponse
	pattern := "/v1/backoffice/accounts/register/verification/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountSendRegisterVerificationCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) Unbind2Fa(ctx context.Context, in *Unbind2FaRequest, opts ...http.CallOption) (*Unbind2FaResponse, error) {
	var out Unbind2FaResponse
	pattern := "/v1/backoffice/accounts/2fa/unbind"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountUnbind2fa))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...http.CallOption) (*UpdateAccountResponse, error) {
	var out UpdateAccountResponse
	pattern := "/v1/backoffice/accounts/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountUpdateAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...http.CallOption) (*VerifyEmailResponse, error) {
	var out VerifyEmailResponse
	pattern := "/v1/backoffice/accounts/email/verify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountVerifyEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) VerifyMobile(ctx context.Context, in *VerifyMobileRequest, opts ...http.CallOption) (*VerifyMobileResponse, error) {
	var out VerifyMobileResponse
	pattern := "/v1/backoffice/accounts/mobile/verify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountVerifyMobile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
