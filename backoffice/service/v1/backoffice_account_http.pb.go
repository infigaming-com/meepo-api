// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_account.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackoffice_AccountAddAccount = "/api.backoffice.service.v1.Backoffice_Account/AddAccount"
const OperationBackoffice_AccountBind2fa = "/api.backoffice.service.v1.Backoffice_Account/Bind2fa"
const OperationBackoffice_AccountGenerate2fa = "/api.backoffice.service.v1.Backoffice_Account/Generate2fa"
const OperationBackoffice_AccountResetPassword = "/api.backoffice.service.v1.Backoffice_Account/ResetPassword"
const OperationBackoffice_AccountSendEmailVerification = "/api.backoffice.service.v1.Backoffice_Account/SendEmailVerification"
const OperationBackoffice_AccountSendMobileVerification = "/api.backoffice.service.v1.Backoffice_Account/SendMobileVerification"
const OperationBackoffice_AccountUnbind2fa = "/api.backoffice.service.v1.Backoffice_Account/Unbind2fa"
const OperationBackoffice_AccountUpdateAccount = "/api.backoffice.service.v1.Backoffice_Account/UpdateAccount"
const OperationBackoffice_AccountVerifyEmail = "/api.backoffice.service.v1.Backoffice_Account/VerifyEmail"
const OperationBackoffice_AccountVerifyMobile = "/api.backoffice.service.v1.Backoffice_Account/VerifyMobile"

type Backoffice_AccountHTTPServer interface {
	AddAccount(context.Context, *AddAccountRequest) (*AddAccountResponse, error)
	Bind2Fa(context.Context, *Bind2FaRequest) (*Bind2FaResponse, error)
	Generate2Fa(context.Context, *Generate2FaRequest) (*Generate2FaResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	SendEmailVerification(context.Context, *SendEmailVerificationRequest) (*SendEmailVerificationResponse, error)
	SendMobileVerification(context.Context, *SendMobileVerificationRequest) (*SendMobileVerificationResponse, error)
	Unbind2Fa(context.Context, *Unbind2FaRequest) (*Unbind2FaResponse, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	VerifyMobile(context.Context, *VerifyMobileRequest) (*VerifyMobileResponse, error)
}

func RegisterBackoffice_AccountHTTPServer(s *http.Server, srv Backoffice_AccountHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/accounts/add", _Backoffice_Account_AddAccount0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/email/verification/send", _Backoffice_Account_SendEmailVerification0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/email/verify", _Backoffice_Account_VerifyEmail0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/mobile/verification/send", _Backoffice_Account_SendMobileVerification0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/mobile/verify", _Backoffice_Account_VerifyMobile0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/password/reset", _Backoffice_Account_ResetPassword0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/2fa/generate", _Backoffice_Account_Generate2Fa0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/2fa/bind", _Backoffice_Account_Bind2Fa0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/2fa/unbind", _Backoffice_Account_Unbind2Fa0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/update", _Backoffice_Account_UpdateAccount0_HTTP_Handler(srv))
}

func _Backoffice_Account_AddAccount0_HTTP_Handler(srv Backoffice_AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_AccountAddAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddAccount(ctx, req.(*AddAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddAccountResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Account_SendEmailVerification0_HTTP_Handler(srv Backoffice_AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendEmailVerificationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_AccountSendEmailVerification)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendEmailVerification(ctx, req.(*SendEmailVerificationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendEmailVerificationResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Account_VerifyEmail0_HTTP_Handler(srv Backoffice_AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VerifyEmailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_AccountVerifyEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifyEmail(ctx, req.(*VerifyEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VerifyEmailResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Account_SendMobileVerification0_HTTP_Handler(srv Backoffice_AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendMobileVerificationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_AccountSendMobileVerification)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendMobileVerification(ctx, req.(*SendMobileVerificationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendMobileVerificationResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Account_VerifyMobile0_HTTP_Handler(srv Backoffice_AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VerifyMobileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_AccountVerifyMobile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifyMobile(ctx, req.(*VerifyMobileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VerifyMobileResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Account_ResetPassword0_HTTP_Handler(srv Backoffice_AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResetPasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_AccountResetPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ResetPassword(ctx, req.(*ResetPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResetPasswordResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Account_Generate2Fa0_HTTP_Handler(srv Backoffice_AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Generate2FaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_AccountGenerate2fa)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Generate2Fa(ctx, req.(*Generate2FaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Generate2FaResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Account_Bind2Fa0_HTTP_Handler(srv Backoffice_AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Bind2FaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_AccountBind2fa)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Bind2Fa(ctx, req.(*Bind2FaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Bind2FaResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Account_Unbind2Fa0_HTTP_Handler(srv Backoffice_AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Unbind2FaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_AccountUnbind2fa)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Unbind2Fa(ctx, req.(*Unbind2FaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Unbind2FaResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Account_UpdateAccount0_HTTP_Handler(srv Backoffice_AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_AccountUpdateAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAccount(ctx, req.(*UpdateAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAccountResponse)
		return ctx.Result(200, reply)
	}
}

type Backoffice_AccountHTTPClient interface {
	AddAccount(ctx context.Context, req *AddAccountRequest, opts ...http.CallOption) (rsp *AddAccountResponse, err error)
	Bind2Fa(ctx context.Context, req *Bind2FaRequest, opts ...http.CallOption) (rsp *Bind2FaResponse, err error)
	Generate2Fa(ctx context.Context, req *Generate2FaRequest, opts ...http.CallOption) (rsp *Generate2FaResponse, err error)
	ResetPassword(ctx context.Context, req *ResetPasswordRequest, opts ...http.CallOption) (rsp *ResetPasswordResponse, err error)
	SendEmailVerification(ctx context.Context, req *SendEmailVerificationRequest, opts ...http.CallOption) (rsp *SendEmailVerificationResponse, err error)
	SendMobileVerification(ctx context.Context, req *SendMobileVerificationRequest, opts ...http.CallOption) (rsp *SendMobileVerificationResponse, err error)
	Unbind2Fa(ctx context.Context, req *Unbind2FaRequest, opts ...http.CallOption) (rsp *Unbind2FaResponse, err error)
	UpdateAccount(ctx context.Context, req *UpdateAccountRequest, opts ...http.CallOption) (rsp *UpdateAccountResponse, err error)
	VerifyEmail(ctx context.Context, req *VerifyEmailRequest, opts ...http.CallOption) (rsp *VerifyEmailResponse, err error)
	VerifyMobile(ctx context.Context, req *VerifyMobileRequest, opts ...http.CallOption) (rsp *VerifyMobileResponse, err error)
}

type Backoffice_AccountHTTPClientImpl struct {
	cc *http.Client
}

func NewBackoffice_AccountHTTPClient(client *http.Client) Backoffice_AccountHTTPClient {
	return &Backoffice_AccountHTTPClientImpl{client}
}

func (c *Backoffice_AccountHTTPClientImpl) AddAccount(ctx context.Context, in *AddAccountRequest, opts ...http.CallOption) (*AddAccountResponse, error) {
	var out AddAccountResponse
	pattern := "/v1/backoffice/accounts/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_AccountAddAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_AccountHTTPClientImpl) Bind2Fa(ctx context.Context, in *Bind2FaRequest, opts ...http.CallOption) (*Bind2FaResponse, error) {
	var out Bind2FaResponse
	pattern := "/v1/backoffice/accounts/2fa/bind"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_AccountBind2fa))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_AccountHTTPClientImpl) Generate2Fa(ctx context.Context, in *Generate2FaRequest, opts ...http.CallOption) (*Generate2FaResponse, error) {
	var out Generate2FaResponse
	pattern := "/v1/backoffice/accounts/2fa/generate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_AccountGenerate2fa))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_AccountHTTPClientImpl) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...http.CallOption) (*ResetPasswordResponse, error) {
	var out ResetPasswordResponse
	pattern := "/v1/backoffice/accounts/password/reset"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_AccountResetPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_AccountHTTPClientImpl) SendEmailVerification(ctx context.Context, in *SendEmailVerificationRequest, opts ...http.CallOption) (*SendEmailVerificationResponse, error) {
	var out SendEmailVerificationResponse
	pattern := "/v1/backoffice/accounts/email/verification/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_AccountSendEmailVerification))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_AccountHTTPClientImpl) SendMobileVerification(ctx context.Context, in *SendMobileVerificationRequest, opts ...http.CallOption) (*SendMobileVerificationResponse, error) {
	var out SendMobileVerificationResponse
	pattern := "/v1/backoffice/accounts/mobile/verification/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_AccountSendMobileVerification))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_AccountHTTPClientImpl) Unbind2Fa(ctx context.Context, in *Unbind2FaRequest, opts ...http.CallOption) (*Unbind2FaResponse, error) {
	var out Unbind2FaResponse
	pattern := "/v1/backoffice/accounts/2fa/unbind"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_AccountUnbind2fa))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_AccountHTTPClientImpl) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...http.CallOption) (*UpdateAccountResponse, error) {
	var out UpdateAccountResponse
	pattern := "/v1/backoffice/accounts/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_AccountUpdateAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_AccountHTTPClientImpl) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...http.CallOption) (*VerifyEmailResponse, error) {
	var out VerifyEmailResponse
	pattern := "/v1/backoffice/accounts/email/verify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_AccountVerifyEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_AccountHTTPClientImpl) VerifyMobile(ctx context.Context, in *VerifyMobileRequest, opts ...http.CallOption) (*VerifyMobileResponse, error) {
	var out VerifyMobileResponse
	pattern := "/v1/backoffice/accounts/mobile/verify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_AccountVerifyMobile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
