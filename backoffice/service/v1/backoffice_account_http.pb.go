// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_account.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficeAccountAccountInfo = "/api.backoffice.service.v1.BackofficeAccount/AccountInfo"
const OperationBackofficeAccountAddAccount = "/api.backoffice.service.v1.BackofficeAccount/AddAccount"
const OperationBackofficeAccountBind2fa = "/api.backoffice.service.v1.BackofficeAccount/Bind2fa"
const OperationBackofficeAccountCheckEmailExists = "/api.backoffice.service.v1.BackofficeAccount/CheckEmailExists"
const OperationBackofficeAccountCheckOperatorKeyExists = "/api.backoffice.service.v1.BackofficeAccount/CheckOperatorKeyExists"
const OperationBackofficeAccountCheckSubdomainExists = "/api.backoffice.service.v1.BackofficeAccount/CheckSubdomainExists"
const OperationBackofficeAccountCreateRole = "/api.backoffice.service.v1.BackofficeAccount/CreateRole"
const OperationBackofficeAccountDeleteRole = "/api.backoffice.service.v1.BackofficeAccount/DeleteRole"
const OperationBackofficeAccountGenerate2fa = "/api.backoffice.service.v1.BackofficeAccount/Generate2fa"
const OperationBackofficeAccountListAccounts = "/api.backoffice.service.v1.BackofficeAccount/ListAccounts"
const OperationBackofficeAccountListRoles = "/api.backoffice.service.v1.BackofficeAccount/ListRoles"
const OperationBackofficeAccountLogin = "/api.backoffice.service.v1.BackofficeAccount/Login"
const OperationBackofficeAccountRegister = "/api.backoffice.service.v1.BackofficeAccount/Register"
const OperationBackofficeAccountResetPassword = "/api.backoffice.service.v1.BackofficeAccount/ResetPassword"
const OperationBackofficeAccountResetPasswordWithCode = "/api.backoffice.service.v1.BackofficeAccount/ResetPasswordWithCode"
const OperationBackofficeAccountSendEmailVerification = "/api.backoffice.service.v1.BackofficeAccount/SendEmailVerification"
const OperationBackofficeAccountSendMobileVerification = "/api.backoffice.service.v1.BackofficeAccount/SendMobileVerification"
const OperationBackofficeAccountSendPasswordResetCode = "/api.backoffice.service.v1.BackofficeAccount/SendPasswordResetCode"
const OperationBackofficeAccountSendRegisterVerificationCode = "/api.backoffice.service.v1.BackofficeAccount/SendRegisterVerificationCode"
const OperationBackofficeAccountUnbind2fa = "/api.backoffice.service.v1.BackofficeAccount/Unbind2fa"
const OperationBackofficeAccountUpdateAccount = "/api.backoffice.service.v1.BackofficeAccount/UpdateAccount"
const OperationBackofficeAccountUpdateRole = "/api.backoffice.service.v1.BackofficeAccount/UpdateRole"
const OperationBackofficeAccountVerifyEmail = "/api.backoffice.service.v1.BackofficeAccount/VerifyEmail"
const OperationBackofficeAccountVerifyMobile = "/api.backoffice.service.v1.BackofficeAccount/VerifyMobile"

type BackofficeAccountHTTPServer interface {
	AccountInfo(context.Context, *AccountInfoRequest) (*AccountInfoResponse, error)
	AddAccount(context.Context, *AddAccountRequest) (*AddAccountResponse, error)
	Bind2Fa(context.Context, *Bind2FaRequest) (*Bind2FaResponse, error)
	// CheckEmailExists CheckEmailExists checks if the email exists in the user table.
	CheckEmailExists(context.Context, *CheckEmailExistsRequest) (*CheckEmailExistsResponse, error)
	// CheckOperatorKeyExists CheckOperatorKeyExists checks if the operator key exists in the operator table.
	CheckOperatorKeyExists(context.Context, *CheckOperatorKeyExistsRequest) (*CheckOperatorKeyExistsResponse, error)
	// CheckSubdomainExists CheckSubdomainExists checks if the subdomain exists in the origin_to_operator table.
	CheckSubdomainExists(context.Context, *CheckSubdomainExistsRequest) (*CheckSubdomainExistsResponse, error)
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	Generate2Fa(context.Context, *Generate2FaRequest) (*Generate2FaResponse, error)
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	// ResetPasswordWithCode Reset password using verification code
	ResetPasswordWithCode(context.Context, *ResetPasswordWithCodeRequest) (*ResetPasswordWithCodeResponse, error)
	SendEmailVerification(context.Context, *SendEmailVerificationRequest) (*SendEmailVerificationResponse, error)
	SendMobileVerification(context.Context, *SendMobileVerificationRequest) (*SendMobileVerificationResponse, error)
	// SendPasswordResetCode Send password reset verification code to email
	SendPasswordResetCode(context.Context, *SendPasswordResetCodeRequest) (*SendPasswordResetCodeResponse, error)
	SendRegisterVerificationCode(context.Context, *SendRegisterVerificationCodeRequest) (*SendRegisterVerificationCodeResponse, error)
	Unbind2Fa(context.Context, *Unbind2FaRequest) (*Unbind2FaResponse, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	VerifyMobile(context.Context, *VerifyMobileRequest) (*VerifyMobileResponse, error)
}

func RegisterBackofficeAccountHTTPServer(s *http.Server, srv BackofficeAccountHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/accounts/add", _BackofficeAccount_AddAccount0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/email/verification/send", _BackofficeAccount_SendEmailVerification0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/email/verify", _BackofficeAccount_VerifyEmail0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/mobile/verification/send", _BackofficeAccount_SendMobileVerification0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/mobile/verify", _BackofficeAccount_VerifyMobile0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/password/reset", _BackofficeAccount_ResetPassword0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/password/reset-code/send", _BackofficeAccount_SendPasswordResetCode1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/password/reset-with-code", _BackofficeAccount_ResetPasswordWithCode1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/2fa/generate", _BackofficeAccount_Generate2Fa0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/2fa/bind", _BackofficeAccount_Bind2Fa0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/2fa/unbind", _BackofficeAccount_Unbind2Fa0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/update", _BackofficeAccount_UpdateAccount0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/login", _BackofficeAccount_Login1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/register", _BackofficeAccount_Register1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/register/verification/send", _BackofficeAccount_SendRegisterVerificationCode0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/info", _BackofficeAccount_AccountInfo0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/list", _BackofficeAccount_ListAccounts0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/role/create", _BackofficeAccount_CreateRole0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/role/list", _BackofficeAccount_ListRoles0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/role/update", _BackofficeAccount_UpdateRole0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/role/delete", _BackofficeAccount_DeleteRole0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/email/check_exists", _BackofficeAccount_CheckEmailExists0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/subdomain/check_exists", _BackofficeAccount_CheckSubdomainExists0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/key/check_exists", _BackofficeAccount_CheckOperatorKeyExists0_HTTP_Handler(srv))
}

func _BackofficeAccount_AddAccount0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountAddAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddAccount(ctx, req.(*AddAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddAccountResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_SendEmailVerification0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendEmailVerificationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountSendEmailVerification)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendEmailVerification(ctx, req.(*SendEmailVerificationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendEmailVerificationResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_VerifyEmail0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VerifyEmailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountVerifyEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifyEmail(ctx, req.(*VerifyEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VerifyEmailResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_SendMobileVerification0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendMobileVerificationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountSendMobileVerification)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendMobileVerification(ctx, req.(*SendMobileVerificationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendMobileVerificationResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_VerifyMobile0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VerifyMobileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountVerifyMobile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifyMobile(ctx, req.(*VerifyMobileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VerifyMobileResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_ResetPassword0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResetPasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountResetPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ResetPassword(ctx, req.(*ResetPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResetPasswordResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_SendPasswordResetCode1_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendPasswordResetCodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountSendPasswordResetCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendPasswordResetCode(ctx, req.(*SendPasswordResetCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendPasswordResetCodeResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_ResetPasswordWithCode1_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResetPasswordWithCodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountResetPasswordWithCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ResetPasswordWithCode(ctx, req.(*ResetPasswordWithCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResetPasswordWithCodeResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_Generate2Fa0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Generate2FaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountGenerate2fa)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Generate2Fa(ctx, req.(*Generate2FaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Generate2FaResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_Bind2Fa0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Bind2FaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountBind2fa)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Bind2Fa(ctx, req.(*Bind2FaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Bind2FaResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_Unbind2Fa0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Unbind2FaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountUnbind2fa)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Unbind2Fa(ctx, req.(*Unbind2FaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Unbind2FaResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_UpdateAccount0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountUpdateAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAccount(ctx, req.(*UpdateAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAccountResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_Login1_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_Register1_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_SendRegisterVerificationCode0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendRegisterVerificationCodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountSendRegisterVerificationCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendRegisterVerificationCode(ctx, req.(*SendRegisterVerificationCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendRegisterVerificationCodeResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_AccountInfo0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AccountInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountAccountInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AccountInfo(ctx, req.(*AccountInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountInfoResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_ListAccounts0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAccountsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountListAccounts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAccounts(ctx, req.(*ListAccountsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAccountsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_CreateRole0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountCreateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRole(ctx, req.(*CreateRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_ListRoles0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRolesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountListRoles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRoles(ctx, req.(*ListRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRolesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_UpdateRole0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountUpdateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRole(ctx, req.(*UpdateRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_DeleteRole0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountDeleteRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRole(ctx, req.(*DeleteRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_CheckEmailExists0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckEmailExistsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountCheckEmailExists)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckEmailExists(ctx, req.(*CheckEmailExistsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckEmailExistsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_CheckSubdomainExists0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckSubdomainExistsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountCheckSubdomainExists)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckSubdomainExists(ctx, req.(*CheckSubdomainExistsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckSubdomainExistsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAccount_CheckOperatorKeyExists0_HTTP_Handler(srv BackofficeAccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckOperatorKeyExistsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAccountCheckOperatorKeyExists)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckOperatorKeyExists(ctx, req.(*CheckOperatorKeyExistsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckOperatorKeyExistsResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficeAccountHTTPClient interface {
	AccountInfo(ctx context.Context, req *AccountInfoRequest, opts ...http.CallOption) (rsp *AccountInfoResponse, err error)
	AddAccount(ctx context.Context, req *AddAccountRequest, opts ...http.CallOption) (rsp *AddAccountResponse, err error)
	Bind2Fa(ctx context.Context, req *Bind2FaRequest, opts ...http.CallOption) (rsp *Bind2FaResponse, err error)
	CheckEmailExists(ctx context.Context, req *CheckEmailExistsRequest, opts ...http.CallOption) (rsp *CheckEmailExistsResponse, err error)
	CheckOperatorKeyExists(ctx context.Context, req *CheckOperatorKeyExistsRequest, opts ...http.CallOption) (rsp *CheckOperatorKeyExistsResponse, err error)
	CheckSubdomainExists(ctx context.Context, req *CheckSubdomainExistsRequest, opts ...http.CallOption) (rsp *CheckSubdomainExistsResponse, err error)
	CreateRole(ctx context.Context, req *CreateRoleRequest, opts ...http.CallOption) (rsp *CreateRoleResponse, err error)
	DeleteRole(ctx context.Context, req *DeleteRoleRequest, opts ...http.CallOption) (rsp *DeleteRoleResponse, err error)
	Generate2Fa(ctx context.Context, req *Generate2FaRequest, opts ...http.CallOption) (rsp *Generate2FaResponse, err error)
	ListAccounts(ctx context.Context, req *ListAccountsRequest, opts ...http.CallOption) (rsp *ListAccountsResponse, err error)
	ListRoles(ctx context.Context, req *ListRolesRequest, opts ...http.CallOption) (rsp *ListRolesResponse, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginResponse, err error)
	Register(ctx context.Context, req *RegisterRequest, opts ...http.CallOption) (rsp *RegisterResponse, err error)
	ResetPassword(ctx context.Context, req *ResetPasswordRequest, opts ...http.CallOption) (rsp *ResetPasswordResponse, err error)
	ResetPasswordWithCode(ctx context.Context, req *ResetPasswordWithCodeRequest, opts ...http.CallOption) (rsp *ResetPasswordWithCodeResponse, err error)
	SendEmailVerification(ctx context.Context, req *SendEmailVerificationRequest, opts ...http.CallOption) (rsp *SendEmailVerificationResponse, err error)
	SendMobileVerification(ctx context.Context, req *SendMobileVerificationRequest, opts ...http.CallOption) (rsp *SendMobileVerificationResponse, err error)
	SendPasswordResetCode(ctx context.Context, req *SendPasswordResetCodeRequest, opts ...http.CallOption) (rsp *SendPasswordResetCodeResponse, err error)
	SendRegisterVerificationCode(ctx context.Context, req *SendRegisterVerificationCodeRequest, opts ...http.CallOption) (rsp *SendRegisterVerificationCodeResponse, err error)
	Unbind2Fa(ctx context.Context, req *Unbind2FaRequest, opts ...http.CallOption) (rsp *Unbind2FaResponse, err error)
	UpdateAccount(ctx context.Context, req *UpdateAccountRequest, opts ...http.CallOption) (rsp *UpdateAccountResponse, err error)
	UpdateRole(ctx context.Context, req *UpdateRoleRequest, opts ...http.CallOption) (rsp *UpdateRoleResponse, err error)
	VerifyEmail(ctx context.Context, req *VerifyEmailRequest, opts ...http.CallOption) (rsp *VerifyEmailResponse, err error)
	VerifyMobile(ctx context.Context, req *VerifyMobileRequest, opts ...http.CallOption) (rsp *VerifyMobileResponse, err error)
}

type BackofficeAccountHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficeAccountHTTPClient(client *http.Client) BackofficeAccountHTTPClient {
	return &BackofficeAccountHTTPClientImpl{client}
}

func (c *BackofficeAccountHTTPClientImpl) AccountInfo(ctx context.Context, in *AccountInfoRequest, opts ...http.CallOption) (*AccountInfoResponse, error) {
	var out AccountInfoResponse
	pattern := "/v1/backoffice/accounts/info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountAccountInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) AddAccount(ctx context.Context, in *AddAccountRequest, opts ...http.CallOption) (*AddAccountResponse, error) {
	var out AddAccountResponse
	pattern := "/v1/backoffice/accounts/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountAddAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) Bind2Fa(ctx context.Context, in *Bind2FaRequest, opts ...http.CallOption) (*Bind2FaResponse, error) {
	var out Bind2FaResponse
	pattern := "/v1/backoffice/accounts/2fa/bind"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountBind2fa))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) CheckEmailExists(ctx context.Context, in *CheckEmailExistsRequest, opts ...http.CallOption) (*CheckEmailExistsResponse, error) {
	var out CheckEmailExistsResponse
	pattern := "/v1/backoffice/accounts/email/check_exists"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountCheckEmailExists))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) CheckOperatorKeyExists(ctx context.Context, in *CheckOperatorKeyExistsRequest, opts ...http.CallOption) (*CheckOperatorKeyExistsResponse, error) {
	var out CheckOperatorKeyExistsResponse
	pattern := "/v1/backoffice/operator/key/check_exists"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountCheckOperatorKeyExists))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) CheckSubdomainExists(ctx context.Context, in *CheckSubdomainExistsRequest, opts ...http.CallOption) (*CheckSubdomainExistsResponse, error) {
	var out CheckSubdomainExistsResponse
	pattern := "/v1/backoffice/accounts/subdomain/check_exists"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountCheckSubdomainExists))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...http.CallOption) (*CreateRoleResponse, error) {
	var out CreateRoleResponse
	pattern := "/v1/backoffice/accounts/role/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountCreateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...http.CallOption) (*DeleteRoleResponse, error) {
	var out DeleteRoleResponse
	pattern := "/v1/backoffice/accounts/role/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountDeleteRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) Generate2Fa(ctx context.Context, in *Generate2FaRequest, opts ...http.CallOption) (*Generate2FaResponse, error) {
	var out Generate2FaResponse
	pattern := "/v1/backoffice/accounts/2fa/generate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountGenerate2fa))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...http.CallOption) (*ListAccountsResponse, error) {
	var out ListAccountsResponse
	pattern := "/v1/backoffice/accounts/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountListAccounts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...http.CallOption) (*ListRolesResponse, error) {
	var out ListRolesResponse
	pattern := "/v1/backoffice/accounts/role/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountListRoles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginResponse, error) {
	var out LoginResponse
	pattern := "/v1/backoffice/accounts/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) Register(ctx context.Context, in *RegisterRequest, opts ...http.CallOption) (*RegisterResponse, error) {
	var out RegisterResponse
	pattern := "/v1/backoffice/accounts/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...http.CallOption) (*ResetPasswordResponse, error) {
	var out ResetPasswordResponse
	pattern := "/v1/backoffice/accounts/password/reset"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountResetPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) ResetPasswordWithCode(ctx context.Context, in *ResetPasswordWithCodeRequest, opts ...http.CallOption) (*ResetPasswordWithCodeResponse, error) {
	var out ResetPasswordWithCodeResponse
	pattern := "/v1/backoffice/accounts/password/reset-with-code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountResetPasswordWithCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) SendEmailVerification(ctx context.Context, in *SendEmailVerificationRequest, opts ...http.CallOption) (*SendEmailVerificationResponse, error) {
	var out SendEmailVerificationResponse
	pattern := "/v1/backoffice/accounts/email/verification/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountSendEmailVerification))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) SendMobileVerification(ctx context.Context, in *SendMobileVerificationRequest, opts ...http.CallOption) (*SendMobileVerificationResponse, error) {
	var out SendMobileVerificationResponse
	pattern := "/v1/backoffice/accounts/mobile/verification/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountSendMobileVerification))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) SendPasswordResetCode(ctx context.Context, in *SendPasswordResetCodeRequest, opts ...http.CallOption) (*SendPasswordResetCodeResponse, error) {
	var out SendPasswordResetCodeResponse
	pattern := "/v1/backoffice/accounts/password/reset-code/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountSendPasswordResetCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) SendRegisterVerificationCode(ctx context.Context, in *SendRegisterVerificationCodeRequest, opts ...http.CallOption) (*SendRegisterVerificationCodeResponse, error) {
	var out SendRegisterVerificationCodeResponse
	pattern := "/v1/backoffice/accounts/register/verification/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountSendRegisterVerificationCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) Unbind2Fa(ctx context.Context, in *Unbind2FaRequest, opts ...http.CallOption) (*Unbind2FaResponse, error) {
	var out Unbind2FaResponse
	pattern := "/v1/backoffice/accounts/2fa/unbind"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountUnbind2fa))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...http.CallOption) (*UpdateAccountResponse, error) {
	var out UpdateAccountResponse
	pattern := "/v1/backoffice/accounts/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountUpdateAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...http.CallOption) (*UpdateRoleResponse, error) {
	var out UpdateRoleResponse
	pattern := "/v1/backoffice/accounts/role/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountUpdateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...http.CallOption) (*VerifyEmailResponse, error) {
	var out VerifyEmailResponse
	pattern := "/v1/backoffice/accounts/email/verify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountVerifyEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAccountHTTPClientImpl) VerifyMobile(ctx context.Context, in *VerifyMobileRequest, opts ...http.CallOption) (*VerifyMobileResponse, error) {
	var out VerifyMobileResponse
	pattern := "/v1/backoffice/accounts/mobile/verify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAccountVerifyMobile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
