// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_vip.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on VipConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VipConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VipConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VipConfigMultiError, or nil
// if none found.
func (m *VipConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *VipConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SystemOperatorId

	// no validation rules for RetailerOperatorId

	// no validation rules for CompanyOperatorId

	// no validation rules for OperatorId

	// no validation rules for Enabled

	// no validation rules for FollowParentSetting

	// no validation rules for FollowParentRewardExpiry

	// no validation rules for FollowParentLevelTpl

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return VipConfigMultiError(errors)
	}

	return nil
}

// VipConfigMultiError is an error wrapping multiple validation errors returned
// by VipConfig.ValidateAll() if the designated constraints aren't met.
type VipConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VipConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VipConfigMultiError) AllErrors() []error { return m }

// VipConfigValidationError is the validation error returned by
// VipConfig.Validate if the designated constraints aren't met.
type VipConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VipConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VipConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VipConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VipConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VipConfigValidationError) ErrorName() string { return "VipConfigValidationError" }

// Error satisfies the builtin error interface
func (e VipConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVipConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VipConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VipConfigValidationError{}

// Validate checks the field values on GetVipConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVipConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVipConfigRequestMultiError, or nil if none found.
func (m *GetVipConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipConfigRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipConfigRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipConfigRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVipConfigRequestMultiError(errors)
	}

	return nil
}

// GetVipConfigRequestMultiError is an error wrapping multiple validation
// errors returned by GetVipConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type GetVipConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipConfigRequestMultiError) AllErrors() []error { return m }

// GetVipConfigRequestValidationError is the validation error returned by
// GetVipConfigRequest.Validate if the designated constraints aren't met.
type GetVipConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipConfigRequestValidationError) ErrorName() string {
	return "GetVipConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipConfigRequestValidationError{}

// Validate checks the field values on GetVipConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVipConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVipConfigResponseMultiError, or nil if none found.
func (m *GetVipConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipConfigResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVipConfigResponseMultiError(errors)
	}

	return nil
}

// GetVipConfigResponseMultiError is an error wrapping multiple validation
// errors returned by GetVipConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type GetVipConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipConfigResponseMultiError) AllErrors() []error { return m }

// GetVipConfigResponseValidationError is the validation error returned by
// GetVipConfigResponse.Validate if the designated constraints aren't met.
type GetVipConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipConfigResponseValidationError) ErrorName() string {
	return "GetVipConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipConfigResponseValidationError{}

// Validate checks the field values on UpdateVipConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVipConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVipConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVipConfigRequestMultiError, or nil if none found.
func (m *UpdateVipConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVipConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVipConfigRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVipConfigRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVipConfigRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVipConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVipConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVipConfigRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateVipConfigRequestMultiError(errors)
	}

	return nil
}

// UpdateVipConfigRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateVipConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateVipConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVipConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVipConfigRequestMultiError) AllErrors() []error { return m }

// UpdateVipConfigRequestValidationError is the validation error returned by
// UpdateVipConfigRequest.Validate if the designated constraints aren't met.
type UpdateVipConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVipConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVipConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVipConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVipConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVipConfigRequestValidationError) ErrorName() string {
	return "UpdateVipConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVipConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVipConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVipConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVipConfigRequestValidationError{}

// Validate checks the field values on UpdateVipConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVipConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVipConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVipConfigResponseMultiError, or nil if none found.
func (m *UpdateVipConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVipConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateVipConfigResponseMultiError(errors)
	}

	return nil
}

// UpdateVipConfigResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateVipConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateVipConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVipConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVipConfigResponseMultiError) AllErrors() []error { return m }

// UpdateVipConfigResponseValidationError is the validation error returned by
// UpdateVipConfigResponse.Validate if the designated constraints aren't met.
type UpdateVipConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVipConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVipConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVipConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVipConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVipConfigResponseValidationError) ErrorName() string {
	return "UpdateVipConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVipConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVipConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVipConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVipConfigResponseValidationError{}

// Validate checks the field values on VipSetting with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VipSetting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VipSetting with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VipSettingMultiError, or
// nil if none found.
func (m *VipSetting) ValidateAll() error {
	return m.validate(true)
}

func (m *VipSetting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SystemOperatorId

	// no validation rules for RetailerOperatorId

	// no validation rules for CompanyOperatorId

	// no validation rules for OperatorId

	// no validation rules for BaseCurrency

	// no validation rules for DisplayRule

	// no validation rules for RewardsSlider

	// no validation rules for UpgradePayoutType

	// no validation rules for RakebackInstantPayoutType

	// no validation rules for RakebackDailyPayoutType

	// no validation rules for WeeklyRewardPayoutType

	// no validation rules for MonthlyRewardPayoutType

	// no validation rules for DepositXpRate

	// no validation rules for WageringXpRate

	// no validation rules for MaxHouseEdgeLimitPercent

	// no validation rules for StandardXpMultiplier

	// no validation rules for Timezone

	// no validation rules for DailyIssueAt

	// no validation rules for WeeklyIssueDow

	// no validation rules for WeeklyIssueAt

	// no validation rules for MonthlyIssueDom

	// no validation rules for MonthlyIssueAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return VipSettingMultiError(errors)
	}

	return nil
}

// VipSettingMultiError is an error wrapping multiple validation errors
// returned by VipSetting.ValidateAll() if the designated constraints aren't met.
type VipSettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VipSettingMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VipSettingMultiError) AllErrors() []error { return m }

// VipSettingValidationError is the validation error returned by
// VipSetting.Validate if the designated constraints aren't met.
type VipSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VipSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VipSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VipSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VipSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VipSettingValidationError) ErrorName() string { return "VipSettingValidationError" }

// Error satisfies the builtin error interface
func (e VipSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVipSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VipSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VipSettingValidationError{}

// Validate checks the field values on GetVipSettingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVipSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipSettingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVipSettingRequestMultiError, or nil if none found.
func (m *GetVipSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipSettingRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipSettingRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipSettingRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVipSettingRequestMultiError(errors)
	}

	return nil
}

// GetVipSettingRequestMultiError is an error wrapping multiple validation
// errors returned by GetVipSettingRequest.ValidateAll() if the designated
// constraints aren't met.
type GetVipSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipSettingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipSettingRequestMultiError) AllErrors() []error { return m }

// GetVipSettingRequestValidationError is the validation error returned by
// GetVipSettingRequest.Validate if the designated constraints aren't met.
type GetVipSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipSettingRequestValidationError) ErrorName() string {
	return "GetVipSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipSettingRequestValidationError{}

// Validate checks the field values on GetVipSettingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVipSettingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipSettingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVipSettingResponseMultiError, or nil if none found.
func (m *GetVipSettingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipSettingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipSettingResponseValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipSettingResponseValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipSettingResponseValidationError{
				field:  "Setting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVipSettingResponseMultiError(errors)
	}

	return nil
}

// GetVipSettingResponseMultiError is an error wrapping multiple validation
// errors returned by GetVipSettingResponse.ValidateAll() if the designated
// constraints aren't met.
type GetVipSettingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipSettingResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipSettingResponseMultiError) AllErrors() []error { return m }

// GetVipSettingResponseValidationError is the validation error returned by
// GetVipSettingResponse.Validate if the designated constraints aren't met.
type GetVipSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipSettingResponseValidationError) ErrorName() string {
	return "GetVipSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipSettingResponseValidationError{}

// Validate checks the field values on UpdateVipSettingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVipSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVipSettingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVipSettingRequestMultiError, or nil if none found.
func (m *UpdateVipSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVipSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVipSettingRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVipSettingRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVipSettingRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVipSettingRequestValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVipSettingRequestValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVipSettingRequestValidationError{
				field:  "Setting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateVipSettingRequestMultiError(errors)
	}

	return nil
}

// UpdateVipSettingRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateVipSettingRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateVipSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVipSettingRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVipSettingRequestMultiError) AllErrors() []error { return m }

// UpdateVipSettingRequestValidationError is the validation error returned by
// UpdateVipSettingRequest.Validate if the designated constraints aren't met.
type UpdateVipSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVipSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVipSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVipSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVipSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVipSettingRequestValidationError) ErrorName() string {
	return "UpdateVipSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVipSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVipSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVipSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVipSettingRequestValidationError{}

// Validate checks the field values on UpdateVipSettingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVipSettingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVipSettingResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVipSettingResponseMultiError, or nil if none found.
func (m *UpdateVipSettingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVipSettingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateVipSettingResponseMultiError(errors)
	}

	return nil
}

// UpdateVipSettingResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateVipSettingResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateVipSettingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVipSettingResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVipSettingResponseMultiError) AllErrors() []error { return m }

// UpdateVipSettingResponseValidationError is the validation error returned by
// UpdateVipSettingResponse.Validate if the designated constraints aren't met.
type UpdateVipSettingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVipSettingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVipSettingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVipSettingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVipSettingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVipSettingResponseValidationError) ErrorName() string {
	return "UpdateVipSettingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVipSettingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVipSettingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVipSettingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVipSettingResponseValidationError{}

// Validate checks the field values on VipRewardExpiry with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VipRewardExpiry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VipRewardExpiry with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VipRewardExpiryMultiError, or nil if none found.
func (m *VipRewardExpiry) ValidateAll() error {
	return m.validate(true)
}

func (m *VipRewardExpiry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SystemOperatorId

	// no validation rules for RetailerOperatorId

	// no validation rules for CompanyOperatorId

	// no validation rules for OperatorId

	// no validation rules for VipSettingId

	// no validation rules for RewardKind

	// no validation rules for ExpiryDays

	// no validation rules for ExpiryHours

	// no validation rules for NeverExpire

	// no validation rules for ResetPolicy

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return VipRewardExpiryMultiError(errors)
	}

	return nil
}

// VipRewardExpiryMultiError is an error wrapping multiple validation errors
// returned by VipRewardExpiry.ValidateAll() if the designated constraints
// aren't met.
type VipRewardExpiryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VipRewardExpiryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VipRewardExpiryMultiError) AllErrors() []error { return m }

// VipRewardExpiryValidationError is the validation error returned by
// VipRewardExpiry.Validate if the designated constraints aren't met.
type VipRewardExpiryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VipRewardExpiryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VipRewardExpiryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VipRewardExpiryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VipRewardExpiryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VipRewardExpiryValidationError) ErrorName() string { return "VipRewardExpiryValidationError" }

// Error satisfies the builtin error interface
func (e VipRewardExpiryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVipRewardExpiry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VipRewardExpiryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VipRewardExpiryValidationError{}

// Validate checks the field values on GetVipRewardExpiryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVipRewardExpiryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipRewardExpiryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVipRewardExpiryRequestMultiError, or nil if none found.
func (m *GetVipRewardExpiryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipRewardExpiryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipRewardExpiryRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipRewardExpiryRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipRewardExpiryRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RewardKind

	if len(errors) > 0 {
		return GetVipRewardExpiryRequestMultiError(errors)
	}

	return nil
}

// GetVipRewardExpiryRequestMultiError is an error wrapping multiple validation
// errors returned by GetVipRewardExpiryRequest.ValidateAll() if the
// designated constraints aren't met.
type GetVipRewardExpiryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipRewardExpiryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipRewardExpiryRequestMultiError) AllErrors() []error { return m }

// GetVipRewardExpiryRequestValidationError is the validation error returned by
// GetVipRewardExpiryRequest.Validate if the designated constraints aren't met.
type GetVipRewardExpiryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipRewardExpiryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipRewardExpiryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipRewardExpiryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipRewardExpiryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipRewardExpiryRequestValidationError) ErrorName() string {
	return "GetVipRewardExpiryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipRewardExpiryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipRewardExpiryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipRewardExpiryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipRewardExpiryRequestValidationError{}

// Validate checks the field values on GetVipRewardExpiryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVipRewardExpiryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipRewardExpiryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVipRewardExpiryResponseMultiError, or nil if none found.
func (m *GetVipRewardExpiryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipRewardExpiryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExpiry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipRewardExpiryResponseValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipRewardExpiryResponseValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipRewardExpiryResponseValidationError{
				field:  "Expiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVipRewardExpiryResponseMultiError(errors)
	}

	return nil
}

// GetVipRewardExpiryResponseMultiError is an error wrapping multiple
// validation errors returned by GetVipRewardExpiryResponse.ValidateAll() if
// the designated constraints aren't met.
type GetVipRewardExpiryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipRewardExpiryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipRewardExpiryResponseMultiError) AllErrors() []error { return m }

// GetVipRewardExpiryResponseValidationError is the validation error returned
// by GetVipRewardExpiryResponse.Validate if the designated constraints aren't met.
type GetVipRewardExpiryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipRewardExpiryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipRewardExpiryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipRewardExpiryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipRewardExpiryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipRewardExpiryResponseValidationError) ErrorName() string {
	return "GetVipRewardExpiryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipRewardExpiryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipRewardExpiryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipRewardExpiryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipRewardExpiryResponseValidationError{}

// Validate checks the field values on UpdateVipRewardExpiryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVipRewardExpiryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVipRewardExpiryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVipRewardExpiryRequestMultiError, or nil if none found.
func (m *UpdateVipRewardExpiryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVipRewardExpiryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVipRewardExpiryRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVipRewardExpiryRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVipRewardExpiryRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVipRewardExpiryRequestValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVipRewardExpiryRequestValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVipRewardExpiryRequestValidationError{
				field:  "Expiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateVipRewardExpiryRequestMultiError(errors)
	}

	return nil
}

// UpdateVipRewardExpiryRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateVipRewardExpiryRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateVipRewardExpiryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVipRewardExpiryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVipRewardExpiryRequestMultiError) AllErrors() []error { return m }

// UpdateVipRewardExpiryRequestValidationError is the validation error returned
// by UpdateVipRewardExpiryRequest.Validate if the designated constraints
// aren't met.
type UpdateVipRewardExpiryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVipRewardExpiryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVipRewardExpiryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVipRewardExpiryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVipRewardExpiryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVipRewardExpiryRequestValidationError) ErrorName() string {
	return "UpdateVipRewardExpiryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVipRewardExpiryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVipRewardExpiryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVipRewardExpiryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVipRewardExpiryRequestValidationError{}

// Validate checks the field values on UpdateVipRewardExpiryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVipRewardExpiryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVipRewardExpiryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateVipRewardExpiryResponseMultiError, or nil if none found.
func (m *UpdateVipRewardExpiryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVipRewardExpiryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateVipRewardExpiryResponseMultiError(errors)
	}

	return nil
}

// UpdateVipRewardExpiryResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateVipRewardExpiryResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateVipRewardExpiryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVipRewardExpiryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVipRewardExpiryResponseMultiError) AllErrors() []error { return m }

// UpdateVipRewardExpiryResponseValidationError is the validation error
// returned by UpdateVipRewardExpiryResponse.Validate if the designated
// constraints aren't met.
type UpdateVipRewardExpiryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVipRewardExpiryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVipRewardExpiryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVipRewardExpiryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVipRewardExpiryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVipRewardExpiryResponseValidationError) ErrorName() string {
	return "UpdateVipRewardExpiryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVipRewardExpiryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVipRewardExpiryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVipRewardExpiryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVipRewardExpiryResponseValidationError{}

// Validate checks the field values on VipLevelConfigTemplate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VipLevelConfigTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VipLevelConfigTemplate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VipLevelConfigTemplateMultiError, or nil if none found.
func (m *VipLevelConfigTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *VipLevelConfigTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SystemOperatorId

	// no validation rules for RetailerOperatorId

	// no validation rules for CompanyOperatorId

	// no validation rules for OperatorId

	// no validation rules for Name

	// no validation rules for StartLevel

	// no validation rules for EndLevel

	// no validation rules for BaseLevelUpgradeXp

	// no validation rules for IncrLevelUpgradeXp

	// no validation rules for BaseUpgradeRewardAmt

	// no validation rules for IncrUpgradeRewardAmt

	// no validation rules for UpgradeRewardWageringX

	// no validation rules for WeeklyXpLoss

	// no validation rules for MonthlyXpLoss

	// no validation rules for RakebackInstantEnabled

	// no validation rules for RakebackInstantRate

	// no validation rules for RakebackInstantReq

	// no validation rules for RakebackDailyEnabled

	// no validation rules for RakebackDailyRate

	// no validation rules for RakebackDailyReq

	// no validation rules for WeeklyRewardEnabled

	// no validation rules for WeeklyFixedRewardAmt

	// no validation rules for WeeklyTurnoverRate

	// no validation rules for WeeklyNetLossAmt

	// no validation rules for WeeklyAdjustRangePct

	// no validation rules for WeeklyActiveDaysReward

	// no validation rules for WeeklyWageringReq

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return VipLevelConfigTemplateMultiError(errors)
	}

	return nil
}

// VipLevelConfigTemplateMultiError is an error wrapping multiple validation
// errors returned by VipLevelConfigTemplate.ValidateAll() if the designated
// constraints aren't met.
type VipLevelConfigTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VipLevelConfigTemplateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VipLevelConfigTemplateMultiError) AllErrors() []error { return m }

// VipLevelConfigTemplateValidationError is the validation error returned by
// VipLevelConfigTemplate.Validate if the designated constraints aren't met.
type VipLevelConfigTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VipLevelConfigTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VipLevelConfigTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VipLevelConfigTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VipLevelConfigTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VipLevelConfigTemplateValidationError) ErrorName() string {
	return "VipLevelConfigTemplateValidationError"
}

// Error satisfies the builtin error interface
func (e VipLevelConfigTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVipLevelConfigTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VipLevelConfigTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VipLevelConfigTemplateValidationError{}

// Validate checks the field values on ListVipLevelConfigTemplatesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListVipLevelConfigTemplatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVipLevelConfigTemplatesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListVipLevelConfigTemplatesRequestMultiError, or nil if none found.
func (m *ListVipLevelConfigTemplatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVipLevelConfigTemplatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListVipLevelConfigTemplatesRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListVipLevelConfigTemplatesRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListVipLevelConfigTemplatesRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Search

	// no validation rules for StartLevel

	// no validation rules for EndLevel

	if len(errors) > 0 {
		return ListVipLevelConfigTemplatesRequestMultiError(errors)
	}

	return nil
}

// ListVipLevelConfigTemplatesRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListVipLevelConfigTemplatesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListVipLevelConfigTemplatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVipLevelConfigTemplatesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVipLevelConfigTemplatesRequestMultiError) AllErrors() []error { return m }

// ListVipLevelConfigTemplatesRequestValidationError is the validation error
// returned by ListVipLevelConfigTemplatesRequest.Validate if the designated
// constraints aren't met.
type ListVipLevelConfigTemplatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVipLevelConfigTemplatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVipLevelConfigTemplatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVipLevelConfigTemplatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVipLevelConfigTemplatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVipLevelConfigTemplatesRequestValidationError) ErrorName() string {
	return "ListVipLevelConfigTemplatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListVipLevelConfigTemplatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVipLevelConfigTemplatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVipLevelConfigTemplatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVipLevelConfigTemplatesRequestValidationError{}

// Validate checks the field values on ListVipLevelConfigTemplatesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListVipLevelConfigTemplatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVipLevelConfigTemplatesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListVipLevelConfigTemplatesResponseMultiError, or nil if none found.
func (m *ListVipLevelConfigTemplatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVipLevelConfigTemplatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListVipLevelConfigTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListVipLevelConfigTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListVipLevelConfigTemplatesResponseValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListVipLevelConfigTemplatesResponseMultiError(errors)
	}

	return nil
}

// ListVipLevelConfigTemplatesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListVipLevelConfigTemplatesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListVipLevelConfigTemplatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVipLevelConfigTemplatesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVipLevelConfigTemplatesResponseMultiError) AllErrors() []error { return m }

// ListVipLevelConfigTemplatesResponseValidationError is the validation error
// returned by ListVipLevelConfigTemplatesResponse.Validate if the designated
// constraints aren't met.
type ListVipLevelConfigTemplatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVipLevelConfigTemplatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVipLevelConfigTemplatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVipLevelConfigTemplatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVipLevelConfigTemplatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVipLevelConfigTemplatesResponseValidationError) ErrorName() string {
	return "ListVipLevelConfigTemplatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListVipLevelConfigTemplatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVipLevelConfigTemplatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVipLevelConfigTemplatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVipLevelConfigTemplatesResponseValidationError{}

// Validate checks the field values on GetVipLevelConfigTemplateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetVipLevelConfigTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipLevelConfigTemplateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetVipLevelConfigTemplateRequestMultiError, or nil if none found.
func (m *GetVipLevelConfigTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipLevelConfigTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipLevelConfigTemplateRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipLevelConfigTemplateRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipLevelConfigTemplateRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TemplateId

	if len(errors) > 0 {
		return GetVipLevelConfigTemplateRequestMultiError(errors)
	}

	return nil
}

// GetVipLevelConfigTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetVipLevelConfigTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type GetVipLevelConfigTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipLevelConfigTemplateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipLevelConfigTemplateRequestMultiError) AllErrors() []error { return m }

// GetVipLevelConfigTemplateRequestValidationError is the validation error
// returned by GetVipLevelConfigTemplateRequest.Validate if the designated
// constraints aren't met.
type GetVipLevelConfigTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipLevelConfigTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipLevelConfigTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipLevelConfigTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipLevelConfigTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipLevelConfigTemplateRequestValidationError) ErrorName() string {
	return "GetVipLevelConfigTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipLevelConfigTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipLevelConfigTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipLevelConfigTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipLevelConfigTemplateRequestValidationError{}

// Validate checks the field values on GetVipLevelConfigTemplateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetVipLevelConfigTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipLevelConfigTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetVipLevelConfigTemplateResponseMultiError, or nil if none found.
func (m *GetVipLevelConfigTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipLevelConfigTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipLevelConfigTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipLevelConfigTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipLevelConfigTemplateResponseValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVipLevelConfigTemplateResponseMultiError(errors)
	}

	return nil
}

// GetVipLevelConfigTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetVipLevelConfigTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type GetVipLevelConfigTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipLevelConfigTemplateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipLevelConfigTemplateResponseMultiError) AllErrors() []error { return m }

// GetVipLevelConfigTemplateResponseValidationError is the validation error
// returned by GetVipLevelConfigTemplateResponse.Validate if the designated
// constraints aren't met.
type GetVipLevelConfigTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipLevelConfigTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipLevelConfigTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipLevelConfigTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipLevelConfigTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipLevelConfigTemplateResponseValidationError) ErrorName() string {
	return "GetVipLevelConfigTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipLevelConfigTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipLevelConfigTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipLevelConfigTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipLevelConfigTemplateResponseValidationError{}

// Validate checks the field values on CreateVipLevelConfigTemplateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateVipLevelConfigTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVipLevelConfigTemplateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateVipLevelConfigTemplateRequestMultiError, or nil if none found.
func (m *CreateVipLevelConfigTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVipLevelConfigTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateVipLevelConfigTemplateRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateVipLevelConfigTemplateRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVipLevelConfigTemplateRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateVipLevelConfigTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateVipLevelConfigTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVipLevelConfigTemplateRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateVipLevelConfigTemplateRequestMultiError(errors)
	}

	return nil
}

// CreateVipLevelConfigTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateVipLevelConfigTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateVipLevelConfigTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVipLevelConfigTemplateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVipLevelConfigTemplateRequestMultiError) AllErrors() []error { return m }

// CreateVipLevelConfigTemplateRequestValidationError is the validation error
// returned by CreateVipLevelConfigTemplateRequest.Validate if the designated
// constraints aren't met.
type CreateVipLevelConfigTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVipLevelConfigTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVipLevelConfigTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVipLevelConfigTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVipLevelConfigTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVipLevelConfigTemplateRequestValidationError) ErrorName() string {
	return "CreateVipLevelConfigTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVipLevelConfigTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVipLevelConfigTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVipLevelConfigTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVipLevelConfigTemplateRequestValidationError{}

// Validate checks the field values on CreateVipLevelConfigTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateVipLevelConfigTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVipLevelConfigTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateVipLevelConfigTemplateResponseMultiError, or nil if none found.
func (m *CreateVipLevelConfigTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVipLevelConfigTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateId

	// no validation rules for Success

	if len(errors) > 0 {
		return CreateVipLevelConfigTemplateResponseMultiError(errors)
	}

	return nil
}

// CreateVipLevelConfigTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateVipLevelConfigTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateVipLevelConfigTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVipLevelConfigTemplateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVipLevelConfigTemplateResponseMultiError) AllErrors() []error { return m }

// CreateVipLevelConfigTemplateResponseValidationError is the validation error
// returned by CreateVipLevelConfigTemplateResponse.Validate if the designated
// constraints aren't met.
type CreateVipLevelConfigTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVipLevelConfigTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVipLevelConfigTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVipLevelConfigTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVipLevelConfigTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVipLevelConfigTemplateResponseValidationError) ErrorName() string {
	return "CreateVipLevelConfigTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVipLevelConfigTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVipLevelConfigTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVipLevelConfigTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVipLevelConfigTemplateResponseValidationError{}

// Validate checks the field values on UpdateVipLevelConfigTemplateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateVipLevelConfigTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVipLevelConfigTemplateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateVipLevelConfigTemplateRequestMultiError, or nil if none found.
func (m *UpdateVipLevelConfigTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVipLevelConfigTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVipLevelConfigTemplateRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVipLevelConfigTemplateRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVipLevelConfigTemplateRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVipLevelConfigTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVipLevelConfigTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVipLevelConfigTemplateRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateVipLevelConfigTemplateRequestMultiError(errors)
	}

	return nil
}

// UpdateVipLevelConfigTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateVipLevelConfigTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateVipLevelConfigTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVipLevelConfigTemplateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVipLevelConfigTemplateRequestMultiError) AllErrors() []error { return m }

// UpdateVipLevelConfigTemplateRequestValidationError is the validation error
// returned by UpdateVipLevelConfigTemplateRequest.Validate if the designated
// constraints aren't met.
type UpdateVipLevelConfigTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVipLevelConfigTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVipLevelConfigTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVipLevelConfigTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVipLevelConfigTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVipLevelConfigTemplateRequestValidationError) ErrorName() string {
	return "UpdateVipLevelConfigTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVipLevelConfigTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVipLevelConfigTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVipLevelConfigTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVipLevelConfigTemplateRequestValidationError{}

// Validate checks the field values on UpdateVipLevelConfigTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateVipLevelConfigTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVipLevelConfigTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateVipLevelConfigTemplateResponseMultiError, or nil if none found.
func (m *UpdateVipLevelConfigTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVipLevelConfigTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateVipLevelConfigTemplateResponseMultiError(errors)
	}

	return nil
}

// UpdateVipLevelConfigTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateVipLevelConfigTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateVipLevelConfigTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVipLevelConfigTemplateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVipLevelConfigTemplateResponseMultiError) AllErrors() []error { return m }

// UpdateVipLevelConfigTemplateResponseValidationError is the validation error
// returned by UpdateVipLevelConfigTemplateResponse.Validate if the designated
// constraints aren't met.
type UpdateVipLevelConfigTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVipLevelConfigTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVipLevelConfigTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVipLevelConfigTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVipLevelConfigTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVipLevelConfigTemplateResponseValidationError) ErrorName() string {
	return "UpdateVipLevelConfigTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVipLevelConfigTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVipLevelConfigTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVipLevelConfigTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVipLevelConfigTemplateResponseValidationError{}

// Validate checks the field values on DeleteVipLevelConfigTemplateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteVipLevelConfigTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteVipLevelConfigTemplateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteVipLevelConfigTemplateRequestMultiError, or nil if none found.
func (m *DeleteVipLevelConfigTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteVipLevelConfigTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteVipLevelConfigTemplateRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteVipLevelConfigTemplateRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteVipLevelConfigTemplateRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TemplateId

	if len(errors) > 0 {
		return DeleteVipLevelConfigTemplateRequestMultiError(errors)
	}

	return nil
}

// DeleteVipLevelConfigTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteVipLevelConfigTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteVipLevelConfigTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteVipLevelConfigTemplateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteVipLevelConfigTemplateRequestMultiError) AllErrors() []error { return m }

// DeleteVipLevelConfigTemplateRequestValidationError is the validation error
// returned by DeleteVipLevelConfigTemplateRequest.Validate if the designated
// constraints aren't met.
type DeleteVipLevelConfigTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVipLevelConfigTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVipLevelConfigTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVipLevelConfigTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVipLevelConfigTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVipLevelConfigTemplateRequestValidationError) ErrorName() string {
	return "DeleteVipLevelConfigTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVipLevelConfigTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVipLevelConfigTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVipLevelConfigTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVipLevelConfigTemplateRequestValidationError{}

// Validate checks the field values on DeleteVipLevelConfigTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteVipLevelConfigTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteVipLevelConfigTemplateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteVipLevelConfigTemplateResponseMultiError, or nil if none found.
func (m *DeleteVipLevelConfigTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteVipLevelConfigTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteVipLevelConfigTemplateResponseMultiError(errors)
	}

	return nil
}

// DeleteVipLevelConfigTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteVipLevelConfigTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteVipLevelConfigTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteVipLevelConfigTemplateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteVipLevelConfigTemplateResponseMultiError) AllErrors() []error { return m }

// DeleteVipLevelConfigTemplateResponseValidationError is the validation error
// returned by DeleteVipLevelConfigTemplateResponse.Validate if the designated
// constraints aren't met.
type DeleteVipLevelConfigTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVipLevelConfigTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVipLevelConfigTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVipLevelConfigTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVipLevelConfigTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVipLevelConfigTemplateResponseValidationError) ErrorName() string {
	return "DeleteVipLevelConfigTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVipLevelConfigTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVipLevelConfigTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVipLevelConfigTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVipLevelConfigTemplateResponseValidationError{}

// Validate checks the field values on VipMember with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VipMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VipMember with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VipMemberMultiError, or nil
// if none found.
func (m *VipMember) ValidateAll() error {
	return m.validate(true)
}

func (m *VipMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SystemOperatorId

	// no validation rules for RetailerOperatorId

	// no validation rules for CompanyOperatorId

	// no validation rules for OperatorId

	// no validation rules for UserId

	// no validation rules for CurrentLevelId

	// no validation rules for CurrentXp

	// no validation rules for TotalXp

	// no validation rules for LastLevelUpAt

	// no validation rules for LastInstantUpgradeAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Username

	// no validation rules for CurrentLevelName

	// no validation rules for NextLevelXp

	// no validation rules for TotalDeposit

	// no validation rules for TotalWagering

	if len(errors) > 0 {
		return VipMemberMultiError(errors)
	}

	return nil
}

// VipMemberMultiError is an error wrapping multiple validation errors returned
// by VipMember.ValidateAll() if the designated constraints aren't met.
type VipMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VipMemberMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VipMemberMultiError) AllErrors() []error { return m }

// VipMemberValidationError is the validation error returned by
// VipMember.Validate if the designated constraints aren't met.
type VipMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VipMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VipMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VipMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VipMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VipMemberValidationError) ErrorName() string { return "VipMemberValidationError" }

// Error satisfies the builtin error interface
func (e VipMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVipMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VipMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VipMemberValidationError{}

// Validate checks the field values on ListVipMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListVipMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVipMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListVipMembersRequestMultiError, or nil if none found.
func (m *ListVipMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVipMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListVipMembersRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListVipMembersRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListVipMembersRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Search

	// no validation rules for CurrentLevelId

	// no validation rules for MinXp

	// no validation rules for MaxXp

	// no validation rules for UserId

	if len(errors) > 0 {
		return ListVipMembersRequestMultiError(errors)
	}

	return nil
}

// ListVipMembersRequestMultiError is an error wrapping multiple validation
// errors returned by ListVipMembersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListVipMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVipMembersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVipMembersRequestMultiError) AllErrors() []error { return m }

// ListVipMembersRequestValidationError is the validation error returned by
// ListVipMembersRequest.Validate if the designated constraints aren't met.
type ListVipMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVipMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVipMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVipMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVipMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVipMembersRequestValidationError) ErrorName() string {
	return "ListVipMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListVipMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVipMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVipMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVipMembersRequestValidationError{}

// Validate checks the field values on ListVipMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListVipMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVipMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListVipMembersResponseMultiError, or nil if none found.
func (m *ListVipMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVipMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListVipMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListVipMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListVipMembersResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListVipMembersResponseMultiError(errors)
	}

	return nil
}

// ListVipMembersResponseMultiError is an error wrapping multiple validation
// errors returned by ListVipMembersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListVipMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVipMembersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVipMembersResponseMultiError) AllErrors() []error { return m }

// ListVipMembersResponseValidationError is the validation error returned by
// ListVipMembersResponse.Validate if the designated constraints aren't met.
type ListVipMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVipMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVipMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVipMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVipMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVipMembersResponseValidationError) ErrorName() string {
	return "ListVipMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListVipMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVipMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVipMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVipMembersResponseValidationError{}

// Validate checks the field values on GetVipMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVipMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVipMemberRequestMultiError, or nil if none found.
func (m *GetVipMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipMemberRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipMemberRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipMemberRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetVipMemberRequestMultiError(errors)
	}

	return nil
}

// GetVipMemberRequestMultiError is an error wrapping multiple validation
// errors returned by GetVipMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type GetVipMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipMemberRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipMemberRequestMultiError) AllErrors() []error { return m }

// GetVipMemberRequestValidationError is the validation error returned by
// GetVipMemberRequest.Validate if the designated constraints aren't met.
type GetVipMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipMemberRequestValidationError) ErrorName() string {
	return "GetVipMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipMemberRequestValidationError{}

// Validate checks the field values on GetVipMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVipMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVipMemberResponseMultiError, or nil if none found.
func (m *GetVipMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipMemberResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipMemberResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipMemberResponseValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVipMemberResponseMultiError(errors)
	}

	return nil
}

// GetVipMemberResponseMultiError is an error wrapping multiple validation
// errors returned by GetVipMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type GetVipMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipMemberResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipMemberResponseMultiError) AllErrors() []error { return m }

// GetVipMemberResponseValidationError is the validation error returned by
// GetVipMemberResponse.Validate if the designated constraints aren't met.
type GetVipMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipMemberResponseValidationError) ErrorName() string {
	return "GetVipMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipMemberResponseValidationError{}

// Validate checks the field values on UpdateVipMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVipMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVipMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVipMemberRequestMultiError, or nil if none found.
func (m *UpdateVipMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVipMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVipMemberRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVipMemberRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVipMemberRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVipMemberRequestValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVipMemberRequestValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVipMemberRequestValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateVipMemberRequestMultiError(errors)
	}

	return nil
}

// UpdateVipMemberRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateVipMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateVipMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVipMemberRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVipMemberRequestMultiError) AllErrors() []error { return m }

// UpdateVipMemberRequestValidationError is the validation error returned by
// UpdateVipMemberRequest.Validate if the designated constraints aren't met.
type UpdateVipMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVipMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVipMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVipMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVipMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVipMemberRequestValidationError) ErrorName() string {
	return "UpdateVipMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVipMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVipMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVipMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVipMemberRequestValidationError{}

// Validate checks the field values on UpdateVipMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVipMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVipMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVipMemberResponseMultiError, or nil if none found.
func (m *UpdateVipMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVipMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateVipMemberResponseMultiError(errors)
	}

	return nil
}

// UpdateVipMemberResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateVipMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateVipMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVipMemberResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVipMemberResponseMultiError) AllErrors() []error { return m }

// UpdateVipMemberResponseValidationError is the validation error returned by
// UpdateVipMemberResponse.Validate if the designated constraints aren't met.
type UpdateVipMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVipMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVipMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVipMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVipMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVipMemberResponseValidationError) ErrorName() string {
	return "UpdateVipMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVipMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVipMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVipMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVipMemberResponseValidationError{}

// Validate checks the field values on VipXpLedger with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VipXpLedger) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VipXpLedger with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VipXpLedgerMultiError, or
// nil if none found.
func (m *VipXpLedger) ValidateAll() error {
	return m.validate(true)
}

func (m *VipXpLedger) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SystemOperatorId

	// no validation rules for RetailerOperatorId

	// no validation rules for CompanyOperatorId

	// no validation rules for OperatorId

	// no validation rules for UserId

	// no validation rules for SourceType

	// no validation rules for BaseAmount

	// no validation rules for Currency

	// no validation rules for XpEarned

	// no validation rules for AppliedRate

	// no validation rules for HouseEdgeUsed

	// no validation rules for StdXpMultiplier

	// no validation rules for EventTs

	// no validation rules for CreatedAt

	// no validation rules for Username

	// no validation rules for SourceTypeName

	if len(errors) > 0 {
		return VipXpLedgerMultiError(errors)
	}

	return nil
}

// VipXpLedgerMultiError is an error wrapping multiple validation errors
// returned by VipXpLedger.ValidateAll() if the designated constraints aren't met.
type VipXpLedgerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VipXpLedgerMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VipXpLedgerMultiError) AllErrors() []error { return m }

// VipXpLedgerValidationError is the validation error returned by
// VipXpLedger.Validate if the designated constraints aren't met.
type VipXpLedgerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VipXpLedgerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VipXpLedgerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VipXpLedgerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VipXpLedgerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VipXpLedgerValidationError) ErrorName() string { return "VipXpLedgerValidationError" }

// Error satisfies the builtin error interface
func (e VipXpLedgerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVipXpLedger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VipXpLedgerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VipXpLedgerValidationError{}

// Validate checks the field values on ListVipXpLedgerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListVipXpLedgerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVipXpLedgerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListVipXpLedgerRequestMultiError, or nil if none found.
func (m *ListVipXpLedgerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVipXpLedgerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListVipXpLedgerRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListVipXpLedgerRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListVipXpLedgerRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for UserId

	// no validation rules for SourceType

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return ListVipXpLedgerRequestMultiError(errors)
	}

	return nil
}

// ListVipXpLedgerRequestMultiError is an error wrapping multiple validation
// errors returned by ListVipXpLedgerRequest.ValidateAll() if the designated
// constraints aren't met.
type ListVipXpLedgerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVipXpLedgerRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVipXpLedgerRequestMultiError) AllErrors() []error { return m }

// ListVipXpLedgerRequestValidationError is the validation error returned by
// ListVipXpLedgerRequest.Validate if the designated constraints aren't met.
type ListVipXpLedgerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVipXpLedgerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVipXpLedgerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVipXpLedgerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVipXpLedgerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVipXpLedgerRequestValidationError) ErrorName() string {
	return "ListVipXpLedgerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListVipXpLedgerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVipXpLedgerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVipXpLedgerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVipXpLedgerRequestValidationError{}

// Validate checks the field values on ListVipXpLedgerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListVipXpLedgerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVipXpLedgerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListVipXpLedgerResponseMultiError, or nil if none found.
func (m *ListVipXpLedgerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVipXpLedgerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListVipXpLedgerResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListVipXpLedgerResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListVipXpLedgerResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListVipXpLedgerResponseMultiError(errors)
	}

	return nil
}

// ListVipXpLedgerResponseMultiError is an error wrapping multiple validation
// errors returned by ListVipXpLedgerResponse.ValidateAll() if the designated
// constraints aren't met.
type ListVipXpLedgerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVipXpLedgerResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVipXpLedgerResponseMultiError) AllErrors() []error { return m }

// ListVipXpLedgerResponseValidationError is the validation error returned by
// ListVipXpLedgerResponse.Validate if the designated constraints aren't met.
type ListVipXpLedgerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVipXpLedgerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVipXpLedgerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVipXpLedgerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVipXpLedgerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVipXpLedgerResponseValidationError) ErrorName() string {
	return "ListVipXpLedgerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListVipXpLedgerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVipXpLedgerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVipXpLedgerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVipXpLedgerResponseValidationError{}

// Validate checks the field values on GetVipXpLedgerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVipXpLedgerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipXpLedgerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVipXpLedgerRequestMultiError, or nil if none found.
func (m *GetVipXpLedgerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipXpLedgerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipXpLedgerRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipXpLedgerRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipXpLedgerRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EntryId

	if len(errors) > 0 {
		return GetVipXpLedgerRequestMultiError(errors)
	}

	return nil
}

// GetVipXpLedgerRequestMultiError is an error wrapping multiple validation
// errors returned by GetVipXpLedgerRequest.ValidateAll() if the designated
// constraints aren't met.
type GetVipXpLedgerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipXpLedgerRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipXpLedgerRequestMultiError) AllErrors() []error { return m }

// GetVipXpLedgerRequestValidationError is the validation error returned by
// GetVipXpLedgerRequest.Validate if the designated constraints aren't met.
type GetVipXpLedgerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipXpLedgerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipXpLedgerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipXpLedgerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipXpLedgerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipXpLedgerRequestValidationError) ErrorName() string {
	return "GetVipXpLedgerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipXpLedgerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipXpLedgerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipXpLedgerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipXpLedgerRequestValidationError{}

// Validate checks the field values on GetVipXpLedgerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVipXpLedgerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipXpLedgerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVipXpLedgerResponseMultiError, or nil if none found.
func (m *GetVipXpLedgerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipXpLedgerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipXpLedgerResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipXpLedgerResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipXpLedgerResponseValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVipXpLedgerResponseMultiError(errors)
	}

	return nil
}

// GetVipXpLedgerResponseMultiError is an error wrapping multiple validation
// errors returned by GetVipXpLedgerResponse.ValidateAll() if the designated
// constraints aren't met.
type GetVipXpLedgerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipXpLedgerResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipXpLedgerResponseMultiError) AllErrors() []error { return m }

// GetVipXpLedgerResponseValidationError is the validation error returned by
// GetVipXpLedgerResponse.Validate if the designated constraints aren't met.
type GetVipXpLedgerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipXpLedgerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipXpLedgerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipXpLedgerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipXpLedgerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipXpLedgerResponseValidationError) ErrorName() string {
	return "GetVipXpLedgerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipXpLedgerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipXpLedgerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipXpLedgerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipXpLedgerResponseValidationError{}

// Validate checks the field values on AddVipXpLedgerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddVipXpLedgerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddVipXpLedgerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddVipXpLedgerRequestMultiError, or nil if none found.
func (m *AddVipXpLedgerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddVipXpLedgerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddVipXpLedgerRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddVipXpLedgerRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddVipXpLedgerRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddVipXpLedgerRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddVipXpLedgerRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddVipXpLedgerRequestValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddVipXpLedgerRequestMultiError(errors)
	}

	return nil
}

// AddVipXpLedgerRequestMultiError is an error wrapping multiple validation
// errors returned by AddVipXpLedgerRequest.ValidateAll() if the designated
// constraints aren't met.
type AddVipXpLedgerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddVipXpLedgerRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddVipXpLedgerRequestMultiError) AllErrors() []error { return m }

// AddVipXpLedgerRequestValidationError is the validation error returned by
// AddVipXpLedgerRequest.Validate if the designated constraints aren't met.
type AddVipXpLedgerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddVipXpLedgerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddVipXpLedgerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddVipXpLedgerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddVipXpLedgerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddVipXpLedgerRequestValidationError) ErrorName() string {
	return "AddVipXpLedgerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddVipXpLedgerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddVipXpLedgerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddVipXpLedgerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddVipXpLedgerRequestValidationError{}

// Validate checks the field values on AddVipXpLedgerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddVipXpLedgerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddVipXpLedgerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddVipXpLedgerResponseMultiError, or nil if none found.
func (m *AddVipXpLedgerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddVipXpLedgerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EntryId

	// no validation rules for Success

	if len(errors) > 0 {
		return AddVipXpLedgerResponseMultiError(errors)
	}

	return nil
}

// AddVipXpLedgerResponseMultiError is an error wrapping multiple validation
// errors returned by AddVipXpLedgerResponse.ValidateAll() if the designated
// constraints aren't met.
type AddVipXpLedgerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddVipXpLedgerResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddVipXpLedgerResponseMultiError) AllErrors() []error { return m }

// AddVipXpLedgerResponseValidationError is the validation error returned by
// AddVipXpLedgerResponse.Validate if the designated constraints aren't met.
type AddVipXpLedgerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddVipXpLedgerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddVipXpLedgerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddVipXpLedgerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddVipXpLedgerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddVipXpLedgerResponseValidationError) ErrorName() string {
	return "AddVipXpLedgerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddVipXpLedgerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddVipXpLedgerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddVipXpLedgerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddVipXpLedgerResponseValidationError{}

// Validate checks the field values on VipRewardLedger with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VipRewardLedger) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VipRewardLedger with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VipRewardLedgerMultiError, or nil if none found.
func (m *VipRewardLedger) ValidateAll() error {
	return m.validate(true)
}

func (m *VipRewardLedger) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SystemOperatorId

	// no validation rules for RetailerOperatorId

	// no validation rules for CompanyOperatorId

	// no validation rules for OperatorId

	// no validation rules for UserId

	// no validation rules for LevelId

	// no validation rules for RewardType

	// no validation rules for PayoutType

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for ClaimAmount

	// no validation rules for ClaimCurrency

	// no validation rules for Status

	// no validation rules for IssueAt

	// no validation rules for ExpireAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Username

	// no validation rules for LevelName

	// no validation rules for RewardTypeName

	// no validation rules for PayoutTypeName

	if len(errors) > 0 {
		return VipRewardLedgerMultiError(errors)
	}

	return nil
}

// VipRewardLedgerMultiError is an error wrapping multiple validation errors
// returned by VipRewardLedger.ValidateAll() if the designated constraints
// aren't met.
type VipRewardLedgerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VipRewardLedgerMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VipRewardLedgerMultiError) AllErrors() []error { return m }

// VipRewardLedgerValidationError is the validation error returned by
// VipRewardLedger.Validate if the designated constraints aren't met.
type VipRewardLedgerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VipRewardLedgerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VipRewardLedgerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VipRewardLedgerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VipRewardLedgerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VipRewardLedgerValidationError) ErrorName() string { return "VipRewardLedgerValidationError" }

// Error satisfies the builtin error interface
func (e VipRewardLedgerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVipRewardLedger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VipRewardLedgerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VipRewardLedgerValidationError{}

// Validate checks the field values on ListVipRewardLedgerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListVipRewardLedgerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVipRewardLedgerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListVipRewardLedgerRequestMultiError, or nil if none found.
func (m *ListVipRewardLedgerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVipRewardLedgerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListVipRewardLedgerRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListVipRewardLedgerRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListVipRewardLedgerRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for UserId

	// no validation rules for LevelId

	// no validation rules for RewardType

	// no validation rules for Status

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return ListVipRewardLedgerRequestMultiError(errors)
	}

	return nil
}

// ListVipRewardLedgerRequestMultiError is an error wrapping multiple
// validation errors returned by ListVipRewardLedgerRequest.ValidateAll() if
// the designated constraints aren't met.
type ListVipRewardLedgerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVipRewardLedgerRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVipRewardLedgerRequestMultiError) AllErrors() []error { return m }

// ListVipRewardLedgerRequestValidationError is the validation error returned
// by ListVipRewardLedgerRequest.Validate if the designated constraints aren't met.
type ListVipRewardLedgerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVipRewardLedgerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVipRewardLedgerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVipRewardLedgerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVipRewardLedgerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVipRewardLedgerRequestValidationError) ErrorName() string {
	return "ListVipRewardLedgerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListVipRewardLedgerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVipRewardLedgerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVipRewardLedgerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVipRewardLedgerRequestValidationError{}

// Validate checks the field values on ListVipRewardLedgerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListVipRewardLedgerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVipRewardLedgerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListVipRewardLedgerResponseMultiError, or nil if none found.
func (m *ListVipRewardLedgerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVipRewardLedgerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListVipRewardLedgerResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListVipRewardLedgerResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListVipRewardLedgerResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListVipRewardLedgerResponseMultiError(errors)
	}

	return nil
}

// ListVipRewardLedgerResponseMultiError is an error wrapping multiple
// validation errors returned by ListVipRewardLedgerResponse.ValidateAll() if
// the designated constraints aren't met.
type ListVipRewardLedgerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVipRewardLedgerResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVipRewardLedgerResponseMultiError) AllErrors() []error { return m }

// ListVipRewardLedgerResponseValidationError is the validation error returned
// by ListVipRewardLedgerResponse.Validate if the designated constraints
// aren't met.
type ListVipRewardLedgerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVipRewardLedgerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVipRewardLedgerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVipRewardLedgerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVipRewardLedgerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVipRewardLedgerResponseValidationError) ErrorName() string {
	return "ListVipRewardLedgerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListVipRewardLedgerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVipRewardLedgerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVipRewardLedgerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVipRewardLedgerResponseValidationError{}

// Validate checks the field values on GetVipRewardLedgerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVipRewardLedgerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipRewardLedgerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVipRewardLedgerRequestMultiError, or nil if none found.
func (m *GetVipRewardLedgerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipRewardLedgerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipRewardLedgerRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipRewardLedgerRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipRewardLedgerRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EntryId

	if len(errors) > 0 {
		return GetVipRewardLedgerRequestMultiError(errors)
	}

	return nil
}

// GetVipRewardLedgerRequestMultiError is an error wrapping multiple validation
// errors returned by GetVipRewardLedgerRequest.ValidateAll() if the
// designated constraints aren't met.
type GetVipRewardLedgerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipRewardLedgerRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipRewardLedgerRequestMultiError) AllErrors() []error { return m }

// GetVipRewardLedgerRequestValidationError is the validation error returned by
// GetVipRewardLedgerRequest.Validate if the designated constraints aren't met.
type GetVipRewardLedgerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipRewardLedgerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipRewardLedgerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipRewardLedgerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipRewardLedgerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipRewardLedgerRequestValidationError) ErrorName() string {
	return "GetVipRewardLedgerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipRewardLedgerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipRewardLedgerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipRewardLedgerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipRewardLedgerRequestValidationError{}

// Validate checks the field values on GetVipRewardLedgerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVipRewardLedgerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipRewardLedgerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVipRewardLedgerResponseMultiError, or nil if none found.
func (m *GetVipRewardLedgerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipRewardLedgerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipRewardLedgerResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipRewardLedgerResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipRewardLedgerResponseValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVipRewardLedgerResponseMultiError(errors)
	}

	return nil
}

// GetVipRewardLedgerResponseMultiError is an error wrapping multiple
// validation errors returned by GetVipRewardLedgerResponse.ValidateAll() if
// the designated constraints aren't met.
type GetVipRewardLedgerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipRewardLedgerResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipRewardLedgerResponseMultiError) AllErrors() []error { return m }

// GetVipRewardLedgerResponseValidationError is the validation error returned
// by GetVipRewardLedgerResponse.Validate if the designated constraints aren't met.
type GetVipRewardLedgerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipRewardLedgerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipRewardLedgerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipRewardLedgerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipRewardLedgerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipRewardLedgerResponseValidationError) ErrorName() string {
	return "GetVipRewardLedgerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipRewardLedgerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipRewardLedgerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipRewardLedgerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipRewardLedgerResponseValidationError{}

// Validate checks the field values on IssueVipRewardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IssueVipRewardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueVipRewardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssueVipRewardRequestMultiError, or nil if none found.
func (m *IssueVipRewardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueVipRewardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssueVipRewardRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssueVipRewardRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssueVipRewardRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	// no validation rules for LevelId

	// no validation rules for RewardType

	// no validation rules for PayoutType

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for ClaimAmount

	// no validation rules for ClaimCurrency

	// no validation rules for ExpireAt

	if len(errors) > 0 {
		return IssueVipRewardRequestMultiError(errors)
	}

	return nil
}

// IssueVipRewardRequestMultiError is an error wrapping multiple validation
// errors returned by IssueVipRewardRequest.ValidateAll() if the designated
// constraints aren't met.
type IssueVipRewardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueVipRewardRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueVipRewardRequestMultiError) AllErrors() []error { return m }

// IssueVipRewardRequestValidationError is the validation error returned by
// IssueVipRewardRequest.Validate if the designated constraints aren't met.
type IssueVipRewardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueVipRewardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueVipRewardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueVipRewardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueVipRewardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueVipRewardRequestValidationError) ErrorName() string {
	return "IssueVipRewardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IssueVipRewardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueVipRewardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueVipRewardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueVipRewardRequestValidationError{}

// Validate checks the field values on IssueVipRewardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IssueVipRewardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueVipRewardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IssueVipRewardResponseMultiError, or nil if none found.
func (m *IssueVipRewardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueVipRewardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EntryId

	// no validation rules for Success

	if len(errors) > 0 {
		return IssueVipRewardResponseMultiError(errors)
	}

	return nil
}

// IssueVipRewardResponseMultiError is an error wrapping multiple validation
// errors returned by IssueVipRewardResponse.ValidateAll() if the designated
// constraints aren't met.
type IssueVipRewardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueVipRewardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueVipRewardResponseMultiError) AllErrors() []error { return m }

// IssueVipRewardResponseValidationError is the validation error returned by
// IssueVipRewardResponse.Validate if the designated constraints aren't met.
type IssueVipRewardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueVipRewardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueVipRewardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueVipRewardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueVipRewardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueVipRewardResponseValidationError) ErrorName() string {
	return "IssueVipRewardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IssueVipRewardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueVipRewardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueVipRewardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueVipRewardResponseValidationError{}

// Validate checks the field values on UpdateVipRewardStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVipRewardStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVipRewardStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVipRewardStatusRequestMultiError, or nil if none found.
func (m *UpdateVipRewardStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVipRewardStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVipRewardStatusRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVipRewardStatusRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVipRewardStatusRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EntryId

	// no validation rules for Status

	// no validation rules for IssueAt

	if len(errors) > 0 {
		return UpdateVipRewardStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateVipRewardStatusRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateVipRewardStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateVipRewardStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVipRewardStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVipRewardStatusRequestMultiError) AllErrors() []error { return m }

// UpdateVipRewardStatusRequestValidationError is the validation error returned
// by UpdateVipRewardStatusRequest.Validate if the designated constraints
// aren't met.
type UpdateVipRewardStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVipRewardStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVipRewardStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVipRewardStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVipRewardStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVipRewardStatusRequestValidationError) ErrorName() string {
	return "UpdateVipRewardStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVipRewardStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVipRewardStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVipRewardStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVipRewardStatusRequestValidationError{}

// Validate checks the field values on UpdateVipRewardStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVipRewardStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVipRewardStatusResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateVipRewardStatusResponseMultiError, or nil if none found.
func (m *UpdateVipRewardStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVipRewardStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateVipRewardStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateVipRewardStatusResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateVipRewardStatusResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateVipRewardStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVipRewardStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVipRewardStatusResponseMultiError) AllErrors() []error { return m }

// UpdateVipRewardStatusResponseValidationError is the validation error
// returned by UpdateVipRewardStatusResponse.Validate if the designated
// constraints aren't met.
type UpdateVipRewardStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVipRewardStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVipRewardStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVipRewardStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVipRewardStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVipRewardStatusResponseValidationError) ErrorName() string {
	return "UpdateVipRewardStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVipRewardStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVipRewardStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVipRewardStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVipRewardStatusResponseValidationError{}

// Validate checks the field values on VipSettlementState with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VipSettlementState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VipSettlementState with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VipSettlementStateMultiError, or nil if none found.
func (m *VipSettlementState) ValidateAll() error {
	return m.validate(true)
}

func (m *VipSettlementState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SystemOperatorId

	// no validation rules for RetailerOperatorId

	// no validation rules for CompanyOperatorId

	// no validation rules for OperatorId

	// no validation rules for DailyLastRunAt

	// no validation rules for WeeklyLastRunAt

	// no validation rules for MonthlyLastRunAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return VipSettlementStateMultiError(errors)
	}

	return nil
}

// VipSettlementStateMultiError is an error wrapping multiple validation errors
// returned by VipSettlementState.ValidateAll() if the designated constraints
// aren't met.
type VipSettlementStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VipSettlementStateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VipSettlementStateMultiError) AllErrors() []error { return m }

// VipSettlementStateValidationError is the validation error returned by
// VipSettlementState.Validate if the designated constraints aren't met.
type VipSettlementStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VipSettlementStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VipSettlementStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VipSettlementStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VipSettlementStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VipSettlementStateValidationError) ErrorName() string {
	return "VipSettlementStateValidationError"
}

// Error satisfies the builtin error interface
func (e VipSettlementStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVipSettlementState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VipSettlementStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VipSettlementStateValidationError{}

// Validate checks the field values on GetVipSettlementStateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVipSettlementStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipSettlementStateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVipSettlementStateRequestMultiError, or nil if none found.
func (m *GetVipSettlementStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipSettlementStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipSettlementStateRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipSettlementStateRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipSettlementStateRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVipSettlementStateRequestMultiError(errors)
	}

	return nil
}

// GetVipSettlementStateRequestMultiError is an error wrapping multiple
// validation errors returned by GetVipSettlementStateRequest.ValidateAll() if
// the designated constraints aren't met.
type GetVipSettlementStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipSettlementStateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipSettlementStateRequestMultiError) AllErrors() []error { return m }

// GetVipSettlementStateRequestValidationError is the validation error returned
// by GetVipSettlementStateRequest.Validate if the designated constraints
// aren't met.
type GetVipSettlementStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipSettlementStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipSettlementStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipSettlementStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipSettlementStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipSettlementStateRequestValidationError) ErrorName() string {
	return "GetVipSettlementStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipSettlementStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipSettlementStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipSettlementStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipSettlementStateRequestValidationError{}

// Validate checks the field values on GetVipSettlementStateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVipSettlementStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipSettlementStateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetVipSettlementStateResponseMultiError, or nil if none found.
func (m *GetVipSettlementStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipSettlementStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipSettlementStateResponseValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipSettlementStateResponseValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipSettlementStateResponseValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVipSettlementStateResponseMultiError(errors)
	}

	return nil
}

// GetVipSettlementStateResponseMultiError is an error wrapping multiple
// validation errors returned by GetVipSettlementStateResponse.ValidateAll()
// if the designated constraints aren't met.
type GetVipSettlementStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipSettlementStateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipSettlementStateResponseMultiError) AllErrors() []error { return m }

// GetVipSettlementStateResponseValidationError is the validation error
// returned by GetVipSettlementStateResponse.Validate if the designated
// constraints aren't met.
type GetVipSettlementStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipSettlementStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipSettlementStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipSettlementStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipSettlementStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipSettlementStateResponseValidationError) ErrorName() string {
	return "GetVipSettlementStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipSettlementStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipSettlementStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipSettlementStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipSettlementStateResponseValidationError{}

// Validate checks the field values on UpdateVipSettlementStateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVipSettlementStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVipSettlementStateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateVipSettlementStateRequestMultiError, or nil if none found.
func (m *UpdateVipSettlementStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVipSettlementStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVipSettlementStateRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVipSettlementStateRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVipSettlementStateRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVipSettlementStateRequestValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVipSettlementStateRequestValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVipSettlementStateRequestValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateVipSettlementStateRequestMultiError(errors)
	}

	return nil
}

// UpdateVipSettlementStateRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateVipSettlementStateRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateVipSettlementStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVipSettlementStateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVipSettlementStateRequestMultiError) AllErrors() []error { return m }

// UpdateVipSettlementStateRequestValidationError is the validation error
// returned by UpdateVipSettlementStateRequest.Validate if the designated
// constraints aren't met.
type UpdateVipSettlementStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVipSettlementStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVipSettlementStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVipSettlementStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVipSettlementStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVipSettlementStateRequestValidationError) ErrorName() string {
	return "UpdateVipSettlementStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVipSettlementStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVipSettlementStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVipSettlementStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVipSettlementStateRequestValidationError{}

// Validate checks the field values on UpdateVipSettlementStateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateVipSettlementStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVipSettlementStateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateVipSettlementStateResponseMultiError, or nil if none found.
func (m *UpdateVipSettlementStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVipSettlementStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateVipSettlementStateResponseMultiError(errors)
	}

	return nil
}

// UpdateVipSettlementStateResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateVipSettlementStateResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateVipSettlementStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVipSettlementStateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVipSettlementStateResponseMultiError) AllErrors() []error { return m }

// UpdateVipSettlementStateResponseValidationError is the validation error
// returned by UpdateVipSettlementStateResponse.Validate if the designated
// constraints aren't met.
type UpdateVipSettlementStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVipSettlementStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVipSettlementStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVipSettlementStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVipSettlementStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVipSettlementStateResponseValidationError) ErrorName() string {
	return "UpdateVipSettlementStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVipSettlementStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVipSettlementStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVipSettlementStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVipSettlementStateResponseValidationError{}

// Validate checks the field values on VipStatistics with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VipStatistics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VipStatistics with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VipStatisticsMultiError, or
// nil if none found.
func (m *VipStatistics) ValidateAll() error {
	return m.validate(true)
}

func (m *VipStatistics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalMembers

	// no validation rules for ActiveMembers

	// no validation rules for TotalXpEarned

	// no validation rules for TotalRewardsIssued

	// no validation rules for TotalRewardsPending

	for idx, item := range m.GetLevelStats() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VipStatisticsValidationError{
						field:  fmt.Sprintf("LevelStats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VipStatisticsValidationError{
						field:  fmt.Sprintf("LevelStats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VipStatisticsValidationError{
					field:  fmt.Sprintf("LevelStats[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return VipStatisticsMultiError(errors)
	}

	return nil
}

// VipStatisticsMultiError is an error wrapping multiple validation errors
// returned by VipStatistics.ValidateAll() if the designated constraints
// aren't met.
type VipStatisticsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VipStatisticsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VipStatisticsMultiError) AllErrors() []error { return m }

// VipStatisticsValidationError is the validation error returned by
// VipStatistics.Validate if the designated constraints aren't met.
type VipStatisticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VipStatisticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VipStatisticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VipStatisticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VipStatisticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VipStatisticsValidationError) ErrorName() string { return "VipStatisticsValidationError" }

// Error satisfies the builtin error interface
func (e VipStatisticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVipStatistics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VipStatisticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VipStatisticsValidationError{}

// Validate checks the field values on VipLevelStatistics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VipLevelStatistics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VipLevelStatistics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VipLevelStatisticsMultiError, or nil if none found.
func (m *VipLevelStatistics) ValidateAll() error {
	return m.validate(true)
}

func (m *VipLevelStatistics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LevelId

	// no validation rules for LevelName

	// no validation rules for MemberCount

	// no validation rules for AvgXp

	// no validation rules for TotalRewards

	if len(errors) > 0 {
		return VipLevelStatisticsMultiError(errors)
	}

	return nil
}

// VipLevelStatisticsMultiError is an error wrapping multiple validation errors
// returned by VipLevelStatistics.ValidateAll() if the designated constraints
// aren't met.
type VipLevelStatisticsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VipLevelStatisticsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VipLevelStatisticsMultiError) AllErrors() []error { return m }

// VipLevelStatisticsValidationError is the validation error returned by
// VipLevelStatistics.Validate if the designated constraints aren't met.
type VipLevelStatisticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VipLevelStatisticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VipLevelStatisticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VipLevelStatisticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VipLevelStatisticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VipLevelStatisticsValidationError) ErrorName() string {
	return "VipLevelStatisticsValidationError"
}

// Error satisfies the builtin error interface
func (e VipLevelStatisticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVipLevelStatistics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VipLevelStatisticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VipLevelStatisticsValidationError{}

// Validate checks the field values on GetVipStatisticsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVipStatisticsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipStatisticsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVipStatisticsRequestMultiError, or nil if none found.
func (m *GetVipStatisticsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipStatisticsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipStatisticsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipStatisticsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipStatisticsRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return GetVipStatisticsRequestMultiError(errors)
	}

	return nil
}

// GetVipStatisticsRequestMultiError is an error wrapping multiple validation
// errors returned by GetVipStatisticsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetVipStatisticsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipStatisticsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipStatisticsRequestMultiError) AllErrors() []error { return m }

// GetVipStatisticsRequestValidationError is the validation error returned by
// GetVipStatisticsRequest.Validate if the designated constraints aren't met.
type GetVipStatisticsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipStatisticsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipStatisticsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipStatisticsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipStatisticsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipStatisticsRequestValidationError) ErrorName() string {
	return "GetVipStatisticsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipStatisticsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipStatisticsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipStatisticsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipStatisticsRequestValidationError{}

// Validate checks the field values on GetVipStatisticsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVipStatisticsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipStatisticsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVipStatisticsResponseMultiError, or nil if none found.
func (m *GetVipStatisticsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipStatisticsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatistics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipStatisticsResponseValidationError{
					field:  "Statistics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipStatisticsResponseValidationError{
					field:  "Statistics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatistics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipStatisticsResponseValidationError{
				field:  "Statistics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVipStatisticsResponseMultiError(errors)
	}

	return nil
}

// GetVipStatisticsResponseMultiError is an error wrapping multiple validation
// errors returned by GetVipStatisticsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetVipStatisticsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipStatisticsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipStatisticsResponseMultiError) AllErrors() []error { return m }

// GetVipStatisticsResponseValidationError is the validation error returned by
// GetVipStatisticsResponse.Validate if the designated constraints aren't met.
type GetVipStatisticsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipStatisticsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipStatisticsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipStatisticsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipStatisticsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipStatisticsResponseValidationError) ErrorName() string {
	return "GetVipStatisticsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipStatisticsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipStatisticsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipStatisticsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipStatisticsResponseValidationError{}

// Validate checks the field values on VipUserProgress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VipUserProgress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VipUserProgress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VipUserProgressMultiError, or nil if none found.
func (m *VipUserProgress) ValidateAll() error {
	return m.validate(true)
}

func (m *VipUserProgress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Username

	// no validation rules for CurrentLevelId

	// no validation rules for CurrentLevelName

	// no validation rules for CurrentXp

	// no validation rules for TotalXp

	// no validation rules for NextLevelXp

	// no validation rules for ProgressPercentage

	for idx, item := range m.GetRecentXpEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VipUserProgressValidationError{
						field:  fmt.Sprintf("RecentXpEntries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VipUserProgressValidationError{
						field:  fmt.Sprintf("RecentXpEntries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VipUserProgressValidationError{
					field:  fmt.Sprintf("RecentXpEntries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRecentRewards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VipUserProgressValidationError{
						field:  fmt.Sprintf("RecentRewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VipUserProgressValidationError{
						field:  fmt.Sprintf("RecentRewards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VipUserProgressValidationError{
					field:  fmt.Sprintf("RecentRewards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return VipUserProgressMultiError(errors)
	}

	return nil
}

// VipUserProgressMultiError is an error wrapping multiple validation errors
// returned by VipUserProgress.ValidateAll() if the designated constraints
// aren't met.
type VipUserProgressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VipUserProgressMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VipUserProgressMultiError) AllErrors() []error { return m }

// VipUserProgressValidationError is the validation error returned by
// VipUserProgress.Validate if the designated constraints aren't met.
type VipUserProgressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VipUserProgressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VipUserProgressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VipUserProgressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VipUserProgressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VipUserProgressValidationError) ErrorName() string { return "VipUserProgressValidationError" }

// Error satisfies the builtin error interface
func (e VipUserProgressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVipUserProgress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VipUserProgressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VipUserProgressValidationError{}

// Validate checks the field values on GetVipUserProgressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVipUserProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipUserProgressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVipUserProgressRequestMultiError, or nil if none found.
func (m *GetVipUserProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipUserProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipUserProgressRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipUserProgressRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipUserProgressRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetVipUserProgressRequestMultiError(errors)
	}

	return nil
}

// GetVipUserProgressRequestMultiError is an error wrapping multiple validation
// errors returned by GetVipUserProgressRequest.ValidateAll() if the
// designated constraints aren't met.
type GetVipUserProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipUserProgressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipUserProgressRequestMultiError) AllErrors() []error { return m }

// GetVipUserProgressRequestValidationError is the validation error returned by
// GetVipUserProgressRequest.Validate if the designated constraints aren't met.
type GetVipUserProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipUserProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipUserProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipUserProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipUserProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipUserProgressRequestValidationError) ErrorName() string {
	return "GetVipUserProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipUserProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipUserProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipUserProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipUserProgressRequestValidationError{}

// Validate checks the field values on GetVipUserProgressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVipUserProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVipUserProgressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVipUserProgressResponseMultiError, or nil if none found.
func (m *GetVipUserProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVipUserProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProgress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVipUserProgressResponseValidationError{
					field:  "Progress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVipUserProgressResponseValidationError{
					field:  "Progress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProgress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVipUserProgressResponseValidationError{
				field:  "Progress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVipUserProgressResponseMultiError(errors)
	}

	return nil
}

// GetVipUserProgressResponseMultiError is an error wrapping multiple
// validation errors returned by GetVipUserProgressResponse.ValidateAll() if
// the designated constraints aren't met.
type GetVipUserProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVipUserProgressResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVipUserProgressResponseMultiError) AllErrors() []error { return m }

// GetVipUserProgressResponseValidationError is the validation error returned
// by GetVipUserProgressResponse.Validate if the designated constraints aren't met.
type GetVipUserProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVipUserProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVipUserProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVipUserProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVipUserProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVipUserProgressResponseValidationError) ErrorName() string {
	return "GetVipUserProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVipUserProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVipUserProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVipUserProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVipUserProgressResponseValidationError{}

// Validate checks the field values on BatchUpdateVipLevelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchUpdateVipLevelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchUpdateVipLevelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchUpdateVipLevelsRequestMultiError, or nil if none found.
func (m *BatchUpdateVipLevelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchUpdateVipLevelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BatchUpdateVipLevelsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BatchUpdateVipLevelsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BatchUpdateVipLevelsRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchUpdateVipLevelsRequestValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchUpdateVipLevelsRequestValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchUpdateVipLevelsRequestValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchUpdateVipLevelsRequestMultiError(errors)
	}

	return nil
}

// BatchUpdateVipLevelsRequestMultiError is an error wrapping multiple
// validation errors returned by BatchUpdateVipLevelsRequest.ValidateAll() if
// the designated constraints aren't met.
type BatchUpdateVipLevelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchUpdateVipLevelsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchUpdateVipLevelsRequestMultiError) AllErrors() []error { return m }

// BatchUpdateVipLevelsRequestValidationError is the validation error returned
// by BatchUpdateVipLevelsRequest.Validate if the designated constraints
// aren't met.
type BatchUpdateVipLevelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchUpdateVipLevelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchUpdateVipLevelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchUpdateVipLevelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchUpdateVipLevelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchUpdateVipLevelsRequestValidationError) ErrorName() string {
	return "BatchUpdateVipLevelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchUpdateVipLevelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchUpdateVipLevelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchUpdateVipLevelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchUpdateVipLevelsRequestValidationError{}

// Validate checks the field values on BatchUpdateVipLevelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchUpdateVipLevelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchUpdateVipLevelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchUpdateVipLevelsResponseMultiError, or nil if none found.
func (m *BatchUpdateVipLevelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchUpdateVipLevelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UpdatedCount

	// no validation rules for Success

	if len(errors) > 0 {
		return BatchUpdateVipLevelsResponseMultiError(errors)
	}

	return nil
}

// BatchUpdateVipLevelsResponseMultiError is an error wrapping multiple
// validation errors returned by BatchUpdateVipLevelsResponse.ValidateAll() if
// the designated constraints aren't met.
type BatchUpdateVipLevelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchUpdateVipLevelsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchUpdateVipLevelsResponseMultiError) AllErrors() []error { return m }

// BatchUpdateVipLevelsResponseValidationError is the validation error returned
// by BatchUpdateVipLevelsResponse.Validate if the designated constraints
// aren't met.
type BatchUpdateVipLevelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchUpdateVipLevelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchUpdateVipLevelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchUpdateVipLevelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchUpdateVipLevelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchUpdateVipLevelsResponseValidationError) ErrorName() string {
	return "BatchUpdateVipLevelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchUpdateVipLevelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchUpdateVipLevelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchUpdateVipLevelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchUpdateVipLevelsResponseValidationError{}

// Validate checks the field values on RecalculateVipLevelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecalculateVipLevelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecalculateVipLevelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecalculateVipLevelsRequestMultiError, or nil if none found.
func (m *RecalculateVipLevelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RecalculateVipLevelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecalculateVipLevelsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecalculateVipLevelsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecalculateVipLevelsRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RecalculateAll

	if len(errors) > 0 {
		return RecalculateVipLevelsRequestMultiError(errors)
	}

	return nil
}

// RecalculateVipLevelsRequestMultiError is an error wrapping multiple
// validation errors returned by RecalculateVipLevelsRequest.ValidateAll() if
// the designated constraints aren't met.
type RecalculateVipLevelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecalculateVipLevelsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecalculateVipLevelsRequestMultiError) AllErrors() []error { return m }

// RecalculateVipLevelsRequestValidationError is the validation error returned
// by RecalculateVipLevelsRequest.Validate if the designated constraints
// aren't met.
type RecalculateVipLevelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecalculateVipLevelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecalculateVipLevelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecalculateVipLevelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecalculateVipLevelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecalculateVipLevelsRequestValidationError) ErrorName() string {
	return "RecalculateVipLevelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RecalculateVipLevelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecalculateVipLevelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecalculateVipLevelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecalculateVipLevelsRequestValidationError{}

// Validate checks the field values on RecalculateVipLevelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecalculateVipLevelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecalculateVipLevelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecalculateVipLevelsResponseMultiError, or nil if none found.
func (m *RecalculateVipLevelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RecalculateVipLevelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RecalculatedCount

	// no validation rules for Success

	if len(errors) > 0 {
		return RecalculateVipLevelsResponseMultiError(errors)
	}

	return nil
}

// RecalculateVipLevelsResponseMultiError is an error wrapping multiple
// validation errors returned by RecalculateVipLevelsResponse.ValidateAll() if
// the designated constraints aren't met.
type RecalculateVipLevelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecalculateVipLevelsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecalculateVipLevelsResponseMultiError) AllErrors() []error { return m }

// RecalculateVipLevelsResponseValidationError is the validation error returned
// by RecalculateVipLevelsResponse.Validate if the designated constraints
// aren't met.
type RecalculateVipLevelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecalculateVipLevelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecalculateVipLevelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecalculateVipLevelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecalculateVipLevelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecalculateVipLevelsResponseValidationError) ErrorName() string {
	return "RecalculateVipLevelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RecalculateVipLevelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecalculateVipLevelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecalculateVipLevelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecalculateVipLevelsResponseValidationError{}
