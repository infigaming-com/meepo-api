// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_report.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetSummaryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSummaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSummaryRequestMultiError, or nil if none found.
func (m *GetSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimeRange

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSummaryRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSummaryRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSummaryRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSummaryRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSummaryRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSummaryRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSummaryRequestMultiError(errors)
	}

	return nil
}

// GetSummaryRequestMultiError is an error wrapping multiple validation errors
// returned by GetSummaryRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSummaryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSummaryRequestMultiError) AllErrors() []error { return m }

// GetSummaryRequestValidationError is the validation error returned by
// GetSummaryRequest.Validate if the designated constraints aren't met.
type GetSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSummaryRequestValidationError) ErrorName() string {
	return "GetSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSummaryRequestValidationError{}

// Validate checks the field values on GetSummaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSummaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSummaryResponseMultiError, or nil if none found.
func (m *GetSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Visits

	// no validation rules for RegisteredUsers

	// no validation rules for Ftd

	// no validation rules for FtdConversionRate

	// no validation rules for DepositAmount

	// no validation rules for WithdrawAmount

	// no validation rules for DepositMinusWithdrawAmount

	// no validation rules for AverageFtdAmount

	// no validation rules for ArpuToArppuPercentage

	// no validation rules for Turnover

	// no validation rules for Bonus

	// no validation rules for Ggr

	// no validation rules for Ngr

	if len(errors) > 0 {
		return GetSummaryResponseMultiError(errors)
	}

	return nil
}

// GetSummaryResponseMultiError is an error wrapping multiple validation errors
// returned by GetSummaryResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSummaryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSummaryResponseMultiError) AllErrors() []error { return m }

// GetSummaryResponseValidationError is the validation error returned by
// GetSummaryResponse.Validate if the designated constraints aren't met.
type GetSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSummaryResponseValidationError) ErrorName() string {
	return "GetSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSummaryResponseValidationError{}

// Validate checks the field values on ListDailySummariesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDailySummariesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDailySummariesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDailySummariesRequestMultiError, or nil if none found.
func (m *ListDailySummariesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDailySummariesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimeRange

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDailySummariesRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDailySummariesRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDailySummariesRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDailySummariesRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDailySummariesRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDailySummariesRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListDailySummariesRequestMultiError(errors)
	}

	return nil
}

// ListDailySummariesRequestMultiError is an error wrapping multiple validation
// errors returned by ListDailySummariesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListDailySummariesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDailySummariesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDailySummariesRequestMultiError) AllErrors() []error { return m }

// ListDailySummariesRequestValidationError is the validation error returned by
// ListDailySummariesRequest.Validate if the designated constraints aren't met.
type ListDailySummariesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDailySummariesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDailySummariesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDailySummariesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDailySummariesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDailySummariesRequestValidationError) ErrorName() string {
	return "ListDailySummariesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDailySummariesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDailySummariesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDailySummariesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDailySummariesRequestValidationError{}

// Validate checks the field values on ListDailySummariesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDailySummariesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDailySummariesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDailySummariesResponseMultiError, or nil if none found.
func (m *ListDailySummariesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDailySummariesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDailySummaries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDailySummariesResponseValidationError{
						field:  fmt.Sprintf("DailySummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDailySummariesResponseValidationError{
						field:  fmt.Sprintf("DailySummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDailySummariesResponseValidationError{
					field:  fmt.Sprintf("DailySummaries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return ListDailySummariesResponseMultiError(errors)
	}

	return nil
}

// ListDailySummariesResponseMultiError is an error wrapping multiple
// validation errors returned by ListDailySummariesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListDailySummariesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDailySummariesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDailySummariesResponseMultiError) AllErrors() []error { return m }

// ListDailySummariesResponseValidationError is the validation error returned
// by ListDailySummariesResponse.Validate if the designated constraints aren't met.
type ListDailySummariesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDailySummariesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDailySummariesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDailySummariesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDailySummariesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDailySummariesResponseValidationError) ErrorName() string {
	return "ListDailySummariesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDailySummariesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDailySummariesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDailySummariesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDailySummariesResponseValidationError{}

// Validate checks the field values on GetGameDataSummaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameDataSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameDataSummaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameDataSummaryRequestMultiError, or nil if none found.
func (m *GetGameDataSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameDataSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimeRange

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGameDataSummaryRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGameDataSummaryRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGameDataSummaryRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGameDataSummaryRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGameDataSummaryRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGameDataSummaryRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGameDataSummaryRequestMultiError(errors)
	}

	return nil
}

// GetGameDataSummaryRequestMultiError is an error wrapping multiple validation
// errors returned by GetGameDataSummaryRequest.ValidateAll() if the
// designated constraints aren't met.
type GetGameDataSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameDataSummaryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameDataSummaryRequestMultiError) AllErrors() []error { return m }

// GetGameDataSummaryRequestValidationError is the validation error returned by
// GetGameDataSummaryRequest.Validate if the designated constraints aren't met.
type GetGameDataSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameDataSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameDataSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameDataSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameDataSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameDataSummaryRequestValidationError) ErrorName() string {
	return "GetGameDataSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameDataSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameDataSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameDataSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameDataSummaryRequestValidationError{}

// Validate checks the field values on GetGameDataSummaryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameDataSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameDataSummaryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameDataSummaryResponseMultiError, or nil if none found.
func (m *GetGameDataSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameDataSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Turnover

	// no validation rules for WinAmount

	// no validation rules for Ggr

	// no validation rules for BetCount

	// no validation rules for AverageBetAmount

	// no validation rules for RtpPercentage

	if len(errors) > 0 {
		return GetGameDataSummaryResponseMultiError(errors)
	}

	return nil
}

// GetGameDataSummaryResponseMultiError is an error wrapping multiple
// validation errors returned by GetGameDataSummaryResponse.ValidateAll() if
// the designated constraints aren't met.
type GetGameDataSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameDataSummaryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameDataSummaryResponseMultiError) AllErrors() []error { return m }

// GetGameDataSummaryResponseValidationError is the validation error returned
// by GetGameDataSummaryResponse.Validate if the designated constraints aren't met.
type GetGameDataSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameDataSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameDataSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameDataSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameDataSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameDataSummaryResponseValidationError) ErrorName() string {
	return "GetGameDataSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameDataSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameDataSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameDataSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameDataSummaryResponseValidationError{}

// Validate checks the field values on ListGameDataDailySummariesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListGameDataDailySummariesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGameDataDailySummariesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListGameDataDailySummariesRequestMultiError, or nil if none found.
func (m *ListGameDataDailySummariesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGameDataDailySummariesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimeRange

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGameDataDailySummariesRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGameDataDailySummariesRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGameDataDailySummariesRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGameDataDailySummariesRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGameDataDailySummariesRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGameDataDailySummariesRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGameDataDailySummariesRequestMultiError(errors)
	}

	return nil
}

// ListGameDataDailySummariesRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListGameDataDailySummariesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListGameDataDailySummariesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGameDataDailySummariesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGameDataDailySummariesRequestMultiError) AllErrors() []error { return m }

// ListGameDataDailySummariesRequestValidationError is the validation error
// returned by ListGameDataDailySummariesRequest.Validate if the designated
// constraints aren't met.
type ListGameDataDailySummariesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGameDataDailySummariesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGameDataDailySummariesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGameDataDailySummariesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGameDataDailySummariesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGameDataDailySummariesRequestValidationError) ErrorName() string {
	return "ListGameDataDailySummariesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGameDataDailySummariesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGameDataDailySummariesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGameDataDailySummariesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGameDataDailySummariesRequestValidationError{}

// Validate checks the field values on ListGameDataDailySummariesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListGameDataDailySummariesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGameDataDailySummariesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListGameDataDailySummariesResponseMultiError, or nil if none found.
func (m *ListGameDataDailySummariesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGameDataDailySummariesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDailySummaries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGameDataDailySummariesResponseValidationError{
						field:  fmt.Sprintf("DailySummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGameDataDailySummariesResponseValidationError{
						field:  fmt.Sprintf("DailySummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGameDataDailySummariesResponseValidationError{
					field:  fmt.Sprintf("DailySummaries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return ListGameDataDailySummariesResponseMultiError(errors)
	}

	return nil
}

// ListGameDataDailySummariesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListGameDataDailySummariesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListGameDataDailySummariesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGameDataDailySummariesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGameDataDailySummariesResponseMultiError) AllErrors() []error { return m }

// ListGameDataDailySummariesResponseValidationError is the validation error
// returned by ListGameDataDailySummariesResponse.Validate if the designated
// constraints aren't met.
type ListGameDataDailySummariesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGameDataDailySummariesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGameDataDailySummariesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGameDataDailySummariesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGameDataDailySummariesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGameDataDailySummariesResponseValidationError) ErrorName() string {
	return "ListGameDataDailySummariesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGameDataDailySummariesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGameDataDailySummariesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGameDataDailySummariesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGameDataDailySummariesResponseValidationError{}

// Validate checks the field values on GetPlayerGameDataSummaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlayerGameDataSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlayerGameDataSummaryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPlayerGameDataSummaryRequestMultiError, or nil if none found.
func (m *GetPlayerGameDataSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlayerGameDataSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimeRange

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPlayerGameDataSummaryRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPlayerGameDataSummaryRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPlayerGameDataSummaryRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPlayerGameDataSummaryRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPlayerGameDataSummaryRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPlayerGameDataSummaryRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPlayerGameDataSummaryRequestMultiError(errors)
	}

	return nil
}

// GetPlayerGameDataSummaryRequestMultiError is an error wrapping multiple
// validation errors returned by GetPlayerGameDataSummaryRequest.ValidateAll()
// if the designated constraints aren't met.
type GetPlayerGameDataSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlayerGameDataSummaryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlayerGameDataSummaryRequestMultiError) AllErrors() []error { return m }

// GetPlayerGameDataSummaryRequestValidationError is the validation error
// returned by GetPlayerGameDataSummaryRequest.Validate if the designated
// constraints aren't met.
type GetPlayerGameDataSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayerGameDataSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayerGameDataSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayerGameDataSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayerGameDataSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayerGameDataSummaryRequestValidationError) ErrorName() string {
	return "GetPlayerGameDataSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayerGameDataSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayerGameDataSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayerGameDataSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayerGameDataSummaryRequestValidationError{}

// Validate checks the field values on GetPlayerGameDataSummaryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPlayerGameDataSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlayerGameDataSummaryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPlayerGameDataSummaryResponseMultiError, or nil if none found.
func (m *GetPlayerGameDataSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlayerGameDataSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Turnover

	// no validation rules for WinAmount

	// no validation rules for Ggr

	// no validation rules for BetCount

	// no validation rules for AverageBetAmount

	// no validation rules for RtpPercentage

	if len(errors) > 0 {
		return GetPlayerGameDataSummaryResponseMultiError(errors)
	}

	return nil
}

// GetPlayerGameDataSummaryResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetPlayerGameDataSummaryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPlayerGameDataSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlayerGameDataSummaryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlayerGameDataSummaryResponseMultiError) AllErrors() []error { return m }

// GetPlayerGameDataSummaryResponseValidationError is the validation error
// returned by GetPlayerGameDataSummaryResponse.Validate if the designated
// constraints aren't met.
type GetPlayerGameDataSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayerGameDataSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayerGameDataSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayerGameDataSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayerGameDataSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayerGameDataSummaryResponseValidationError) ErrorName() string {
	return "GetPlayerGameDataSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayerGameDataSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayerGameDataSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayerGameDataSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayerGameDataSummaryResponseValidationError{}

// Validate checks the field values on GetPlayerGameDataDailySummariesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPlayerGameDataDailySummariesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPlayerGameDataDailySummariesRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetPlayerGameDataDailySummariesRequestMultiError, or nil if none found.
func (m *GetPlayerGameDataDailySummariesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlayerGameDataDailySummariesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimeRange

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPlayerGameDataDailySummariesRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPlayerGameDataDailySummariesRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPlayerGameDataDailySummariesRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPlayerGameDataDailySummariesRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPlayerGameDataDailySummariesRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPlayerGameDataDailySummariesRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return GetPlayerGameDataDailySummariesRequestMultiError(errors)
	}

	return nil
}

// GetPlayerGameDataDailySummariesRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetPlayerGameDataDailySummariesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPlayerGameDataDailySummariesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlayerGameDataDailySummariesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlayerGameDataDailySummariesRequestMultiError) AllErrors() []error { return m }

// GetPlayerGameDataDailySummariesRequestValidationError is the validation
// error returned by GetPlayerGameDataDailySummariesRequest.Validate if the
// designated constraints aren't met.
type GetPlayerGameDataDailySummariesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayerGameDataDailySummariesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayerGameDataDailySummariesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayerGameDataDailySummariesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayerGameDataDailySummariesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayerGameDataDailySummariesRequestValidationError) ErrorName() string {
	return "GetPlayerGameDataDailySummariesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayerGameDataDailySummariesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayerGameDataDailySummariesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayerGameDataDailySummariesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayerGameDataDailySummariesRequestValidationError{}

// Validate checks the field values on GetPlayerGameDataDailySummariesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetPlayerGameDataDailySummariesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPlayerGameDataDailySummariesResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetPlayerGameDataDailySummariesResponseMultiError, or nil if none found.
func (m *GetPlayerGameDataDailySummariesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlayerGameDataDailySummariesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDailySummaries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPlayerGameDataDailySummariesResponseValidationError{
						field:  fmt.Sprintf("DailySummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPlayerGameDataDailySummariesResponseValidationError{
						field:  fmt.Sprintf("DailySummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPlayerGameDataDailySummariesResponseValidationError{
					field:  fmt.Sprintf("DailySummaries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return GetPlayerGameDataDailySummariesResponseMultiError(errors)
	}

	return nil
}

// GetPlayerGameDataDailySummariesResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetPlayerGameDataDailySummariesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPlayerGameDataDailySummariesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlayerGameDataDailySummariesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlayerGameDataDailySummariesResponseMultiError) AllErrors() []error { return m }

// GetPlayerGameDataDailySummariesResponseValidationError is the validation
// error returned by GetPlayerGameDataDailySummariesResponse.Validate if the
// designated constraints aren't met.
type GetPlayerGameDataDailySummariesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayerGameDataDailySummariesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayerGameDataDailySummariesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayerGameDataDailySummariesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayerGameDataDailySummariesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayerGameDataDailySummariesResponseValidationError) ErrorName() string {
	return "GetPlayerGameDataDailySummariesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayerGameDataDailySummariesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayerGameDataDailySummariesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayerGameDataDailySummariesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayerGameDataDailySummariesResponseValidationError{}

// Validate checks the field values on ListDepositDailySummariesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListDepositDailySummariesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDepositDailySummariesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDepositDailySummariesRequestMultiError, or nil if none found.
func (m *ListDepositDailySummariesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepositDailySummariesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimeRange

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDepositDailySummariesRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDepositDailySummariesRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDepositDailySummariesRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDepositDailySummariesRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDepositDailySummariesRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDepositDailySummariesRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDepositDailySummariesRequestMultiError(errors)
	}

	return nil
}

// ListDepositDailySummariesRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListDepositDailySummariesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDepositDailySummariesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepositDailySummariesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepositDailySummariesRequestMultiError) AllErrors() []error { return m }

// ListDepositDailySummariesRequestValidationError is the validation error
// returned by ListDepositDailySummariesRequest.Validate if the designated
// constraints aren't met.
type ListDepositDailySummariesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepositDailySummariesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepositDailySummariesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDepositDailySummariesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepositDailySummariesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepositDailySummariesRequestValidationError) ErrorName() string {
	return "ListDepositDailySummariesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepositDailySummariesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepositDailySummariesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepositDailySummariesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepositDailySummariesRequestValidationError{}

// Validate checks the field values on ListDepositDailySummariesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListDepositDailySummariesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDepositDailySummariesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListDepositDailySummariesResponseMultiError, or nil if none found.
func (m *ListDepositDailySummariesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepositDailySummariesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDailySummaries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDepositDailySummariesResponseValidationError{
						field:  fmt.Sprintf("DailySummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDepositDailySummariesResponseValidationError{
						field:  fmt.Sprintf("DailySummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDepositDailySummariesResponseValidationError{
					field:  fmt.Sprintf("DailySummaries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDepositDailySummariesResponseMultiError(errors)
	}

	return nil
}

// ListDepositDailySummariesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListDepositDailySummariesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDepositDailySummariesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepositDailySummariesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepositDailySummariesResponseMultiError) AllErrors() []error { return m }

// ListDepositDailySummariesResponseValidationError is the validation error
// returned by ListDepositDailySummariesResponse.Validate if the designated
// constraints aren't met.
type ListDepositDailySummariesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepositDailySummariesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepositDailySummariesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDepositDailySummariesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepositDailySummariesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepositDailySummariesResponseValidationError) ErrorName() string {
	return "ListDepositDailySummariesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepositDailySummariesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepositDailySummariesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepositDailySummariesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepositDailySummariesResponseValidationError{}

// Validate checks the field values on ListDepositDailyDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDepositDailyDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDepositDailyDetailsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDepositDailyDetailsRequestMultiError, or nil if none found.
func (m *ListDepositDailyDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepositDailyDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimeRange

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDepositDailyDetailsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDepositDailyDetailsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDepositDailyDetailsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDepositDailyDetailsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDepositDailyDetailsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDepositDailyDetailsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListDepositDailyDetailsRequestMultiError(errors)
	}

	return nil
}

// ListDepositDailyDetailsRequestMultiError is an error wrapping multiple
// validation errors returned by ListDepositDailyDetailsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListDepositDailyDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepositDailyDetailsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepositDailyDetailsRequestMultiError) AllErrors() []error { return m }

// ListDepositDailyDetailsRequestValidationError is the validation error
// returned by ListDepositDailyDetailsRequest.Validate if the designated
// constraints aren't met.
type ListDepositDailyDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepositDailyDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepositDailyDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDepositDailyDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepositDailyDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepositDailyDetailsRequestValidationError) ErrorName() string {
	return "ListDepositDailyDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepositDailyDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepositDailyDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepositDailyDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepositDailyDetailsRequestValidationError{}

// Validate checks the field values on ListDepositDailyDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDepositDailyDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDepositDailyDetailsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDepositDailyDetailsResponseMultiError, or nil if none found.
func (m *ListDepositDailyDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepositDailyDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDailyDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDepositDailyDetailsResponseValidationError{
						field:  fmt.Sprintf("DailyDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDepositDailyDetailsResponseValidationError{
						field:  fmt.Sprintf("DailyDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDepositDailyDetailsResponseValidationError{
					field:  fmt.Sprintf("DailyDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return ListDepositDailyDetailsResponseMultiError(errors)
	}

	return nil
}

// ListDepositDailyDetailsResponseMultiError is an error wrapping multiple
// validation errors returned by ListDepositDailyDetailsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListDepositDailyDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepositDailyDetailsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepositDailyDetailsResponseMultiError) AllErrors() []error { return m }

// ListDepositDailyDetailsResponseValidationError is the validation error
// returned by ListDepositDailyDetailsResponse.Validate if the designated
// constraints aren't met.
type ListDepositDailyDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepositDailyDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepositDailyDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDepositDailyDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepositDailyDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepositDailyDetailsResponseValidationError) ErrorName() string {
	return "ListDepositDailyDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepositDailyDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepositDailyDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepositDailyDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepositDailyDetailsResponseValidationError{}

// Validate checks the field values on ListWithdrawDailySummariesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListWithdrawDailySummariesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWithdrawDailySummariesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListWithdrawDailySummariesRequestMultiError, or nil if none found.
func (m *ListWithdrawDailySummariesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWithdrawDailySummariesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimeRange

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWithdrawDailySummariesRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWithdrawDailySummariesRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWithdrawDailySummariesRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWithdrawDailySummariesRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWithdrawDailySummariesRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWithdrawDailySummariesRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWithdrawDailySummariesRequestMultiError(errors)
	}

	return nil
}

// ListWithdrawDailySummariesRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListWithdrawDailySummariesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWithdrawDailySummariesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWithdrawDailySummariesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWithdrawDailySummariesRequestMultiError) AllErrors() []error { return m }

// ListWithdrawDailySummariesRequestValidationError is the validation error
// returned by ListWithdrawDailySummariesRequest.Validate if the designated
// constraints aren't met.
type ListWithdrawDailySummariesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWithdrawDailySummariesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWithdrawDailySummariesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWithdrawDailySummariesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWithdrawDailySummariesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWithdrawDailySummariesRequestValidationError) ErrorName() string {
	return "ListWithdrawDailySummariesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWithdrawDailySummariesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWithdrawDailySummariesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWithdrawDailySummariesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWithdrawDailySummariesRequestValidationError{}

// Validate checks the field values on ListWithdrawDailySummariesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListWithdrawDailySummariesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWithdrawDailySummariesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListWithdrawDailySummariesResponseMultiError, or nil if none found.
func (m *ListWithdrawDailySummariesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWithdrawDailySummariesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDailySummaries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWithdrawDailySummariesResponseValidationError{
						field:  fmt.Sprintf("DailySummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWithdrawDailySummariesResponseValidationError{
						field:  fmt.Sprintf("DailySummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWithdrawDailySummariesResponseValidationError{
					field:  fmt.Sprintf("DailySummaries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWithdrawDailySummariesResponseMultiError(errors)
	}

	return nil
}

// ListWithdrawDailySummariesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListWithdrawDailySummariesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWithdrawDailySummariesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWithdrawDailySummariesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWithdrawDailySummariesResponseMultiError) AllErrors() []error { return m }

// ListWithdrawDailySummariesResponseValidationError is the validation error
// returned by ListWithdrawDailySummariesResponse.Validate if the designated
// constraints aren't met.
type ListWithdrawDailySummariesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWithdrawDailySummariesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWithdrawDailySummariesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWithdrawDailySummariesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWithdrawDailySummariesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWithdrawDailySummariesResponseValidationError) ErrorName() string {
	return "ListWithdrawDailySummariesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWithdrawDailySummariesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWithdrawDailySummariesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWithdrawDailySummariesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWithdrawDailySummariesResponseValidationError{}

// Validate checks the field values on ListWithdrawDailyDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWithdrawDailyDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWithdrawDailyDetailsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListWithdrawDailyDetailsRequestMultiError, or nil if none found.
func (m *ListWithdrawDailyDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWithdrawDailyDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimeRange

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWithdrawDailyDetailsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWithdrawDailyDetailsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWithdrawDailyDetailsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWithdrawDailyDetailsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWithdrawDailyDetailsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWithdrawDailyDetailsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListWithdrawDailyDetailsRequestMultiError(errors)
	}

	return nil
}

// ListWithdrawDailyDetailsRequestMultiError is an error wrapping multiple
// validation errors returned by ListWithdrawDailyDetailsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListWithdrawDailyDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWithdrawDailyDetailsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWithdrawDailyDetailsRequestMultiError) AllErrors() []error { return m }

// ListWithdrawDailyDetailsRequestValidationError is the validation error
// returned by ListWithdrawDailyDetailsRequest.Validate if the designated
// constraints aren't met.
type ListWithdrawDailyDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWithdrawDailyDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWithdrawDailyDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWithdrawDailyDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWithdrawDailyDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWithdrawDailyDetailsRequestValidationError) ErrorName() string {
	return "ListWithdrawDailyDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWithdrawDailyDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWithdrawDailyDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWithdrawDailyDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWithdrawDailyDetailsRequestValidationError{}

// Validate checks the field values on ListWithdrawDailyDetailsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListWithdrawDailyDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWithdrawDailyDetailsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListWithdrawDailyDetailsResponseMultiError, or nil if none found.
func (m *ListWithdrawDailyDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWithdrawDailyDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDailyDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWithdrawDailyDetailsResponseValidationError{
						field:  fmt.Sprintf("DailyDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWithdrawDailyDetailsResponseValidationError{
						field:  fmt.Sprintf("DailyDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWithdrawDailyDetailsResponseValidationError{
					field:  fmt.Sprintf("DailyDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return ListWithdrawDailyDetailsResponseMultiError(errors)
	}

	return nil
}

// ListWithdrawDailyDetailsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListWithdrawDailyDetailsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWithdrawDailyDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWithdrawDailyDetailsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWithdrawDailyDetailsResponseMultiError) AllErrors() []error { return m }

// ListWithdrawDailyDetailsResponseValidationError is the validation error
// returned by ListWithdrawDailyDetailsResponse.Validate if the designated
// constraints aren't met.
type ListWithdrawDailyDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWithdrawDailyDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWithdrawDailyDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWithdrawDailyDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWithdrawDailyDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWithdrawDailyDetailsResponseValidationError) ErrorName() string {
	return "ListWithdrawDailyDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWithdrawDailyDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWithdrawDailyDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWithdrawDailyDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWithdrawDailyDetailsResponseValidationError{}

// Validate checks the field values on ListDailySummariesResponse_DailySummary
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListDailySummariesResponse_DailySummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListDailySummariesResponse_DailySummary with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListDailySummariesResponse_DailySummaryMultiError, or nil if none found.
func (m *ListDailySummariesResponse_DailySummary) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDailySummariesResponse_DailySummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDailySummariesResponse_DailySummaryValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDailySummariesResponse_DailySummaryValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDailySummariesResponse_DailySummaryValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OperatorName

	// no validation rules for Country

	// no validation rules for Visits

	// no validation rules for UniqueVisits

	// no validation rules for ActiveUsers

	// no validation rules for RegisteredUsers

	// no validation rules for DepositedUsers

	// no validation rules for FtdUsers

	// no validation rules for RepeatedDepositedUsers

	// no validation rules for DepositConversionRate

	// no validation rules for DepositCount

	// no validation rules for DepositAmount

	// no validation rules for Arpu

	// no validation rules for Arppu

	// no validation rules for AverageFtdAmount

	// no validation rules for WithdrawalAmount

	// no validation rules for WithdrawalUsers

	// no validation rules for FtwUsers

	// no validation rules for AverageWithdrawalAmount

	// no validation rules for FtwAmount

	// no validation rules for AverageFtwAmount

	// no validation rules for WuToAuPercentage

	// no validation rules for WuToDuPercentage

	// no validation rules for DepositMinusWithdrawAmount

	// no validation rules for WToDPercentage

	// no validation rules for Turnover

	// no validation rules for DepositBonus

	// no validation rules for RebateBonus

	// no validation rules for LossRebate

	// no validation rules for VipBonus

	// no validation rules for OtherBonus

	// no validation rules for ReferralCommission

	// no validation rules for DepositFeeSubsidyAmount

	// no validation rules for PlayerWithdrawalFee

	// no validation rules for OperatorWithdrawalFee

	// no validation rules for CashBalance

	// no validation rules for BonusBalance

	// no validation rules for LockedBalance

	// no validation rules for Ggr

	// no validation rules for Ngr

	// no validation rules for GgrToNgrPercentage

	// no validation rules for HouseEdgePercentage

	if len(errors) > 0 {
		return ListDailySummariesResponse_DailySummaryMultiError(errors)
	}

	return nil
}

// ListDailySummariesResponse_DailySummaryMultiError is an error wrapping
// multiple validation errors returned by
// ListDailySummariesResponse_DailySummary.ValidateAll() if the designated
// constraints aren't met.
type ListDailySummariesResponse_DailySummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDailySummariesResponse_DailySummaryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDailySummariesResponse_DailySummaryMultiError) AllErrors() []error { return m }

// ListDailySummariesResponse_DailySummaryValidationError is the validation
// error returned by ListDailySummariesResponse_DailySummary.Validate if the
// designated constraints aren't met.
type ListDailySummariesResponse_DailySummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDailySummariesResponse_DailySummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDailySummariesResponse_DailySummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDailySummariesResponse_DailySummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDailySummariesResponse_DailySummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDailySummariesResponse_DailySummaryValidationError) ErrorName() string {
	return "ListDailySummariesResponse_DailySummaryValidationError"
}

// Error satisfies the builtin error interface
func (e ListDailySummariesResponse_DailySummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDailySummariesResponse_DailySummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDailySummariesResponse_DailySummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDailySummariesResponse_DailySummaryValidationError{}

// Validate checks the field values on
// ListGameDataDailySummariesResponse_DailySummary with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListGameDataDailySummariesResponse_DailySummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListGameDataDailySummariesResponse_DailySummary with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListGameDataDailySummariesResponse_DailySummaryMultiError, or nil if none found.
func (m *ListGameDataDailySummariesResponse_DailySummary) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGameDataDailySummariesResponse_DailySummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGameDataDailySummariesResponse_DailySummaryValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGameDataDailySummariesResponse_DailySummaryValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGameDataDailySummariesResponse_DailySummaryValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Operator

	// no validation rules for Provider

	// no validation rules for GameType

	// no validation rules for GameName

	// no validation rules for GameId

	// no validation rules for PlayerCount

	// no validation rules for Turnover

	// no validation rules for TurnoverPercentage

	// no validation rules for WinAmount

	// no validation rules for Ggr

	// no validation rules for GgrPercentage

	// no validation rules for BetCount

	// no validation rules for AverageBetAmount

	// no validation rules for RtpPercentage

	if len(errors) > 0 {
		return ListGameDataDailySummariesResponse_DailySummaryMultiError(errors)
	}

	return nil
}

// ListGameDataDailySummariesResponse_DailySummaryMultiError is an error
// wrapping multiple validation errors returned by
// ListGameDataDailySummariesResponse_DailySummary.ValidateAll() if the
// designated constraints aren't met.
type ListGameDataDailySummariesResponse_DailySummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGameDataDailySummariesResponse_DailySummaryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGameDataDailySummariesResponse_DailySummaryMultiError) AllErrors() []error { return m }

// ListGameDataDailySummariesResponse_DailySummaryValidationError is the
// validation error returned by
// ListGameDataDailySummariesResponse_DailySummary.Validate if the designated
// constraints aren't met.
type ListGameDataDailySummariesResponse_DailySummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGameDataDailySummariesResponse_DailySummaryValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListGameDataDailySummariesResponse_DailySummaryValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListGameDataDailySummariesResponse_DailySummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGameDataDailySummariesResponse_DailySummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGameDataDailySummariesResponse_DailySummaryValidationError) ErrorName() string {
	return "ListGameDataDailySummariesResponse_DailySummaryValidationError"
}

// Error satisfies the builtin error interface
func (e ListGameDataDailySummariesResponse_DailySummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGameDataDailySummariesResponse_DailySummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGameDataDailySummariesResponse_DailySummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGameDataDailySummariesResponse_DailySummaryValidationError{}

// Validate checks the field values on
// GetPlayerGameDataDailySummariesResponse_DailySummary with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPlayerGameDataDailySummariesResponse_DailySummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPlayerGameDataDailySummariesResponse_DailySummary with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetPlayerGameDataDailySummariesResponse_DailySummaryMultiError, or nil if
// none found.
func (m *GetPlayerGameDataDailySummariesResponse_DailySummary) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlayerGameDataDailySummariesResponse_DailySummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPlayerGameDataDailySummariesResponse_DailySummaryValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPlayerGameDataDailySummariesResponse_DailySummaryValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPlayerGameDataDailySummariesResponse_DailySummaryValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Operator

	// no validation rules for Provider

	// no validation rules for GameType

	// no validation rules for GameId

	// no validation rules for UserId

	// no validation rules for Turnover

	// no validation rules for WinAmount

	// no validation rules for Ggr

	// no validation rules for RtpPercentage

	// no validation rules for BetCount

	// no validation rules for AverageBetAmount

	if len(errors) > 0 {
		return GetPlayerGameDataDailySummariesResponse_DailySummaryMultiError(errors)
	}

	return nil
}

// GetPlayerGameDataDailySummariesResponse_DailySummaryMultiError is an error
// wrapping multiple validation errors returned by
// GetPlayerGameDataDailySummariesResponse_DailySummary.ValidateAll() if the
// designated constraints aren't met.
type GetPlayerGameDataDailySummariesResponse_DailySummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlayerGameDataDailySummariesResponse_DailySummaryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlayerGameDataDailySummariesResponse_DailySummaryMultiError) AllErrors() []error { return m }

// GetPlayerGameDataDailySummariesResponse_DailySummaryValidationError is the
// validation error returned by
// GetPlayerGameDataDailySummariesResponse_DailySummary.Validate if the
// designated constraints aren't met.
type GetPlayerGameDataDailySummariesResponse_DailySummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayerGameDataDailySummariesResponse_DailySummaryValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetPlayerGameDataDailySummariesResponse_DailySummaryValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetPlayerGameDataDailySummariesResponse_DailySummaryValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetPlayerGameDataDailySummariesResponse_DailySummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayerGameDataDailySummariesResponse_DailySummaryValidationError) ErrorName() string {
	return "GetPlayerGameDataDailySummariesResponse_DailySummaryValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayerGameDataDailySummariesResponse_DailySummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayerGameDataDailySummariesResponse_DailySummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayerGameDataDailySummariesResponse_DailySummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayerGameDataDailySummariesResponse_DailySummaryValidationError{}

// Validate checks the field values on
// ListDepositDailySummariesResponse_DailySummary with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDepositDailySummariesResponse_DailySummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListDepositDailySummariesResponse_DailySummary with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListDepositDailySummariesResponse_DailySummaryMultiError, or nil if none found.
func (m *ListDepositDailySummariesResponse_DailySummary) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepositDailySummariesResponse_DailySummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDepositDailySummariesResponse_DailySummaryValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDepositDailySummariesResponse_DailySummaryValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDepositDailySummariesResponse_DailySummaryValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Currency

	// no validation rules for DepositSuccessPercentage

	// no validation rules for DepositAmount

	if len(errors) > 0 {
		return ListDepositDailySummariesResponse_DailySummaryMultiError(errors)
	}

	return nil
}

// ListDepositDailySummariesResponse_DailySummaryMultiError is an error
// wrapping multiple validation errors returned by
// ListDepositDailySummariesResponse_DailySummary.ValidateAll() if the
// designated constraints aren't met.
type ListDepositDailySummariesResponse_DailySummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepositDailySummariesResponse_DailySummaryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepositDailySummariesResponse_DailySummaryMultiError) AllErrors() []error { return m }

// ListDepositDailySummariesResponse_DailySummaryValidationError is the
// validation error returned by
// ListDepositDailySummariesResponse_DailySummary.Validate if the designated
// constraints aren't met.
type ListDepositDailySummariesResponse_DailySummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepositDailySummariesResponse_DailySummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepositDailySummariesResponse_DailySummaryValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListDepositDailySummariesResponse_DailySummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepositDailySummariesResponse_DailySummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepositDailySummariesResponse_DailySummaryValidationError) ErrorName() string {
	return "ListDepositDailySummariesResponse_DailySummaryValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepositDailySummariesResponse_DailySummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepositDailySummariesResponse_DailySummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepositDailySummariesResponse_DailySummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepositDailySummariesResponse_DailySummaryValidationError{}

// Validate checks the field values on
// ListDepositDailyDetailsResponse_DailyDetail with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDepositDailyDetailsResponse_DailyDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListDepositDailyDetailsResponse_DailyDetail with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListDepositDailyDetailsResponse_DailyDetailMultiError, or nil if none found.
func (m *ListDepositDailyDetailsResponse_DailyDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepositDailyDetailsResponse_DailyDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDepositDailyDetailsResponse_DailyDetailValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDepositDailyDetailsResponse_DailyDetailValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDepositDailyDetailsResponse_DailyDetailValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Operator

	// no validation rules for Currency

	// no validation rules for DepositAmount

	// no validation rules for DepositUsers

	// no validation rules for FtdAmount

	// no validation rules for FtdUsers

	// no validation rules for SameDayFtdAmount

	// no validation rules for SameDayFtdUsers

	// no validation rules for RepeatedDepositAmount

	// no validation rules for RepeatedDepositUsers

	// no validation rules for SameDayFtd

	// no validation rules for NonSameDayFtd

	// no validation rules for AverageFtdAmountForSameDayRegistredUsers

	// no validation rules for AverageFtdAmountForNonSameDayRegistredUsers

	// no validation rules for SuccessPercentage

	// no validation rules for AmountProportionPercentage

	if len(errors) > 0 {
		return ListDepositDailyDetailsResponse_DailyDetailMultiError(errors)
	}

	return nil
}

// ListDepositDailyDetailsResponse_DailyDetailMultiError is an error wrapping
// multiple validation errors returned by
// ListDepositDailyDetailsResponse_DailyDetail.ValidateAll() if the designated
// constraints aren't met.
type ListDepositDailyDetailsResponse_DailyDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepositDailyDetailsResponse_DailyDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepositDailyDetailsResponse_DailyDetailMultiError) AllErrors() []error { return m }

// ListDepositDailyDetailsResponse_DailyDetailValidationError is the validation
// error returned by ListDepositDailyDetailsResponse_DailyDetail.Validate if
// the designated constraints aren't met.
type ListDepositDailyDetailsResponse_DailyDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepositDailyDetailsResponse_DailyDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepositDailyDetailsResponse_DailyDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDepositDailyDetailsResponse_DailyDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepositDailyDetailsResponse_DailyDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepositDailyDetailsResponse_DailyDetailValidationError) ErrorName() string {
	return "ListDepositDailyDetailsResponse_DailyDetailValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepositDailyDetailsResponse_DailyDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepositDailyDetailsResponse_DailyDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepositDailyDetailsResponse_DailyDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepositDailyDetailsResponse_DailyDetailValidationError{}

// Validate checks the field values on
// ListWithdrawDailySummariesResponse_DailySummary with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListWithdrawDailySummariesResponse_DailySummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListWithdrawDailySummariesResponse_DailySummary with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListWithdrawDailySummariesResponse_DailySummaryMultiError, or nil if none found.
func (m *ListWithdrawDailySummariesResponse_DailySummary) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWithdrawDailySummariesResponse_DailySummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWithdrawDailySummariesResponse_DailySummaryValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWithdrawDailySummariesResponse_DailySummaryValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWithdrawDailySummariesResponse_DailySummaryValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Currency

	// no validation rules for WithdrawSuccessPercentage

	// no validation rules for WithdrawAmount

	if len(errors) > 0 {
		return ListWithdrawDailySummariesResponse_DailySummaryMultiError(errors)
	}

	return nil
}

// ListWithdrawDailySummariesResponse_DailySummaryMultiError is an error
// wrapping multiple validation errors returned by
// ListWithdrawDailySummariesResponse_DailySummary.ValidateAll() if the
// designated constraints aren't met.
type ListWithdrawDailySummariesResponse_DailySummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWithdrawDailySummariesResponse_DailySummaryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWithdrawDailySummariesResponse_DailySummaryMultiError) AllErrors() []error { return m }

// ListWithdrawDailySummariesResponse_DailySummaryValidationError is the
// validation error returned by
// ListWithdrawDailySummariesResponse_DailySummary.Validate if the designated
// constraints aren't met.
type ListWithdrawDailySummariesResponse_DailySummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWithdrawDailySummariesResponse_DailySummaryValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListWithdrawDailySummariesResponse_DailySummaryValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListWithdrawDailySummariesResponse_DailySummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWithdrawDailySummariesResponse_DailySummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWithdrawDailySummariesResponse_DailySummaryValidationError) ErrorName() string {
	return "ListWithdrawDailySummariesResponse_DailySummaryValidationError"
}

// Error satisfies the builtin error interface
func (e ListWithdrawDailySummariesResponse_DailySummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWithdrawDailySummariesResponse_DailySummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWithdrawDailySummariesResponse_DailySummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWithdrawDailySummariesResponse_DailySummaryValidationError{}

// Validate checks the field values on
// ListWithdrawDailyDetailsResponse_DailyDetail with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListWithdrawDailyDetailsResponse_DailyDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListWithdrawDailyDetailsResponse_DailyDetail with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListWithdrawDailyDetailsResponse_DailyDetailMultiError, or nil if none found.
func (m *ListWithdrawDailyDetailsResponse_DailyDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWithdrawDailyDetailsResponse_DailyDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWithdrawDailyDetailsResponse_DailyDetailValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWithdrawDailyDetailsResponse_DailyDetailValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWithdrawDailyDetailsResponse_DailyDetailValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Operator

	// no validation rules for Currency

	// no validation rules for WithdrawAmount

	// no validation rules for WithdrawUsers

	// no validation rules for FtwAmount

	// no validation rules for FtwUsers

	// no validation rules for SameDayFtwAmount

	// no validation rules for SameDayFtwUsers

	// no validation rules for RepeatedWithdrawAmount

	// no validation rules for RepeatedWithdrawUsers

	// no validation rules for SameDayFtw

	// no validation rules for NonSameDayFtw

	// no validation rules for AverageFtwAmountForSameDayRegistredUsers

	// no validation rules for AverageFtwAmountForNonSameDayRegistredUsers

	// no validation rules for SuccessPercentage

	// no validation rules for DepositMinusWithdrawAmount

	// no validation rules for AmountProportionPercentage

	if len(errors) > 0 {
		return ListWithdrawDailyDetailsResponse_DailyDetailMultiError(errors)
	}

	return nil
}

// ListWithdrawDailyDetailsResponse_DailyDetailMultiError is an error wrapping
// multiple validation errors returned by
// ListWithdrawDailyDetailsResponse_DailyDetail.ValidateAll() if the
// designated constraints aren't met.
type ListWithdrawDailyDetailsResponse_DailyDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWithdrawDailyDetailsResponse_DailyDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWithdrawDailyDetailsResponse_DailyDetailMultiError) AllErrors() []error { return m }

// ListWithdrawDailyDetailsResponse_DailyDetailValidationError is the
// validation error returned by
// ListWithdrawDailyDetailsResponse_DailyDetail.Validate if the designated
// constraints aren't met.
type ListWithdrawDailyDetailsResponse_DailyDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWithdrawDailyDetailsResponse_DailyDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWithdrawDailyDetailsResponse_DailyDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWithdrawDailyDetailsResponse_DailyDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWithdrawDailyDetailsResponse_DailyDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWithdrawDailyDetailsResponse_DailyDetailValidationError) ErrorName() string {
	return "ListWithdrawDailyDetailsResponse_DailyDetailValidationError"
}

// Error satisfies the builtin error interface
func (e ListWithdrawDailyDetailsResponse_DailyDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWithdrawDailyDetailsResponse_DailyDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWithdrawDailyDetailsResponse_DailyDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWithdrawDailyDetailsResponse_DailyDetailValidationError{}
