// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_report.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TimeRange with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimeRange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeRange with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimeRangeMultiError, or nil
// if none found.
func (m *TimeRange) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeRange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if m.StartTime != nil {
		// no validation rules for StartTime
	}

	if m.EndTime != nil {
		// no validation rules for EndTime
	}

	if len(errors) > 0 {
		return TimeRangeMultiError(errors)
	}

	return nil
}

// TimeRangeMultiError is an error wrapping multiple validation errors returned
// by TimeRange.ValidateAll() if the designated constraints aren't met.
type TimeRangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeRangeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeRangeMultiError) AllErrors() []error { return m }

// TimeRangeValidationError is the validation error returned by
// TimeRange.Validate if the designated constraints aren't met.
type TimeRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeRangeValidationError) ErrorName() string { return "TimeRangeValidationError" }

// Error satisfies the builtin error interface
func (e TimeRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeRangeValidationError{}

// Validate checks the field values on GetSummaryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSummaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSummaryRequestMultiError, or nil if none found.
func (m *GetSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSummaryRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSummaryRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSummaryRequestValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSummaryRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSummaryRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSummaryRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSummaryRequestMultiError(errors)
	}

	return nil
}

// GetSummaryRequestMultiError is an error wrapping multiple validation errors
// returned by GetSummaryRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSummaryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSummaryRequestMultiError) AllErrors() []error { return m }

// GetSummaryRequestValidationError is the validation error returned by
// GetSummaryRequest.Validate if the designated constraints aren't met.
type GetSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSummaryRequestValidationError) ErrorName() string {
	return "GetSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSummaryRequestValidationError{}

// Validate checks the field values on GetSummaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSummaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSummaryResponseMultiError, or nil if none found.
func (m *GetSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Visits

	// no validation rules for RegisteredUsers

	// no validation rules for Ftd

	// no validation rules for FtdConversionRate

	// no validation rules for DepositAmount

	// no validation rules for WithdrawAmount

	// no validation rules for DepositMinusWithdrawAmount

	// no validation rules for AverageFtdAmount

	// no validation rules for ArpuToArppuPercentage

	// no validation rules for Turnover

	// no validation rules for Bonus

	// no validation rules for Ggr

	// no validation rules for Ngr

	// no validation rules for Arpu

	// no validation rules for Arppu

	if len(errors) > 0 {
		return GetSummaryResponseMultiError(errors)
	}

	return nil
}

// GetSummaryResponseMultiError is an error wrapping multiple validation errors
// returned by GetSummaryResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSummaryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSummaryResponseMultiError) AllErrors() []error { return m }

// GetSummaryResponseValidationError is the validation error returned by
// GetSummaryResponse.Validate if the designated constraints aren't met.
type GetSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSummaryResponseValidationError) ErrorName() string {
	return "GetSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSummaryResponseValidationError{}

// Validate checks the field values on ListSummariesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSummariesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSummariesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSummariesRequestMultiError, or nil if none found.
func (m *ListSummariesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSummariesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSummariesRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSummariesRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSummariesRequestValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSummariesRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSummariesRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSummariesRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListSummariesRequestMultiError(errors)
	}

	return nil
}

// ListSummariesRequestMultiError is an error wrapping multiple validation
// errors returned by ListSummariesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSummariesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSummariesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSummariesRequestMultiError) AllErrors() []error { return m }

// ListSummariesRequestValidationError is the validation error returned by
// ListSummariesRequest.Validate if the designated constraints aren't met.
type ListSummariesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSummariesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSummariesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSummariesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSummariesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSummariesRequestValidationError) ErrorName() string {
	return "ListSummariesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSummariesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSummariesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSummariesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSummariesRequestValidationError{}

// Validate checks the field values on ListSummariesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSummariesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSummariesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSummariesResponseMultiError, or nil if none found.
func (m *ListSummariesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSummariesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSummariesResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSummariesResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSummariesResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return ListSummariesResponseMultiError(errors)
	}

	return nil
}

// ListSummariesResponseMultiError is an error wrapping multiple validation
// errors returned by ListSummariesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSummariesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSummariesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSummariesResponseMultiError) AllErrors() []error { return m }

// ListSummariesResponseValidationError is the validation error returned by
// ListSummariesResponse.Validate if the designated constraints aren't met.
type ListSummariesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSummariesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSummariesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSummariesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSummariesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSummariesResponseValidationError) ErrorName() string {
	return "ListSummariesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSummariesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSummariesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSummariesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSummariesResponseValidationError{}

// Validate checks the field values on GetGameSummaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameSummaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameSummaryRequestMultiError, or nil if none found.
func (m *GetGameSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGameSummaryRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGameSummaryRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGameSummaryRequestValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGameSummaryRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGameSummaryRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGameSummaryRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGameSummaryRequestMultiError(errors)
	}

	return nil
}

// GetGameSummaryRequestMultiError is an error wrapping multiple validation
// errors returned by GetGameSummaryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGameSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameSummaryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameSummaryRequestMultiError) AllErrors() []error { return m }

// GetGameSummaryRequestValidationError is the validation error returned by
// GetGameSummaryRequest.Validate if the designated constraints aren't met.
type GetGameSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameSummaryRequestValidationError) ErrorName() string {
	return "GetGameSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameSummaryRequestValidationError{}

// Validate checks the field values on GetGameSummaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameSummaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameSummaryResponseMultiError, or nil if none found.
func (m *GetGameSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Turnover

	// no validation rules for WinAmount

	// no validation rules for Ggr

	// no validation rules for BetCount

	// no validation rules for AverageBetAmount

	// no validation rules for RtpPercentage

	if len(errors) > 0 {
		return GetGameSummaryResponseMultiError(errors)
	}

	return nil
}

// GetGameSummaryResponseMultiError is an error wrapping multiple validation
// errors returned by GetGameSummaryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGameSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameSummaryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameSummaryResponseMultiError) AllErrors() []error { return m }

// GetGameSummaryResponseValidationError is the validation error returned by
// GetGameSummaryResponse.Validate if the designated constraints aren't met.
type GetGameSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameSummaryResponseValidationError) ErrorName() string {
	return "GetGameSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameSummaryResponseValidationError{}

// Validate checks the field values on GetGameDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameDataRequestMultiError, or nil if none found.
func (m *GetGameDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGameDataRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGameDataRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGameDataRequestValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGameDataRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGameDataRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGameDataRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetGameDataRequestMultiError(errors)
	}

	return nil
}

// GetGameDataRequestMultiError is an error wrapping multiple validation errors
// returned by GetGameDataRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGameDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameDataRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameDataRequestMultiError) AllErrors() []error { return m }

// GetGameDataRequestValidationError is the validation error returned by
// GetGameDataRequest.Validate if the designated constraints aren't met.
type GetGameDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameDataRequestValidationError) ErrorName() string {
	return "GetGameDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameDataRequestValidationError{}

// Validate checks the field values on GetGameDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameDataResponseMultiError, or nil if none found.
func (m *GetGameDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGameDataResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGameDataResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGameDataResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return GetGameDataResponseMultiError(errors)
	}

	return nil
}

// GetGameDataResponseMultiError is an error wrapping multiple validation
// errors returned by GetGameDataResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGameDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameDataResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameDataResponseMultiError) AllErrors() []error { return m }

// GetGameDataResponseValidationError is the validation error returned by
// GetGameDataResponse.Validate if the designated constraints aren't met.
type GetGameDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameDataResponseValidationError) ErrorName() string {
	return "GetGameDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameDataResponseValidationError{}

// Validate checks the field values on GetPlayerGameSummaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlayerGameSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlayerGameSummaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlayerGameSummaryRequestMultiError, or nil if none found.
func (m *GetPlayerGameSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlayerGameSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPlayerGameSummaryRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPlayerGameSummaryRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPlayerGameSummaryRequestValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPlayerGameSummaryRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPlayerGameSummaryRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPlayerGameSummaryRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPlayerGameSummaryRequestMultiError(errors)
	}

	return nil
}

// GetPlayerGameSummaryRequestMultiError is an error wrapping multiple
// validation errors returned by GetPlayerGameSummaryRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPlayerGameSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlayerGameSummaryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlayerGameSummaryRequestMultiError) AllErrors() []error { return m }

// GetPlayerGameSummaryRequestValidationError is the validation error returned
// by GetPlayerGameSummaryRequest.Validate if the designated constraints
// aren't met.
type GetPlayerGameSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayerGameSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayerGameSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayerGameSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayerGameSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayerGameSummaryRequestValidationError) ErrorName() string {
	return "GetPlayerGameSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayerGameSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayerGameSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayerGameSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayerGameSummaryRequestValidationError{}

// Validate checks the field values on GetPlayerGameSummaryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlayerGameSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlayerGameSummaryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlayerGameSummaryResponseMultiError, or nil if none found.
func (m *GetPlayerGameSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlayerGameSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Turnover

	// no validation rules for WinAmount

	// no validation rules for Ggr

	// no validation rules for BetCount

	// no validation rules for AverageBetAmount

	// no validation rules for RtpPercentage

	if len(errors) > 0 {
		return GetPlayerGameSummaryResponseMultiError(errors)
	}

	return nil
}

// GetPlayerGameSummaryResponseMultiError is an error wrapping multiple
// validation errors returned by GetPlayerGameSummaryResponse.ValidateAll() if
// the designated constraints aren't met.
type GetPlayerGameSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlayerGameSummaryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlayerGameSummaryResponseMultiError) AllErrors() []error { return m }

// GetPlayerGameSummaryResponseValidationError is the validation error returned
// by GetPlayerGameSummaryResponse.Validate if the designated constraints
// aren't met.
type GetPlayerGameSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayerGameSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayerGameSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayerGameSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayerGameSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayerGameSummaryResponseValidationError) ErrorName() string {
	return "GetPlayerGameSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayerGameSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayerGameSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayerGameSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayerGameSummaryResponseValidationError{}

// Validate checks the field values on GetPlayerGameDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlayerGameDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlayerGameDataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlayerGameDataRequestMultiError, or nil if none found.
func (m *GetPlayerGameDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlayerGameDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPlayerGameDataRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPlayerGameDataRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPlayerGameDataRequestValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPlayerGameDataRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPlayerGameDataRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPlayerGameDataRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetPlayerGameDataRequestMultiError(errors)
	}

	return nil
}

// GetPlayerGameDataRequestMultiError is an error wrapping multiple validation
// errors returned by GetPlayerGameDataRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPlayerGameDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlayerGameDataRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlayerGameDataRequestMultiError) AllErrors() []error { return m }

// GetPlayerGameDataRequestValidationError is the validation error returned by
// GetPlayerGameDataRequest.Validate if the designated constraints aren't met.
type GetPlayerGameDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayerGameDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayerGameDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayerGameDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayerGameDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayerGameDataRequestValidationError) ErrorName() string {
	return "GetPlayerGameDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayerGameDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayerGameDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayerGameDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayerGameDataRequestValidationError{}

// Validate checks the field values on GetPlayerGameDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlayerGameDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlayerGameDataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlayerGameDataResponseMultiError, or nil if none found.
func (m *GetPlayerGameDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlayerGameDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPlayerGameDataResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPlayerGameDataResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPlayerGameDataResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return GetPlayerGameDataResponseMultiError(errors)
	}

	return nil
}

// GetPlayerGameDataResponseMultiError is an error wrapping multiple validation
// errors returned by GetPlayerGameDataResponse.ValidateAll() if the
// designated constraints aren't met.
type GetPlayerGameDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlayerGameDataResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlayerGameDataResponseMultiError) AllErrors() []error { return m }

// GetPlayerGameDataResponseValidationError is the validation error returned by
// GetPlayerGameDataResponse.Validate if the designated constraints aren't met.
type GetPlayerGameDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayerGameDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayerGameDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayerGameDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayerGameDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayerGameDataResponseValidationError) ErrorName() string {
	return "GetPlayerGameDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayerGameDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayerGameDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayerGameDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayerGameDataResponseValidationError{}

// Validate checks the field values on GetDepositSummariesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDepositSummariesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDepositSummariesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDepositSummariesRequestMultiError, or nil if none found.
func (m *GetDepositSummariesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDepositSummariesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDepositSummariesRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDepositSummariesRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDepositSummariesRequestValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDepositSummariesRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDepositSummariesRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDepositSummariesRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDepositSummariesRequestMultiError(errors)
	}

	return nil
}

// GetDepositSummariesRequestMultiError is an error wrapping multiple
// validation errors returned by GetDepositSummariesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDepositSummariesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDepositSummariesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDepositSummariesRequestMultiError) AllErrors() []error { return m }

// GetDepositSummariesRequestValidationError is the validation error returned
// by GetDepositSummariesRequest.Validate if the designated constraints aren't met.
type GetDepositSummariesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDepositSummariesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDepositSummariesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDepositSummariesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDepositSummariesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDepositSummariesRequestValidationError) ErrorName() string {
	return "GetDepositSummariesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDepositSummariesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDepositSummariesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDepositSummariesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDepositSummariesRequestValidationError{}

// Validate checks the field values on GetDepositSummariesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDepositSummariesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDepositSummariesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDepositSummariesResponseMultiError, or nil if none found.
func (m *GetDepositSummariesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDepositSummariesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDepositSummaries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDepositSummariesResponseValidationError{
						field:  fmt.Sprintf("DepositSummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDepositSummariesResponseValidationError{
						field:  fmt.Sprintf("DepositSummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDepositSummariesResponseValidationError{
					field:  fmt.Sprintf("DepositSummaries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDepositSummariesResponseMultiError(errors)
	}

	return nil
}

// GetDepositSummariesResponseMultiError is an error wrapping multiple
// validation errors returned by GetDepositSummariesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDepositSummariesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDepositSummariesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDepositSummariesResponseMultiError) AllErrors() []error { return m }

// GetDepositSummariesResponseValidationError is the validation error returned
// by GetDepositSummariesResponse.Validate if the designated constraints
// aren't met.
type GetDepositSummariesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDepositSummariesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDepositSummariesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDepositSummariesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDepositSummariesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDepositSummariesResponseValidationError) ErrorName() string {
	return "GetDepositSummariesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDepositSummariesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDepositSummariesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDepositSummariesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDepositSummariesResponseValidationError{}

// Validate checks the field values on ListDepositDetailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDepositDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDepositDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDepositDetailsRequestMultiError, or nil if none found.
func (m *ListDepositDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepositDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDepositDetailsRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDepositDetailsRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDepositDetailsRequestValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDepositDetailsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDepositDetailsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDepositDetailsRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListDepositDetailsRequestMultiError(errors)
	}

	return nil
}

// ListDepositDetailsRequestMultiError is an error wrapping multiple validation
// errors returned by ListDepositDetailsRequest.ValidateAll() if the
// designated constraints aren't met.
type ListDepositDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepositDetailsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepositDetailsRequestMultiError) AllErrors() []error { return m }

// ListDepositDetailsRequestValidationError is the validation error returned by
// ListDepositDetailsRequest.Validate if the designated constraints aren't met.
type ListDepositDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepositDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepositDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDepositDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepositDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepositDetailsRequestValidationError) ErrorName() string {
	return "ListDepositDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepositDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepositDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepositDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepositDetailsRequestValidationError{}

// Validate checks the field values on ListDepositDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDepositDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDepositDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDepositDetailsResponseMultiError, or nil if none found.
func (m *ListDepositDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepositDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDepositDetailsResponseValidationError{
						field:  fmt.Sprintf("Details[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDepositDetailsResponseValidationError{
						field:  fmt.Sprintf("Details[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDepositDetailsResponseValidationError{
					field:  fmt.Sprintf("Details[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return ListDepositDetailsResponseMultiError(errors)
	}

	return nil
}

// ListDepositDetailsResponseMultiError is an error wrapping multiple
// validation errors returned by ListDepositDetailsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListDepositDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepositDetailsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepositDetailsResponseMultiError) AllErrors() []error { return m }

// ListDepositDetailsResponseValidationError is the validation error returned
// by ListDepositDetailsResponse.Validate if the designated constraints aren't met.
type ListDepositDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepositDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepositDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDepositDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepositDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepositDetailsResponseValidationError) ErrorName() string {
	return "ListDepositDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepositDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepositDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepositDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepositDetailsResponseValidationError{}

// Validate checks the field values on GetWithdrawSummariesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWithdrawSummariesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWithdrawSummariesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWithdrawSummariesRequestMultiError, or nil if none found.
func (m *GetWithdrawSummariesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWithdrawSummariesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWithdrawSummariesRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWithdrawSummariesRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWithdrawSummariesRequestValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWithdrawSummariesRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWithdrawSummariesRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWithdrawSummariesRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetWithdrawSummariesRequestMultiError(errors)
	}

	return nil
}

// GetWithdrawSummariesRequestMultiError is an error wrapping multiple
// validation errors returned by GetWithdrawSummariesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetWithdrawSummariesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWithdrawSummariesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWithdrawSummariesRequestMultiError) AllErrors() []error { return m }

// GetWithdrawSummariesRequestValidationError is the validation error returned
// by GetWithdrawSummariesRequest.Validate if the designated constraints
// aren't met.
type GetWithdrawSummariesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWithdrawSummariesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWithdrawSummariesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWithdrawSummariesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWithdrawSummariesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWithdrawSummariesRequestValidationError) ErrorName() string {
	return "GetWithdrawSummariesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWithdrawSummariesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWithdrawSummariesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWithdrawSummariesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWithdrawSummariesRequestValidationError{}

// Validate checks the field values on GetWithdrawSummariesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWithdrawSummariesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWithdrawSummariesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWithdrawSummariesResponseMultiError, or nil if none found.
func (m *GetWithdrawSummariesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWithdrawSummariesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWithdrawSummaries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWithdrawSummariesResponseValidationError{
						field:  fmt.Sprintf("WithdrawSummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWithdrawSummariesResponseValidationError{
						field:  fmt.Sprintf("WithdrawSummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWithdrawSummariesResponseValidationError{
					field:  fmt.Sprintf("WithdrawSummaries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWithdrawSummariesResponseMultiError(errors)
	}

	return nil
}

// GetWithdrawSummariesResponseMultiError is an error wrapping multiple
// validation errors returned by GetWithdrawSummariesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetWithdrawSummariesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWithdrawSummariesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWithdrawSummariesResponseMultiError) AllErrors() []error { return m }

// GetWithdrawSummariesResponseValidationError is the validation error returned
// by GetWithdrawSummariesResponse.Validate if the designated constraints
// aren't met.
type GetWithdrawSummariesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWithdrawSummariesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWithdrawSummariesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWithdrawSummariesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWithdrawSummariesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWithdrawSummariesResponseValidationError) ErrorName() string {
	return "GetWithdrawSummariesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWithdrawSummariesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWithdrawSummariesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWithdrawSummariesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWithdrawSummariesResponseValidationError{}

// Validate checks the field values on ListWithdrawDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWithdrawDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWithdrawDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWithdrawDetailsRequestMultiError, or nil if none found.
func (m *ListWithdrawDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWithdrawDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWithdrawDetailsRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWithdrawDetailsRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWithdrawDetailsRequestValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWithdrawDetailsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWithdrawDetailsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWithdrawDetailsRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListWithdrawDetailsRequestMultiError(errors)
	}

	return nil
}

// ListWithdrawDetailsRequestMultiError is an error wrapping multiple
// validation errors returned by ListWithdrawDetailsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListWithdrawDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWithdrawDetailsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWithdrawDetailsRequestMultiError) AllErrors() []error { return m }

// ListWithdrawDetailsRequestValidationError is the validation error returned
// by ListWithdrawDetailsRequest.Validate if the designated constraints aren't met.
type ListWithdrawDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWithdrawDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWithdrawDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWithdrawDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWithdrawDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWithdrawDetailsRequestValidationError) ErrorName() string {
	return "ListWithdrawDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWithdrawDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWithdrawDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWithdrawDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWithdrawDetailsRequestValidationError{}

// Validate checks the field values on ListWithdrawDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWithdrawDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWithdrawDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWithdrawDetailsResponseMultiError, or nil if none found.
func (m *ListWithdrawDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWithdrawDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWithdrawDetailsResponseValidationError{
						field:  fmt.Sprintf("Details[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWithdrawDetailsResponseValidationError{
						field:  fmt.Sprintf("Details[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWithdrawDetailsResponseValidationError{
					field:  fmt.Sprintf("Details[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return ListWithdrawDetailsResponseMultiError(errors)
	}

	return nil
}

// ListWithdrawDetailsResponseMultiError is an error wrapping multiple
// validation errors returned by ListWithdrawDetailsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListWithdrawDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWithdrawDetailsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWithdrawDetailsResponseMultiError) AllErrors() []error { return m }

// ListWithdrawDetailsResponseValidationError is the validation error returned
// by ListWithdrawDetailsResponse.Validate if the designated constraints
// aren't met.
type ListWithdrawDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWithdrawDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWithdrawDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWithdrawDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWithdrawDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWithdrawDetailsResponseValidationError) ErrorName() string {
	return "ListWithdrawDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWithdrawDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWithdrawDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWithdrawDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWithdrawDetailsResponseValidationError{}

// Validate checks the field values on ListRegisterRetentionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRegisterRetentionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRegisterRetentionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRegisterRetentionRequestMultiError, or nil if none found.
func (m *ListRegisterRetentionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegisterRetentionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRegisterRetentionRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRegisterRetentionRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRegisterRetentionRequestValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRegisterRetentionRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRegisterRetentionRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRegisterRetentionRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListRegisterRetentionRequestMultiError(errors)
	}

	return nil
}

// ListRegisterRetentionRequestMultiError is an error wrapping multiple
// validation errors returned by ListRegisterRetentionRequest.ValidateAll() if
// the designated constraints aren't met.
type ListRegisterRetentionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegisterRetentionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegisterRetentionRequestMultiError) AllErrors() []error { return m }

// ListRegisterRetentionRequestValidationError is the validation error returned
// by ListRegisterRetentionRequest.Validate if the designated constraints
// aren't met.
type ListRegisterRetentionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegisterRetentionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegisterRetentionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegisterRetentionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegisterRetentionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegisterRetentionRequestValidationError) ErrorName() string {
	return "ListRegisterRetentionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegisterRetentionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegisterRetentionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegisterRetentionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegisterRetentionRequestValidationError{}

// Validate checks the field values on ListRegisterRetentionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRegisterRetentionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRegisterRetentionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListRegisterRetentionResponseMultiError, or nil if none found.
func (m *ListRegisterRetentionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegisterRetentionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRegisterRetentionResponseValidationError{
						field:  fmt.Sprintf("Details[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRegisterRetentionResponseValidationError{
						field:  fmt.Sprintf("Details[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRegisterRetentionResponseValidationError{
					field:  fmt.Sprintf("Details[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return ListRegisterRetentionResponseMultiError(errors)
	}

	return nil
}

// ListRegisterRetentionResponseMultiError is an error wrapping multiple
// validation errors returned by ListRegisterRetentionResponse.ValidateAll()
// if the designated constraints aren't met.
type ListRegisterRetentionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegisterRetentionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegisterRetentionResponseMultiError) AllErrors() []error { return m }

// ListRegisterRetentionResponseValidationError is the validation error
// returned by ListRegisterRetentionResponse.Validate if the designated
// constraints aren't met.
type ListRegisterRetentionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegisterRetentionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegisterRetentionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegisterRetentionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegisterRetentionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegisterRetentionResponseValidationError) ErrorName() string {
	return "ListRegisterRetentionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegisterRetentionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegisterRetentionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegisterRetentionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegisterRetentionResponseValidationError{}

// Validate checks the field values on ListDepositVtgDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDepositVtgDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDepositVtgDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDepositVtgDetailsRequestMultiError, or nil if none found.
func (m *ListDepositVtgDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepositVtgDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDepositVtgDetailsRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDepositVtgDetailsRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDepositVtgDetailsRequestValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDepositVtgDetailsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDepositVtgDetailsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDepositVtgDetailsRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListDepositVtgDetailsRequestMultiError(errors)
	}

	return nil
}

// ListDepositVtgDetailsRequestMultiError is an error wrapping multiple
// validation errors returned by ListDepositVtgDetailsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListDepositVtgDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepositVtgDetailsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepositVtgDetailsRequestMultiError) AllErrors() []error { return m }

// ListDepositVtgDetailsRequestValidationError is the validation error returned
// by ListDepositVtgDetailsRequest.Validate if the designated constraints
// aren't met.
type ListDepositVtgDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepositVtgDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepositVtgDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDepositVtgDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepositVtgDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepositVtgDetailsRequestValidationError) ErrorName() string {
	return "ListDepositVtgDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepositVtgDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepositVtgDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepositVtgDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepositVtgDetailsRequestValidationError{}

// Validate checks the field values on ListDepositVtgDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDepositVtgDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDepositVtgDetailsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDepositVtgDetailsResponseMultiError, or nil if none found.
func (m *ListDepositVtgDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepositVtgDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDailyDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDepositVtgDetailsResponseValidationError{
						field:  fmt.Sprintf("DailyDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDepositVtgDetailsResponseValidationError{
						field:  fmt.Sprintf("DailyDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDepositVtgDetailsResponseValidationError{
					field:  fmt.Sprintf("DailyDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return ListDepositVtgDetailsResponseMultiError(errors)
	}

	return nil
}

// ListDepositVtgDetailsResponseMultiError is an error wrapping multiple
// validation errors returned by ListDepositVtgDetailsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListDepositVtgDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepositVtgDetailsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepositVtgDetailsResponseMultiError) AllErrors() []error { return m }

// ListDepositVtgDetailsResponseValidationError is the validation error
// returned by ListDepositVtgDetailsResponse.Validate if the designated
// constraints aren't met.
type ListDepositVtgDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepositVtgDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepositVtgDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDepositVtgDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepositVtgDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepositVtgDetailsResponseValidationError) ErrorName() string {
	return "ListDepositVtgDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepositVtgDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepositVtgDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepositVtgDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepositVtgDetailsResponseValidationError{}

// Validate checks the field values on ListWithdrawVtgDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWithdrawVtgDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWithdrawVtgDetailsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListWithdrawVtgDetailsRequestMultiError, or nil if none found.
func (m *ListWithdrawVtgDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWithdrawVtgDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWithdrawVtgDetailsRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWithdrawVtgDetailsRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWithdrawVtgDetailsRequestValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWithdrawVtgDetailsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWithdrawVtgDetailsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWithdrawVtgDetailsRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListWithdrawVtgDetailsRequestMultiError(errors)
	}

	return nil
}

// ListWithdrawVtgDetailsRequestMultiError is an error wrapping multiple
// validation errors returned by ListWithdrawVtgDetailsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListWithdrawVtgDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWithdrawVtgDetailsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWithdrawVtgDetailsRequestMultiError) AllErrors() []error { return m }

// ListWithdrawVtgDetailsRequestValidationError is the validation error
// returned by ListWithdrawVtgDetailsRequest.Validate if the designated
// constraints aren't met.
type ListWithdrawVtgDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWithdrawVtgDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWithdrawVtgDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWithdrawVtgDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWithdrawVtgDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWithdrawVtgDetailsRequestValidationError) ErrorName() string {
	return "ListWithdrawVtgDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWithdrawVtgDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWithdrawVtgDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWithdrawVtgDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWithdrawVtgDetailsRequestValidationError{}

// Validate checks the field values on ListWithdrawVtgDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWithdrawVtgDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWithdrawVtgDetailsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListWithdrawVtgDetailsResponseMultiError, or nil if none found.
func (m *ListWithdrawVtgDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWithdrawVtgDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDailyDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWithdrawVtgDetailsResponseValidationError{
						field:  fmt.Sprintf("DailyDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWithdrawVtgDetailsResponseValidationError{
						field:  fmt.Sprintf("DailyDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWithdrawVtgDetailsResponseValidationError{
					field:  fmt.Sprintf("DailyDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return ListWithdrawVtgDetailsResponseMultiError(errors)
	}

	return nil
}

// ListWithdrawVtgDetailsResponseMultiError is an error wrapping multiple
// validation errors returned by ListWithdrawVtgDetailsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListWithdrawVtgDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWithdrawVtgDetailsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWithdrawVtgDetailsResponseMultiError) AllErrors() []error { return m }

// ListWithdrawVtgDetailsResponseValidationError is the validation error
// returned by ListWithdrawVtgDetailsResponse.Validate if the designated
// constraints aren't met.
type ListWithdrawVtgDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWithdrawVtgDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWithdrawVtgDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWithdrawVtgDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWithdrawVtgDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWithdrawVtgDetailsResponseValidationError) ErrorName() string {
	return "ListWithdrawVtgDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWithdrawVtgDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWithdrawVtgDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWithdrawVtgDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWithdrawVtgDetailsResponseValidationError{}

// Validate checks the field values on ListSummariesResponse_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSummariesResponse_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSummariesResponse_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSummariesResponse_ListMultiError, or nil if none found.
func (m *ListSummariesResponse_List) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSummariesResponse_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for OperatorName

	// no validation rules for CompanyOperatorName

	// no validation rules for RetailerOperatorName

	// no validation rules for SystemOperatorName

	// no validation rules for Country

	// no validation rules for Visits

	// no validation rules for UniqueVisits

	// no validation rules for RegisteredUsers

	// no validation rules for DepositedUsers

	// no validation rules for FtdUsers

	// no validation rules for RepeatedDepositedUsers

	// no validation rules for DepositConversionRate

	// no validation rules for DepositCount

	// no validation rules for DepositAmount

	// no validation rules for Arpu

	// no validation rules for Arppu

	// no validation rules for AverageFtdAmount

	// no validation rules for WithdrawAmount

	// no validation rules for WithdrawedUsers

	// no validation rules for FtwUsers

	// no validation rules for AverageWithdrawAmount

	// no validation rules for FtwAmount

	// no validation rules for AverageFtwAmount

	// no validation rules for WuToAuPercentage

	// no validation rules for WuToDuPercentage

	// no validation rules for DepositMinusWithdrawAmount

	// no validation rules for WToDPercentage

	// no validation rules for Turnover

	// no validation rules for DepositBonus

	// no validation rules for RebateBonus

	// no validation rules for LossRebate

	// no validation rules for VipBonus

	// no validation rules for OtherBonus

	// no validation rules for ReferralCommission

	// no validation rules for DepositFeeSubsidyAmount

	// no validation rules for PlayerWithdrawFee

	// no validation rules for OperatorWithdrawFee

	// no validation rules for CashBalance

	// no validation rules for BonusBalance

	// no validation rules for LockedBalance

	// no validation rules for Ggr

	// no validation rules for Ngr

	// no validation rules for GgrToNgrPercentage

	// no validation rules for HouseEdgePercentage

	if len(errors) > 0 {
		return ListSummariesResponse_ListMultiError(errors)
	}

	return nil
}

// ListSummariesResponse_ListMultiError is an error wrapping multiple
// validation errors returned by ListSummariesResponse_List.ValidateAll() if
// the designated constraints aren't met.
type ListSummariesResponse_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSummariesResponse_ListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSummariesResponse_ListMultiError) AllErrors() []error { return m }

// ListSummariesResponse_ListValidationError is the validation error returned
// by ListSummariesResponse_List.Validate if the designated constraints aren't met.
type ListSummariesResponse_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSummariesResponse_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSummariesResponse_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSummariesResponse_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSummariesResponse_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSummariesResponse_ListValidationError) ErrorName() string {
	return "ListSummariesResponse_ListValidationError"
}

// Error satisfies the builtin error interface
func (e ListSummariesResponse_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSummariesResponse_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSummariesResponse_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSummariesResponse_ListValidationError{}

// Validate checks the field values on GetGameDataResponse_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameDataResponse_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameDataResponse_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameDataResponse_ListMultiError, or nil if none found.
func (m *GetGameDataResponse_List) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameDataResponse_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for OperatorName

	// no validation rules for CompanyOperatorName

	// no validation rules for RetailerOperatorName

	// no validation rules for SystemOperatorName

	// no validation rules for Provider

	// no validation rules for GameType

	// no validation rules for GameName

	// no validation rules for GameId

	// no validation rules for PlayerCount

	// no validation rules for Turnover

	// no validation rules for TurnoverUsd

	// no validation rules for TurnoverPercentage

	// no validation rules for WinAmount

	// no validation rules for WinAmountUsd

	// no validation rules for Ggr

	// no validation rules for GgrUsd

	// no validation rules for GgrPercentage

	// no validation rules for BetCount

	// no validation rules for AverageBetAmount

	// no validation rules for RtpPercentage

	// no validation rules for SettlementCurrency

	if len(errors) > 0 {
		return GetGameDataResponse_ListMultiError(errors)
	}

	return nil
}

// GetGameDataResponse_ListMultiError is an error wrapping multiple validation
// errors returned by GetGameDataResponse_List.ValidateAll() if the designated
// constraints aren't met.
type GetGameDataResponse_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameDataResponse_ListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameDataResponse_ListMultiError) AllErrors() []error { return m }

// GetGameDataResponse_ListValidationError is the validation error returned by
// GetGameDataResponse_List.Validate if the designated constraints aren't met.
type GetGameDataResponse_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameDataResponse_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameDataResponse_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameDataResponse_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameDataResponse_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameDataResponse_ListValidationError) ErrorName() string {
	return "GetGameDataResponse_ListValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameDataResponse_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameDataResponse_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameDataResponse_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameDataResponse_ListValidationError{}

// Validate checks the field values on GetPlayerGameDataResponse_List with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlayerGameDataResponse_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlayerGameDataResponse_List with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPlayerGameDataResponse_ListMultiError, or nil if none found.
func (m *GetPlayerGameDataResponse_List) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlayerGameDataResponse_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for OperatorName

	// no validation rules for CompanyOperatorName

	// no validation rules for RetailerOperatorName

	// no validation rules for SystemOperatorName

	// no validation rules for Provider

	// no validation rules for GameType

	// no validation rules for GameId

	// no validation rules for GameName

	// no validation rules for UserId

	// no validation rules for Turnover

	// no validation rules for TurnoverUsd

	// no validation rules for WinAmount

	// no validation rules for WinAmountUsd

	// no validation rules for Ggr

	// no validation rules for GgrUsd

	// no validation rules for RtpPercentage

	// no validation rules for BetCount

	// no validation rules for AverageBetAmount

	// no validation rules for SettlementCurrency

	if len(errors) > 0 {
		return GetPlayerGameDataResponse_ListMultiError(errors)
	}

	return nil
}

// GetPlayerGameDataResponse_ListMultiError is an error wrapping multiple
// validation errors returned by GetPlayerGameDataResponse_List.ValidateAll()
// if the designated constraints aren't met.
type GetPlayerGameDataResponse_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlayerGameDataResponse_ListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlayerGameDataResponse_ListMultiError) AllErrors() []error { return m }

// GetPlayerGameDataResponse_ListValidationError is the validation error
// returned by GetPlayerGameDataResponse_List.Validate if the designated
// constraints aren't met.
type GetPlayerGameDataResponse_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayerGameDataResponse_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayerGameDataResponse_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayerGameDataResponse_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayerGameDataResponse_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayerGameDataResponse_ListValidationError) ErrorName() string {
	return "GetPlayerGameDataResponse_ListValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayerGameDataResponse_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayerGameDataResponse_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayerGameDataResponse_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayerGameDataResponse_ListValidationError{}

// Validate checks the field values on
// GetDepositSummariesResponse_DepositSummary with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDepositSummariesResponse_DepositSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetDepositSummariesResponse_DepositSummary with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetDepositSummariesResponse_DepositSummaryMultiError, or nil if none found.
func (m *GetDepositSummariesResponse_DepositSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDepositSummariesResponse_DepositSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for Currency

	// no validation rules for DepositSuccessRate

	// no validation rules for DepositAmount

	if len(errors) > 0 {
		return GetDepositSummariesResponse_DepositSummaryMultiError(errors)
	}

	return nil
}

// GetDepositSummariesResponse_DepositSummaryMultiError is an error wrapping
// multiple validation errors returned by
// GetDepositSummariesResponse_DepositSummary.ValidateAll() if the designated
// constraints aren't met.
type GetDepositSummariesResponse_DepositSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDepositSummariesResponse_DepositSummaryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDepositSummariesResponse_DepositSummaryMultiError) AllErrors() []error { return m }

// GetDepositSummariesResponse_DepositSummaryValidationError is the validation
// error returned by GetDepositSummariesResponse_DepositSummary.Validate if
// the designated constraints aren't met.
type GetDepositSummariesResponse_DepositSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDepositSummariesResponse_DepositSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDepositSummariesResponse_DepositSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDepositSummariesResponse_DepositSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDepositSummariesResponse_DepositSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDepositSummariesResponse_DepositSummaryValidationError) ErrorName() string {
	return "GetDepositSummariesResponse_DepositSummaryValidationError"
}

// Error satisfies the builtin error interface
func (e GetDepositSummariesResponse_DepositSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDepositSummariesResponse_DepositSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDepositSummariesResponse_DepositSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDepositSummariesResponse_DepositSummaryValidationError{}

// Validate checks the field values on ListDepositDetailsResponse_Detail with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListDepositDetailsResponse_Detail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDepositDetailsResponse_Detail
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListDepositDetailsResponse_DetailMultiError, or nil if none found.
func (m *ListDepositDetailsResponse_Detail) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepositDetailsResponse_Detail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for OperatorName

	// no validation rules for CompanyOperatorName

	// no validation rules for RetailerOperatorName

	// no validation rules for SystemOperatorName

	// no validation rules for Currency

	// no validation rules for DepositAmount

	// no validation rules for DepositAmountUsd

	// no validation rules for DepositAmountReportingCurrency

	// no validation rules for DepositUsers

	// no validation rules for FtdAmount

	// no validation rules for FtdAmountUsd

	// no validation rules for FtdAmountReportingCurrency

	// no validation rules for FtdUsers

	// no validation rules for SameDayFtdAmount

	// no validation rules for SameDayFtdAmountUsd

	// no validation rules for SameDayFtdAmountReportingCurrency

	// no validation rules for SameDayFtdUsers

	// no validation rules for RepeatedDepositAmount

	// no validation rules for RepeatedDepositAmountUsd

	// no validation rules for RepeatedDepositAmountReportingCurrency

	// no validation rules for RepeatedDepositUsers

	// no validation rules for SameDayFtd

	// no validation rules for NonSameDayFtd

	// no validation rules for AverageFtdAmountForSameDayRegistredUsers

	// no validation rules for AverageFtdAmountUsdForSameDayRegistredUsers

	// no validation rules for AverageFtdAmountReportingCurrencyForSameDayRegistredUsers

	// no validation rules for AverageFtdAmountForNonSameDayRegistredUsers

	// no validation rules for AverageFtdAmountUsdForNonSameDayRegistredUsers

	// no validation rules for AverageFtdAmountReportingCurrencyForNonSameDayRegistredUsers

	// no validation rules for SuccessRate

	// no validation rules for AmountProportion

	if len(errors) > 0 {
		return ListDepositDetailsResponse_DetailMultiError(errors)
	}

	return nil
}

// ListDepositDetailsResponse_DetailMultiError is an error wrapping multiple
// validation errors returned by
// ListDepositDetailsResponse_Detail.ValidateAll() if the designated
// constraints aren't met.
type ListDepositDetailsResponse_DetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepositDetailsResponse_DetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepositDetailsResponse_DetailMultiError) AllErrors() []error { return m }

// ListDepositDetailsResponse_DetailValidationError is the validation error
// returned by ListDepositDetailsResponse_Detail.Validate if the designated
// constraints aren't met.
type ListDepositDetailsResponse_DetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepositDetailsResponse_DetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepositDetailsResponse_DetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDepositDetailsResponse_DetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepositDetailsResponse_DetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepositDetailsResponse_DetailValidationError) ErrorName() string {
	return "ListDepositDetailsResponse_DetailValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepositDetailsResponse_DetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepositDetailsResponse_Detail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepositDetailsResponse_DetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepositDetailsResponse_DetailValidationError{}

// Validate checks the field values on
// GetWithdrawSummariesResponse_WithdrawSummary with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetWithdrawSummariesResponse_WithdrawSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetWithdrawSummariesResponse_WithdrawSummary with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetWithdrawSummariesResponse_WithdrawSummaryMultiError, or nil if none found.
func (m *GetWithdrawSummariesResponse_WithdrawSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWithdrawSummariesResponse_WithdrawSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for Currency

	// no validation rules for WithdrawSuccessRate

	// no validation rules for WithdrawAmount

	if len(errors) > 0 {
		return GetWithdrawSummariesResponse_WithdrawSummaryMultiError(errors)
	}

	return nil
}

// GetWithdrawSummariesResponse_WithdrawSummaryMultiError is an error wrapping
// multiple validation errors returned by
// GetWithdrawSummariesResponse_WithdrawSummary.ValidateAll() if the
// designated constraints aren't met.
type GetWithdrawSummariesResponse_WithdrawSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWithdrawSummariesResponse_WithdrawSummaryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWithdrawSummariesResponse_WithdrawSummaryMultiError) AllErrors() []error { return m }

// GetWithdrawSummariesResponse_WithdrawSummaryValidationError is the
// validation error returned by
// GetWithdrawSummariesResponse_WithdrawSummary.Validate if the designated
// constraints aren't met.
type GetWithdrawSummariesResponse_WithdrawSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWithdrawSummariesResponse_WithdrawSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWithdrawSummariesResponse_WithdrawSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWithdrawSummariesResponse_WithdrawSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWithdrawSummariesResponse_WithdrawSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWithdrawSummariesResponse_WithdrawSummaryValidationError) ErrorName() string {
	return "GetWithdrawSummariesResponse_WithdrawSummaryValidationError"
}

// Error satisfies the builtin error interface
func (e GetWithdrawSummariesResponse_WithdrawSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWithdrawSummariesResponse_WithdrawSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWithdrawSummariesResponse_WithdrawSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWithdrawSummariesResponse_WithdrawSummaryValidationError{}

// Validate checks the field values on ListWithdrawDetailsResponse_Detail with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListWithdrawDetailsResponse_Detail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWithdrawDetailsResponse_Detail
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListWithdrawDetailsResponse_DetailMultiError, or nil if none found.
func (m *ListWithdrawDetailsResponse_Detail) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWithdrawDetailsResponse_Detail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for OperatorName

	// no validation rules for CompanyOperatorName

	// no validation rules for RetailerOperatorName

	// no validation rules for SystemOperatorName

	// no validation rules for Currency

	// no validation rules for ReportingCurrency

	// no validation rules for WithdrawAmount

	// no validation rules for WithdrawAmountUsd

	// no validation rules for WithdrawAmountReportingCurrency

	// no validation rules for WithdrawUsers

	// no validation rules for FtwAmount

	// no validation rules for FtwAmountUsd

	// no validation rules for FtwAmountReportingCurrency

	// no validation rules for FtwUsers

	// no validation rules for SameDayFtwAmount

	// no validation rules for SameDayFtwAmountUsd

	// no validation rules for SameDayFtwAmountReportingCurrency

	// no validation rules for SameDayFtwUsers

	// no validation rules for RepeatedWithdrawAmount

	// no validation rules for RepeatedWithdrawAmountUsd

	// no validation rules for RepeatedWithdrawAmountReportingCurrency

	// no validation rules for RepeatedWithdrawUsers

	// no validation rules for SameDayFtw

	// no validation rules for NonSameDayFtw

	// no validation rules for AverageFtwAmountForSameDayRegistredUsers

	// no validation rules for AverageFtwAmountUsdForSameDayRegistredUsers

	// no validation rules for AverageFtwAmountReportingCurrencyForSameDayRegistredUsers

	// no validation rules for AverageFtwAmountForNonSameDayRegistredUsers

	// no validation rules for AverageFtwAmountUsdForNonSameDayRegistredUsers

	// no validation rules for AverageFtwAmountReportingCurrencyForNonSameDayRegistredUsers

	// no validation rules for SuccessRate

	// no validation rules for DepositMinusWithdrawAmount

	// no validation rules for DepositMinusWithdrawAmountUsd

	// no validation rules for DepositMinusWithdrawAmountReportingCurrency

	// no validation rules for AmountProportion

	if len(errors) > 0 {
		return ListWithdrawDetailsResponse_DetailMultiError(errors)
	}

	return nil
}

// ListWithdrawDetailsResponse_DetailMultiError is an error wrapping multiple
// validation errors returned by
// ListWithdrawDetailsResponse_Detail.ValidateAll() if the designated
// constraints aren't met.
type ListWithdrawDetailsResponse_DetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWithdrawDetailsResponse_DetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWithdrawDetailsResponse_DetailMultiError) AllErrors() []error { return m }

// ListWithdrawDetailsResponse_DetailValidationError is the validation error
// returned by ListWithdrawDetailsResponse_Detail.Validate if the designated
// constraints aren't met.
type ListWithdrawDetailsResponse_DetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWithdrawDetailsResponse_DetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWithdrawDetailsResponse_DetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWithdrawDetailsResponse_DetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWithdrawDetailsResponse_DetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWithdrawDetailsResponse_DetailValidationError) ErrorName() string {
	return "ListWithdrawDetailsResponse_DetailValidationError"
}

// Error satisfies the builtin error interface
func (e ListWithdrawDetailsResponse_DetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWithdrawDetailsResponse_Detail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWithdrawDetailsResponse_DetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWithdrawDetailsResponse_DetailValidationError{}

// Validate checks the field values on ListRegisterRetentionResponse_List with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListRegisterRetentionResponse_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRegisterRetentionResponse_List
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListRegisterRetentionResponse_ListMultiError, or nil if none found.
func (m *ListRegisterRetentionResponse_List) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegisterRetentionResponse_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for OperatorName

	// no validation rules for RegUsers

	// no validation rules for PaidUsers

	// no validation rules for ActiveUsers

	// no validation rules for DepositConvertionRate

	// no validation rules for Arppu

	// no validation rules for D1ActiveUsers

	// no validation rules for D2ActiveUsers

	// no validation rules for D3ActiveUsers

	// no validation rules for D4ActiveUsers

	// no validation rules for D5ActiveUsers

	// no validation rules for D6ActiveUsers

	// no validation rules for D7ActiveUsers

	// no validation rules for D15ActiveUsers

	// no validation rules for D30ActiveUsers

	// no validation rules for D45ActiveUsers

	// no validation rules for D60ActiveUsers

	// no validation rules for D120ActiveUsers

	// no validation rules for D1PaidUsers

	// no validation rules for D2PaidUsers

	// no validation rules for D3PaidUsers

	// no validation rules for D4PaidUsers

	// no validation rules for D5PaidUsers

	// no validation rules for D6PaidUsers

	// no validation rules for D7PaidUsers

	// no validation rules for D15PaidUsers

	// no validation rules for D30PaidUsers

	// no validation rules for D45PaidUsers

	// no validation rules for D60PaidUsers

	// no validation rules for D120PaidUsers

	// no validation rules for D1PaidAmt

	// no validation rules for D2PaidAmt

	// no validation rules for D3PaidAmt

	// no validation rules for D4PaidAmt

	// no validation rules for D5PaidAmt

	// no validation rules for D6PaidAmt

	// no validation rules for D7PaidAmt

	// no validation rules for D15PaidAmt

	// no validation rules for D30PaidAmt

	// no validation rules for D45PaidAmt

	// no validation rules for D60PaidAmt

	// no validation rules for D120PaidAmt

	if len(errors) > 0 {
		return ListRegisterRetentionResponse_ListMultiError(errors)
	}

	return nil
}

// ListRegisterRetentionResponse_ListMultiError is an error wrapping multiple
// validation errors returned by
// ListRegisterRetentionResponse_List.ValidateAll() if the designated
// constraints aren't met.
type ListRegisterRetentionResponse_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegisterRetentionResponse_ListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegisterRetentionResponse_ListMultiError) AllErrors() []error { return m }

// ListRegisterRetentionResponse_ListValidationError is the validation error
// returned by ListRegisterRetentionResponse_List.Validate if the designated
// constraints aren't met.
type ListRegisterRetentionResponse_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegisterRetentionResponse_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegisterRetentionResponse_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegisterRetentionResponse_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegisterRetentionResponse_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegisterRetentionResponse_ListValidationError) ErrorName() string {
	return "ListRegisterRetentionResponse_ListValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegisterRetentionResponse_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegisterRetentionResponse_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegisterRetentionResponse_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegisterRetentionResponse_ListValidationError{}

// Validate checks the field values on ListDepositVtgDetailsResponse_Detail
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListDepositVtgDetailsResponse_Detail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDepositVtgDetailsResponse_Detail
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListDepositVtgDetailsResponse_DetailMultiError, or nil if none found.
func (m *ListDepositVtgDetailsResponse_Detail) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDepositVtgDetailsResponse_Detail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for OperatorName

	// no validation rules for Currency

	// no validation rules for DepositAmount

	// no validation rules for DepositAmountUsd

	// no validation rules for DepositUsers

	// no validation rules for FtdAmount

	// no validation rules for FtdAmountUsd

	// no validation rules for FtdUsers

	// no validation rules for SameDayFtdAmount

	// no validation rules for SameDayFtdAmountUsd

	// no validation rules for SameDayFtdUsers

	// no validation rules for RepeatedDepositAmount

	// no validation rules for RepeatedDepositAmountUsd

	// no validation rules for RepeatedDepositUsers

	// no validation rules for SameDayFtd

	// no validation rules for NonSameDayFtd

	// no validation rules for AverageFtdAmountForSameDayRegistredUsers

	// no validation rules for AverageFtdAmountUsdForSameDayRegistredUsers

	// no validation rules for AverageFtdAmountForNonSameDayRegistredUsers

	// no validation rules for AverageFtdAmountUsdForNonSameDayRegistredUsers

	if len(errors) > 0 {
		return ListDepositVtgDetailsResponse_DetailMultiError(errors)
	}

	return nil
}

// ListDepositVtgDetailsResponse_DetailMultiError is an error wrapping multiple
// validation errors returned by
// ListDepositVtgDetailsResponse_Detail.ValidateAll() if the designated
// constraints aren't met.
type ListDepositVtgDetailsResponse_DetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDepositVtgDetailsResponse_DetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDepositVtgDetailsResponse_DetailMultiError) AllErrors() []error { return m }

// ListDepositVtgDetailsResponse_DetailValidationError is the validation error
// returned by ListDepositVtgDetailsResponse_Detail.Validate if the designated
// constraints aren't met.
type ListDepositVtgDetailsResponse_DetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDepositVtgDetailsResponse_DetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDepositVtgDetailsResponse_DetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDepositVtgDetailsResponse_DetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDepositVtgDetailsResponse_DetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDepositVtgDetailsResponse_DetailValidationError) ErrorName() string {
	return "ListDepositVtgDetailsResponse_DetailValidationError"
}

// Error satisfies the builtin error interface
func (e ListDepositVtgDetailsResponse_DetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDepositVtgDetailsResponse_Detail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDepositVtgDetailsResponse_DetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDepositVtgDetailsResponse_DetailValidationError{}

// Validate checks the field values on ListWithdrawVtgDetailsResponse_Detail
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListWithdrawVtgDetailsResponse_Detail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWithdrawVtgDetailsResponse_Detail
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListWithdrawVtgDetailsResponse_DetailMultiError, or nil if none found.
func (m *ListWithdrawVtgDetailsResponse_Detail) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWithdrawVtgDetailsResponse_Detail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for OperatorName

	// no validation rules for Currency

	// no validation rules for WithdrawAmount

	// no validation rules for WithdrawAmountUsd

	// no validation rules for WithdrawUsers

	// no validation rules for FtwAmount

	// no validation rules for FtwAmountUsd

	// no validation rules for FtwUsers

	// no validation rules for SameDayFtwAmount

	// no validation rules for SameDayFtwAmountUsd

	// no validation rules for SameDayFtwUsers

	// no validation rules for RepeatedWithdrawAmount

	// no validation rules for RepeatedWithdrawAmountUsd

	// no validation rules for RepeatedWithdrawUsers

	// no validation rules for SameDayFtw

	// no validation rules for NonSameDayFtw

	// no validation rules for AverageFtwAmountForSameDayRegistredUsers

	// no validation rules for AverageFtwAmountUsdForSameDayRegistredUsers

	// no validation rules for AverageFtwAmountForNonSameDayRegistredUsers

	// no validation rules for AverageFtwAmountUsdForNonSameDayRegistredUsers

	// no validation rules for DepositMinusWithdrawAmount

	// no validation rules for DepositMinusWithdrawAmountUsd

	if len(errors) > 0 {
		return ListWithdrawVtgDetailsResponse_DetailMultiError(errors)
	}

	return nil
}

// ListWithdrawVtgDetailsResponse_DetailMultiError is an error wrapping
// multiple validation errors returned by
// ListWithdrawVtgDetailsResponse_Detail.ValidateAll() if the designated
// constraints aren't met.
type ListWithdrawVtgDetailsResponse_DetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWithdrawVtgDetailsResponse_DetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWithdrawVtgDetailsResponse_DetailMultiError) AllErrors() []error { return m }

// ListWithdrawVtgDetailsResponse_DetailValidationError is the validation error
// returned by ListWithdrawVtgDetailsResponse_Detail.Validate if the
// designated constraints aren't met.
type ListWithdrawVtgDetailsResponse_DetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWithdrawVtgDetailsResponse_DetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWithdrawVtgDetailsResponse_DetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWithdrawVtgDetailsResponse_DetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWithdrawVtgDetailsResponse_DetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWithdrawVtgDetailsResponse_DetailValidationError) ErrorName() string {
	return "ListWithdrawVtgDetailsResponse_DetailValidationError"
}

// Error satisfies the builtin error interface
func (e ListWithdrawVtgDetailsResponse_DetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWithdrawVtgDetailsResponse_Detail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWithdrawVtgDetailsResponse_DetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWithdrawVtgDetailsResponse_DetailValidationError{}
