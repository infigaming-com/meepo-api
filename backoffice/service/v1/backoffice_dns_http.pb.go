// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_dns.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/infigaming-com/meepo-api/user/service/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficeDnsAddOperatorByoDomain = "/api.backoffice.service.v1.BackofficeDns/AddOperatorByoDomain"
const OperationBackofficeDnsDeleteOperatorByoDomain = "/api.backoffice.service.v1.BackofficeDns/DeleteOperatorByoDomain"
const OperationBackofficeDnsListOperatorByoDomains = "/api.backoffice.service.v1.BackofficeDns/ListOperatorByoDomains"

type BackofficeDnsHTTPServer interface {
	AddOperatorByoDomain(context.Context, *AddOperatorByoDomainRequest) (*v1.AddOperatorByoDomainResponse, error)
	DeleteOperatorByoDomain(context.Context, *DeleteOperatorByoDomainRequest) (*v1.DeleteOperatorByoDomainResponse, error)
	ListOperatorByoDomains(context.Context, *ListOperatorByoDomainsRequest) (*v1.ListOperatorByoDomainsResponse, error)
}

func RegisterBackofficeDnsHTTPServer(s *http.Server, srv BackofficeDnsHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/dns/byo-domains/list", _BackofficeDns_ListOperatorByoDomains0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/dns/byo-domains/add", _BackofficeDns_AddOperatorByoDomain0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/dns/byo-domains/delete", _BackofficeDns_DeleteOperatorByoDomain0_HTTP_Handler(srv))
}

func _BackofficeDns_ListOperatorByoDomains0_HTTP_Handler(srv BackofficeDnsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOperatorByoDomainsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeDnsListOperatorByoDomains)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOperatorByoDomains(ctx, req.(*ListOperatorByoDomainsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListOperatorByoDomainsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeDns_AddOperatorByoDomain0_HTTP_Handler(srv BackofficeDnsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddOperatorByoDomainRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeDnsAddOperatorByoDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddOperatorByoDomain(ctx, req.(*AddOperatorByoDomainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.AddOperatorByoDomainResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeDns_DeleteOperatorByoDomain0_HTTP_Handler(srv BackofficeDnsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOperatorByoDomainRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeDnsDeleteOperatorByoDomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOperatorByoDomain(ctx, req.(*DeleteOperatorByoDomainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DeleteOperatorByoDomainResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficeDnsHTTPClient interface {
	AddOperatorByoDomain(ctx context.Context, req *AddOperatorByoDomainRequest, opts ...http.CallOption) (rsp *v1.AddOperatorByoDomainResponse, err error)
	DeleteOperatorByoDomain(ctx context.Context, req *DeleteOperatorByoDomainRequest, opts ...http.CallOption) (rsp *v1.DeleteOperatorByoDomainResponse, err error)
	ListOperatorByoDomains(ctx context.Context, req *ListOperatorByoDomainsRequest, opts ...http.CallOption) (rsp *v1.ListOperatorByoDomainsResponse, err error)
}

type BackofficeDnsHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficeDnsHTTPClient(client *http.Client) BackofficeDnsHTTPClient {
	return &BackofficeDnsHTTPClientImpl{client}
}

func (c *BackofficeDnsHTTPClientImpl) AddOperatorByoDomain(ctx context.Context, in *AddOperatorByoDomainRequest, opts ...http.CallOption) (*v1.AddOperatorByoDomainResponse, error) {
	var out v1.AddOperatorByoDomainResponse
	pattern := "/v1/backoffice/dns/byo-domains/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeDnsAddOperatorByoDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeDnsHTTPClientImpl) DeleteOperatorByoDomain(ctx context.Context, in *DeleteOperatorByoDomainRequest, opts ...http.CallOption) (*v1.DeleteOperatorByoDomainResponse, error) {
	var out v1.DeleteOperatorByoDomainResponse
	pattern := "/v1/backoffice/dns/byo-domains/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeDnsDeleteOperatorByoDomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeDnsHTTPClientImpl) ListOperatorByoDomains(ctx context.Context, in *ListOperatorByoDomainsRequest, opts ...http.CallOption) (*v1.ListOperatorByoDomainsResponse, error) {
	var out v1.ListOperatorByoDomainsResponse
	pattern := "/v1/backoffice/dns/byo-domains/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeDnsListOperatorByoDomains))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
