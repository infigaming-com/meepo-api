// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_account.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackofficeAccount_AddAccount_FullMethodName                   = "/api.backoffice.service.v1.BackofficeAccount/AddAccount"
	BackofficeAccount_SendEmailVerification_FullMethodName        = "/api.backoffice.service.v1.BackofficeAccount/SendEmailVerification"
	BackofficeAccount_VerifyEmail_FullMethodName                  = "/api.backoffice.service.v1.BackofficeAccount/VerifyEmail"
	BackofficeAccount_SendMobileVerification_FullMethodName       = "/api.backoffice.service.v1.BackofficeAccount/SendMobileVerification"
	BackofficeAccount_VerifyMobile_FullMethodName                 = "/api.backoffice.service.v1.BackofficeAccount/VerifyMobile"
	BackofficeAccount_ResetPassword_FullMethodName                = "/api.backoffice.service.v1.BackofficeAccount/ResetPassword"
	BackofficeAccount_SendPasswordResetCode_FullMethodName        = "/api.backoffice.service.v1.BackofficeAccount/SendPasswordResetCode"
	BackofficeAccount_ResetPasswordWithCode_FullMethodName        = "/api.backoffice.service.v1.BackofficeAccount/ResetPasswordWithCode"
	BackofficeAccount_Generate2Fa_FullMethodName                  = "/api.backoffice.service.v1.BackofficeAccount/Generate2fa"
	BackofficeAccount_Bind2Fa_FullMethodName                      = "/api.backoffice.service.v1.BackofficeAccount/Bind2fa"
	BackofficeAccount_Unbind2Fa_FullMethodName                    = "/api.backoffice.service.v1.BackofficeAccount/Unbind2fa"
	BackofficeAccount_UpdateAccount_FullMethodName                = "/api.backoffice.service.v1.BackofficeAccount/UpdateAccount"
	BackofficeAccount_Login_FullMethodName                        = "/api.backoffice.service.v1.BackofficeAccount/Login"
	BackofficeAccount_Register_FullMethodName                     = "/api.backoffice.service.v1.BackofficeAccount/Register"
	BackofficeAccount_SendRegisterVerificationCode_FullMethodName = "/api.backoffice.service.v1.BackofficeAccount/SendRegisterVerificationCode"
	BackofficeAccount_AccountInfo_FullMethodName                  = "/api.backoffice.service.v1.BackofficeAccount/AccountInfo"
	BackofficeAccount_ListAccounts_FullMethodName                 = "/api.backoffice.service.v1.BackofficeAccount/ListAccounts"
	BackofficeAccount_CreateRole_FullMethodName                   = "/api.backoffice.service.v1.BackofficeAccount/CreateRole"
	BackofficeAccount_ListRoles_FullMethodName                    = "/api.backoffice.service.v1.BackofficeAccount/ListRoles"
	BackofficeAccount_UpdateRole_FullMethodName                   = "/api.backoffice.service.v1.BackofficeAccount/UpdateRole"
	BackofficeAccount_DeleteRole_FullMethodName                   = "/api.backoffice.service.v1.BackofficeAccount/DeleteRole"
	BackofficeAccount_CheckEmailExists_FullMethodName             = "/api.backoffice.service.v1.BackofficeAccount/CheckEmailExists"
	BackofficeAccount_CheckSubdomainExists_FullMethodName         = "/api.backoffice.service.v1.BackofficeAccount/CheckSubdomainExists"
	BackofficeAccount_CheckOperatorKeyExists_FullMethodName       = "/api.backoffice.service.v1.BackofficeAccount/CheckOperatorKeyExists"
)

// BackofficeAccountClient is the client API for BackofficeAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackofficeAccountClient interface {
	AddAccount(ctx context.Context, in *AddAccountRequest, opts ...grpc.CallOption) (*AddAccountResponse, error)
	SendEmailVerification(ctx context.Context, in *SendEmailVerificationRequest, opts ...grpc.CallOption) (*SendEmailVerificationResponse, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	SendMobileVerification(ctx context.Context, in *SendMobileVerificationRequest, opts ...grpc.CallOption) (*SendMobileVerificationResponse, error)
	VerifyMobile(ctx context.Context, in *VerifyMobileRequest, opts ...grpc.CallOption) (*VerifyMobileResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	// Send password reset verification code to email
	SendPasswordResetCode(ctx context.Context, in *SendPasswordResetCodeRequest, opts ...grpc.CallOption) (*SendPasswordResetCodeResponse, error)
	// Reset password using verification code
	ResetPasswordWithCode(ctx context.Context, in *ResetPasswordWithCodeRequest, opts ...grpc.CallOption) (*ResetPasswordWithCodeResponse, error)
	Generate2Fa(ctx context.Context, in *Generate2FaRequest, opts ...grpc.CallOption) (*Generate2FaResponse, error)
	Bind2Fa(ctx context.Context, in *Bind2FaRequest, opts ...grpc.CallOption) (*Bind2FaResponse, error)
	Unbind2Fa(ctx context.Context, in *Unbind2FaRequest, opts ...grpc.CallOption) (*Unbind2FaResponse, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	SendRegisterVerificationCode(ctx context.Context, in *SendRegisterVerificationCodeRequest, opts ...grpc.CallOption) (*SendRegisterVerificationCodeResponse, error)
	AccountInfo(ctx context.Context, in *AccountInfoRequest, opts ...grpc.CallOption) (*AccountInfoResponse, error)
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	// CheckEmailExists checks if the email exists in the user table.
	CheckEmailExists(ctx context.Context, in *CheckEmailExistsRequest, opts ...grpc.CallOption) (*CheckEmailExistsResponse, error)
	// CheckSubdomainExists checks if the subdomain exists in the origin_to_operator table.
	CheckSubdomainExists(ctx context.Context, in *CheckSubdomainExistsRequest, opts ...grpc.CallOption) (*CheckSubdomainExistsResponse, error)
	// CheckOperatorKeyExists checks if the operator key exists in the operator table.
	CheckOperatorKeyExists(ctx context.Context, in *CheckOperatorKeyExistsRequest, opts ...grpc.CallOption) (*CheckOperatorKeyExistsResponse, error)
}

type backofficeAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewBackofficeAccountClient(cc grpc.ClientConnInterface) BackofficeAccountClient {
	return &backofficeAccountClient{cc}
}

func (c *backofficeAccountClient) AddAccount(ctx context.Context, in *AddAccountRequest, opts ...grpc.CallOption) (*AddAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAccountResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_AddAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) SendEmailVerification(ctx context.Context, in *SendEmailVerificationRequest, opts ...grpc.CallOption) (*SendEmailVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailVerificationResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_SendEmailVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_VerifyEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) SendMobileVerification(ctx context.Context, in *SendMobileVerificationRequest, opts ...grpc.CallOption) (*SendMobileVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMobileVerificationResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_SendMobileVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) VerifyMobile(ctx context.Context, in *VerifyMobileRequest, opts ...grpc.CallOption) (*VerifyMobileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyMobileResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_VerifyMobile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_ResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) SendPasswordResetCode(ctx context.Context, in *SendPasswordResetCodeRequest, opts ...grpc.CallOption) (*SendPasswordResetCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendPasswordResetCodeResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_SendPasswordResetCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) ResetPasswordWithCode(ctx context.Context, in *ResetPasswordWithCodeRequest, opts ...grpc.CallOption) (*ResetPasswordWithCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetPasswordWithCodeResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_ResetPasswordWithCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) Generate2Fa(ctx context.Context, in *Generate2FaRequest, opts ...grpc.CallOption) (*Generate2FaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Generate2FaResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_Generate2Fa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) Bind2Fa(ctx context.Context, in *Bind2FaRequest, opts ...grpc.CallOption) (*Bind2FaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bind2FaResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_Bind2Fa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) Unbind2Fa(ctx context.Context, in *Unbind2FaRequest, opts ...grpc.CallOption) (*Unbind2FaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Unbind2FaResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_Unbind2Fa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAccountResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_UpdateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) SendRegisterVerificationCode(ctx context.Context, in *SendRegisterVerificationCodeRequest, opts ...grpc.CallOption) (*SendRegisterVerificationCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendRegisterVerificationCodeResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_SendRegisterVerificationCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) AccountInfo(ctx context.Context, in *AccountInfoRequest, opts ...grpc.CallOption) (*AccountInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountInfoResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_AccountInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_ListAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_ListRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRoleResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) CheckEmailExists(ctx context.Context, in *CheckEmailExistsRequest, opts ...grpc.CallOption) (*CheckEmailExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckEmailExistsResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_CheckEmailExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) CheckSubdomainExists(ctx context.Context, in *CheckSubdomainExistsRequest, opts ...grpc.CallOption) (*CheckSubdomainExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckSubdomainExistsResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_CheckSubdomainExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAccountClient) CheckOperatorKeyExists(ctx context.Context, in *CheckOperatorKeyExistsRequest, opts ...grpc.CallOption) (*CheckOperatorKeyExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckOperatorKeyExistsResponse)
	err := c.cc.Invoke(ctx, BackofficeAccount_CheckOperatorKeyExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackofficeAccountServer is the server API for BackofficeAccount service.
// All implementations must embed UnimplementedBackofficeAccountServer
// for forward compatibility.
type BackofficeAccountServer interface {
	AddAccount(context.Context, *AddAccountRequest) (*AddAccountResponse, error)
	SendEmailVerification(context.Context, *SendEmailVerificationRequest) (*SendEmailVerificationResponse, error)
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	SendMobileVerification(context.Context, *SendMobileVerificationRequest) (*SendMobileVerificationResponse, error)
	VerifyMobile(context.Context, *VerifyMobileRequest) (*VerifyMobileResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	// Send password reset verification code to email
	SendPasswordResetCode(context.Context, *SendPasswordResetCodeRequest) (*SendPasswordResetCodeResponse, error)
	// Reset password using verification code
	ResetPasswordWithCode(context.Context, *ResetPasswordWithCodeRequest) (*ResetPasswordWithCodeResponse, error)
	Generate2Fa(context.Context, *Generate2FaRequest) (*Generate2FaResponse, error)
	Bind2Fa(context.Context, *Bind2FaRequest) (*Bind2FaResponse, error)
	Unbind2Fa(context.Context, *Unbind2FaRequest) (*Unbind2FaResponse, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	SendRegisterVerificationCode(context.Context, *SendRegisterVerificationCodeRequest) (*SendRegisterVerificationCodeResponse, error)
	AccountInfo(context.Context, *AccountInfoRequest) (*AccountInfoResponse, error)
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	// CheckEmailExists checks if the email exists in the user table.
	CheckEmailExists(context.Context, *CheckEmailExistsRequest) (*CheckEmailExistsResponse, error)
	// CheckSubdomainExists checks if the subdomain exists in the origin_to_operator table.
	CheckSubdomainExists(context.Context, *CheckSubdomainExistsRequest) (*CheckSubdomainExistsResponse, error)
	// CheckOperatorKeyExists checks if the operator key exists in the operator table.
	CheckOperatorKeyExists(context.Context, *CheckOperatorKeyExistsRequest) (*CheckOperatorKeyExistsResponse, error)
	mustEmbedUnimplementedBackofficeAccountServer()
}

// UnimplementedBackofficeAccountServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackofficeAccountServer struct{}

func (UnimplementedBackofficeAccountServer) AddAccount(context.Context, *AddAccountRequest) (*AddAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccount not implemented")
}
func (UnimplementedBackofficeAccountServer) SendEmailVerification(context.Context, *SendEmailVerificationRequest) (*SendEmailVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailVerification not implemented")
}
func (UnimplementedBackofficeAccountServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedBackofficeAccountServer) SendMobileVerification(context.Context, *SendMobileVerificationRequest) (*SendMobileVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMobileVerification not implemented")
}
func (UnimplementedBackofficeAccountServer) VerifyMobile(context.Context, *VerifyMobileRequest) (*VerifyMobileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMobile not implemented")
}
func (UnimplementedBackofficeAccountServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedBackofficeAccountServer) SendPasswordResetCode(context.Context, *SendPasswordResetCodeRequest) (*SendPasswordResetCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPasswordResetCode not implemented")
}
func (UnimplementedBackofficeAccountServer) ResetPasswordWithCode(context.Context, *ResetPasswordWithCodeRequest) (*ResetPasswordWithCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordWithCode not implemented")
}
func (UnimplementedBackofficeAccountServer) Generate2Fa(context.Context, *Generate2FaRequest) (*Generate2FaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate2Fa not implemented")
}
func (UnimplementedBackofficeAccountServer) Bind2Fa(context.Context, *Bind2FaRequest) (*Bind2FaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bind2Fa not implemented")
}
func (UnimplementedBackofficeAccountServer) Unbind2Fa(context.Context, *Unbind2FaRequest) (*Unbind2FaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unbind2Fa not implemented")
}
func (UnimplementedBackofficeAccountServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedBackofficeAccountServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedBackofficeAccountServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedBackofficeAccountServer) SendRegisterVerificationCode(context.Context, *SendRegisterVerificationCodeRequest) (*SendRegisterVerificationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRegisterVerificationCode not implemented")
}
func (UnimplementedBackofficeAccountServer) AccountInfo(context.Context, *AccountInfoRequest) (*AccountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInfo not implemented")
}
func (UnimplementedBackofficeAccountServer) ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedBackofficeAccountServer) CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedBackofficeAccountServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedBackofficeAccountServer) UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedBackofficeAccountServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedBackofficeAccountServer) CheckEmailExists(context.Context, *CheckEmailExistsRequest) (*CheckEmailExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEmailExists not implemented")
}
func (UnimplementedBackofficeAccountServer) CheckSubdomainExists(context.Context, *CheckSubdomainExistsRequest) (*CheckSubdomainExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSubdomainExists not implemented")
}
func (UnimplementedBackofficeAccountServer) CheckOperatorKeyExists(context.Context, *CheckOperatorKeyExistsRequest) (*CheckOperatorKeyExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOperatorKeyExists not implemented")
}
func (UnimplementedBackofficeAccountServer) mustEmbedUnimplementedBackofficeAccountServer() {}
func (UnimplementedBackofficeAccountServer) testEmbeddedByValue()                           {}

// UnsafeBackofficeAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackofficeAccountServer will
// result in compilation errors.
type UnsafeBackofficeAccountServer interface {
	mustEmbedUnimplementedBackofficeAccountServer()
}

func RegisterBackofficeAccountServer(s grpc.ServiceRegistrar, srv BackofficeAccountServer) {
	// If the following call pancis, it indicates UnimplementedBackofficeAccountServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackofficeAccount_ServiceDesc, srv)
}

func _BackofficeAccount_AddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).AddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_AddAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).AddAccount(ctx, req.(*AddAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_SendEmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).SendEmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_SendEmailVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).SendEmailVerification(ctx, req.(*SendEmailVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_SendMobileVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMobileVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).SendMobileVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_SendMobileVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).SendMobileVerification(ctx, req.(*SendMobileVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_VerifyMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMobileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).VerifyMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_VerifyMobile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).VerifyMobile(ctx, req.(*VerifyMobileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_SendPasswordResetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPasswordResetCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).SendPasswordResetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_SendPasswordResetCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).SendPasswordResetCode(ctx, req.(*SendPasswordResetCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_ResetPasswordWithCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordWithCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).ResetPasswordWithCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_ResetPasswordWithCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).ResetPasswordWithCode(ctx, req.(*ResetPasswordWithCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_Generate2Fa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Generate2FaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).Generate2Fa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_Generate2Fa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).Generate2Fa(ctx, req.(*Generate2FaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_Bind2Fa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bind2FaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).Bind2Fa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_Bind2Fa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).Bind2Fa(ctx, req.(*Bind2FaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_Unbind2Fa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Unbind2FaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).Unbind2Fa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_Unbind2Fa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).Unbind2Fa(ctx, req.(*Unbind2FaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_SendRegisterVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRegisterVerificationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).SendRegisterVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_SendRegisterVerificationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).SendRegisterVerificationCode(ctx, req.(*SendRegisterVerificationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_AccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).AccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_AccountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).AccountInfo(ctx, req.(*AccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_ListAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_CheckEmailExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckEmailExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).CheckEmailExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_CheckEmailExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).CheckEmailExists(ctx, req.(*CheckEmailExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_CheckSubdomainExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSubdomainExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).CheckSubdomainExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_CheckSubdomainExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).CheckSubdomainExists(ctx, req.(*CheckSubdomainExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAccount_CheckOperatorKeyExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOperatorKeyExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAccountServer).CheckOperatorKeyExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAccount_CheckOperatorKeyExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAccountServer).CheckOperatorKeyExists(ctx, req.(*CheckOperatorKeyExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackofficeAccount_ServiceDesc is the grpc.ServiceDesc for BackofficeAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackofficeAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.BackofficeAccount",
	HandlerType: (*BackofficeAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAccount",
			Handler:    _BackofficeAccount_AddAccount_Handler,
		},
		{
			MethodName: "SendEmailVerification",
			Handler:    _BackofficeAccount_SendEmailVerification_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _BackofficeAccount_VerifyEmail_Handler,
		},
		{
			MethodName: "SendMobileVerification",
			Handler:    _BackofficeAccount_SendMobileVerification_Handler,
		},
		{
			MethodName: "VerifyMobile",
			Handler:    _BackofficeAccount_VerifyMobile_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _BackofficeAccount_ResetPassword_Handler,
		},
		{
			MethodName: "SendPasswordResetCode",
			Handler:    _BackofficeAccount_SendPasswordResetCode_Handler,
		},
		{
			MethodName: "ResetPasswordWithCode",
			Handler:    _BackofficeAccount_ResetPasswordWithCode_Handler,
		},
		{
			MethodName: "Generate2fa",
			Handler:    _BackofficeAccount_Generate2Fa_Handler,
		},
		{
			MethodName: "Bind2fa",
			Handler:    _BackofficeAccount_Bind2Fa_Handler,
		},
		{
			MethodName: "Unbind2fa",
			Handler:    _BackofficeAccount_Unbind2Fa_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _BackofficeAccount_UpdateAccount_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _BackofficeAccount_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _BackofficeAccount_Register_Handler,
		},
		{
			MethodName: "SendRegisterVerificationCode",
			Handler:    _BackofficeAccount_SendRegisterVerificationCode_Handler,
		},
		{
			MethodName: "AccountInfo",
			Handler:    _BackofficeAccount_AccountInfo_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _BackofficeAccount_ListAccounts_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _BackofficeAccount_CreateRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _BackofficeAccount_ListRoles_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _BackofficeAccount_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _BackofficeAccount_DeleteRole_Handler,
		},
		{
			MethodName: "CheckEmailExists",
			Handler:    _BackofficeAccount_CheckEmailExists_Handler,
		},
		{
			MethodName: "CheckSubdomainExists",
			Handler:    _BackofficeAccount_CheckSubdomainExists_Handler,
		},
		{
			MethodName: "CheckOperatorKeyExists",
			Handler:    _BackofficeAccount_CheckOperatorKeyExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_account.proto",
}
