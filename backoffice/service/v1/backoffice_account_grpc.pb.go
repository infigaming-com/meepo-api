// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_account.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Backoffice_Account_AddAccount_FullMethodName             = "/api.backoffice.service.v1.Backoffice_Account/AddAccount"
	Backoffice_Account_SendEmailVerification_FullMethodName  = "/api.backoffice.service.v1.Backoffice_Account/SendEmailVerification"
	Backoffice_Account_VerifyEmail_FullMethodName            = "/api.backoffice.service.v1.Backoffice_Account/VerifyEmail"
	Backoffice_Account_SendMobileVerification_FullMethodName = "/api.backoffice.service.v1.Backoffice_Account/SendMobileVerification"
	Backoffice_Account_VerifyMobile_FullMethodName           = "/api.backoffice.service.v1.Backoffice_Account/VerifyMobile"
	Backoffice_Account_ResetPassword_FullMethodName          = "/api.backoffice.service.v1.Backoffice_Account/ResetPassword"
	Backoffice_Account_Generate2Fa_FullMethodName            = "/api.backoffice.service.v1.Backoffice_Account/Generate2fa"
	Backoffice_Account_Bind2Fa_FullMethodName                = "/api.backoffice.service.v1.Backoffice_Account/Bind2fa"
	Backoffice_Account_Unbind2Fa_FullMethodName              = "/api.backoffice.service.v1.Backoffice_Account/Unbind2fa"
	Backoffice_Account_UpdateAccount_FullMethodName          = "/api.backoffice.service.v1.Backoffice_Account/UpdateAccount"
)

// Backoffice_AccountClient is the client API for Backoffice_Account service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Backoffice_AccountClient interface {
	AddAccount(ctx context.Context, in *AddAccountRequest, opts ...grpc.CallOption) (*AddAccountResponse, error)
	SendEmailVerification(ctx context.Context, in *SendEmailVerificationRequest, opts ...grpc.CallOption) (*SendEmailVerificationResponse, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	SendMobileVerification(ctx context.Context, in *SendMobileVerificationRequest, opts ...grpc.CallOption) (*SendMobileVerificationResponse, error)
	VerifyMobile(ctx context.Context, in *VerifyMobileRequest, opts ...grpc.CallOption) (*VerifyMobileResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	Generate2Fa(ctx context.Context, in *Generate2FaRequest, opts ...grpc.CallOption) (*Generate2FaResponse, error)
	Bind2Fa(ctx context.Context, in *Bind2FaRequest, opts ...grpc.CallOption) (*Bind2FaResponse, error)
	Unbind2Fa(ctx context.Context, in *Unbind2FaRequest, opts ...grpc.CallOption) (*Unbind2FaResponse, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
}

type backoffice_AccountClient struct {
	cc grpc.ClientConnInterface
}

func NewBackoffice_AccountClient(cc grpc.ClientConnInterface) Backoffice_AccountClient {
	return &backoffice_AccountClient{cc}
}

func (c *backoffice_AccountClient) AddAccount(ctx context.Context, in *AddAccountRequest, opts ...grpc.CallOption) (*AddAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAccountResponse)
	err := c.cc.Invoke(ctx, Backoffice_Account_AddAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_AccountClient) SendEmailVerification(ctx context.Context, in *SendEmailVerificationRequest, opts ...grpc.CallOption) (*SendEmailVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailVerificationResponse)
	err := c.cc.Invoke(ctx, Backoffice_Account_SendEmailVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_AccountClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, Backoffice_Account_VerifyEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_AccountClient) SendMobileVerification(ctx context.Context, in *SendMobileVerificationRequest, opts ...grpc.CallOption) (*SendMobileVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMobileVerificationResponse)
	err := c.cc.Invoke(ctx, Backoffice_Account_SendMobileVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_AccountClient) VerifyMobile(ctx context.Context, in *VerifyMobileRequest, opts ...grpc.CallOption) (*VerifyMobileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyMobileResponse)
	err := c.cc.Invoke(ctx, Backoffice_Account_VerifyMobile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_AccountClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, Backoffice_Account_ResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_AccountClient) Generate2Fa(ctx context.Context, in *Generate2FaRequest, opts ...grpc.CallOption) (*Generate2FaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Generate2FaResponse)
	err := c.cc.Invoke(ctx, Backoffice_Account_Generate2Fa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_AccountClient) Bind2Fa(ctx context.Context, in *Bind2FaRequest, opts ...grpc.CallOption) (*Bind2FaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bind2FaResponse)
	err := c.cc.Invoke(ctx, Backoffice_Account_Bind2Fa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_AccountClient) Unbind2Fa(ctx context.Context, in *Unbind2FaRequest, opts ...grpc.CallOption) (*Unbind2FaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Unbind2FaResponse)
	err := c.cc.Invoke(ctx, Backoffice_Account_Unbind2Fa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_AccountClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAccountResponse)
	err := c.cc.Invoke(ctx, Backoffice_Account_UpdateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Backoffice_AccountServer is the server API for Backoffice_Account service.
// All implementations must embed UnimplementedBackoffice_AccountServer
// for forward compatibility.
type Backoffice_AccountServer interface {
	AddAccount(context.Context, *AddAccountRequest) (*AddAccountResponse, error)
	SendEmailVerification(context.Context, *SendEmailVerificationRequest) (*SendEmailVerificationResponse, error)
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	SendMobileVerification(context.Context, *SendMobileVerificationRequest) (*SendMobileVerificationResponse, error)
	VerifyMobile(context.Context, *VerifyMobileRequest) (*VerifyMobileResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	Generate2Fa(context.Context, *Generate2FaRequest) (*Generate2FaResponse, error)
	Bind2Fa(context.Context, *Bind2FaRequest) (*Bind2FaResponse, error)
	Unbind2Fa(context.Context, *Unbind2FaRequest) (*Unbind2FaResponse, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	mustEmbedUnimplementedBackoffice_AccountServer()
}

// UnimplementedBackoffice_AccountServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackoffice_AccountServer struct{}

func (UnimplementedBackoffice_AccountServer) AddAccount(context.Context, *AddAccountRequest) (*AddAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccount not implemented")
}
func (UnimplementedBackoffice_AccountServer) SendEmailVerification(context.Context, *SendEmailVerificationRequest) (*SendEmailVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailVerification not implemented")
}
func (UnimplementedBackoffice_AccountServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedBackoffice_AccountServer) SendMobileVerification(context.Context, *SendMobileVerificationRequest) (*SendMobileVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMobileVerification not implemented")
}
func (UnimplementedBackoffice_AccountServer) VerifyMobile(context.Context, *VerifyMobileRequest) (*VerifyMobileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMobile not implemented")
}
func (UnimplementedBackoffice_AccountServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedBackoffice_AccountServer) Generate2Fa(context.Context, *Generate2FaRequest) (*Generate2FaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate2Fa not implemented")
}
func (UnimplementedBackoffice_AccountServer) Bind2Fa(context.Context, *Bind2FaRequest) (*Bind2FaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bind2Fa not implemented")
}
func (UnimplementedBackoffice_AccountServer) Unbind2Fa(context.Context, *Unbind2FaRequest) (*Unbind2FaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unbind2Fa not implemented")
}
func (UnimplementedBackoffice_AccountServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedBackoffice_AccountServer) mustEmbedUnimplementedBackoffice_AccountServer() {}
func (UnimplementedBackoffice_AccountServer) testEmbeddedByValue()                            {}

// UnsafeBackoffice_AccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Backoffice_AccountServer will
// result in compilation errors.
type UnsafeBackoffice_AccountServer interface {
	mustEmbedUnimplementedBackoffice_AccountServer()
}

func RegisterBackoffice_AccountServer(s grpc.ServiceRegistrar, srv Backoffice_AccountServer) {
	// If the following call pancis, it indicates UnimplementedBackoffice_AccountServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Backoffice_Account_ServiceDesc, srv)
}

func _Backoffice_Account_AddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_AccountServer).AddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Account_AddAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_AccountServer).AddAccount(ctx, req.(*AddAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Account_SendEmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_AccountServer).SendEmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Account_SendEmailVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_AccountServer).SendEmailVerification(ctx, req.(*SendEmailVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Account_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_AccountServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Account_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_AccountServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Account_SendMobileVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMobileVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_AccountServer).SendMobileVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Account_SendMobileVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_AccountServer).SendMobileVerification(ctx, req.(*SendMobileVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Account_VerifyMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMobileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_AccountServer).VerifyMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Account_VerifyMobile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_AccountServer).VerifyMobile(ctx, req.(*VerifyMobileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Account_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_AccountServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Account_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_AccountServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Account_Generate2Fa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Generate2FaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_AccountServer).Generate2Fa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Account_Generate2Fa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_AccountServer).Generate2Fa(ctx, req.(*Generate2FaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Account_Bind2Fa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bind2FaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_AccountServer).Bind2Fa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Account_Bind2Fa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_AccountServer).Bind2Fa(ctx, req.(*Bind2FaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Account_Unbind2Fa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Unbind2FaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_AccountServer).Unbind2Fa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Account_Unbind2Fa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_AccountServer).Unbind2Fa(ctx, req.(*Unbind2FaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Account_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_AccountServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Account_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_AccountServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Backoffice_Account_ServiceDesc is the grpc.ServiceDesc for Backoffice_Account service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backoffice_Account_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.Backoffice_Account",
	HandlerType: (*Backoffice_AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAccount",
			Handler:    _Backoffice_Account_AddAccount_Handler,
		},
		{
			MethodName: "SendEmailVerification",
			Handler:    _Backoffice_Account_SendEmailVerification_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _Backoffice_Account_VerifyEmail_Handler,
		},
		{
			MethodName: "SendMobileVerification",
			Handler:    _Backoffice_Account_SendMobileVerification_Handler,
		},
		{
			MethodName: "VerifyMobile",
			Handler:    _Backoffice_Account_VerifyMobile_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Backoffice_Account_ResetPassword_Handler,
		},
		{
			MethodName: "Generate2fa",
			Handler:    _Backoffice_Account_Generate2Fa_Handler,
		},
		{
			MethodName: "Bind2fa",
			Handler:    _Backoffice_Account_Bind2Fa_Handler,
		},
		{
			MethodName: "Unbind2fa",
			Handler:    _Backoffice_Account_Unbind2Fa_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _Backoffice_Account_UpdateAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_account.proto",
}
