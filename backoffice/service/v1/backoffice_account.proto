syntax = "proto3";

package api.backoffice.service.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "common/common.proto";
import "wallet/service/v1/wallet.proto";

option go_package = "github.com/infigaming-com/meepo-api/backoffice/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.backoffice.service.v1";

service BackofficeAccount {
	rpc AddAccount(AddAccountRequest) returns (AddAccountResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/add"
            body: "*"
        };
    }
    rpc SendEmailVerification(SendEmailVerificationRequest) returns (SendEmailVerificationResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/email/verification/send"
            body: "*"
        };
    }
    rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/email/verify"
            body: "*"
        };
    }
    rpc SendMobileVerification(SendMobileVerificationRequest) returns (SendMobileVerificationResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/mobile/verification/send"
            body: "*"
        };
    }
    rpc VerifyMobile(VerifyMobileRequest) returns (VerifyMobileResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/mobile/verify"
            body: "*"
        };
    }
    rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/password/reset"
            body: "*"
        };
    }

    // Send password reset verification code to email
    rpc SendPasswordResetCode(SendPasswordResetCodeRequest) returns (SendPasswordResetCodeResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/password/reset-code/send"
            body: "*"
        };
    }

    // Reset password using verification code
    rpc ResetPasswordWithCode(ResetPasswordWithCodeRequest) returns (ResetPasswordWithCodeResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/password/reset-with-code"
            body: "*"
        };
    }

    rpc Generate2fa(Generate2faRequest) returns (Generate2faResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/2fa/generate"
            body: "*"
        };
    }
    rpc Bind2fa(Bind2faRequest) returns (Bind2faResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/2fa/bind"
            body: "*"
        };
    }
    rpc Unbind2fa(Unbind2faRequest) returns (Unbind2faResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/2fa/unbind"
            body: "*"
        };
    }
    rpc UpdateAccount(UpdateAccountRequest) returns (UpdateAccountResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/update"
            body: "*"
        };
    }
    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/login"
            body: "*"
        };
    }
    rpc Register(RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/register"
            body: "*"
        };
    }
    rpc SendRegisterVerificationCode(SendRegisterVerificationCodeRequest) returns (SendRegisterVerificationCodeResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/register/verification/send"
            body: "*"
        };
    }
    rpc AccountInfo(AccountInfoRequest) returns (AccountInfoResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/info"
            body: "*"
        };
    }
    rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/list"
            body: "*"
        };
    }
    rpc CreateRole(CreateRoleRequest) returns (CreateRoleResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/role/create"
            body: "*"
        };
    }
    rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/role/list"
            body: "*"
        };
    }
    rpc UpdateRole(UpdateRoleRequest) returns (UpdateRoleResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/role/update"
            body: "*"
        };
    }
    rpc DeleteRole(DeleteRoleRequest) returns (DeleteRoleResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/role/delete"
            body: "*"
        };
    }

    // CheckEmailExists checks if the email exists in the user table.
	rpc CheckEmailExists(CheckEmailExistsRequest) returns (CheckEmailExistsResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/email/check_exists"
            body: "*"
        };
    }

	// CheckSubdomainExists checks if the subdomain exists in the origin_to_operator table.
	rpc CheckSubdomainExists(CheckSubdomainExistsRequest) returns (CheckSubdomainExistsResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/accounts/subdomain/check_exists"
            body: "*"
        };
    }

    // CheckOperatorKeyExists checks if the operator key exists in the operator table.
    rpc CheckOperatorKeyExists(CheckOperatorKeyExistsRequest) returns (CheckOperatorKeyExistsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/operator/key/check_exists"
			body: "*"
		};
	}
}

// Account related messages
message AddAccountRequest {
	string username = 1;
	string email = 2;
	string mobile = 3;
	string password = 4;
	int64 role_id = 5;
}

message AddAccountResponse {}

message SendEmailVerificationRequest {}

message SendEmailVerificationResponse {}

message VerifyEmailRequest {
	string token = 1;
}

message VerifyEmailResponse {}

message SendMobileVerificationRequest {}

message SendMobileVerificationResponse {}

message VerifyMobileRequest {
	string token = 1;
}

message VerifyMobileResponse {}

message ResetPasswordRequest {
	string email = 1;
}

message ResetPasswordResponse {}

message SendPasswordResetCodeRequest {
	string email = 1;  // User's email address
}

message SendPasswordResetCodeResponse {}

message ResetPasswordWithCodeRequest {
	string email = 1;           // User's email address
	string verification_code = 2;  // Verification code received via email
	string new_password = 3;    // New password
}

message ResetPasswordWithCodeResponse {}

message Generate2faRequest {}

message Generate2faResponse {}

message Bind2faRequest {
	string token = 1;
}

message Bind2faResponse {}

message Unbind2faRequest {
	string token = 1;
}

message Unbind2faResponse {}

message UpdateAccountRequest {
	int64 user_id = 1;
	optional bool enabled = 2;
	optional int64 role_id = 3;
}

message UpdateAccountResponse {}

message LoginRequest {
	string email = 1;
	string password = 2;
}

message LoginResponse {
	string token = 1;
}

message RegisterRequest {
	string username = 1;
	string email = 2;
	string verification_code = 3;
	string password = 4;
	string mobile = 5;
}

message RegisterResponse {
	string token = 1;
}

message SendRegisterVerificationCodeRequest {
	string email = 1;
}

message SendRegisterVerificationCodeResponse {}

message AccountInfoRequest {}

message AccountInfoResponse {
	string username = 1;
	string email = 2;
	string mobile = 3;
	bool email_verified = 4;
	bool mobile_verified = 5;
	bool enabled = 6;
	Role role = 7;
    api.common.OperatorContext operator_context = 8;
    wallet.service.v1.Currency reporting_currency = 9;
    string subdomain = 10;
    string backoffice_subdomain = 11;
    string operator_mode = 12;
}

message Role {
    string name = 1;
    int64 role_id = 2;
    repeated Permission permissions = 3;
}

message Permission {
    // module name: dashboard, game list, user list, etc.
    string module = 1;
    // action name: read, write, delete, etc.
    repeated string actions = 2;
}

message ListAccountsRequest {
    api.common.OperatorContextFilters operator_context_filters = 1;
    optional int64 user_id = 2;
    optional int64 role_id = 3;
    optional bool enabled = 4;
    optional int32 page = 5;
    optional int32 page_size = 6;
}

message ListAccountsResponse {
    message Account {
        int64 user_id = 1;
        string username = 2;
        string email = 3;
        string mobile = 4;
        bool enabled = 5;
        Role role = 6;
        google.protobuf.Timestamp created_at = 7;
    }
    repeated Account accounts = 1;
    int32 total = 2;
    int32 total_enabled = 3;
    int32 total_disabled = 4;
    int32 page = 5;
    int32 page_size = 6;
}

message CreateRoleRequest {
    string name = 1;
    repeated Permission permissions = 2;
}

message CreateRoleResponse {}

message ListRolesRequest {
    optional int32 page = 1;
    optional int32 page_size = 2;
}

message ListRolesResponse {
    repeated Role roles = 1;
    int32 total = 2;
    int32 page = 3;
    int32 page_size = 4;
}

message UpdateRoleRequest {
    int64 role_id = 1;
    string name = 2;
    repeated Permission permissions = 3;
}

message UpdateRoleResponse {}

message DeleteRoleRequest {
    int64 role_id = 1;
}

message DeleteRoleResponse {}

message CheckEmailExistsRequest {
	string email = 1;
}

message CheckEmailExistsResponse {
	bool exists = 1;
}

message CheckSubdomainExistsRequest {
	string subdomain = 1;
}

message CheckSubdomainExistsResponse {
	bool exists = 1;
}

message CheckOperatorKeyExistsRequest {
	string operator_key = 1;
}

message CheckOperatorKeyExistsResponse {
	bool exists = 1;
}