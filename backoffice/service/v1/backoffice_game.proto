syntax = "proto3";

package api.backoffice.service.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "common/common.proto";
import "game/service/v1/game.proto";

option go_package = "github.com/infigaming-com/meepo-api/backoffice/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.backoffice.service.v1";

service BackofficeGame {
	// ListProviders returns all providers with optional filter for enabled status.
	// If not provided, all providers will be returned.
	// ListProviders is used for the providers drop down list and provider search.
	rpc ListProviders(ListProvidersRequest) returns (ListProvidersResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/providers/list"
			body: "*"
		};
	}
	// ListProvidersWithDetail returns all providers with detailed information,
	// including game count and enabled status.
	// ListProvidersWithDetail is used for the providers page.
	rpc ListProvidersWithDetail(ListProvidersWithDetailRequest) returns (ListProvidersWithDetailResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/providers-with-detail/list"
			body: "*"
		};
	}
	rpc ListCategories(ListCategoriesRequest) returns (ListCategoriesResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/categories/list"
			body: "*"
		};
	}
	rpc ListFeeGroups(ListFeeGroupsRequest) returns (ListFeeGroupsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/fee-groups/list"
			body: "*"
		};
	}
	rpc ListTags(ListTagsRequest) returns (ListTagsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/tags/list"
			body: "*"
		};
	}
	rpc ListThemes(ListThemesRequest) returns (ListThemesResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/themes/list"
			body: "*"
		};
	}
	rpc ListCurrencies(ListCurrenciesRequest) returns (ListCurrenciesResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/currencies/list"
			body: "*"
		};
	}
	rpc ListBets(ListBetsRequest) returns (ListBetsResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/game/bets/list"
            body: "*"
        };
    }
	rpc ExportBets(ExportBetsRequest) returns (game.service.v1.ExportBetsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/bets/export"
			body: "*"
		};
	}
	rpc GetBetById(GetBetByIdRequest) returns (game.service.v1.GetBetByIdResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/bets/get"
			body: "*"
		};
	}
    rpc GetUserBetsOverview(GetUserBetsOverviewRequest) returns (GetUserBetsOverviewResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/game/bets/overview/get"
            body: "*"
        };
    }
    rpc GetGameTransactionsForBet(GetGameTransactionsForBetRequest) returns (GetGameTransactionsForBetResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/game/bets/transactions/get"
            body: "*"
        };
    }
    rpc ListGames(ListGamesRequest) returns (ListGamesResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/game/list"
            body: "*"
        };
    }
	rpc UpdateGame(UpdateGameRequest) returns (UpdateGameResponse) {
			option (google.api.http) = {
				post: "/v1/backoffice/game/update"
				body: "*"
			};
	}
	rpc UpdateProvider(UpdateProviderRequest) returns (UpdateProviderResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/provider/update"
			body: "*"
		};
	}
	rpc ListProviderRates(ListProviderRatesRequest) returns (ListProviderRatesResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/provider/rates/list"
			body: "*"
		};
	}
	rpc GetGameTransactionById(GetGameTransactionByIdRequest) returns (game.service.v1.GetGameTransactionByIdResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/transaction/get"
			body: "*"
		};
	}
	rpc ListUnpaidBets(ListUnpaidBetsRequest) returns (game.service.v1.ListUnpaidBetsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/bets/unpaid/list"
			body: "*"
		};
	}
	rpc ExportUnpaidBets(ExportUnpaidBetsRequest) returns (game.service.v1.ExportUnpaidBetsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/bets/unpaid/export"
			body: "*"
		};
	}

	rpc ListMultipleBets(ListMultipleBetsRequest) returns (game.service.v1.ListMultipleBetsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/bets/multiple/list"
			body: "*"
		};
	}

	rpc ExportMultipleBets(ExportMultipleBetsRequest) returns (game.service.v1.ExportMultipleBetsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/bets/multiple/export"
			body: "*"
		};
	}

	rpc ListStakeVarianceBets(ListStakeVarianceBetsRequest) returns (game.service.v1.ListStakeVarianceBetsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/bets/stake-variance/list"
			body: "*"
		};
	}

	rpc ExportStakeVarianceBets(ExportStakeVarianceBetsRequest) returns (game.service.v1.ExportStakeVarianceBetsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/bets/stake-variance/export"
			body: "*"
		};
	}

	rpc ListCustomerStrikeReports(ListCustomerStrikeReportsRequest) returns (game.service.v1.ListCustomerStrikeReportsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/customer-strike-reports/list"
			body: "*"
		};
	}

	rpc ExportCustomerStrikeReports(ExportCustomerStrikeReportsRequest) returns (game.service.v1.ExportCustomerStrikeReportsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/customer-strike-reports/export"
			body: "*"
		};
	}

	rpc ExportSportEvents(ExportSportEventsRequest) returns (game.service.v1.ExportSportEventsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/sport-events/export"
			body: "*"
		};
	}

	rpc AddGameBetDisplayConfig(AddGameBetDisplayConfigRequest) returns (game.service.v1.AddGameBetDisplayConfigResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/bet/dispaly/config/add"
			body: "*"
		};
	}

	rpc UpdateGameBetDisplayConfig(UpdateGameBetDisplayConfigRequest) returns (game.service.v1.UpdateGameBetDisplayConfigResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/bet/dispaly/config/update"
			body: "*"
		};
	}

	rpc ListGameBetDisplayConfig(ListGameBetDisplayConfigRequest) returns (game.service.v1.ListGameBetDisplayConfigResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/bet/dispaly/config/list"
			body: "*"
		};
		
	}

	rpc ListTag(ListTagRequest) returns (game.service.v1.ListTagResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/tags/list"
			body: "*"
		};
	}

	rpc CreateTag(CreateTagRequest) returns (game.service.v1.CreateTagResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/tags/create"
			body: "*"
		};
	}

	rpc UpdateTag(UpdateTagRequest) returns (game.service.v1.UpdateTagResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/tags/update"
			body: "*"
		};
	}

	rpc DeleteTag(DeleteTagRequest) returns (game.service.v1.DeleteTagResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/tags/delete"
			body: "*"
		};
	}

	rpc GetTag(GetTagRequest) returns (game.service.v1.GetTagResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/tags/get"
			body: "*"
		};
	}

	// Tag Config Management HTTP APIs
	rpc CreateTagConfig(CreateTagConfigRequest) returns (game.service.v1.CreateTagConfigResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/tag-configs/create"
			body: "*"
		};
	}

	rpc UpdateTagConfig(UpdateTagConfigRequest) returns (game.service.v1.UpdateTagConfigResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/tag-configs/update"
			body: "*"
		};
	}

	rpc GetTagConfig(GetTagConfigRequest) returns (game.service.v1.GetTagConfigResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/tag-configs/get"
			body: "*"
		};
	}

	rpc UpdateTagConfigGames(UpdateTagConfigGamesRequest) returns (game.service.v1.UpdateTagConfigGamesResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/tag-configs/games/update"
			body: "*"
		};
	}

	// Game Tag Management HTTP APIs
	rpc ListGameTags(ListGameTagsRequest) returns (game.service.v1.ListGameTagsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/game/game-tags/list"
			body: "*"
		};
	}
}


message ListProvidersRequest {
	optional bool enabled = 1;
}

message ListProvidersResponse {
	message Provider {
		string provider_id = 1;
		string provider_name = 2;
	}
	repeated Provider providers = 1;
}

message ListProvidersWithDetailRequest {
	optional string provider_id = 1;
	optional bool enabled = 2;
	optional int32 page = 3;
	optional int32 page_size = 4;
}

message ListProvidersWithDetailResponse {
	message Provider {
		string provider_id = 1;
		string provider_name = 2;
		int32 game_count = 3;
		bool enabled = 4;
	}
	repeated Provider providers = 1;
	int32 total = 2;
	int32 total_enabled = 3;
	int32 total_disabled = 4;
	int32 page = 5;
	int32 page_size = 6;
}

message ListCategoriesRequest {
	optional string provider_id = 1;
}

message ListCategoriesResponse {
	repeated string categories = 1;
}

message ListFeeGroupsRequest {
	optional string provider_id = 1;
	optional string category = 2;
}

message ListFeeGroupsResponse {
	repeated string fee_groups = 1;
}

message ListTagsRequest {}

message ListTagsResponse {
	repeated string tags = 1;
}

message ListThemesRequest {}

message ListThemesResponse {
	repeated string themes = 1;
}

message ListCurrenciesRequest {
	optional string provider_id = 1;
}

message ListCurrenciesResponse {
	repeated string currencies = 1;
}

message ListBetsRequest {
	message CurrencyWithRange {
		string currency = 1;
		optional string min_bet_amount = 2;
		optional string max_bet_amount = 3;
		optional string min_win_amount = 4;
		optional string max_win_amount = 5;
	}
	message Currencies {
		repeated string currencies = 1;
	}
	repeated string provider_ids = 1;
	optional string game_name = 2;
	optional string game_id = 3;
	optional int64 user_id = 4;
	optional int64 operator_bet_id = 5;
	optional string provider_bet_id = 6;
	optional google.protobuf.Timestamp start_time = 7;
	optional google.protobuf.Timestamp end_time = 8;
	optional CurrencyWithRange currency_with_ranges = 9;
	oneof settlement_currency_option {
		CurrencyWithRange settlement_currency_with_ranges = 10;
		Currencies settlement_currencies = 11;
	}
	repeated string categories = 12;
	optional string status = 13;
	optional int32 page = 14;
	optional int32 page_size = 15;
	api.common.OperatorContextFilters operator_context_filters = 16;
}

message Bet {
	int64 id = 1	 [json_name="operatorBetId"];
	string provider_bet_id = 2;
	int64 round_id = 3;
	string provider_round_id = 4;
	string provider_id = 5;
	string provider_name = 6;
	int64 operator_id = 7;
	string operator_name = 8;
	int64 company_operator_id = 9;
	string company_operator_name = 10;
	int64 retailer_operator_id = 11;
	string retailer_operator_name = 12;
	int64 system_operator_id = 13;
	string system_operator_name = 14;
	string currency = 15;
	string settlement_currency = 16;
	string status = 17; //pending, end
	int64 user_id = 18;
	string game_id = 19;
	string game_name = 20;
	string game_category = 21;
	int32 win_count = 22;
	string bet_amount = 23;
	string valid_bet_amount = 24;
	string settlement_bet_amount = 25;
	string win_amount = 26;
	string settlement_win_amount = 27;
	string turnover = 28;
	string odds = 29;
	string rollback_bet_amount = 30;
	string rollback_win_amount = 31;
	google.protobuf.Timestamp created_at = 32;
	google.protobuf.Timestamp updated_at = 33;
}

message ListBetsResponse {
	repeated Bet bets = 1;
	string turnover = 2;
	string win_amount = 3;
	int32 bet_count = 4;
	int32 rtp_percentage = 5; // value from 0 to 100
	int32 page = 6;
	int32 page_size = 7;
	int32 total = 8;
}

message ExportBetsRequest {
	message CurrencyWithRange {
		string currency = 1;
		optional string min_bet_amount = 2;
		optional string max_bet_amount = 3;
		optional string min_win_amount = 4;
		optional string max_win_amount = 5;
	}
	message Currencies {
		repeated string currencies = 1;
	}
	repeated string provider_ids = 1;
	optional string game_name = 2;
	optional string game_id = 3;
	optional int64 user_id = 4;
	optional int64 operator_bet_id = 5;
	optional string provider_bet_id = 6;
	optional google.protobuf.Timestamp start_time = 7;
	optional google.protobuf.Timestamp end_time = 8;
	optional CurrencyWithRange currency_with_ranges = 9;
	oneof settlement_currency_option {
		CurrencyWithRange settlement_currency_with_ranges = 10;
		Currencies settlement_currencies = 11;
	}
	repeated string categories = 12;
	optional string status = 13;
	string format = 14; // accepted values: csv, excel, pdf
	string time_zone = 15; // e.g. UTC+0, UTC+8, etc.
	api.common.OperatorContextFilters operator_context_filters = 16;
}

message GetBetByIdRequest {
	int64 bet_id = 1;
	optional bool include_actions = 2;
}

message GetUserBetsOverviewRequest {
	int64 user_id = 1;
	repeated string providers = 2;
	repeated string game_names = 3;
	optional string game_id = 4;
	repeated string currencies = 5;
	optional string bet_amount_min = 6;
	optional string bet_amount_max = 7;
	optional string win_amount_min = 8;
	optional string win_amount_max = 9;
	optional google.protobuf.Timestamp start_time = 10;
	optional google.protobuf.Timestamp end_time = 11;
	optional int32 page = 12;
	optional int32 page_size = 13;
}

message GetUserBetsOverviewResponse {
	int64 rounds = 1;
	int32 bet_count = 2;
	string turnover = 3;
	string bet_amount = 4;
	string win_amount = 5;
	string ggr = 6;
	string ngr = 7;
}

message GetGameTransactionsForBetRequest {
	string round_id = 1;
	string bet_id = 2;
}

message GetGameTransactionsForBetResponse {
	message GameTransaction {
		message Amount {
			string amount_in_currency = 1;
			string amount_in_settlement_currency = 2;
		}
		string action = 1;
		string operator_name = 2;
		google.protobuf.Timestamp created_at = 3;
		google.protobuf.Timestamp updated_at = 4;
		string game_category = 5;
		string game_id = 6;
		string provider_name = 7;
		int64 operator_transaction_id = 8;
		string provider_transaction_id = 9;
		int64 user_id = 10 [json_name="userId"];
		Amount amount = 11;
		string valid_bet_amount = 12;
	}
	repeated GameTransaction game_transactions = 1;
}

message ListGamesRequest {
	repeated string provider_ids = 1;
	repeated string categories = 2;
	repeated string fee_groups = 3;
	optional string game_id = 4;
	repeated string game_tags = 5;
	repeated string themes = 6;
	optional bool support_bonus_buy = 7;
	optional bool has_freespins = 8;
	repeated string support_currencies = 9;
	repeated string restricted_countries = 10;
	optional string rtp_min = 11;
	optional string rtp_max = 12;
	optional bool enabled = 13;
	optional int32 page = 14;
	optional int32 page_size = 15;
}

message ListGamesResponse {
	message Game {
		string name = 1;
		string provider = 2;
		string id = 3;
		string category = 4;
		string theme = 5;
		bool support_bonus_buy = 6;
		bool has_freespins = 7;
		repeated string tags = 8;
		string fee_group = 9;
		string rate = 10;
		string rtp = 11;
		string valid_bet_rate = 12;
		repeated string support_currencies = 13;
		repeated string restricted_countries = 14;
		bool enabled = 15;
	}
	repeated Game games = 1;
	int32 page_size = 3;
	int32 total = 4;
	int32 total_enabled = 5;
	int32 total_disabled = 6;
}

message UpdateGameRequest {
	string game_id = 1;
	optional bool enabled = 2;
}

message UpdateGameResponse {}

message UpdateProviderRequest {
	string provider_id = 1;
	optional bool enabled = 2;
}

message UpdateProviderResponse {}

message ListProviderRatesRequest {
	optional string fee_group = 1;
	optional string currency = 2;
	optional string provider_id = 3;
	optional api.common.OperatorContext target_operator_context = 4;
	int32 page = 5;
	int32 page_size = 6;
}

message ListProviderRatesResponse {
	message ProviderRate {
		string provider_id = 1;
		string provider_name = 2;
		string fee_group = 3;
		string currency = 4;
		string rate = 5;
		int64 operator_id = 6;
		string operator_name = 7;
	}
	repeated ProviderRate provider_rates = 1;
	int32 page = 2;
	int32 page_size = 3;
	int32 total = 4;
}

message GetGameTransactionByIdRequest {
	int64 transaction_id = 1;
}

message ListUnpaidBetsRequest {
	optional google.protobuf.Timestamp start_time = 1;
	optional google.protobuf.Timestamp end_time = 2;
	optional int64 user_id = 3;
	optional int64 transaction_id = 4;
	optional int32 page = 5;
	optional int32 page_size = 6;
	api.common.OperatorContextFilters operator_context_filters = 7;
}

message ExportUnpaidBetsRequest {
	optional google.protobuf.Timestamp start_time = 1;
	optional google.protobuf.Timestamp end_time = 2;
	optional int64 user_id = 3;
	optional int64 transaction_id = 4;
	string format = 5; // accepted values: csv, excel, pdf
	string time_zone = 6; // e.g. UTC+0, UTC+8, etc.
	api.common.OperatorContextFilters operator_context_filters = 7;
}

message ListMultipleBetsRequest {
	// Filter conditions
	optional google.protobuf.Timestamp start_time = 1;
	optional google.protobuf.Timestamp end_time = 2;
	optional string status = 3; // All, Pending, Won, Loss, etc.
	optional int64 user_id = 4; // User ID
	optional int64 transaction_id = 5; // Transaction ID
	
	// Pagination
	optional int32 page = 6;
	optional int32 page_size = 7;
	optional api.common.OperatorContextFilters operator_context_filters = 8;
}

message ExportMultipleBetsRequest {
	optional google.protobuf.Timestamp start_time = 1;
	optional google.protobuf.Timestamp end_time = 2;
	optional string status = 3; // All, Pending, Won, Loss, etc.
	optional int64 user_id = 4; // User ID
	optional int64 transaction_id = 5; // Transaction ID
	string format = 6; // accepted values: csv, excel, pdf
	string time_zone = 7; // e.g. UTC+0, UTC+8, etc.
	api.common.OperatorContextFilters operator_context_filters = 8;
}

message ListStakeVarianceBetsRequest {
	// Filter conditions
	optional google.protobuf.Timestamp start_time = 1;
	optional google.protobuf.Timestamp end_time = 2;
	optional int64 user_id = 3; // User ID
	optional int64 transaction_id = 4; // Transaction ID
	optional string category = 5; // All, Sports, Casino, etc.
	optional int64 round_id = 6; // Round ID
	
	// Pagination
	optional int32 page = 7;
	optional int32 page_size = 8;
	optional api.common.OperatorContext target_operator_context = 9;
}

message ExportStakeVarianceBetsRequest {
	optional google.protobuf.Timestamp start_time = 1;
	optional google.protobuf.Timestamp end_time = 2;
	optional int64 user_id = 3; // User ID
	optional int64 transaction_id = 4; // Transaction ID
	optional string category = 5; // All, Bet, Win, etc.
	optional int64 round_id = 6; // Round ID
	string format = 7; // accepted values: csv, excel, pdf
	string time_zone = 8; // e.g. UTC+0, UTC+8, etc.
	api.common.OperatorContext target_operator_context = 9;
}

message ListCustomerStrikeReportsRequest {
	optional string user_id = 1;
	optional int32 page = 2;
	optional int32 page_size = 3;
	optional api.common.OperatorContextFilters operator_context_filters = 4;
}

message ExportSportEventsRequest {
	optional string event_name = 1;
	optional string venue = 2;
	optional string tournament = 3;
	optional string start_time = 4;
	optional string end_time = 5;
	string format = 6; // accepted values: csv, excel, pdf
	string time_zone = 7; // e.g. UTC+0, UTC+8, etc.
}

message ExportCustomerStrikeReportsRequest {
	optional string user_id = 1;
	string format = 2; // accepted values: csv, excel, pdf
	string time_zone = 3; // e.g. UTC+0, UTC+8, etc.
	api.common.OperatorContextFilters operator_context_filters = 4;
}

message AddGameBetDisplayConfigRequest {
	string country = 1;
	game.service.v1.BettingConfig all_bet = 2;
	game.service.v1.BettingConfig high_wins = 3;
}

message UpdateGameBetDisplayConfigRequest {
	string country = 1;
	optional game.service.v1.BettingConfig all_bet = 2;
	optional game.service.v1.BettingConfig high_wins = 3;
}

message ListGameBetDisplayConfigRequest {
	message Item {
		string country = 1;
		game.service.v1.BettingConfig all_bet = 2;
		game.service.v1.BettingConfig high_wins = 3;
	}
	repeated Item list = 1;
}

message ListTagRequest {
	api.common.OperatorContext target_operator_context = 1;
	optional int32 page = 2;
	optional int32 page_size = 3;
}

message CreateTagRequest {
	string tag_name = 1;
}

message UpdateTagRequest {
	int64 tag_id = 1;
	string tag_name = 2;
}

message DeleteTagRequest {
	int64 tag_id = 1;
}

message GetTagRequest {
	int64 tag_id = 1;
}

message CreateTagConfigRequest {
	int64 tag_id = 1;
	string display_name = 2;
	optional bool follow_parent = 3;
}

message UpdateTagConfigRequest {
	int64 tag_config_id = 1;
	string display_name = 2;
	optional bool follow_parent = 3;
}

message GetTagConfigRequest {
	int64 tag_id = 1;
}

message UpdateTagConfigGamesRequest {
	int64 tag_config_id = 1;
	repeated string game_ids = 2;
	optional bool enabled = 3;
}

message ListGameTagsRequest {
	int64 tag_config_id = 1;
	optional string game_id = 2;
	optional string game_name = 3;
	optional int32 page = 4;
	optional int32 page_size = 5;
}