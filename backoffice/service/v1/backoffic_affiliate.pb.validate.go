// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffic_affiliate.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateCommissionPlanRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommissionPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommissionPlanRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommissionPlanRequestMultiError, or nil if none found.
func (m *CreateCommissionPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommissionPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Status

	// no validation rules for BaseCurrency

	if all {
		switch v := interface{}(m.GetPlanConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommissionPlanRequestValidationError{
					field:  "PlanConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommissionPlanRequestValidationError{
					field:  "PlanConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlanConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommissionPlanRequestValidationError{
				field:  "PlanConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommissionPlanRequestMultiError(errors)
	}

	return nil
}

// CreateCommissionPlanRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCommissionPlanRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateCommissionPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommissionPlanRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommissionPlanRequestMultiError) AllErrors() []error { return m }

// CreateCommissionPlanRequestValidationError is the validation error returned
// by CreateCommissionPlanRequest.Validate if the designated constraints
// aren't met.
type CreateCommissionPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommissionPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommissionPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommissionPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommissionPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommissionPlanRequestValidationError) ErrorName() string {
	return "CreateCommissionPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommissionPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommissionPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommissionPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommissionPlanRequestValidationError{}

// Validate checks the field values on UpdateCommissionPlanRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommissionPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommissionPlanRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommissionPlanRequestMultiError, or nil if none found.
func (m *UpdateCommissionPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommissionPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Status

	// no validation rules for BaseCurrency

	if all {
		switch v := interface{}(m.GetPlanConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCommissionPlanRequestValidationError{
					field:  "PlanConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCommissionPlanRequestValidationError{
					field:  "PlanConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlanConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCommissionPlanRequestValidationError{
				field:  "PlanConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CommissionPlanId

	if len(errors) > 0 {
		return UpdateCommissionPlanRequestMultiError(errors)
	}

	return nil
}

// UpdateCommissionPlanRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCommissionPlanRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateCommissionPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommissionPlanRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommissionPlanRequestMultiError) AllErrors() []error { return m }

// UpdateCommissionPlanRequestValidationError is the validation error returned
// by UpdateCommissionPlanRequest.Validate if the designated constraints
// aren't met.
type UpdateCommissionPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommissionPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommissionPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommissionPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommissionPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommissionPlanRequestValidationError) ErrorName() string {
	return "UpdateCommissionPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommissionPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommissionPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommissionPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommissionPlanRequestValidationError{}

// Validate checks the field values on GetCommissionPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommissionPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommissionPlanRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommissionPlanRequestMultiError, or nil if none found.
func (m *GetCommissionPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommissionPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommissionPlanId

	if len(errors) > 0 {
		return GetCommissionPlanRequestMultiError(errors)
	}

	return nil
}

// GetCommissionPlanRequestMultiError is an error wrapping multiple validation
// errors returned by GetCommissionPlanRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCommissionPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommissionPlanRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommissionPlanRequestMultiError) AllErrors() []error { return m }

// GetCommissionPlanRequestValidationError is the validation error returned by
// GetCommissionPlanRequest.Validate if the designated constraints aren't met.
type GetCommissionPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommissionPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommissionPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommissionPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommissionPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommissionPlanRequestValidationError) ErrorName() string {
	return "GetCommissionPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommissionPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommissionPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommissionPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommissionPlanRequestValidationError{}

// Validate checks the field values on ListCommissionPlansRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommissionPlansRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommissionPlansRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommissionPlansRequestMultiError, or nil if none found.
func (m *ListCommissionPlansRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommissionPlansRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListCommissionPlansRequestMultiError(errors)
	}

	return nil
}

// ListCommissionPlansRequestMultiError is an error wrapping multiple
// validation errors returned by ListCommissionPlansRequest.ValidateAll() if
// the designated constraints aren't met.
type ListCommissionPlansRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommissionPlansRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommissionPlansRequestMultiError) AllErrors() []error { return m }

// ListCommissionPlansRequestValidationError is the validation error returned
// by ListCommissionPlansRequest.Validate if the designated constraints aren't met.
type ListCommissionPlansRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommissionPlansRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommissionPlansRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommissionPlansRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommissionPlansRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommissionPlansRequestValidationError) ErrorName() string {
	return "ListCommissionPlansRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommissionPlansRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommissionPlansRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommissionPlansRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommissionPlansRequestValidationError{}

// Validate checks the field values on DeleteCommissionPlanRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommissionPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommissionPlanRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommissionPlanRequestMultiError, or nil if none found.
func (m *DeleteCommissionPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommissionPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommissionPlanId

	if m.AlternativeCommissionPlanId != nil {
		// no validation rules for AlternativeCommissionPlanId
	}

	if len(errors) > 0 {
		return DeleteCommissionPlanRequestMultiError(errors)
	}

	return nil
}

// DeleteCommissionPlanRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCommissionPlanRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteCommissionPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommissionPlanRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommissionPlanRequestMultiError) AllErrors() []error { return m }

// DeleteCommissionPlanRequestValidationError is the validation error returned
// by DeleteCommissionPlanRequest.Validate if the designated constraints
// aren't met.
type DeleteCommissionPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommissionPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommissionPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommissionPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommissionPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommissionPlanRequestValidationError) ErrorName() string {
	return "DeleteCommissionPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommissionPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommissionPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommissionPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommissionPlanRequestValidationError{}

// Validate checks the field values on CreateAffiliateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAffiliateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAffiliateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAffiliateRequestMultiError, or nil if none found.
func (m *CreateAffiliateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAffiliateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAffiliate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAffiliateRequestValidationError{
					field:  "Affiliate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAffiliateRequestValidationError{
					field:  "Affiliate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAffiliate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAffiliateRequestValidationError{
				field:  "Affiliate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAffiliateRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAffiliateRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAffiliateRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAffiliateRequestMultiError(errors)
	}

	return nil
}

// CreateAffiliateRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAffiliateRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAffiliateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAffiliateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAffiliateRequestMultiError) AllErrors() []error { return m }

// CreateAffiliateRequestValidationError is the validation error returned by
// CreateAffiliateRequest.Validate if the designated constraints aren't met.
type CreateAffiliateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAffiliateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAffiliateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAffiliateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAffiliateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAffiliateRequestValidationError) ErrorName() string {
	return "CreateAffiliateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAffiliateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAffiliateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAffiliateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAffiliateRequestValidationError{}

// Validate checks the field values on UpdateAffiliateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAffiliateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAffiliateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAffiliateRequestMultiError, or nil if none found.
func (m *UpdateAffiliateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAffiliateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAffiliate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAffiliateRequestValidationError{
					field:  "Affiliate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAffiliateRequestValidationError{
					field:  "Affiliate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAffiliate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAffiliateRequestValidationError{
				field:  "Affiliate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AffiliateId

	if len(errors) > 0 {
		return UpdateAffiliateRequestMultiError(errors)
	}

	return nil
}

// UpdateAffiliateRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAffiliateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAffiliateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAffiliateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAffiliateRequestMultiError) AllErrors() []error { return m }

// UpdateAffiliateRequestValidationError is the validation error returned by
// UpdateAffiliateRequest.Validate if the designated constraints aren't met.
type UpdateAffiliateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAffiliateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAffiliateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAffiliateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAffiliateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAffiliateRequestValidationError) ErrorName() string {
	return "UpdateAffiliateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAffiliateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAffiliateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAffiliateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAffiliateRequestValidationError{}

// Validate checks the field values on GetAffiliateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAffiliateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAffiliateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAffiliateRequestMultiError, or nil if none found.
func (m *GetAffiliateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAffiliateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AffiliateId

	if len(errors) > 0 {
		return GetAffiliateRequestMultiError(errors)
	}

	return nil
}

// GetAffiliateRequestMultiError is an error wrapping multiple validation
// errors returned by GetAffiliateRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAffiliateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAffiliateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAffiliateRequestMultiError) AllErrors() []error { return m }

// GetAffiliateRequestValidationError is the validation error returned by
// GetAffiliateRequest.Validate if the designated constraints aren't met.
type GetAffiliateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAffiliateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAffiliateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAffiliateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAffiliateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAffiliateRequestValidationError) ErrorName() string {
	return "GetAffiliateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAffiliateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAffiliateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAffiliateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAffiliateRequestValidationError{}

// Validate checks the field values on ListAffiliatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAffiliatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAffiliatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAffiliatesRequestMultiError, or nil if none found.
func (m *ListAffiliatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAffiliatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAffiliatesRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAffiliatesRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAffiliatesRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListAffiliatesRequestMultiError(errors)
	}

	return nil
}

// ListAffiliatesRequestMultiError is an error wrapping multiple validation
// errors returned by ListAffiliatesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAffiliatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAffiliatesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAffiliatesRequestMultiError) AllErrors() []error { return m }

// ListAffiliatesRequestValidationError is the validation error returned by
// ListAffiliatesRequest.Validate if the designated constraints aren't met.
type ListAffiliatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAffiliatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAffiliatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAffiliatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAffiliatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAffiliatesRequestValidationError) ErrorName() string {
	return "ListAffiliatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAffiliatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAffiliatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAffiliatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAffiliatesRequestValidationError{}

// Validate checks the field values on DeleteAffiliateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAffiliateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAffiliateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAffiliateRequestMultiError, or nil if none found.
func (m *DeleteAffiliateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAffiliateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AffiliateId

	if len(errors) > 0 {
		return DeleteAffiliateRequestMultiError(errors)
	}

	return nil
}

// DeleteAffiliateRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAffiliateRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAffiliateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAffiliateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAffiliateRequestMultiError) AllErrors() []error { return m }

// DeleteAffiliateRequestValidationError is the validation error returned by
// DeleteAffiliateRequest.Validate if the designated constraints aren't met.
type DeleteAffiliateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAffiliateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAffiliateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAffiliateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAffiliateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAffiliateRequestValidationError) ErrorName() string {
	return "DeleteAffiliateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAffiliateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAffiliateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAffiliateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAffiliateRequestValidationError{}

// Validate checks the field values on ListAllCommissionPlansRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllCommissionPlansRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllCommissionPlansRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListAllCommissionPlansRequestMultiError, or nil if none found.
func (m *ListAllCommissionPlansRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllCommissionPlansRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAllCommissionPlansRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAllCommissionPlansRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAllCommissionPlansRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListAllCommissionPlansRequestMultiError(errors)
	}

	return nil
}

// ListAllCommissionPlansRequestMultiError is an error wrapping multiple
// validation errors returned by ListAllCommissionPlansRequest.ValidateAll()
// if the designated constraints aren't met.
type ListAllCommissionPlansRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllCommissionPlansRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllCommissionPlansRequestMultiError) AllErrors() []error { return m }

// ListAllCommissionPlansRequestValidationError is the validation error
// returned by ListAllCommissionPlansRequest.Validate if the designated
// constraints aren't met.
type ListAllCommissionPlansRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllCommissionPlansRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllCommissionPlansRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllCommissionPlansRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllCommissionPlansRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllCommissionPlansRequestValidationError) ErrorName() string {
	return "ListAllCommissionPlansRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllCommissionPlansRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllCommissionPlansRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllCommissionPlansRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllCommissionPlansRequestValidationError{}

// Validate checks the field values on CreateCampaignRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCampaignRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCampaignRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCampaignRequestMultiError, or nil if none found.
func (m *CreateCampaignRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCampaignRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCampaign()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCampaignRequestValidationError{
					field:  "Campaign",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCampaignRequestValidationError{
					field:  "Campaign",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCampaign()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCampaignRequestValidationError{
				field:  "Campaign",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCampaignRequestMultiError(errors)
	}

	return nil
}

// CreateCampaignRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCampaignRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCampaignRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCampaignRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCampaignRequestMultiError) AllErrors() []error { return m }

// CreateCampaignRequestValidationError is the validation error returned by
// CreateCampaignRequest.Validate if the designated constraints aren't met.
type CreateCampaignRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCampaignRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCampaignRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCampaignRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCampaignRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCampaignRequestValidationError) ErrorName() string {
	return "CreateCampaignRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCampaignRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCampaignRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCampaignRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCampaignRequestValidationError{}

// Validate checks the field values on UpdateCampaignRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCampaignRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCampaignRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCampaignRequestMultiError, or nil if none found.
func (m *UpdateCampaignRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCampaignRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CampaignId

	if m.Campaign != nil {

		if all {
			switch v := interface{}(m.GetCampaign()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateCampaignRequestValidationError{
						field:  "Campaign",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateCampaignRequestValidationError{
						field:  "Campaign",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCampaign()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateCampaignRequestValidationError{
					field:  "Campaign",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if len(errors) > 0 {
		return UpdateCampaignRequestMultiError(errors)
	}

	return nil
}

// UpdateCampaignRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCampaignRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCampaignRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCampaignRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCampaignRequestMultiError) AllErrors() []error { return m }

// UpdateCampaignRequestValidationError is the validation error returned by
// UpdateCampaignRequest.Validate if the designated constraints aren't met.
type UpdateCampaignRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCampaignRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCampaignRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCampaignRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCampaignRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCampaignRequestValidationError) ErrorName() string {
	return "UpdateCampaignRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCampaignRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCampaignRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCampaignRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCampaignRequestValidationError{}

// Validate checks the field values on ListCampaignsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCampaignsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCampaignsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCampaignsRequestMultiError, or nil if none found.
func (m *ListCampaignsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCampaignsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCampaignsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCampaignsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCampaignsRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.CampaignName != nil {
		// no validation rules for CampaignName
	}

	if m.CampaignId != nil {
		// no validation rules for CampaignId
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListCampaignsRequestMultiError(errors)
	}

	return nil
}

// ListCampaignsRequestMultiError is an error wrapping multiple validation
// errors returned by ListCampaignsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCampaignsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCampaignsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCampaignsRequestMultiError) AllErrors() []error { return m }

// ListCampaignsRequestValidationError is the validation error returned by
// ListCampaignsRequest.Validate if the designated constraints aren't met.
type ListCampaignsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCampaignsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCampaignsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCampaignsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCampaignsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCampaignsRequestValidationError) ErrorName() string {
	return "ListCampaignsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCampaignsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCampaignsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCampaignsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCampaignsRequestValidationError{}

// Validate checks the field values on ListAffiliateCampaignsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAffiliateCampaignsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAffiliateCampaignsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListAffiliateCampaignsRequestMultiError, or nil if none found.
func (m *ListAffiliateCampaignsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAffiliateCampaignsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.CampaignName != nil {
		// no validation rules for CampaignName
	}

	if m.CampaignId != nil {
		// no validation rules for CampaignId
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListAffiliateCampaignsRequestMultiError(errors)
	}

	return nil
}

// ListAffiliateCampaignsRequestMultiError is an error wrapping multiple
// validation errors returned by ListAffiliateCampaignsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListAffiliateCampaignsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAffiliateCampaignsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAffiliateCampaignsRequestMultiError) AllErrors() []error { return m }

// ListAffiliateCampaignsRequestValidationError is the validation error
// returned by ListAffiliateCampaignsRequest.Validate if the designated
// constraints aren't met.
type ListAffiliateCampaignsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAffiliateCampaignsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAffiliateCampaignsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAffiliateCampaignsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAffiliateCampaignsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAffiliateCampaignsRequestValidationError) ErrorName() string {
	return "ListAffiliateCampaignsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAffiliateCampaignsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAffiliateCampaignsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAffiliateCampaignsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAffiliateCampaignsRequestValidationError{}

// Validate checks the field values on DeleteCampaignRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCampaignRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCampaignRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCampaignRequestMultiError, or nil if none found.
func (m *DeleteCampaignRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCampaignRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CampaignId

	if len(errors) > 0 {
		return DeleteCampaignRequestMultiError(errors)
	}

	return nil
}

// DeleteCampaignRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCampaignRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCampaignRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCampaignRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCampaignRequestMultiError) AllErrors() []error { return m }

// DeleteCampaignRequestValidationError is the validation error returned by
// DeleteCampaignRequest.Validate if the designated constraints aren't met.
type DeleteCampaignRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCampaignRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCampaignRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCampaignRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCampaignRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCampaignRequestValidationError) ErrorName() string {
	return "DeleteCampaignRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCampaignRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCampaignRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCampaignRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCampaignRequestValidationError{}

// Validate checks the field values on ListEventsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEventsRequestMultiError, or nil if none found.
func (m *ListEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEventsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEventsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEventsRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEventsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEventsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEventsRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RoleId

	if m.AffiliateId != nil {
		// no validation rules for AffiliateId
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListEventsRequestMultiError(errors)
	}

	return nil
}

// ListEventsRequestMultiError is an error wrapping multiple validation errors
// returned by ListEventsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEventsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEventsRequestMultiError) AllErrors() []error { return m }

// ListEventsRequestValidationError is the validation error returned by
// ListEventsRequest.Validate if the designated constraints aren't met.
type ListEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventsRequestValidationError) ErrorName() string {
	return "ListEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventsRequestValidationError{}

// Validate checks the field values on CreateCampaignRequest_Campaign with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCampaignRequest_Campaign) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCampaignRequest_Campaign with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCampaignRequest_CampaignMultiError, or nil if none found.
func (m *CreateCampaignRequest_Campaign) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCampaignRequest_Campaign) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for CampaignName

	// no validation rules for ChannelType

	if all {
		switch v := interface{}(m.GetChannelConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCampaignRequest_CampaignValidationError{
					field:  "ChannelConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCampaignRequest_CampaignValidationError{
					field:  "ChannelConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannelConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCampaignRequest_CampaignValidationError{
				field:  "ChannelConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCampaignRequest_CampaignMultiError(errors)
	}

	return nil
}

// CreateCampaignRequest_CampaignMultiError is an error wrapping multiple
// validation errors returned by CreateCampaignRequest_Campaign.ValidateAll()
// if the designated constraints aren't met.
type CreateCampaignRequest_CampaignMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCampaignRequest_CampaignMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCampaignRequest_CampaignMultiError) AllErrors() []error { return m }

// CreateCampaignRequest_CampaignValidationError is the validation error
// returned by CreateCampaignRequest_Campaign.Validate if the designated
// constraints aren't met.
type CreateCampaignRequest_CampaignValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCampaignRequest_CampaignValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCampaignRequest_CampaignValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCampaignRequest_CampaignValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCampaignRequest_CampaignValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCampaignRequest_CampaignValidationError) ErrorName() string {
	return "CreateCampaignRequest_CampaignValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCampaignRequest_CampaignValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCampaignRequest_Campaign.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCampaignRequest_CampaignValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCampaignRequest_CampaignValidationError{}
