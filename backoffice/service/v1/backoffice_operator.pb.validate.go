// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_operator.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListOperatorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOperatorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOperatorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOperatorsRequestMultiError, or nil if none found.
func (m *ListOperatorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOperatorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if len(errors) > 0 {
		return ListOperatorsRequestMultiError(errors)
	}

	return nil
}

// ListOperatorsRequestMultiError is an error wrapping multiple validation
// errors returned by ListOperatorsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOperatorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOperatorsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOperatorsRequestMultiError) AllErrors() []error { return m }

// ListOperatorsRequestValidationError is the validation error returned by
// ListOperatorsRequest.Validate if the designated constraints aren't met.
type ListOperatorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperatorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperatorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperatorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperatorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperatorsRequestValidationError) ErrorName() string {
	return "ListOperatorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperatorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperatorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperatorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperatorsRequestValidationError{}

// Validate checks the field values on ListOperatorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOperatorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOperatorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOperatorsResponseMultiError, or nil if none found.
func (m *ListOperatorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOperatorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOperatorsResponseValidationError{
						field:  fmt.Sprintf("Operators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOperatorsResponseValidationError{
						field:  fmt.Sprintf("Operators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOperatorsResponseValidationError{
					field:  fmt.Sprintf("Operators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOperatorsResponseMultiError(errors)
	}

	return nil
}

// ListOperatorsResponseMultiError is an error wrapping multiple validation
// errors returned by ListOperatorsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOperatorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOperatorsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOperatorsResponseMultiError) AllErrors() []error { return m }

// ListOperatorsResponseValidationError is the validation error returned by
// ListOperatorsResponse.Validate if the designated constraints aren't met.
type ListOperatorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperatorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperatorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperatorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperatorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperatorsResponseValidationError) ErrorName() string {
	return "ListOperatorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperatorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperatorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperatorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperatorsResponseValidationError{}

// Validate checks the field values on GetOperatorAccountSettingsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOperatorAccountSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorAccountSettingsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOperatorAccountSettingsRequestMultiError, or nil if none found.
func (m *GetOperatorAccountSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorAccountSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOperatorAccountSettingsRequestMultiError(errors)
	}

	return nil
}

// GetOperatorAccountSettingsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetOperatorAccountSettingsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorAccountSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorAccountSettingsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorAccountSettingsRequestMultiError) AllErrors() []error { return m }

// GetOperatorAccountSettingsRequestValidationError is the validation error
// returned by GetOperatorAccountSettingsRequest.Validate if the designated
// constraints aren't met.
type GetOperatorAccountSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorAccountSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorAccountSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorAccountSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorAccountSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorAccountSettingsRequestValidationError) ErrorName() string {
	return "GetOperatorAccountSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorAccountSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorAccountSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorAccountSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorAccountSettingsRequestValidationError{}

// Validate checks the field values on UpdateOperatorAccountSettingsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateOperatorAccountSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOperatorAccountSettingsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateOperatorAccountSettingsRequestMultiError, or nil if none found.
func (m *UpdateOperatorAccountSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOperatorAccountSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccountSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOperatorAccountSettingsRequestValidationError{
					field:  "AccountSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOperatorAccountSettingsRequestValidationError{
					field:  "AccountSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccountSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOperatorAccountSettingsRequestValidationError{
				field:  "AccountSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOperatorAccountSettingsRequestMultiError(errors)
	}

	return nil
}

// UpdateOperatorAccountSettingsRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateOperatorAccountSettingsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOperatorAccountSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOperatorAccountSettingsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOperatorAccountSettingsRequestMultiError) AllErrors() []error { return m }

// UpdateOperatorAccountSettingsRequestValidationError is the validation error
// returned by UpdateOperatorAccountSettingsRequest.Validate if the designated
// constraints aren't met.
type UpdateOperatorAccountSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOperatorAccountSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOperatorAccountSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOperatorAccountSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOperatorAccountSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOperatorAccountSettingsRequestValidationError) ErrorName() string {
	return "UpdateOperatorAccountSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOperatorAccountSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOperatorAccountSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOperatorAccountSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOperatorAccountSettingsRequestValidationError{}

// Validate checks the field values on UpdateOperatorAccountSettingsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateOperatorAccountSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOperatorAccountSettingsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateOperatorAccountSettingsResponseMultiError, or nil if none found.
func (m *UpdateOperatorAccountSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOperatorAccountSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateOperatorAccountSettingsResponseMultiError(errors)
	}

	return nil
}

// UpdateOperatorAccountSettingsResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateOperatorAccountSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOperatorAccountSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOperatorAccountSettingsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOperatorAccountSettingsResponseMultiError) AllErrors() []error { return m }

// UpdateOperatorAccountSettingsResponseValidationError is the validation error
// returned by UpdateOperatorAccountSettingsResponse.Validate if the
// designated constraints aren't met.
type UpdateOperatorAccountSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOperatorAccountSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOperatorAccountSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOperatorAccountSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOperatorAccountSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOperatorAccountSettingsResponseValidationError) ErrorName() string {
	return "UpdateOperatorAccountSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOperatorAccountSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOperatorAccountSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOperatorAccountSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOperatorAccountSettingsResponseValidationError{}

// Validate checks the field values on AddRegisterLoginBlacklistRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddRegisterLoginBlacklistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRegisterLoginBlacklistRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddRegisterLoginBlacklistRequestMultiError, or nil if none found.
func (m *AddRegisterLoginBlacklistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRegisterLoginBlacklistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdType

	if len(errors) > 0 {
		return AddRegisterLoginBlacklistRequestMultiError(errors)
	}

	return nil
}

// AddRegisterLoginBlacklistRequestMultiError is an error wrapping multiple
// validation errors returned by
// AddRegisterLoginBlacklistRequest.ValidateAll() if the designated
// constraints aren't met.
type AddRegisterLoginBlacklistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRegisterLoginBlacklistRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRegisterLoginBlacklistRequestMultiError) AllErrors() []error { return m }

// AddRegisterLoginBlacklistRequestValidationError is the validation error
// returned by AddRegisterLoginBlacklistRequest.Validate if the designated
// constraints aren't met.
type AddRegisterLoginBlacklistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRegisterLoginBlacklistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRegisterLoginBlacklistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRegisterLoginBlacklistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRegisterLoginBlacklistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRegisterLoginBlacklistRequestValidationError) ErrorName() string {
	return "AddRegisterLoginBlacklistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddRegisterLoginBlacklistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRegisterLoginBlacklistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRegisterLoginBlacklistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRegisterLoginBlacklistRequestValidationError{}

// Validate checks the field values on DeleteRegisterLoginBlacklistRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteRegisterLoginBlacklistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRegisterLoginBlacklistRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteRegisterLoginBlacklistRequestMultiError, or nil if none found.
func (m *DeleteRegisterLoginBlacklistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRegisterLoginBlacklistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdType

	if len(errors) > 0 {
		return DeleteRegisterLoginBlacklistRequestMultiError(errors)
	}

	return nil
}

// DeleteRegisterLoginBlacklistRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteRegisterLoginBlacklistRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteRegisterLoginBlacklistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRegisterLoginBlacklistRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRegisterLoginBlacklistRequestMultiError) AllErrors() []error { return m }

// DeleteRegisterLoginBlacklistRequestValidationError is the validation error
// returned by DeleteRegisterLoginBlacklistRequest.Validate if the designated
// constraints aren't met.
type DeleteRegisterLoginBlacklistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRegisterLoginBlacklistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRegisterLoginBlacklistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRegisterLoginBlacklistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRegisterLoginBlacklistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRegisterLoginBlacklistRequestValidationError) ErrorName() string {
	return "DeleteRegisterLoginBlacklistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRegisterLoginBlacklistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRegisterLoginBlacklistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRegisterLoginBlacklistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRegisterLoginBlacklistRequestValidationError{}

// Validate checks the field values on ListRegisterLoginBlacklistRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListRegisterLoginBlacklistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRegisterLoginBlacklistRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListRegisterLoginBlacklistRequestMultiError, or nil if none found.
func (m *ListRegisterLoginBlacklistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegisterLoginBlacklistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdType

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListRegisterLoginBlacklistRequestMultiError(errors)
	}

	return nil
}

// ListRegisterLoginBlacklistRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListRegisterLoginBlacklistRequest.ValidateAll() if the designated
// constraints aren't met.
type ListRegisterLoginBlacklistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegisterLoginBlacklistRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegisterLoginBlacklistRequestMultiError) AllErrors() []error { return m }

// ListRegisterLoginBlacklistRequestValidationError is the validation error
// returned by ListRegisterLoginBlacklistRequest.Validate if the designated
// constraints aren't met.
type ListRegisterLoginBlacklistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegisterLoginBlacklistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegisterLoginBlacklistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegisterLoginBlacklistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegisterLoginBlacklistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegisterLoginBlacklistRequestValidationError) ErrorName() string {
	return "ListRegisterLoginBlacklistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegisterLoginBlacklistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegisterLoginBlacklistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegisterLoginBlacklistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegisterLoginBlacklistRequestValidationError{}

// Validate checks the field values on SetOperatorRegisterLimitConfigRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SetOperatorRegisterLimitConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOperatorRegisterLimitConfigRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SetOperatorRegisterLimitConfigRequestMultiError, or nil if none found.
func (m *SetOperatorRegisterLimitConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOperatorRegisterLimitConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetConfig()))
		i := 0
		for key := range m.GetConfig() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfig()[key]
			_ = val

			// no validation rules for Config[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, SetOperatorRegisterLimitConfigRequestValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, SetOperatorRegisterLimitConfigRequestValidationError{
							field:  fmt.Sprintf("Config[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return SetOperatorRegisterLimitConfigRequestValidationError{
						field:  fmt.Sprintf("Config[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return SetOperatorRegisterLimitConfigRequestMultiError(errors)
	}

	return nil
}

// SetOperatorRegisterLimitConfigRequestMultiError is an error wrapping
// multiple validation errors returned by
// SetOperatorRegisterLimitConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type SetOperatorRegisterLimitConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOperatorRegisterLimitConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOperatorRegisterLimitConfigRequestMultiError) AllErrors() []error { return m }

// SetOperatorRegisterLimitConfigRequestValidationError is the validation error
// returned by SetOperatorRegisterLimitConfigRequest.Validate if the
// designated constraints aren't met.
type SetOperatorRegisterLimitConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOperatorRegisterLimitConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOperatorRegisterLimitConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOperatorRegisterLimitConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOperatorRegisterLimitConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOperatorRegisterLimitConfigRequestValidationError) ErrorName() string {
	return "SetOperatorRegisterLimitConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetOperatorRegisterLimitConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOperatorRegisterLimitConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOperatorRegisterLimitConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOperatorRegisterLimitConfigRequestValidationError{}

// Validate checks the field values on GetOperatorRegisterLimitConfigRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetOperatorRegisterLimitConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorRegisterLimitConfigRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOperatorRegisterLimitConfigRequestMultiError, or nil if none found.
func (m *GetOperatorRegisterLimitConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorRegisterLimitConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOperatorRegisterLimitConfigRequestMultiError(errors)
	}

	return nil
}

// GetOperatorRegisterLimitConfigRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetOperatorRegisterLimitConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorRegisterLimitConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorRegisterLimitConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorRegisterLimitConfigRequestMultiError) AllErrors() []error { return m }

// GetOperatorRegisterLimitConfigRequestValidationError is the validation error
// returned by GetOperatorRegisterLimitConfigRequest.Validate if the
// designated constraints aren't met.
type GetOperatorRegisterLimitConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorRegisterLimitConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorRegisterLimitConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorRegisterLimitConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorRegisterLimitConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorRegisterLimitConfigRequestValidationError) ErrorName() string {
	return "GetOperatorRegisterLimitConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorRegisterLimitConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorRegisterLimitConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorRegisterLimitConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorRegisterLimitConfigRequestValidationError{}

// Validate checks the field values on ListOperatorsResponse_Operator with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOperatorsResponse_Operator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOperatorsResponse_Operator with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOperatorsResponse_OperatorMultiError, or nil if none found.
func (m *ListOperatorsResponse_Operator) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOperatorsResponse_Operator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for OperatorName

	if len(errors) > 0 {
		return ListOperatorsResponse_OperatorMultiError(errors)
	}

	return nil
}

// ListOperatorsResponse_OperatorMultiError is an error wrapping multiple
// validation errors returned by ListOperatorsResponse_Operator.ValidateAll()
// if the designated constraints aren't met.
type ListOperatorsResponse_OperatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOperatorsResponse_OperatorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOperatorsResponse_OperatorMultiError) AllErrors() []error { return m }

// ListOperatorsResponse_OperatorValidationError is the validation error
// returned by ListOperatorsResponse_Operator.Validate if the designated
// constraints aren't met.
type ListOperatorsResponse_OperatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperatorsResponse_OperatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperatorsResponse_OperatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperatorsResponse_OperatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperatorsResponse_OperatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperatorsResponse_OperatorValidationError) ErrorName() string {
	return "ListOperatorsResponse_OperatorValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperatorsResponse_OperatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperatorsResponse_Operator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperatorsResponse_OperatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperatorsResponse_OperatorValidationError{}
