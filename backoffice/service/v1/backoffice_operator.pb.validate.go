// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_operator.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListAllOperatorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllOperatorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllOperatorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAllOperatorsRequestMultiError, or nil if none found.
func (m *ListAllOperatorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllOperatorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if len(errors) > 0 {
		return ListAllOperatorsRequestMultiError(errors)
	}

	return nil
}

// ListAllOperatorsRequestMultiError is an error wrapping multiple validation
// errors returned by ListAllOperatorsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAllOperatorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllOperatorsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllOperatorsRequestMultiError) AllErrors() []error { return m }

// ListAllOperatorsRequestValidationError is the validation error returned by
// ListAllOperatorsRequest.Validate if the designated constraints aren't met.
type ListAllOperatorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllOperatorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllOperatorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllOperatorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllOperatorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllOperatorsRequestValidationError) ErrorName() string {
	return "ListAllOperatorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllOperatorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllOperatorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllOperatorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllOperatorsRequestValidationError{}

// Validate checks the field values on ListAllOperatorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllOperatorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllOperatorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAllOperatorsResponseMultiError, or nil if none found.
func (m *ListAllOperatorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllOperatorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAllOperatorsResponseValidationError{
						field:  fmt.Sprintf("Operators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAllOperatorsResponseValidationError{
						field:  fmt.Sprintf("Operators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAllOperatorsResponseValidationError{
					field:  fmt.Sprintf("Operators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAllOperatorsResponseMultiError(errors)
	}

	return nil
}

// ListAllOperatorsResponseMultiError is an error wrapping multiple validation
// errors returned by ListAllOperatorsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAllOperatorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllOperatorsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllOperatorsResponseMultiError) AllErrors() []error { return m }

// ListAllOperatorsResponseValidationError is the validation error returned by
// ListAllOperatorsResponse.Validate if the designated constraints aren't met.
type ListAllOperatorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllOperatorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllOperatorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllOperatorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllOperatorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllOperatorsResponseValidationError) ErrorName() string {
	return "ListAllOperatorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllOperatorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllOperatorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllOperatorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllOperatorsResponseValidationError{}

// Validate checks the field values on CreateOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOperatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOperatorRequestMultiError, or nil if none found.
func (m *CreateOperatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOperatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mode

	// no validation rules for OperatorName

	// no validation rules for OperatorKey

	// no validation rules for ReportingCurrency

	// no validation rules for BackofficeTimezone

	// no validation rules for OperatorAdminEmail

	// no validation rules for VerificationCode

	if len(errors) > 0 {
		return CreateOperatorRequestMultiError(errors)
	}

	return nil
}

// CreateOperatorRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOperatorRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOperatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOperatorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOperatorRequestMultiError) AllErrors() []error { return m }

// CreateOperatorRequestValidationError is the validation error returned by
// CreateOperatorRequest.Validate if the designated constraints aren't met.
type CreateOperatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOperatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOperatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOperatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOperatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOperatorRequestValidationError) ErrorName() string {
	return "CreateOperatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOperatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOperatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOperatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOperatorRequestValidationError{}

// Validate checks the field values on CreateOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOperatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOperatorResponseMultiError, or nil if none found.
func (m *CreateOperatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOperatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subdomain

	// no validation rules for BackofficeSubdomain

	// no validation rules for OperatorAdminEmail

	// no validation rules for Password

	if len(errors) > 0 {
		return CreateOperatorResponseMultiError(errors)
	}

	return nil
}

// CreateOperatorResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOperatorResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOperatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOperatorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOperatorResponseMultiError) AllErrors() []error { return m }

// CreateOperatorResponseValidationError is the validation error returned by
// CreateOperatorResponse.Validate if the designated constraints aren't met.
type CreateOperatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOperatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOperatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOperatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOperatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOperatorResponseValidationError) ErrorName() string {
	return "CreateOperatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOperatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOperatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOperatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOperatorResponseValidationError{}

// Validate checks the field values on OperatorDetails with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OperatorDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperatorDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperatorDetailsMultiError, or nil if none found.
func (m *OperatorDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *OperatorDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OperatorName

	// no validation rules for ParentOperatorId

	// no validation rules for ParentOperatorName

	// no validation rules for OperatorType

	// no validation rules for ExternalId

	// no validation rules for ApiKey

	// no validation rules for Subdomain

	// no validation rules for BackofficeSubdomain

	// no validation rules for BackofficeChildDomain

	// no validation rules for Enabled

	// no validation rules for Mode

	// no validation rules for OperatorKey

	// no validation rules for ReportingCurrency

	// no validation rules for BackofficeTimezone

	// no validation rules for Status

	// no validation rules for IsMaintenance

	// no validation rules for MaintenanceStartTime

	// no validation rules for MaintenanceEndTime

	// no validation rules for OperatorId

	// no validation rules for CompanyOperatorId

	// no validation rules for CompanyOperatorName

	// no validation rules for RetailerOperatorId

	// no validation rules for RetailerOperatorName

	// no validation rules for SystemOperatorId

	// no validation rules for SystemOperatorName

	// no validation rules for Config

	if len(errors) > 0 {
		return OperatorDetailsMultiError(errors)
	}

	return nil
}

// OperatorDetailsMultiError is an error wrapping multiple validation errors
// returned by OperatorDetails.ValidateAll() if the designated constraints
// aren't met.
type OperatorDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperatorDetailsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperatorDetailsMultiError) AllErrors() []error { return m }

// OperatorDetailsValidationError is the validation error returned by
// OperatorDetails.Validate if the designated constraints aren't met.
type OperatorDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperatorDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperatorDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperatorDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperatorDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperatorDetailsValidationError) ErrorName() string { return "OperatorDetailsValidationError" }

// Error satisfies the builtin error interface
func (e OperatorDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperatorDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperatorDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperatorDetailsValidationError{}

// Validate checks the field values on GetCurrentOperatorDetailsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetCurrentOperatorDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentOperatorDetailsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCurrentOperatorDetailsRequestMultiError, or nil if none found.
func (m *GetCurrentOperatorDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentOperatorDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCurrentOperatorDetailsRequestMultiError(errors)
	}

	return nil
}

// GetCurrentOperatorDetailsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetCurrentOperatorDetailsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentOperatorDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentOperatorDetailsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentOperatorDetailsRequestMultiError) AllErrors() []error { return m }

// GetCurrentOperatorDetailsRequestValidationError is the validation error
// returned by GetCurrentOperatorDetailsRequest.Validate if the designated
// constraints aren't met.
type GetCurrentOperatorDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentOperatorDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentOperatorDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentOperatorDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentOperatorDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentOperatorDetailsRequestValidationError) ErrorName() string {
	return "GetCurrentOperatorDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentOperatorDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentOperatorDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentOperatorDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentOperatorDetailsRequestValidationError{}

// Validate checks the field values on GetCurrentOperatorDetailsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetCurrentOperatorDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentOperatorDetailsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetCurrentOperatorDetailsResponseMultiError, or nil if none found.
func (m *GetCurrentOperatorDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentOperatorDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCurrentOperatorDetailsResponseValidationError{
					field:  "OperatorDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCurrentOperatorDetailsResponseValidationError{
					field:  "OperatorDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCurrentOperatorDetailsResponseValidationError{
				field:  "OperatorDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCurrentOperatorDetailsResponseMultiError(errors)
	}

	return nil
}

// GetCurrentOperatorDetailsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetCurrentOperatorDetailsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentOperatorDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentOperatorDetailsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentOperatorDetailsResponseMultiError) AllErrors() []error { return m }

// GetCurrentOperatorDetailsResponseValidationError is the validation error
// returned by GetCurrentOperatorDetailsResponse.Validate if the designated
// constraints aren't met.
type GetCurrentOperatorDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentOperatorDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentOperatorDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentOperatorDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentOperatorDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentOperatorDetailsResponseValidationError) ErrorName() string {
	return "GetCurrentOperatorDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentOperatorDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentOperatorDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentOperatorDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentOperatorDetailsResponseValidationError{}

// Validate checks the field values on ListOperatorsByParentOperatorIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListOperatorsByParentOperatorIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOperatorsByParentOperatorIdRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListOperatorsByParentOperatorIdRequestMultiError, or nil if none found.
func (m *ListOperatorsByParentOperatorIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOperatorsByParentOperatorIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListOperatorsByParentOperatorIdRequestMultiError(errors)
	}

	return nil
}

// ListOperatorsByParentOperatorIdRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListOperatorsByParentOperatorIdRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOperatorsByParentOperatorIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOperatorsByParentOperatorIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOperatorsByParentOperatorIdRequestMultiError) AllErrors() []error { return m }

// ListOperatorsByParentOperatorIdRequestValidationError is the validation
// error returned by ListOperatorsByParentOperatorIdRequest.Validate if the
// designated constraints aren't met.
type ListOperatorsByParentOperatorIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperatorsByParentOperatorIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperatorsByParentOperatorIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperatorsByParentOperatorIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperatorsByParentOperatorIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperatorsByParentOperatorIdRequestValidationError) ErrorName() string {
	return "ListOperatorsByParentOperatorIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperatorsByParentOperatorIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperatorsByParentOperatorIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperatorsByParentOperatorIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperatorsByParentOperatorIdRequestValidationError{}

// Validate checks the field values on ListOperatorsByParentOperatorIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListOperatorsByParentOperatorIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOperatorsByParentOperatorIdResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListOperatorsByParentOperatorIdResponseMultiError, or nil if none found.
func (m *ListOperatorsByParentOperatorIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOperatorsByParentOperatorIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOperatorDetailsList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOperatorsByParentOperatorIdResponseValidationError{
						field:  fmt.Sprintf("OperatorDetailsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOperatorsByParentOperatorIdResponseValidationError{
						field:  fmt.Sprintf("OperatorDetailsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOperatorsByParentOperatorIdResponseValidationError{
					field:  fmt.Sprintf("OperatorDetailsList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for LiveCount

	// no validation rules for ClosedCount

	// no validation rules for PendingCount

	// no validation rules for RequestToCloseCount

	// no validation rules for SuspendedCount

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListOperatorsByParentOperatorIdResponseMultiError(errors)
	}

	return nil
}

// ListOperatorsByParentOperatorIdResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListOperatorsByParentOperatorIdResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOperatorsByParentOperatorIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOperatorsByParentOperatorIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOperatorsByParentOperatorIdResponseMultiError) AllErrors() []error { return m }

// ListOperatorsByParentOperatorIdResponseValidationError is the validation
// error returned by ListOperatorsByParentOperatorIdResponse.Validate if the
// designated constraints aren't met.
type ListOperatorsByParentOperatorIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperatorsByParentOperatorIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperatorsByParentOperatorIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperatorsByParentOperatorIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperatorsByParentOperatorIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperatorsByParentOperatorIdResponseValidationError) ErrorName() string {
	return "ListOperatorsByParentOperatorIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperatorsByParentOperatorIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperatorsByParentOperatorIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperatorsByParentOperatorIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperatorsByParentOperatorIdResponseValidationError{}

// Validate checks the field values on ListRetailerOperatorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRetailerOperatorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRetailerOperatorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRetailerOperatorsRequestMultiError, or nil if none found.
func (m *ListRetailerOperatorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRetailerOperatorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IncludeCount

	if len(errors) > 0 {
		return ListRetailerOperatorsRequestMultiError(errors)
	}

	return nil
}

// ListRetailerOperatorsRequestMultiError is an error wrapping multiple
// validation errors returned by ListRetailerOperatorsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListRetailerOperatorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRetailerOperatorsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRetailerOperatorsRequestMultiError) AllErrors() []error { return m }

// ListRetailerOperatorsRequestValidationError is the validation error returned
// by ListRetailerOperatorsRequest.Validate if the designated constraints
// aren't met.
type ListRetailerOperatorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRetailerOperatorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRetailerOperatorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRetailerOperatorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRetailerOperatorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRetailerOperatorsRequestValidationError) ErrorName() string {
	return "ListRetailerOperatorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRetailerOperatorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRetailerOperatorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRetailerOperatorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRetailerOperatorsRequestValidationError{}

// Validate checks the field values on ListRetailerOperatorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRetailerOperatorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRetailerOperatorsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListRetailerOperatorsResponseMultiError, or nil if none found.
func (m *ListRetailerOperatorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRetailerOperatorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRetailerOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRetailerOperatorsResponseValidationError{
						field:  fmt.Sprintf("RetailerOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRetailerOperatorsResponseValidationError{
						field:  fmt.Sprintf("RetailerOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRetailerOperatorsResponseValidationError{
					field:  fmt.Sprintf("RetailerOperators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRetailerOperatorsResponseMultiError(errors)
	}

	return nil
}

// ListRetailerOperatorsResponseMultiError is an error wrapping multiple
// validation errors returned by ListRetailerOperatorsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListRetailerOperatorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRetailerOperatorsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRetailerOperatorsResponseMultiError) AllErrors() []error { return m }

// ListRetailerOperatorsResponseValidationError is the validation error
// returned by ListRetailerOperatorsResponse.Validate if the designated
// constraints aren't met.
type ListRetailerOperatorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRetailerOperatorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRetailerOperatorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRetailerOperatorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRetailerOperatorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRetailerOperatorsResponseValidationError) ErrorName() string {
	return "ListRetailerOperatorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRetailerOperatorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRetailerOperatorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRetailerOperatorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRetailerOperatorsResponseValidationError{}

// Validate checks the field values on ListCompanyOperatorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCompanyOperatorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCompanyOperatorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCompanyOperatorsRequestMultiError, or nil if none found.
func (m *ListCompanyOperatorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCompanyOperatorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IncludeCount

	if len(errors) > 0 {
		return ListCompanyOperatorsRequestMultiError(errors)
	}

	return nil
}

// ListCompanyOperatorsRequestMultiError is an error wrapping multiple
// validation errors returned by ListCompanyOperatorsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListCompanyOperatorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCompanyOperatorsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCompanyOperatorsRequestMultiError) AllErrors() []error { return m }

// ListCompanyOperatorsRequestValidationError is the validation error returned
// by ListCompanyOperatorsRequest.Validate if the designated constraints
// aren't met.
type ListCompanyOperatorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCompanyOperatorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCompanyOperatorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCompanyOperatorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCompanyOperatorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCompanyOperatorsRequestValidationError) ErrorName() string {
	return "ListCompanyOperatorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCompanyOperatorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCompanyOperatorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCompanyOperatorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCompanyOperatorsRequestValidationError{}

// Validate checks the field values on ListCompanyOperatorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCompanyOperatorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCompanyOperatorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCompanyOperatorsResponseMultiError, or nil if none found.
func (m *ListCompanyOperatorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCompanyOperatorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCompanyOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCompanyOperatorsResponseValidationError{
						field:  fmt.Sprintf("CompanyOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCompanyOperatorsResponseValidationError{
						field:  fmt.Sprintf("CompanyOperators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCompanyOperatorsResponseValidationError{
					field:  fmt.Sprintf("CompanyOperators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCompanyOperatorsResponseMultiError(errors)
	}

	return nil
}

// ListCompanyOperatorsResponseMultiError is an error wrapping multiple
// validation errors returned by ListCompanyOperatorsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListCompanyOperatorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCompanyOperatorsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCompanyOperatorsResponseMultiError) AllErrors() []error { return m }

// ListCompanyOperatorsResponseValidationError is the validation error returned
// by ListCompanyOperatorsResponse.Validate if the designated constraints
// aren't met.
type ListCompanyOperatorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCompanyOperatorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCompanyOperatorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCompanyOperatorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCompanyOperatorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCompanyOperatorsResponseValidationError) ErrorName() string {
	return "ListCompanyOperatorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCompanyOperatorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCompanyOperatorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCompanyOperatorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCompanyOperatorsResponseValidationError{}

// Validate checks the field values on ListBottomOperatorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBottomOperatorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBottomOperatorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBottomOperatorsRequestMultiError, or nil if none found.
func (m *ListBottomOperatorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBottomOperatorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBottomOperatorsRequestMultiError(errors)
	}

	return nil
}

// ListBottomOperatorsRequestMultiError is an error wrapping multiple
// validation errors returned by ListBottomOperatorsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListBottomOperatorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBottomOperatorsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBottomOperatorsRequestMultiError) AllErrors() []error { return m }

// ListBottomOperatorsRequestValidationError is the validation error returned
// by ListBottomOperatorsRequest.Validate if the designated constraints aren't met.
type ListBottomOperatorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBottomOperatorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBottomOperatorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBottomOperatorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBottomOperatorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBottomOperatorsRequestValidationError) ErrorName() string {
	return "ListBottomOperatorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBottomOperatorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBottomOperatorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBottomOperatorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBottomOperatorsRequestValidationError{}

// Validate checks the field values on ListBottomOperatorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBottomOperatorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBottomOperatorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBottomOperatorsResponseMultiError, or nil if none found.
func (m *ListBottomOperatorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBottomOperatorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOperators() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBottomOperatorsResponseValidationError{
						field:  fmt.Sprintf("Operators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBottomOperatorsResponseValidationError{
						field:  fmt.Sprintf("Operators[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBottomOperatorsResponseValidationError{
					field:  fmt.Sprintf("Operators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBottomOperatorsResponseMultiError(errors)
	}

	return nil
}

// ListBottomOperatorsResponseMultiError is an error wrapping multiple
// validation errors returned by ListBottomOperatorsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListBottomOperatorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBottomOperatorsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBottomOperatorsResponseMultiError) AllErrors() []error { return m }

// ListBottomOperatorsResponseValidationError is the validation error returned
// by ListBottomOperatorsResponse.Validate if the designated constraints
// aren't met.
type ListBottomOperatorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBottomOperatorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBottomOperatorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBottomOperatorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBottomOperatorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBottomOperatorsResponseValidationError) ErrorName() string {
	return "ListBottomOperatorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBottomOperatorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBottomOperatorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBottomOperatorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBottomOperatorsResponseValidationError{}

// Validate checks the field values on UpdateOperatorStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOperatorStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOperatorStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOperatorStatusRequestMultiError, or nil if none found.
func (m *UpdateOperatorStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOperatorStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TargetOperatorId

	// no validation rules for TargetOperatorType

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOperatorStatusRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOperatorStatusRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOperatorStatusRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Action

	if len(errors) > 0 {
		return UpdateOperatorStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateOperatorStatusRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateOperatorStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateOperatorStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOperatorStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOperatorStatusRequestMultiError) AllErrors() []error { return m }

// UpdateOperatorStatusRequestValidationError is the validation error returned
// by UpdateOperatorStatusRequest.Validate if the designated constraints
// aren't met.
type UpdateOperatorStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOperatorStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOperatorStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOperatorStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOperatorStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOperatorStatusRequestValidationError) ErrorName() string {
	return "UpdateOperatorStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOperatorStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOperatorStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOperatorStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOperatorStatusRequestValidationError{}

// Validate checks the field values on UpdateOperatorStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOperatorStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOperatorStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOperatorStatusResponseMultiError, or nil if none found.
func (m *UpdateOperatorStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOperatorStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateOperatorStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateOperatorStatusResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOperatorStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateOperatorStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOperatorStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOperatorStatusResponseMultiError) AllErrors() []error { return m }

// UpdateOperatorStatusResponseValidationError is the validation error returned
// by UpdateOperatorStatusResponse.Validate if the designated constraints
// aren't met.
type UpdateOperatorStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOperatorStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOperatorStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOperatorStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOperatorStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOperatorStatusResponseValidationError) ErrorName() string {
	return "UpdateOperatorStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOperatorStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOperatorStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOperatorStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOperatorStatusResponseValidationError{}

// Validate checks the field values on ListAllOperatorsResponse_Operator with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListAllOperatorsResponse_Operator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllOperatorsResponse_Operator
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListAllOperatorsResponse_OperatorMultiError, or nil if none found.
func (m *ListAllOperatorsResponse_Operator) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllOperatorsResponse_Operator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RealOperatorId

	// no validation rules for OperatorName

	// no validation rules for Enabled

	// no validation rules for OperatorType

	// no validation rules for ParentOperatorId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAllOperatorsResponse_OperatorValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAllOperatorsResponse_OperatorValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAllOperatorsResponse_OperatorValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAllOperatorsResponse_OperatorMultiError(errors)
	}

	return nil
}

// ListAllOperatorsResponse_OperatorMultiError is an error wrapping multiple
// validation errors returned by
// ListAllOperatorsResponse_Operator.ValidateAll() if the designated
// constraints aren't met.
type ListAllOperatorsResponse_OperatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllOperatorsResponse_OperatorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllOperatorsResponse_OperatorMultiError) AllErrors() []error { return m }

// ListAllOperatorsResponse_OperatorValidationError is the validation error
// returned by ListAllOperatorsResponse_Operator.Validate if the designated
// constraints aren't met.
type ListAllOperatorsResponse_OperatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllOperatorsResponse_OperatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllOperatorsResponse_OperatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllOperatorsResponse_OperatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllOperatorsResponse_OperatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllOperatorsResponse_OperatorValidationError) ErrorName() string {
	return "ListAllOperatorsResponse_OperatorValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllOperatorsResponse_OperatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllOperatorsResponse_Operator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllOperatorsResponse_OperatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllOperatorsResponse_OperatorValidationError{}

// Validate checks the field values on
// ListRetailerOperatorsResponse_OperatorInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRetailerOperatorsResponse_OperatorInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListRetailerOperatorsResponse_OperatorInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListRetailerOperatorsResponse_OperatorInfoMultiError, or nil if none found.
func (m *ListRetailerOperatorsResponse_OperatorInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRetailerOperatorsResponse_OperatorInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRetailerOperatorsResponse_OperatorInfoValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRetailerOperatorsResponse_OperatorInfoValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRetailerOperatorsResponse_OperatorInfoValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RetailerOperatorName

	// no validation rules for CompanyOperatorCount

	// no validation rules for BottomOperatorCount

	// no validation rules for BottomLiveOperatorCount

	// no validation rules for Status

	// no validation rules for SelfCoOperationEnabled

	if len(errors) > 0 {
		return ListRetailerOperatorsResponse_OperatorInfoMultiError(errors)
	}

	return nil
}

// ListRetailerOperatorsResponse_OperatorInfoMultiError is an error wrapping
// multiple validation errors returned by
// ListRetailerOperatorsResponse_OperatorInfo.ValidateAll() if the designated
// constraints aren't met.
type ListRetailerOperatorsResponse_OperatorInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRetailerOperatorsResponse_OperatorInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRetailerOperatorsResponse_OperatorInfoMultiError) AllErrors() []error { return m }

// ListRetailerOperatorsResponse_OperatorInfoValidationError is the validation
// error returned by ListRetailerOperatorsResponse_OperatorInfo.Validate if
// the designated constraints aren't met.
type ListRetailerOperatorsResponse_OperatorInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRetailerOperatorsResponse_OperatorInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRetailerOperatorsResponse_OperatorInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRetailerOperatorsResponse_OperatorInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRetailerOperatorsResponse_OperatorInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRetailerOperatorsResponse_OperatorInfoValidationError) ErrorName() string {
	return "ListRetailerOperatorsResponse_OperatorInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ListRetailerOperatorsResponse_OperatorInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRetailerOperatorsResponse_OperatorInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRetailerOperatorsResponse_OperatorInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRetailerOperatorsResponse_OperatorInfoValidationError{}

// Validate checks the field values on
// ListCompanyOperatorsResponse_OperatorInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListCompanyOperatorsResponse_OperatorInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListCompanyOperatorsResponse_OperatorInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListCompanyOperatorsResponse_OperatorInfoMultiError, or nil if none found.
func (m *ListCompanyOperatorsResponse_OperatorInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCompanyOperatorsResponse_OperatorInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCompanyOperatorsResponse_OperatorInfoValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCompanyOperatorsResponse_OperatorInfoValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCompanyOperatorsResponse_OperatorInfoValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CompanyOperatorName

	// no validation rules for RetailerOperatorName

	// no validation rules for BottomOperatorCount

	// no validation rules for BottomLiveOperatorCount

	// no validation rules for Status

	if len(errors) > 0 {
		return ListCompanyOperatorsResponse_OperatorInfoMultiError(errors)
	}

	return nil
}

// ListCompanyOperatorsResponse_OperatorInfoMultiError is an error wrapping
// multiple validation errors returned by
// ListCompanyOperatorsResponse_OperatorInfo.ValidateAll() if the designated
// constraints aren't met.
type ListCompanyOperatorsResponse_OperatorInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCompanyOperatorsResponse_OperatorInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCompanyOperatorsResponse_OperatorInfoMultiError) AllErrors() []error { return m }

// ListCompanyOperatorsResponse_OperatorInfoValidationError is the validation
// error returned by ListCompanyOperatorsResponse_OperatorInfo.Validate if the
// designated constraints aren't met.
type ListCompanyOperatorsResponse_OperatorInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCompanyOperatorsResponse_OperatorInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCompanyOperatorsResponse_OperatorInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCompanyOperatorsResponse_OperatorInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCompanyOperatorsResponse_OperatorInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCompanyOperatorsResponse_OperatorInfoValidationError) ErrorName() string {
	return "ListCompanyOperatorsResponse_OperatorInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ListCompanyOperatorsResponse_OperatorInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCompanyOperatorsResponse_OperatorInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCompanyOperatorsResponse_OperatorInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCompanyOperatorsResponse_OperatorInfoValidationError{}

// Validate checks the field values on ListBottomOperatorsResponse_OperatorInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBottomOperatorsResponse_OperatorInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBottomOperatorsResponse_OperatorInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListBottomOperatorsResponse_OperatorInfoMultiError, or nil if none found.
func (m *ListBottomOperatorsResponse_OperatorInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBottomOperatorsResponse_OperatorInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListBottomOperatorsResponse_OperatorInfoValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListBottomOperatorsResponse_OperatorInfoValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListBottomOperatorsResponse_OperatorInfoValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BottomOperatorName

	// no validation rules for RetailerOperatorName

	// no validation rules for CompanyOperatorName

	// no validation rules for Mode

	// no validation rules for Status

	if len(errors) > 0 {
		return ListBottomOperatorsResponse_OperatorInfoMultiError(errors)
	}

	return nil
}

// ListBottomOperatorsResponse_OperatorInfoMultiError is an error wrapping
// multiple validation errors returned by
// ListBottomOperatorsResponse_OperatorInfo.ValidateAll() if the designated
// constraints aren't met.
type ListBottomOperatorsResponse_OperatorInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBottomOperatorsResponse_OperatorInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBottomOperatorsResponse_OperatorInfoMultiError) AllErrors() []error { return m }

// ListBottomOperatorsResponse_OperatorInfoValidationError is the validation
// error returned by ListBottomOperatorsResponse_OperatorInfo.Validate if the
// designated constraints aren't met.
type ListBottomOperatorsResponse_OperatorInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBottomOperatorsResponse_OperatorInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBottomOperatorsResponse_OperatorInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBottomOperatorsResponse_OperatorInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBottomOperatorsResponse_OperatorInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBottomOperatorsResponse_OperatorInfoValidationError) ErrorName() string {
	return "ListBottomOperatorsResponse_OperatorInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ListBottomOperatorsResponse_OperatorInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBottomOperatorsResponse_OperatorInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBottomOperatorsResponse_OperatorInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBottomOperatorsResponse_OperatorInfoValidationError{}
