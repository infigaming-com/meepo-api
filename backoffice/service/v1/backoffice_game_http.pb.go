// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_game.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/infigaming-com/meepo-api/game/service/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficeGameAddGameBetDisplayConfig = "/api.backoffice.service.v1.BackofficeGame/AddGameBetDisplayConfig"
const OperationBackofficeGameCreateTag = "/api.backoffice.service.v1.BackofficeGame/CreateTag"
const OperationBackofficeGameCreateTagConfig = "/api.backoffice.service.v1.BackofficeGame/CreateTagConfig"
const OperationBackofficeGameDeleteTag = "/api.backoffice.service.v1.BackofficeGame/DeleteTag"
const OperationBackofficeGameExportBets = "/api.backoffice.service.v1.BackofficeGame/ExportBets"
const OperationBackofficeGameExportCustomerStrikeReports = "/api.backoffice.service.v1.BackofficeGame/ExportCustomerStrikeReports"
const OperationBackofficeGameExportMultipleBets = "/api.backoffice.service.v1.BackofficeGame/ExportMultipleBets"
const OperationBackofficeGameExportSportEvents = "/api.backoffice.service.v1.BackofficeGame/ExportSportEvents"
const OperationBackofficeGameExportStakeVarianceBets = "/api.backoffice.service.v1.BackofficeGame/ExportStakeVarianceBets"
const OperationBackofficeGameExportUnpaidBets = "/api.backoffice.service.v1.BackofficeGame/ExportUnpaidBets"
const OperationBackofficeGameGetBetById = "/api.backoffice.service.v1.BackofficeGame/GetBetById"
const OperationBackofficeGameGetGameTransactionById = "/api.backoffice.service.v1.BackofficeGame/GetGameTransactionById"
const OperationBackofficeGameGetGameTransactionsForBet = "/api.backoffice.service.v1.BackofficeGame/GetGameTransactionsForBet"
const OperationBackofficeGameGetTag = "/api.backoffice.service.v1.BackofficeGame/GetTag"
const OperationBackofficeGameGetTagConfig = "/api.backoffice.service.v1.BackofficeGame/GetTagConfig"
const OperationBackofficeGameGetUserBetsOverview = "/api.backoffice.service.v1.BackofficeGame/GetUserBetsOverview"
const OperationBackofficeGameListBets = "/api.backoffice.service.v1.BackofficeGame/ListBets"
const OperationBackofficeGameListCategories = "/api.backoffice.service.v1.BackofficeGame/ListCategories"
const OperationBackofficeGameListCurrencies = "/api.backoffice.service.v1.BackofficeGame/ListCurrencies"
const OperationBackofficeGameListCustomerStrikeReports = "/api.backoffice.service.v1.BackofficeGame/ListCustomerStrikeReports"
const OperationBackofficeGameListFeeGroups = "/api.backoffice.service.v1.BackofficeGame/ListFeeGroups"
const OperationBackofficeGameListGameBetDisplayConfig = "/api.backoffice.service.v1.BackofficeGame/ListGameBetDisplayConfig"
const OperationBackofficeGameListGameTags = "/api.backoffice.service.v1.BackofficeGame/ListGameTags"
const OperationBackofficeGameListGames = "/api.backoffice.service.v1.BackofficeGame/ListGames"
const OperationBackofficeGameListMultipleBets = "/api.backoffice.service.v1.BackofficeGame/ListMultipleBets"
const OperationBackofficeGameListProviderRates = "/api.backoffice.service.v1.BackofficeGame/ListProviderRates"
const OperationBackofficeGameListProviders = "/api.backoffice.service.v1.BackofficeGame/ListProviders"
const OperationBackofficeGameListProvidersWithDetail = "/api.backoffice.service.v1.BackofficeGame/ListProvidersWithDetail"
const OperationBackofficeGameListStakeVarianceBets = "/api.backoffice.service.v1.BackofficeGame/ListStakeVarianceBets"
const OperationBackofficeGameListTags = "/api.backoffice.service.v1.BackofficeGame/ListTags"
const OperationBackofficeGameListThemes = "/api.backoffice.service.v1.BackofficeGame/ListThemes"
const OperationBackofficeGameListUnpaidBets = "/api.backoffice.service.v1.BackofficeGame/ListUnpaidBets"
const OperationBackofficeGameTagList = "/api.backoffice.service.v1.BackofficeGame/TagList"
const OperationBackofficeGameUpdateGame = "/api.backoffice.service.v1.BackofficeGame/UpdateGame"
const OperationBackofficeGameUpdateGameBetDisplayConfig = "/api.backoffice.service.v1.BackofficeGame/UpdateGameBetDisplayConfig"
const OperationBackofficeGameUpdateProvider = "/api.backoffice.service.v1.BackofficeGame/UpdateProvider"
const OperationBackofficeGameUpdateTag = "/api.backoffice.service.v1.BackofficeGame/UpdateTag"
const OperationBackofficeGameUpdateTagConfig = "/api.backoffice.service.v1.BackofficeGame/UpdateTagConfig"
const OperationBackofficeGameUpdateTagConfigGames = "/api.backoffice.service.v1.BackofficeGame/UpdateTagConfigGames"

type BackofficeGameHTTPServer interface {
	AddGameBetDisplayConfig(context.Context, *AddGameBetDisplayConfigRequest) (*v1.AddGameBetDisplayConfigResponse, error)
	CreateTag(context.Context, *CreateTagRequest) (*v1.CreateTagResponse, error)
	// CreateTagConfig Tag Config Management HTTP APIs
	CreateTagConfig(context.Context, *CreateTagConfigRequest) (*v1.CreateTagConfigResponse, error)
	DeleteTag(context.Context, *DeleteTagRequest) (*v1.DeleteTagResponse, error)
	ExportBets(context.Context, *ExportBetsRequest) (*v1.ExportBetsResponse, error)
	ExportCustomerStrikeReports(context.Context, *ExportCustomerStrikeReportsRequest) (*v1.ExportCustomerStrikeReportsResponse, error)
	ExportMultipleBets(context.Context, *ExportMultipleBetsRequest) (*v1.ExportMultipleBetsResponse, error)
	ExportSportEvents(context.Context, *ExportSportEventsRequest) (*v1.ExportSportEventsResponse, error)
	ExportStakeVarianceBets(context.Context, *ExportStakeVarianceBetsRequest) (*v1.ExportStakeVarianceBetsResponse, error)
	ExportUnpaidBets(context.Context, *ExportUnpaidBetsRequest) (*v1.ExportUnpaidBetsResponse, error)
	GetBetById(context.Context, *GetBetByIdRequest) (*v1.GetBetByIdResponse, error)
	GetGameTransactionById(context.Context, *GetGameTransactionByIdRequest) (*v1.GetGameTransactionByIdResponse, error)
	GetGameTransactionsForBet(context.Context, *GetGameTransactionsForBetRequest) (*GetGameTransactionsForBetResponse, error)
	GetTag(context.Context, *GetTagRequest) (*v1.GetTagResponse, error)
	GetTagConfig(context.Context, *GetTagConfigRequest) (*v1.GetTagConfigResponse, error)
	GetUserBetsOverview(context.Context, *GetUserBetsOverviewRequest) (*GetUserBetsOverviewResponse, error)
	ListBets(context.Context, *ListBetsRequest) (*ListBetsResponse, error)
	ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error)
	ListCurrencies(context.Context, *ListCurrenciesRequest) (*ListCurrenciesResponse, error)
	ListCustomerStrikeReports(context.Context, *ListCustomerStrikeReportsRequest) (*v1.ListCustomerStrikeReportsResponse, error)
	ListFeeGroups(context.Context, *ListFeeGroupsRequest) (*ListFeeGroupsResponse, error)
	ListGameBetDisplayConfig(context.Context, *ListGameBetDisplayConfigRequest) (*v1.ListGameBetDisplayConfigResponse, error)
	// ListGameTags Game Tag Management HTTP APIs
	ListGameTags(context.Context, *ListGameTagsRequest) (*v1.ListGameTagsResponse, error)
	ListGames(context.Context, *ListGamesRequest) (*ListGamesResponse, error)
	ListMultipleBets(context.Context, *ListMultipleBetsRequest) (*v1.ListMultipleBetsResponse, error)
	ListProviderRates(context.Context, *ListProviderRatesRequest) (*ListProviderRatesResponse, error)
	// ListProviders ListProviders returns all providers with optional filter for enabled status.
	// If not provided, all providers will be returned.
	// ListProviders is used for the providers drop down list and provider search.
	ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error)
	// ListProvidersWithDetail ListProvidersWithDetail returns all providers with detailed information,
	// including game count and enabled status.
	// ListProvidersWithDetail is used for the providers page.
	ListProvidersWithDetail(context.Context, *ListProvidersWithDetailRequest) (*ListProvidersWithDetailResponse, error)
	ListStakeVarianceBets(context.Context, *ListStakeVarianceBetsRequest) (*v1.ListStakeVarianceBetsResponse, error)
	ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error)
	ListThemes(context.Context, *ListThemesRequest) (*ListThemesResponse, error)
	ListUnpaidBets(context.Context, *ListUnpaidBetsRequest) (*v1.ListUnpaidBetsResponse, error)
	TagList(context.Context, *TagListRequest) (*v1.TagListResponse, error)
	UpdateGame(context.Context, *UpdateGameRequest) (*UpdateGameResponse, error)
	UpdateGameBetDisplayConfig(context.Context, *UpdateGameBetDisplayConfigRequest) (*v1.UpdateGameBetDisplayConfigResponse, error)
	UpdateProvider(context.Context, *UpdateProviderRequest) (*UpdateProviderResponse, error)
	UpdateTag(context.Context, *UpdateTagRequest) (*v1.UpdateTagResponse, error)
	UpdateTagConfig(context.Context, *UpdateTagConfigRequest) (*v1.UpdateTagConfigResponse, error)
	UpdateTagConfigGames(context.Context, *UpdateTagConfigGamesRequest) (*v1.UpdateTagConfigGamesResponse, error)
}

func RegisterBackofficeGameHTTPServer(s *http.Server, srv BackofficeGameHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/game/providers/list", _BackofficeGame_ListProviders1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/providers-with-detail/list", _BackofficeGame_ListProvidersWithDetail0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/categories/list", _BackofficeGame_ListCategories1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/fee-groups/list", _BackofficeGame_ListFeeGroups0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/tags/list", _BackofficeGame_ListTags0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/themes/list", _BackofficeGame_ListThemes0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/currencies/list", _BackofficeGame_ListCurrencies0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/list", _BackofficeGame_ListBets1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/export", _BackofficeGame_ExportBets0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/get", _BackofficeGame_GetBetById0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/overview/get", _BackofficeGame_GetUserBetsOverview0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/transactions/get", _BackofficeGame_GetGameTransactionsForBet0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/list", _BackofficeGame_ListGames1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/update", _BackofficeGame_UpdateGame0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/provider/update", _BackofficeGame_UpdateProvider0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/provider/rates/list", _BackofficeGame_ListProviderRates0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/transaction/get", _BackofficeGame_GetGameTransactionById0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/unpaid/list", _BackofficeGame_ListUnpaidBets0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/unpaid/export", _BackofficeGame_ExportUnpaidBets0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/multiple/list", _BackofficeGame_ListMultipleBets0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/multiple/export", _BackofficeGame_ExportMultipleBets0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/stake-variance/list", _BackofficeGame_ListStakeVarianceBets0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/stake-variance/export", _BackofficeGame_ExportStakeVarianceBets0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/customer-strike-reports/list", _BackofficeGame_ListCustomerStrikeReports0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/customer-strike-reports/export", _BackofficeGame_ExportCustomerStrikeReports0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/sport-events/export", _BackofficeGame_ExportSportEvents0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bet/dispaly/config/add", _BackofficeGame_AddGameBetDisplayConfig0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bet/dispaly/config/update", _BackofficeGame_UpdateGameBetDisplayConfig0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bet/dispaly/config/list", _BackofficeGame_ListGameBetDisplayConfig0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/tags/list", _BackofficeGame_TagList0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/tags/create", _BackofficeGame_CreateTag0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/tags/update", _BackofficeGame_UpdateTag0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/tags/delete", _BackofficeGame_DeleteTag0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/tags/get", _BackofficeGame_GetTag0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/tag-configs/create", _BackofficeGame_CreateTagConfig0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/tag-configs/update", _BackofficeGame_UpdateTagConfig0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/tag-configs/get", _BackofficeGame_GetTagConfig0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/tag-configs/games/update", _BackofficeGame_UpdateTagConfigGames0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/game-tags/list", _BackofficeGame_ListGameTags0_HTTP_Handler(srv))
}

func _BackofficeGame_ListProviders1_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProvidersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListProviders)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProviders(ctx, req.(*ListProvidersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProvidersResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListProvidersWithDetail0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProvidersWithDetailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListProvidersWithDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProvidersWithDetail(ctx, req.(*ListProvidersWithDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProvidersWithDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListCategories1_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCategoriesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListCategories)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCategories(ctx, req.(*ListCategoriesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCategoriesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListFeeGroups0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFeeGroupsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListFeeGroups)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFeeGroups(ctx, req.(*ListFeeGroupsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFeeGroupsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListTags0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTagsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListTags)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTags(ctx, req.(*ListTagsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTagsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListThemes0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListThemesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListThemes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListThemes(ctx, req.(*ListThemesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListThemesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListCurrencies0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCurrenciesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListCurrencies)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCurrencies(ctx, req.(*ListCurrenciesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCurrenciesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListBets1_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBetsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListBets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBets(ctx, req.(*ListBetsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBetsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ExportBets0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExportBetsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameExportBets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExportBets(ctx, req.(*ExportBetsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ExportBetsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_GetBetById0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBetByIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameGetBetById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBetById(ctx, req.(*GetBetByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetBetByIdResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_GetUserBetsOverview0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserBetsOverviewRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameGetUserBetsOverview)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserBetsOverview(ctx, req.(*GetUserBetsOverviewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserBetsOverviewResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_GetGameTransactionsForBet0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGameTransactionsForBetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameGetGameTransactionsForBet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGameTransactionsForBet(ctx, req.(*GetGameTransactionsForBetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGameTransactionsForBetResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListGames1_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGamesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListGames)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGames(ctx, req.(*ListGamesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGamesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_UpdateGame0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateGameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameUpdateGame)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateGame(ctx, req.(*UpdateGameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateGameResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_UpdateProvider0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateProviderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameUpdateProvider)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateProvider(ctx, req.(*UpdateProviderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateProviderResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListProviderRates0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProviderRatesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListProviderRates)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProviderRates(ctx, req.(*ListProviderRatesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProviderRatesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_GetGameTransactionById0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGameTransactionByIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameGetGameTransactionById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGameTransactionById(ctx, req.(*GetGameTransactionByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetGameTransactionByIdResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListUnpaidBets0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUnpaidBetsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListUnpaidBets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUnpaidBets(ctx, req.(*ListUnpaidBetsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListUnpaidBetsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ExportUnpaidBets0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExportUnpaidBetsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameExportUnpaidBets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExportUnpaidBets(ctx, req.(*ExportUnpaidBetsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ExportUnpaidBetsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListMultipleBets0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMultipleBetsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListMultipleBets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMultipleBets(ctx, req.(*ListMultipleBetsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListMultipleBetsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ExportMultipleBets0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExportMultipleBetsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameExportMultipleBets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExportMultipleBets(ctx, req.(*ExportMultipleBetsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ExportMultipleBetsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListStakeVarianceBets0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListStakeVarianceBetsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListStakeVarianceBets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListStakeVarianceBets(ctx, req.(*ListStakeVarianceBetsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListStakeVarianceBetsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ExportStakeVarianceBets0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExportStakeVarianceBetsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameExportStakeVarianceBets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExportStakeVarianceBets(ctx, req.(*ExportStakeVarianceBetsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ExportStakeVarianceBetsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListCustomerStrikeReports0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCustomerStrikeReportsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListCustomerStrikeReports)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCustomerStrikeReports(ctx, req.(*ListCustomerStrikeReportsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListCustomerStrikeReportsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ExportCustomerStrikeReports0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExportCustomerStrikeReportsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameExportCustomerStrikeReports)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExportCustomerStrikeReports(ctx, req.(*ExportCustomerStrikeReportsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ExportCustomerStrikeReportsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ExportSportEvents0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExportSportEventsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameExportSportEvents)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExportSportEvents(ctx, req.(*ExportSportEventsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ExportSportEventsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_AddGameBetDisplayConfig0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddGameBetDisplayConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameAddGameBetDisplayConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddGameBetDisplayConfig(ctx, req.(*AddGameBetDisplayConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.AddGameBetDisplayConfigResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_UpdateGameBetDisplayConfig0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateGameBetDisplayConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameUpdateGameBetDisplayConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateGameBetDisplayConfig(ctx, req.(*UpdateGameBetDisplayConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UpdateGameBetDisplayConfigResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListGameBetDisplayConfig0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGameBetDisplayConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListGameBetDisplayConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGameBetDisplayConfig(ctx, req.(*ListGameBetDisplayConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListGameBetDisplayConfigResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_TagList0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TagListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameTagList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TagList(ctx, req.(*TagListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.TagListResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_CreateTag0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameCreateTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTag(ctx, req.(*CreateTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.CreateTagResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_UpdateTag0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameUpdateTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTag(ctx, req.(*UpdateTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UpdateTagResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_DeleteTag0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameDeleteTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTag(ctx, req.(*DeleteTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DeleteTagResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_GetTag0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameGetTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTag(ctx, req.(*GetTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetTagResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_CreateTagConfig0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTagConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameCreateTagConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTagConfig(ctx, req.(*CreateTagConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.CreateTagConfigResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_UpdateTagConfig0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTagConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameUpdateTagConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTagConfig(ctx, req.(*UpdateTagConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UpdateTagConfigResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_GetTagConfig0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTagConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameGetTagConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTagConfig(ctx, req.(*GetTagConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetTagConfigResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_UpdateTagConfigGames0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTagConfigGamesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameUpdateTagConfigGames)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTagConfigGames(ctx, req.(*UpdateTagConfigGamesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UpdateTagConfigGamesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListGameTags0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGameTagsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListGameTags)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGameTags(ctx, req.(*ListGameTagsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListGameTagsResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficeGameHTTPClient interface {
	AddGameBetDisplayConfig(ctx context.Context, req *AddGameBetDisplayConfigRequest, opts ...http.CallOption) (rsp *v1.AddGameBetDisplayConfigResponse, err error)
	CreateTag(ctx context.Context, req *CreateTagRequest, opts ...http.CallOption) (rsp *v1.CreateTagResponse, err error)
	CreateTagConfig(ctx context.Context, req *CreateTagConfigRequest, opts ...http.CallOption) (rsp *v1.CreateTagConfigResponse, err error)
	DeleteTag(ctx context.Context, req *DeleteTagRequest, opts ...http.CallOption) (rsp *v1.DeleteTagResponse, err error)
	ExportBets(ctx context.Context, req *ExportBetsRequest, opts ...http.CallOption) (rsp *v1.ExportBetsResponse, err error)
	ExportCustomerStrikeReports(ctx context.Context, req *ExportCustomerStrikeReportsRequest, opts ...http.CallOption) (rsp *v1.ExportCustomerStrikeReportsResponse, err error)
	ExportMultipleBets(ctx context.Context, req *ExportMultipleBetsRequest, opts ...http.CallOption) (rsp *v1.ExportMultipleBetsResponse, err error)
	ExportSportEvents(ctx context.Context, req *ExportSportEventsRequest, opts ...http.CallOption) (rsp *v1.ExportSportEventsResponse, err error)
	ExportStakeVarianceBets(ctx context.Context, req *ExportStakeVarianceBetsRequest, opts ...http.CallOption) (rsp *v1.ExportStakeVarianceBetsResponse, err error)
	ExportUnpaidBets(ctx context.Context, req *ExportUnpaidBetsRequest, opts ...http.CallOption) (rsp *v1.ExportUnpaidBetsResponse, err error)
	GetBetById(ctx context.Context, req *GetBetByIdRequest, opts ...http.CallOption) (rsp *v1.GetBetByIdResponse, err error)
	GetGameTransactionById(ctx context.Context, req *GetGameTransactionByIdRequest, opts ...http.CallOption) (rsp *v1.GetGameTransactionByIdResponse, err error)
	GetGameTransactionsForBet(ctx context.Context, req *GetGameTransactionsForBetRequest, opts ...http.CallOption) (rsp *GetGameTransactionsForBetResponse, err error)
	GetTag(ctx context.Context, req *GetTagRequest, opts ...http.CallOption) (rsp *v1.GetTagResponse, err error)
	GetTagConfig(ctx context.Context, req *GetTagConfigRequest, opts ...http.CallOption) (rsp *v1.GetTagConfigResponse, err error)
	GetUserBetsOverview(ctx context.Context, req *GetUserBetsOverviewRequest, opts ...http.CallOption) (rsp *GetUserBetsOverviewResponse, err error)
	ListBets(ctx context.Context, req *ListBetsRequest, opts ...http.CallOption) (rsp *ListBetsResponse, err error)
	ListCategories(ctx context.Context, req *ListCategoriesRequest, opts ...http.CallOption) (rsp *ListCategoriesResponse, err error)
	ListCurrencies(ctx context.Context, req *ListCurrenciesRequest, opts ...http.CallOption) (rsp *ListCurrenciesResponse, err error)
	ListCustomerStrikeReports(ctx context.Context, req *ListCustomerStrikeReportsRequest, opts ...http.CallOption) (rsp *v1.ListCustomerStrikeReportsResponse, err error)
	ListFeeGroups(ctx context.Context, req *ListFeeGroupsRequest, opts ...http.CallOption) (rsp *ListFeeGroupsResponse, err error)
	ListGameBetDisplayConfig(ctx context.Context, req *ListGameBetDisplayConfigRequest, opts ...http.CallOption) (rsp *v1.ListGameBetDisplayConfigResponse, err error)
	ListGameTags(ctx context.Context, req *ListGameTagsRequest, opts ...http.CallOption) (rsp *v1.ListGameTagsResponse, err error)
	ListGames(ctx context.Context, req *ListGamesRequest, opts ...http.CallOption) (rsp *ListGamesResponse, err error)
	ListMultipleBets(ctx context.Context, req *ListMultipleBetsRequest, opts ...http.CallOption) (rsp *v1.ListMultipleBetsResponse, err error)
	ListProviderRates(ctx context.Context, req *ListProviderRatesRequest, opts ...http.CallOption) (rsp *ListProviderRatesResponse, err error)
	ListProviders(ctx context.Context, req *ListProvidersRequest, opts ...http.CallOption) (rsp *ListProvidersResponse, err error)
	ListProvidersWithDetail(ctx context.Context, req *ListProvidersWithDetailRequest, opts ...http.CallOption) (rsp *ListProvidersWithDetailResponse, err error)
	ListStakeVarianceBets(ctx context.Context, req *ListStakeVarianceBetsRequest, opts ...http.CallOption) (rsp *v1.ListStakeVarianceBetsResponse, err error)
	ListTags(ctx context.Context, req *ListTagsRequest, opts ...http.CallOption) (rsp *ListTagsResponse, err error)
	ListThemes(ctx context.Context, req *ListThemesRequest, opts ...http.CallOption) (rsp *ListThemesResponse, err error)
	ListUnpaidBets(ctx context.Context, req *ListUnpaidBetsRequest, opts ...http.CallOption) (rsp *v1.ListUnpaidBetsResponse, err error)
	TagList(ctx context.Context, req *TagListRequest, opts ...http.CallOption) (rsp *v1.TagListResponse, err error)
	UpdateGame(ctx context.Context, req *UpdateGameRequest, opts ...http.CallOption) (rsp *UpdateGameResponse, err error)
	UpdateGameBetDisplayConfig(ctx context.Context, req *UpdateGameBetDisplayConfigRequest, opts ...http.CallOption) (rsp *v1.UpdateGameBetDisplayConfigResponse, err error)
	UpdateProvider(ctx context.Context, req *UpdateProviderRequest, opts ...http.CallOption) (rsp *UpdateProviderResponse, err error)
	UpdateTag(ctx context.Context, req *UpdateTagRequest, opts ...http.CallOption) (rsp *v1.UpdateTagResponse, err error)
	UpdateTagConfig(ctx context.Context, req *UpdateTagConfigRequest, opts ...http.CallOption) (rsp *v1.UpdateTagConfigResponse, err error)
	UpdateTagConfigGames(ctx context.Context, req *UpdateTagConfigGamesRequest, opts ...http.CallOption) (rsp *v1.UpdateTagConfigGamesResponse, err error)
}

type BackofficeGameHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficeGameHTTPClient(client *http.Client) BackofficeGameHTTPClient {
	return &BackofficeGameHTTPClientImpl{client}
}

func (c *BackofficeGameHTTPClientImpl) AddGameBetDisplayConfig(ctx context.Context, in *AddGameBetDisplayConfigRequest, opts ...http.CallOption) (*v1.AddGameBetDisplayConfigResponse, error) {
	var out v1.AddGameBetDisplayConfigResponse
	pattern := "/v1/backoffice/game/bet/dispaly/config/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameAddGameBetDisplayConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...http.CallOption) (*v1.CreateTagResponse, error) {
	var out v1.CreateTagResponse
	pattern := "/v1/backoffice/game/tags/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameCreateTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) CreateTagConfig(ctx context.Context, in *CreateTagConfigRequest, opts ...http.CallOption) (*v1.CreateTagConfigResponse, error) {
	var out v1.CreateTagConfigResponse
	pattern := "/v1/backoffice/game/tag-configs/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameCreateTagConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...http.CallOption) (*v1.DeleteTagResponse, error) {
	var out v1.DeleteTagResponse
	pattern := "/v1/backoffice/game/tags/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameDeleteTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ExportBets(ctx context.Context, in *ExportBetsRequest, opts ...http.CallOption) (*v1.ExportBetsResponse, error) {
	var out v1.ExportBetsResponse
	pattern := "/v1/backoffice/game/bets/export"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameExportBets))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ExportCustomerStrikeReports(ctx context.Context, in *ExportCustomerStrikeReportsRequest, opts ...http.CallOption) (*v1.ExportCustomerStrikeReportsResponse, error) {
	var out v1.ExportCustomerStrikeReportsResponse
	pattern := "/v1/backoffice/game/customer-strike-reports/export"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameExportCustomerStrikeReports))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ExportMultipleBets(ctx context.Context, in *ExportMultipleBetsRequest, opts ...http.CallOption) (*v1.ExportMultipleBetsResponse, error) {
	var out v1.ExportMultipleBetsResponse
	pattern := "/v1/backoffice/game/bets/multiple/export"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameExportMultipleBets))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ExportSportEvents(ctx context.Context, in *ExportSportEventsRequest, opts ...http.CallOption) (*v1.ExportSportEventsResponse, error) {
	var out v1.ExportSportEventsResponse
	pattern := "/v1/backoffice/game/sport-events/export"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameExportSportEvents))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ExportStakeVarianceBets(ctx context.Context, in *ExportStakeVarianceBetsRequest, opts ...http.CallOption) (*v1.ExportStakeVarianceBetsResponse, error) {
	var out v1.ExportStakeVarianceBetsResponse
	pattern := "/v1/backoffice/game/bets/stake-variance/export"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameExportStakeVarianceBets))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ExportUnpaidBets(ctx context.Context, in *ExportUnpaidBetsRequest, opts ...http.CallOption) (*v1.ExportUnpaidBetsResponse, error) {
	var out v1.ExportUnpaidBetsResponse
	pattern := "/v1/backoffice/game/bets/unpaid/export"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameExportUnpaidBets))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) GetBetById(ctx context.Context, in *GetBetByIdRequest, opts ...http.CallOption) (*v1.GetBetByIdResponse, error) {
	var out v1.GetBetByIdResponse
	pattern := "/v1/backoffice/game/bets/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameGetBetById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) GetGameTransactionById(ctx context.Context, in *GetGameTransactionByIdRequest, opts ...http.CallOption) (*v1.GetGameTransactionByIdResponse, error) {
	var out v1.GetGameTransactionByIdResponse
	pattern := "/v1/backoffice/game/transaction/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameGetGameTransactionById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) GetGameTransactionsForBet(ctx context.Context, in *GetGameTransactionsForBetRequest, opts ...http.CallOption) (*GetGameTransactionsForBetResponse, error) {
	var out GetGameTransactionsForBetResponse
	pattern := "/v1/backoffice/game/bets/transactions/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameGetGameTransactionsForBet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) GetTag(ctx context.Context, in *GetTagRequest, opts ...http.CallOption) (*v1.GetTagResponse, error) {
	var out v1.GetTagResponse
	pattern := "/v1/backoffice/game/tags/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameGetTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) GetTagConfig(ctx context.Context, in *GetTagConfigRequest, opts ...http.CallOption) (*v1.GetTagConfigResponse, error) {
	var out v1.GetTagConfigResponse
	pattern := "/v1/backoffice/game/tag-configs/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameGetTagConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) GetUserBetsOverview(ctx context.Context, in *GetUserBetsOverviewRequest, opts ...http.CallOption) (*GetUserBetsOverviewResponse, error) {
	var out GetUserBetsOverviewResponse
	pattern := "/v1/backoffice/game/bets/overview/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameGetUserBetsOverview))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListBets(ctx context.Context, in *ListBetsRequest, opts ...http.CallOption) (*ListBetsResponse, error) {
	var out ListBetsResponse
	pattern := "/v1/backoffice/game/bets/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListBets))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...http.CallOption) (*ListCategoriesResponse, error) {
	var out ListCategoriesResponse
	pattern := "/v1/backoffice/game/categories/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListCategories))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListCurrencies(ctx context.Context, in *ListCurrenciesRequest, opts ...http.CallOption) (*ListCurrenciesResponse, error) {
	var out ListCurrenciesResponse
	pattern := "/v1/backoffice/game/currencies/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListCurrencies))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListCustomerStrikeReports(ctx context.Context, in *ListCustomerStrikeReportsRequest, opts ...http.CallOption) (*v1.ListCustomerStrikeReportsResponse, error) {
	var out v1.ListCustomerStrikeReportsResponse
	pattern := "/v1/backoffice/game/customer-strike-reports/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListCustomerStrikeReports))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListFeeGroups(ctx context.Context, in *ListFeeGroupsRequest, opts ...http.CallOption) (*ListFeeGroupsResponse, error) {
	var out ListFeeGroupsResponse
	pattern := "/v1/backoffice/game/fee-groups/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListFeeGroups))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListGameBetDisplayConfig(ctx context.Context, in *ListGameBetDisplayConfigRequest, opts ...http.CallOption) (*v1.ListGameBetDisplayConfigResponse, error) {
	var out v1.ListGameBetDisplayConfigResponse
	pattern := "/v1/backoffice/game/bet/dispaly/config/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListGameBetDisplayConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListGameTags(ctx context.Context, in *ListGameTagsRequest, opts ...http.CallOption) (*v1.ListGameTagsResponse, error) {
	var out v1.ListGameTagsResponse
	pattern := "/v1/backoffice/game/game-tags/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListGameTags))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListGames(ctx context.Context, in *ListGamesRequest, opts ...http.CallOption) (*ListGamesResponse, error) {
	var out ListGamesResponse
	pattern := "/v1/backoffice/game/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListGames))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListMultipleBets(ctx context.Context, in *ListMultipleBetsRequest, opts ...http.CallOption) (*v1.ListMultipleBetsResponse, error) {
	var out v1.ListMultipleBetsResponse
	pattern := "/v1/backoffice/game/bets/multiple/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListMultipleBets))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListProviderRates(ctx context.Context, in *ListProviderRatesRequest, opts ...http.CallOption) (*ListProviderRatesResponse, error) {
	var out ListProviderRatesResponse
	pattern := "/v1/backoffice/game/provider/rates/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListProviderRates))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...http.CallOption) (*ListProvidersResponse, error) {
	var out ListProvidersResponse
	pattern := "/v1/backoffice/game/providers/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListProviders))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListProvidersWithDetail(ctx context.Context, in *ListProvidersWithDetailRequest, opts ...http.CallOption) (*ListProvidersWithDetailResponse, error) {
	var out ListProvidersWithDetailResponse
	pattern := "/v1/backoffice/game/providers-with-detail/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListProvidersWithDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListStakeVarianceBets(ctx context.Context, in *ListStakeVarianceBetsRequest, opts ...http.CallOption) (*v1.ListStakeVarianceBetsResponse, error) {
	var out v1.ListStakeVarianceBetsResponse
	pattern := "/v1/backoffice/game/bets/stake-variance/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListStakeVarianceBets))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListTags(ctx context.Context, in *ListTagsRequest, opts ...http.CallOption) (*ListTagsResponse, error) {
	var out ListTagsResponse
	pattern := "/v1/backoffice/game/tags/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListTags))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListThemes(ctx context.Context, in *ListThemesRequest, opts ...http.CallOption) (*ListThemesResponse, error) {
	var out ListThemesResponse
	pattern := "/v1/backoffice/game/themes/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListThemes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListUnpaidBets(ctx context.Context, in *ListUnpaidBetsRequest, opts ...http.CallOption) (*v1.ListUnpaidBetsResponse, error) {
	var out v1.ListUnpaidBetsResponse
	pattern := "/v1/backoffice/game/bets/unpaid/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListUnpaidBets))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) TagList(ctx context.Context, in *TagListRequest, opts ...http.CallOption) (*v1.TagListResponse, error) {
	var out v1.TagListResponse
	pattern := "/v1/backoffice/game/tags/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameTagList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) UpdateGame(ctx context.Context, in *UpdateGameRequest, opts ...http.CallOption) (*UpdateGameResponse, error) {
	var out UpdateGameResponse
	pattern := "/v1/backoffice/game/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameUpdateGame))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) UpdateGameBetDisplayConfig(ctx context.Context, in *UpdateGameBetDisplayConfigRequest, opts ...http.CallOption) (*v1.UpdateGameBetDisplayConfigResponse, error) {
	var out v1.UpdateGameBetDisplayConfigResponse
	pattern := "/v1/backoffice/game/bet/dispaly/config/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameUpdateGameBetDisplayConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) UpdateProvider(ctx context.Context, in *UpdateProviderRequest, opts ...http.CallOption) (*UpdateProviderResponse, error) {
	var out UpdateProviderResponse
	pattern := "/v1/backoffice/game/provider/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameUpdateProvider))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...http.CallOption) (*v1.UpdateTagResponse, error) {
	var out v1.UpdateTagResponse
	pattern := "/v1/backoffice/game/tags/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameUpdateTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) UpdateTagConfig(ctx context.Context, in *UpdateTagConfigRequest, opts ...http.CallOption) (*v1.UpdateTagConfigResponse, error) {
	var out v1.UpdateTagConfigResponse
	pattern := "/v1/backoffice/game/tag-configs/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameUpdateTagConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) UpdateTagConfigGames(ctx context.Context, in *UpdateTagConfigGamesRequest, opts ...http.CallOption) (*v1.UpdateTagConfigGamesResponse, error) {
	var out v1.UpdateTagConfigGamesResponse
	pattern := "/v1/backoffice/game/tag-configs/games/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameUpdateTagConfigGames))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
