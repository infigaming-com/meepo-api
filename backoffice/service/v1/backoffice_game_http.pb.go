// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_game.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficeGameGetBetById = "/api.backoffice.service.v1.BackofficeGame/GetBetById"
const OperationBackofficeGameGetGameTransactionsForBet = "/api.backoffice.service.v1.BackofficeGame/GetGameTransactionsForBet"
const OperationBackofficeGameGetUserBetsOverview = "/api.backoffice.service.v1.BackofficeGame/GetUserBetsOverview"
const OperationBackofficeGameListBets = "/api.backoffice.service.v1.BackofficeGame/ListBets"
const OperationBackofficeGameListCategories = "/api.backoffice.service.v1.BackofficeGame/ListCategories"
const OperationBackofficeGameListCurrencies = "/api.backoffice.service.v1.BackofficeGame/ListCurrencies"
const OperationBackofficeGameListFeeGroups = "/api.backoffice.service.v1.BackofficeGame/ListFeeGroups"
const OperationBackofficeGameListGames = "/api.backoffice.service.v1.BackofficeGame/ListGames"
const OperationBackofficeGameListProviders = "/api.backoffice.service.v1.BackofficeGame/ListProviders"
const OperationBackofficeGameListProvidersWithDetail = "/api.backoffice.service.v1.BackofficeGame/ListProvidersWithDetail"
const OperationBackofficeGameListTags = "/api.backoffice.service.v1.BackofficeGame/ListTags"
const OperationBackofficeGameListThemes = "/api.backoffice.service.v1.BackofficeGame/ListThemes"
const OperationBackofficeGameUpdateGame = "/api.backoffice.service.v1.BackofficeGame/UpdateGame"
const OperationBackofficeGameUpdateProvider = "/api.backoffice.service.v1.BackofficeGame/UpdateProvider"

type BackofficeGameHTTPServer interface {
	GetBetById(context.Context, *GetBetByIdRequest) (*GetBetByIdResponse, error)
	GetGameTransactionsForBet(context.Context, *GetGameTransactionsForBetRequest) (*GetGameTransactionsForBetResponse, error)
	GetUserBetsOverview(context.Context, *GetUserBetsOverviewRequest) (*GetUserBetsOverviewResponse, error)
	ListBets(context.Context, *ListBetsRequest) (*ListBetsResponse, error)
	ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error)
	ListCurrencies(context.Context, *ListCurrenciesRequest) (*ListCurrenciesResponse, error)
	ListFeeGroups(context.Context, *ListFeeGroupsRequest) (*ListFeeGroupsResponse, error)
	ListGames(context.Context, *ListGamesRequest) (*ListGamesResponse, error)
	// ListProviders ListProviders returns all providers with optional filter for enabled status.
	// If not provided, all providers will be returned.
	// ListProviders is used for the providers drop down list and provider search.
	ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error)
	// ListProvidersWithDetail ListProvidersWithDetail returns all providers with detailed information,
	// including game count and enabled status.
	// ListProvidersWithDetail is used for the providers page.
	ListProvidersWithDetail(context.Context, *ListProvidersWithDetailRequest) (*ListProvidersWithDetailResponse, error)
	ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error)
	ListThemes(context.Context, *ListThemesRequest) (*ListThemesResponse, error)
	UpdateGame(context.Context, *UpdateGameRequest) (*UpdateGameResponse, error)
	UpdateProvider(context.Context, *UpdateProviderRequest) (*UpdateProviderResponse, error)
}

func RegisterBackofficeGameHTTPServer(s *http.Server, srv BackofficeGameHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/game/providers/list", _BackofficeGame_ListProviders0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/providers-with-detail/list", _BackofficeGame_ListProvidersWithDetail0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/categories/list", _BackofficeGame_ListCategories0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/fee-groups/list", _BackofficeGame_ListFeeGroups0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/tags/list", _BackofficeGame_ListTags0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/themes/list", _BackofficeGame_ListThemes0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/currencies/list", _BackofficeGame_ListCurrencies0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/list", _BackofficeGame_ListBets0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/get", _BackofficeGame_GetBetById0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/overview/get", _BackofficeGame_GetUserBetsOverview0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/transactions/get", _BackofficeGame_GetGameTransactionsForBet0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/list", _BackofficeGame_ListGames0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/update", _BackofficeGame_UpdateGame0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/provider/update", _BackofficeGame_UpdateProvider0_HTTP_Handler(srv))
}

func _BackofficeGame_ListProviders0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProvidersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListProviders)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProviders(ctx, req.(*ListProvidersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProvidersResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListProvidersWithDetail0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProvidersWithDetailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListProvidersWithDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProvidersWithDetail(ctx, req.(*ListProvidersWithDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProvidersWithDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListCategories0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCategoriesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListCategories)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCategories(ctx, req.(*ListCategoriesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCategoriesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListFeeGroups0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFeeGroupsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListFeeGroups)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFeeGroups(ctx, req.(*ListFeeGroupsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFeeGroupsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListTags0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTagsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListTags)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTags(ctx, req.(*ListTagsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTagsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListThemes0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListThemesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListThemes)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListThemes(ctx, req.(*ListThemesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListThemesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListCurrencies0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCurrenciesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListCurrencies)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCurrencies(ctx, req.(*ListCurrenciesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCurrenciesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListBets0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBetsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListBets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBets(ctx, req.(*ListBetsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBetsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_GetBetById0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBetByIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameGetBetById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBetById(ctx, req.(*GetBetByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBetByIdResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_GetUserBetsOverview0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserBetsOverviewRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameGetUserBetsOverview)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserBetsOverview(ctx, req.(*GetUserBetsOverviewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserBetsOverviewResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_GetGameTransactionsForBet0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGameTransactionsForBetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameGetGameTransactionsForBet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGameTransactionsForBet(ctx, req.(*GetGameTransactionsForBetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGameTransactionsForBetResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_ListGames0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGamesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameListGames)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGames(ctx, req.(*ListGamesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGamesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_UpdateGame0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateGameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameUpdateGame)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateGame(ctx, req.(*UpdateGameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateGameResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeGame_UpdateProvider0_HTTP_Handler(srv BackofficeGameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateProviderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGameUpdateProvider)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateProvider(ctx, req.(*UpdateProviderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateProviderResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficeGameHTTPClient interface {
	GetBetById(ctx context.Context, req *GetBetByIdRequest, opts ...http.CallOption) (rsp *GetBetByIdResponse, err error)
	GetGameTransactionsForBet(ctx context.Context, req *GetGameTransactionsForBetRequest, opts ...http.CallOption) (rsp *GetGameTransactionsForBetResponse, err error)
	GetUserBetsOverview(ctx context.Context, req *GetUserBetsOverviewRequest, opts ...http.CallOption) (rsp *GetUserBetsOverviewResponse, err error)
	ListBets(ctx context.Context, req *ListBetsRequest, opts ...http.CallOption) (rsp *ListBetsResponse, err error)
	ListCategories(ctx context.Context, req *ListCategoriesRequest, opts ...http.CallOption) (rsp *ListCategoriesResponse, err error)
	ListCurrencies(ctx context.Context, req *ListCurrenciesRequest, opts ...http.CallOption) (rsp *ListCurrenciesResponse, err error)
	ListFeeGroups(ctx context.Context, req *ListFeeGroupsRequest, opts ...http.CallOption) (rsp *ListFeeGroupsResponse, err error)
	ListGames(ctx context.Context, req *ListGamesRequest, opts ...http.CallOption) (rsp *ListGamesResponse, err error)
	ListProviders(ctx context.Context, req *ListProvidersRequest, opts ...http.CallOption) (rsp *ListProvidersResponse, err error)
	ListProvidersWithDetail(ctx context.Context, req *ListProvidersWithDetailRequest, opts ...http.CallOption) (rsp *ListProvidersWithDetailResponse, err error)
	ListTags(ctx context.Context, req *ListTagsRequest, opts ...http.CallOption) (rsp *ListTagsResponse, err error)
	ListThemes(ctx context.Context, req *ListThemesRequest, opts ...http.CallOption) (rsp *ListThemesResponse, err error)
	UpdateGame(ctx context.Context, req *UpdateGameRequest, opts ...http.CallOption) (rsp *UpdateGameResponse, err error)
	UpdateProvider(ctx context.Context, req *UpdateProviderRequest, opts ...http.CallOption) (rsp *UpdateProviderResponse, err error)
}

type BackofficeGameHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficeGameHTTPClient(client *http.Client) BackofficeGameHTTPClient {
	return &BackofficeGameHTTPClientImpl{client}
}

func (c *BackofficeGameHTTPClientImpl) GetBetById(ctx context.Context, in *GetBetByIdRequest, opts ...http.CallOption) (*GetBetByIdResponse, error) {
	var out GetBetByIdResponse
	pattern := "/v1/backoffice/game/bets/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameGetBetById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) GetGameTransactionsForBet(ctx context.Context, in *GetGameTransactionsForBetRequest, opts ...http.CallOption) (*GetGameTransactionsForBetResponse, error) {
	var out GetGameTransactionsForBetResponse
	pattern := "/v1/backoffice/game/bets/transactions/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameGetGameTransactionsForBet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) GetUserBetsOverview(ctx context.Context, in *GetUserBetsOverviewRequest, opts ...http.CallOption) (*GetUserBetsOverviewResponse, error) {
	var out GetUserBetsOverviewResponse
	pattern := "/v1/backoffice/game/bets/overview/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameGetUserBetsOverview))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListBets(ctx context.Context, in *ListBetsRequest, opts ...http.CallOption) (*ListBetsResponse, error) {
	var out ListBetsResponse
	pattern := "/v1/backoffice/game/bets/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListBets))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...http.CallOption) (*ListCategoriesResponse, error) {
	var out ListCategoriesResponse
	pattern := "/v1/backoffice/game/categories/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListCategories))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListCurrencies(ctx context.Context, in *ListCurrenciesRequest, opts ...http.CallOption) (*ListCurrenciesResponse, error) {
	var out ListCurrenciesResponse
	pattern := "/v1/backoffice/game/currencies/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListCurrencies))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListFeeGroups(ctx context.Context, in *ListFeeGroupsRequest, opts ...http.CallOption) (*ListFeeGroupsResponse, error) {
	var out ListFeeGroupsResponse
	pattern := "/v1/backoffice/game/fee-groups/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListFeeGroups))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListGames(ctx context.Context, in *ListGamesRequest, opts ...http.CallOption) (*ListGamesResponse, error) {
	var out ListGamesResponse
	pattern := "/v1/backoffice/game/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListGames))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...http.CallOption) (*ListProvidersResponse, error) {
	var out ListProvidersResponse
	pattern := "/v1/backoffice/game/providers/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListProviders))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListProvidersWithDetail(ctx context.Context, in *ListProvidersWithDetailRequest, opts ...http.CallOption) (*ListProvidersWithDetailResponse, error) {
	var out ListProvidersWithDetailResponse
	pattern := "/v1/backoffice/game/providers-with-detail/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListProvidersWithDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListTags(ctx context.Context, in *ListTagsRequest, opts ...http.CallOption) (*ListTagsResponse, error) {
	var out ListTagsResponse
	pattern := "/v1/backoffice/game/tags/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListTags))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) ListThemes(ctx context.Context, in *ListThemesRequest, opts ...http.CallOption) (*ListThemesResponse, error) {
	var out ListThemesResponse
	pattern := "/v1/backoffice/game/themes/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameListThemes))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) UpdateGame(ctx context.Context, in *UpdateGameRequest, opts ...http.CallOption) (*UpdateGameResponse, error) {
	var out UpdateGameResponse
	pattern := "/v1/backoffice/game/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameUpdateGame))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeGameHTTPClientImpl) UpdateProvider(ctx context.Context, in *UpdateProviderRequest, opts ...http.CallOption) (*UpdateProviderResponse, error) {
	var out UpdateProviderResponse
	pattern := "/v1/backoffice/game/provider/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGameUpdateProvider))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
