// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_game.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackoffice_GameGetGameTransactionsForBet = "/api.backoffice.service.v1.Backoffice_Game/GetGameTransactionsForBet"
const OperationBackoffice_GameGetUserBetsOverview = "/api.backoffice.service.v1.Backoffice_Game/GetUserBetsOverview"
const OperationBackoffice_GameListBets = "/api.backoffice.service.v1.Backoffice_Game/ListBets"
const OperationBackoffice_GameListGames = "/api.backoffice.service.v1.Backoffice_Game/ListGames"
const OperationBackoffice_GameListUserBets = "/api.backoffice.service.v1.Backoffice_Game/ListUserBets"

type Backoffice_GameHTTPServer interface {
	GetGameTransactionsForBet(context.Context, *GetGameTransactionsForBetRequest) (*GetGameTransactionsForBetResponse, error)
	GetUserBetsOverview(context.Context, *GetUserBetsOverviewRequest) (*GetUserBetsOverviewResponse, error)
	ListBets(context.Context, *ListBetsRequest) (*ListBetsResponse, error)
	ListGames(context.Context, *ListGamesRequest) (*ListGamesResponse, error)
	ListUserBets(context.Context, *ListUserBetsRequest) (*ListUserBetsResponse, error)
}

func RegisterBackoffice_GameHTTPServer(s *http.Server, srv Backoffice_GameHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/game/bets/list", _Backoffice_Game_ListBets0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/overview/get", _Backoffice_Game_GetUserBetsOverview0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/transactions/get", _Backoffice_Game_GetGameTransactionsForBet0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/list", _Backoffice_Game_ListUserBets0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/list", _Backoffice_Game_ListGames1_HTTP_Handler(srv))
}

func _Backoffice_Game_ListBets0_HTTP_Handler(srv Backoffice_GameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBetsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_GameListBets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBets(ctx, req.(*ListBetsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBetsResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Game_GetUserBetsOverview0_HTTP_Handler(srv Backoffice_GameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserBetsOverviewRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_GameGetUserBetsOverview)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserBetsOverview(ctx, req.(*GetUserBetsOverviewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserBetsOverviewResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Game_GetGameTransactionsForBet0_HTTP_Handler(srv Backoffice_GameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGameTransactionsForBetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_GameGetGameTransactionsForBet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGameTransactionsForBet(ctx, req.(*GetGameTransactionsForBetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGameTransactionsForBetResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Game_ListUserBets0_HTTP_Handler(srv Backoffice_GameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserBetsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_GameListUserBets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserBets(ctx, req.(*ListUserBetsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserBetsResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Game_ListGames1_HTTP_Handler(srv Backoffice_GameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGamesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_GameListGames)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGames(ctx, req.(*ListGamesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGamesResponse)
		return ctx.Result(200, reply)
	}
}

type Backoffice_GameHTTPClient interface {
	GetGameTransactionsForBet(ctx context.Context, req *GetGameTransactionsForBetRequest, opts ...http.CallOption) (rsp *GetGameTransactionsForBetResponse, err error)
	GetUserBetsOverview(ctx context.Context, req *GetUserBetsOverviewRequest, opts ...http.CallOption) (rsp *GetUserBetsOverviewResponse, err error)
	ListBets(ctx context.Context, req *ListBetsRequest, opts ...http.CallOption) (rsp *ListBetsResponse, err error)
	ListGames(ctx context.Context, req *ListGamesRequest, opts ...http.CallOption) (rsp *ListGamesResponse, err error)
	ListUserBets(ctx context.Context, req *ListUserBetsRequest, opts ...http.CallOption) (rsp *ListUserBetsResponse, err error)
}

type Backoffice_GameHTTPClientImpl struct {
	cc *http.Client
}

func NewBackoffice_GameHTTPClient(client *http.Client) Backoffice_GameHTTPClient {
	return &Backoffice_GameHTTPClientImpl{client}
}

func (c *Backoffice_GameHTTPClientImpl) GetGameTransactionsForBet(ctx context.Context, in *GetGameTransactionsForBetRequest, opts ...http.CallOption) (*GetGameTransactionsForBetResponse, error) {
	var out GetGameTransactionsForBetResponse
	pattern := "/v1/backoffice/game/bets/transactions/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_GameGetGameTransactionsForBet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_GameHTTPClientImpl) GetUserBetsOverview(ctx context.Context, in *GetUserBetsOverviewRequest, opts ...http.CallOption) (*GetUserBetsOverviewResponse, error) {
	var out GetUserBetsOverviewResponse
	pattern := "/v1/backoffice/game/bets/overview/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_GameGetUserBetsOverview))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_GameHTTPClientImpl) ListBets(ctx context.Context, in *ListBetsRequest, opts ...http.CallOption) (*ListBetsResponse, error) {
	var out ListBetsResponse
	pattern := "/v1/backoffice/game/bets/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_GameListBets))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_GameHTTPClientImpl) ListGames(ctx context.Context, in *ListGamesRequest, opts ...http.CallOption) (*ListGamesResponse, error) {
	var out ListGamesResponse
	pattern := "/v1/backoffice/game/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_GameListGames))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_GameHTTPClientImpl) ListUserBets(ctx context.Context, in *ListUserBetsRequest, opts ...http.CallOption) (*ListUserBetsResponse, error) {
	var out ListUserBetsResponse
	pattern := "/v1/backoffice/game/bets/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_GameListUserBets))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
