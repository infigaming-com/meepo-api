// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_audit.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListAuditLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAuditLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuditLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuditLogsRequestMultiError, or nil if none found.
func (m *ListAuditLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuditLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.Action != nil {
		// no validation rules for Action
	}

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAuditLogsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAuditLogsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAuditLogsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAuditLogsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAuditLogsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAuditLogsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListAuditLogsRequestMultiError(errors)
	}

	return nil
}

// ListAuditLogsRequestMultiError is an error wrapping multiple validation
// errors returned by ListAuditLogsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAuditLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuditLogsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuditLogsRequestMultiError) AllErrors() []error { return m }

// ListAuditLogsRequestValidationError is the validation error returned by
// ListAuditLogsRequest.Validate if the designated constraints aren't met.
type ListAuditLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuditLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuditLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuditLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuditLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuditLogsRequestValidationError) ErrorName() string {
	return "ListAuditLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuditLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuditLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuditLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuditLogsRequestValidationError{}

// Validate checks the field values on AuditLog with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuditLog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditLog with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuditLogMultiError, or nil
// if none found.
func (m *AuditLog) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditLog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuditId

	// no validation rules for UserId

	// no validation rules for UserName

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuditLogValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuditLogValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuditLogValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RequestInfo

	// no validation rules for ClientIp

	// no validation rules for ApiPath

	// no validation rules for Action

	if len(errors) > 0 {
		return AuditLogMultiError(errors)
	}

	return nil
}

// AuditLogMultiError is an error wrapping multiple validation errors returned
// by AuditLog.ValidateAll() if the designated constraints aren't met.
type AuditLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditLogMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditLogMultiError) AllErrors() []error { return m }

// AuditLogValidationError is the validation error returned by
// AuditLog.Validate if the designated constraints aren't met.
type AuditLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditLogValidationError) ErrorName() string { return "AuditLogValidationError" }

// Error satisfies the builtin error interface
func (e AuditLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditLogValidationError{}

// Validate checks the field values on ListAuditLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAuditLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuditLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuditLogsResponseMultiError, or nil if none found.
func (m *ListAuditLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuditLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAuditLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAuditLogsResponseValidationError{
						field:  fmt.Sprintf("AuditLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAuditLogsResponseValidationError{
						field:  fmt.Sprintf("AuditLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAuditLogsResponseValidationError{
					field:  fmt.Sprintf("AuditLogs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListAuditLogsResponseMultiError(errors)
	}

	return nil
}

// ListAuditLogsResponseMultiError is an error wrapping multiple validation
// errors returned by ListAuditLogsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAuditLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuditLogsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuditLogsResponseMultiError) AllErrors() []error { return m }

// ListAuditLogsResponseValidationError is the validation error returned by
// ListAuditLogsResponse.Validate if the designated constraints aren't met.
type ListAuditLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuditLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuditLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuditLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuditLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuditLogsResponseValidationError) ErrorName() string {
	return "ListAuditLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuditLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuditLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuditLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuditLogsResponseValidationError{}

// Validate checks the field values on ListAuditUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAuditUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuditUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuditUsersRequestMultiError, or nil if none found.
func (m *ListAuditUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuditUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAuditUsersRequestMultiError(errors)
	}

	return nil
}

// ListAuditUsersRequestMultiError is an error wrapping multiple validation
// errors returned by ListAuditUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAuditUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuditUsersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuditUsersRequestMultiError) AllErrors() []error { return m }

// ListAuditUsersRequestValidationError is the validation error returned by
// ListAuditUsersRequest.Validate if the designated constraints aren't met.
type ListAuditUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuditUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuditUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuditUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuditUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuditUsersRequestValidationError) ErrorName() string {
	return "ListAuditUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuditUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuditUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuditUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuditUsersRequestValidationError{}

// Validate checks the field values on AuditUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuditUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuditUserMultiError, or nil
// if none found.
func (m *AuditUser) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for UserName

	if len(errors) > 0 {
		return AuditUserMultiError(errors)
	}

	return nil
}

// AuditUserMultiError is an error wrapping multiple validation errors returned
// by AuditUser.ValidateAll() if the designated constraints aren't met.
type AuditUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditUserMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditUserMultiError) AllErrors() []error { return m }

// AuditUserValidationError is the validation error returned by
// AuditUser.Validate if the designated constraints aren't met.
type AuditUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditUserValidationError) ErrorName() string { return "AuditUserValidationError" }

// Error satisfies the builtin error interface
func (e AuditUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditUserValidationError{}

// Validate checks the field values on ListAuditUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAuditUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuditUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuditUsersResponseMultiError, or nil if none found.
func (m *ListAuditUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuditUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAuditUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAuditUsersResponseValidationError{
						field:  fmt.Sprintf("AuditUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAuditUsersResponseValidationError{
						field:  fmt.Sprintf("AuditUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAuditUsersResponseValidationError{
					field:  fmt.Sprintf("AuditUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAuditUsersResponseMultiError(errors)
	}

	return nil
}

// ListAuditUsersResponseMultiError is an error wrapping multiple validation
// errors returned by ListAuditUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAuditUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuditUsersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuditUsersResponseMultiError) AllErrors() []error { return m }

// ListAuditUsersResponseValidationError is the validation error returned by
// ListAuditUsersResponse.Validate if the designated constraints aren't met.
type ListAuditUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuditUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuditUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuditUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuditUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuditUsersResponseValidationError) ErrorName() string {
	return "ListAuditUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuditUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuditUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuditUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuditUsersResponseValidationError{}

// Validate checks the field values on ListAuditActionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAuditActionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuditActionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuditActionsRequestMultiError, or nil if none found.
func (m *ListAuditActionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuditActionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAuditActionsRequestMultiError(errors)
	}

	return nil
}

// ListAuditActionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListAuditActionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAuditActionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuditActionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuditActionsRequestMultiError) AllErrors() []error { return m }

// ListAuditActionsRequestValidationError is the validation error returned by
// ListAuditActionsRequest.Validate if the designated constraints aren't met.
type ListAuditActionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuditActionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuditActionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuditActionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuditActionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuditActionsRequestValidationError) ErrorName() string {
	return "ListAuditActionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuditActionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuditActionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuditActionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuditActionsRequestValidationError{}

// Validate checks the field values on ListAuditActionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAuditActionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuditActionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuditActionsResponseMultiError, or nil if none found.
func (m *ListAuditActionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuditActionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAuditActionsResponseMultiError(errors)
	}

	return nil
}

// ListAuditActionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListAuditActionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAuditActionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuditActionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuditActionsResponseMultiError) AllErrors() []error { return m }

// ListAuditActionsResponseValidationError is the validation error returned by
// ListAuditActionsResponse.Validate if the designated constraints aren't met.
type ListAuditActionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuditActionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuditActionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuditActionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuditActionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuditActionsResponseValidationError) ErrorName() string {
	return "ListAuditActionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuditActionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuditActionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuditActionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuditActionsResponseValidationError{}
