// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_system.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/infigaming-com/meepo-api/system/service/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficeSystemListIntegrityStatus = "/api.backoffice.service.v1.BackofficeSystem/ListIntegrityStatus"
const OperationBackofficeSystemListSev = "/api.backoffice.service.v1.BackofficeSystem/ListSev"
const OperationBackofficeSystemSetIntegrityConfig = "/api.backoffice.service.v1.BackofficeSystem/SetIntegrityConfig"

type BackofficeSystemHTTPServer interface {
	ListIntegrityStatus(context.Context, *ListIntegrityStatusRequest) (*v1.ListIntegrityStatusResponse, error)
	ListSev(context.Context, *ListSevRequest) (*v1.ListSevResponse, error)
	SetIntegrityConfig(context.Context, *SetIntegrityConfigRequest) (*v1.SetIntegrityConfigResponse, error)
}

func RegisterBackofficeSystemHTTPServer(s *http.Server, srv BackofficeSystemHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/system/integrity/status/list", _BackofficeSystem_ListIntegrityStatus0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/system/integrity/file-info/config/set", _BackofficeSystem_SetIntegrityConfig0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/system/sev/list", _BackofficeSystem_ListSev0_HTTP_Handler(srv))
}

func _BackofficeSystem_ListIntegrityStatus0_HTTP_Handler(srv BackofficeSystemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListIntegrityStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeSystemListIntegrityStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListIntegrityStatus(ctx, req.(*ListIntegrityStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListIntegrityStatusResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeSystem_SetIntegrityConfig0_HTTP_Handler(srv BackofficeSystemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetIntegrityConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeSystemSetIntegrityConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetIntegrityConfig(ctx, req.(*SetIntegrityConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.SetIntegrityConfigResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeSystem_ListSev0_HTTP_Handler(srv BackofficeSystemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSevRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeSystemListSev)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSev(ctx, req.(*ListSevRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListSevResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficeSystemHTTPClient interface {
	ListIntegrityStatus(ctx context.Context, req *ListIntegrityStatusRequest, opts ...http.CallOption) (rsp *v1.ListIntegrityStatusResponse, err error)
	ListSev(ctx context.Context, req *ListSevRequest, opts ...http.CallOption) (rsp *v1.ListSevResponse, err error)
	SetIntegrityConfig(ctx context.Context, req *SetIntegrityConfigRequest, opts ...http.CallOption) (rsp *v1.SetIntegrityConfigResponse, err error)
}

type BackofficeSystemHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficeSystemHTTPClient(client *http.Client) BackofficeSystemHTTPClient {
	return &BackofficeSystemHTTPClientImpl{client}
}

func (c *BackofficeSystemHTTPClientImpl) ListIntegrityStatus(ctx context.Context, in *ListIntegrityStatusRequest, opts ...http.CallOption) (*v1.ListIntegrityStatusResponse, error) {
	var out v1.ListIntegrityStatusResponse
	pattern := "/v1/backoffice/system/integrity/status/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeSystemListIntegrityStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeSystemHTTPClientImpl) ListSev(ctx context.Context, in *ListSevRequest, opts ...http.CallOption) (*v1.ListSevResponse, error) {
	var out v1.ListSevResponse
	pattern := "/v1/backoffice/system/sev/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeSystemListSev))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeSystemHTTPClientImpl) SetIntegrityConfig(ctx context.Context, in *SetIntegrityConfigRequest, opts ...http.CallOption) (*v1.SetIntegrityConfigResponse, error) {
	var out v1.SetIntegrityConfigResponse
	pattern := "/v1/backoffice/system/integrity/file-info/config/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeSystemSetIntegrityConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
