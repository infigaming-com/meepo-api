// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/infigaming-com/meepo-api/user/service/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficeUserAddUserComment = "/api.backoffice.service.v1.BackofficeUser/AddUserComment"
const OperationBackofficeUserDeleteUserResponsibleGamblingConfig = "/api.backoffice.service.v1.BackofficeUser/DeleteUserResponsibleGamblingConfig"
const OperationBackofficeUserGetOperatorTags = "/api.backoffice.service.v1.BackofficeUser/GetOperatorTags"
const OperationBackofficeUserGetOperatorTagsConfig = "/api.backoffice.service.v1.BackofficeUser/GetOperatorTagsConfig"
const OperationBackofficeUserGetUserOverview = "/api.backoffice.service.v1.BackofficeUser/GetUserOverview"
const OperationBackofficeUserGetUserProfile = "/api.backoffice.service.v1.BackofficeUser/GetUserProfile"
const OperationBackofficeUserGetUserResponsibleGamblingConfig = "/api.backoffice.service.v1.BackofficeUser/GetUserResponsibleGamblingConfig"
const OperationBackofficeUserGetUserTags = "/api.backoffice.service.v1.BackofficeUser/GetUserTags"
const OperationBackofficeUserListUserComments = "/api.backoffice.service.v1.BackofficeUser/ListUserComments"
const OperationBackofficeUserListUsers = "/api.backoffice.service.v1.BackofficeUser/ListUsers"
const OperationBackofficeUserPreLaunchCheck = "/api.backoffice.service.v1.BackofficeUser/PreLaunchCheck"
const OperationBackofficeUserSendEmailVerificationCode = "/api.backoffice.service.v1.BackofficeUser/SendEmailVerificationCode"
const OperationBackofficeUserSetOperatorTags = "/api.backoffice.service.v1.BackofficeUser/SetOperatorTags"
const OperationBackofficeUserSetOperatorTagsConfig = "/api.backoffice.service.v1.BackofficeUser/SetOperatorTagsConfig"
const OperationBackofficeUserSetUserTags = "/api.backoffice.service.v1.BackofficeUser/SetUserTags"
const OperationBackofficeUserUpdateUser = "/api.backoffice.service.v1.BackofficeUser/UpdateUser"
const OperationBackofficeUserUserIdentityAudit = "/api.backoffice.service.v1.BackofficeUser/UserIdentityAudit"
const OperationBackofficeUserUserIdentityList = "/api.backoffice.service.v1.BackofficeUser/UserIdentityList"

type BackofficeUserHTTPServer interface {
	AddUserComment(context.Context, *AddUserCommentRequest) (*AddUserCommentResponse, error)
	DeleteUserResponsibleGamblingConfig(context.Context, *DeleteUserResponsibleGamblingConfigRequest) (*v1.DeleteResponsibleGamblingConfigResponse, error)
	// GetOperatorTags GetOperatorTags retrieves all tags of an operator or parent operator if follow_parent is true.
	GetOperatorTags(context.Context, *GetOperatorTagsRequest) (*GetOperatorTagsResponse, error)
	// GetOperatorTagsConfig GetOperatorTagConfig returns follow-parent flag for the given operator ID.
	GetOperatorTagsConfig(context.Context, *GetOperatorTagsConfigRequest) (*GetOperatorTagsConfigResponse, error)
	GetUserOverview(context.Context, *GetUserOverviewRequest) (*GetUserOverviewResponse, error)
	GetUserProfile(context.Context, *GetUserProfileRequest) (*v1.GetUserProfileResponse, error)
	GetUserResponsibleGamblingConfig(context.Context, *GetUserResponsibleGamblingConfigRequest) (*v1.GetResponsibleGamblingConfigResponse, error)
	// GetUserTags GetUserTags retrieves all active tags associated with a user and also exists in the related operator's tag list.
	GetUserTags(context.Context, *GetUserTagsRequest) (*GetUserTagsResponse, error)
	ListUserComments(context.Context, *ListUserCommentsRequest) (*ListUserCommentsResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	PreLaunchCheck(context.Context, *PreLaunchCheckRequest) (*v1.PreLaunchCheckResponse, error)
	SendEmailVerificationCode(context.Context, *SendEmailVerificationCodeRequest) (*SendEmailVerificationCodeResponse, error)
	// SetOperatorTags SetOperatorTags sets or updates the tags for an operator.
	SetOperatorTags(context.Context, *SetOperatorTagsRequest) (*SetOperatorTagsResponse, error)
	// SetOperatorTagsConfig SetOperatorTagConfig sets or updates the follow_parent flag for an operator.
	// It will reverse the follow_parent flag if the record exists.
	// If the record doesn't exist, it will create a new one with follow_parent set to false.
	SetOperatorTagsConfig(context.Context, *SetOperatorTagsConfigRequest) (*SetOperatorTagsConfigResponse, error)
	SetUserTags(context.Context, *SetUserTagsRequest) (*SetUserTagsResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	UserIdentityAudit(context.Context, *UserIdentityAuditRequest) (*v1.UserIdentityAuditResponse, error)
	UserIdentityList(context.Context, *UserIdentityListRequest) (*v1.UserIdentityListResponse, error)
}

func RegisterBackofficeUserHTTPServer(s *http.Server, srv BackofficeUserHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/user/list", _BackofficeUser_ListUsers0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/overview/get", _BackofficeUser_GetUserOverview0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/profile/get", _BackofficeUser_GetUserProfile0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/comments/add", _BackofficeUser_AddUserComment0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/comments/list", _BackofficeUser_ListUserComments0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/send-email-verification-code", _BackofficeUser_SendEmailVerificationCode1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/update", _BackofficeUser_UpdateUser1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/operator-tags/config/set", _BackofficeUser_SetOperatorTagsConfig0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/operator-tags/set", _BackofficeUser_SetOperatorTags0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/operator-tags/config/get", _BackofficeUser_GetOperatorTagsConfig0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/operator-tags/get", _BackofficeUser_GetOperatorTags0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/tags/get", _BackofficeUser_GetUserTags1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/tags/set", _BackofficeUser_SetUserTags0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/responsible-gambling/config/delete", _BackofficeUser_DeleteUserResponsibleGamblingConfig0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/responsible-gambling/config/get", _BackofficeUser_GetUserResponsibleGamblingConfig0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/identity/set", _BackofficeUser_UserIdentityAudit0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/identity/list/get", _BackofficeUser_UserIdentityList0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/operator/prelaunch/check", _BackofficeUser_PreLaunchCheck0_HTTP_Handler(srv))
}

func _BackofficeUser_ListUsers0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUsersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserListUsers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUsers(ctx, req.(*ListUsersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUsersResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_GetUserOverview0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserOverviewRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserGetUserOverview)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserOverview(ctx, req.(*GetUserOverviewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserOverviewResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_GetUserProfile0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserProfileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserGetUserProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserProfile(ctx, req.(*GetUserProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetUserProfileResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_AddUserComment0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserAddUserComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddUserComment(ctx, req.(*AddUserCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddUserCommentResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_ListUserComments0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserCommentsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserListUserComments)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserComments(ctx, req.(*ListUserCommentsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserCommentsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_SendEmailVerificationCode1_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendEmailVerificationCodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserSendEmailVerificationCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendEmailVerificationCode(ctx, req.(*SendEmailVerificationCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendEmailVerificationCodeResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_UpdateUser1_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_SetOperatorTagsConfig0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetOperatorTagsConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserSetOperatorTagsConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetOperatorTagsConfig(ctx, req.(*SetOperatorTagsConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetOperatorTagsConfigResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_SetOperatorTags0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetOperatorTagsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserSetOperatorTags)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetOperatorTags(ctx, req.(*SetOperatorTagsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetOperatorTagsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_GetOperatorTagsConfig0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOperatorTagsConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserGetOperatorTagsConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOperatorTagsConfig(ctx, req.(*GetOperatorTagsConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOperatorTagsConfigResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_GetOperatorTags0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOperatorTagsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserGetOperatorTags)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOperatorTags(ctx, req.(*GetOperatorTagsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOperatorTagsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_GetUserTags1_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserTagsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserGetUserTags)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserTags(ctx, req.(*GetUserTagsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserTagsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_SetUserTags0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetUserTagsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserSetUserTags)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetUserTags(ctx, req.(*SetUserTagsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetUserTagsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_DeleteUserResponsibleGamblingConfig0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserResponsibleGamblingConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserDeleteUserResponsibleGamblingConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUserResponsibleGamblingConfig(ctx, req.(*DeleteUserResponsibleGamblingConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DeleteResponsibleGamblingConfigResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_GetUserResponsibleGamblingConfig0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserResponsibleGamblingConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserGetUserResponsibleGamblingConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserResponsibleGamblingConfig(ctx, req.(*GetUserResponsibleGamblingConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetResponsibleGamblingConfigResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_UserIdentityAudit0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserIdentityAuditRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserUserIdentityAudit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserIdentityAudit(ctx, req.(*UserIdentityAuditRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UserIdentityAuditResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_UserIdentityList0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserIdentityListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserUserIdentityList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserIdentityList(ctx, req.(*UserIdentityListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UserIdentityListResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_PreLaunchCheck0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PreLaunchCheckRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserPreLaunchCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PreLaunchCheck(ctx, req.(*PreLaunchCheckRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.PreLaunchCheckResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficeUserHTTPClient interface {
	AddUserComment(ctx context.Context, req *AddUserCommentRequest, opts ...http.CallOption) (rsp *AddUserCommentResponse, err error)
	DeleteUserResponsibleGamblingConfig(ctx context.Context, req *DeleteUserResponsibleGamblingConfigRequest, opts ...http.CallOption) (rsp *v1.DeleteResponsibleGamblingConfigResponse, err error)
	GetOperatorTags(ctx context.Context, req *GetOperatorTagsRequest, opts ...http.CallOption) (rsp *GetOperatorTagsResponse, err error)
	GetOperatorTagsConfig(ctx context.Context, req *GetOperatorTagsConfigRequest, opts ...http.CallOption) (rsp *GetOperatorTagsConfigResponse, err error)
	GetUserOverview(ctx context.Context, req *GetUserOverviewRequest, opts ...http.CallOption) (rsp *GetUserOverviewResponse, err error)
	GetUserProfile(ctx context.Context, req *GetUserProfileRequest, opts ...http.CallOption) (rsp *v1.GetUserProfileResponse, err error)
	GetUserResponsibleGamblingConfig(ctx context.Context, req *GetUserResponsibleGamblingConfigRequest, opts ...http.CallOption) (rsp *v1.GetResponsibleGamblingConfigResponse, err error)
	GetUserTags(ctx context.Context, req *GetUserTagsRequest, opts ...http.CallOption) (rsp *GetUserTagsResponse, err error)
	ListUserComments(ctx context.Context, req *ListUserCommentsRequest, opts ...http.CallOption) (rsp *ListUserCommentsResponse, err error)
	ListUsers(ctx context.Context, req *ListUsersRequest, opts ...http.CallOption) (rsp *ListUsersResponse, err error)
	PreLaunchCheck(ctx context.Context, req *PreLaunchCheckRequest, opts ...http.CallOption) (rsp *v1.PreLaunchCheckResponse, err error)
	SendEmailVerificationCode(ctx context.Context, req *SendEmailVerificationCodeRequest, opts ...http.CallOption) (rsp *SendEmailVerificationCodeResponse, err error)
	SetOperatorTags(ctx context.Context, req *SetOperatorTagsRequest, opts ...http.CallOption) (rsp *SetOperatorTagsResponse, err error)
	SetOperatorTagsConfig(ctx context.Context, req *SetOperatorTagsConfigRequest, opts ...http.CallOption) (rsp *SetOperatorTagsConfigResponse, err error)
	SetUserTags(ctx context.Context, req *SetUserTagsRequest, opts ...http.CallOption) (rsp *SetUserTagsResponse, err error)
	UpdateUser(ctx context.Context, req *UpdateUserRequest, opts ...http.CallOption) (rsp *UpdateUserResponse, err error)
	UserIdentityAudit(ctx context.Context, req *UserIdentityAuditRequest, opts ...http.CallOption) (rsp *v1.UserIdentityAuditResponse, err error)
	UserIdentityList(ctx context.Context, req *UserIdentityListRequest, opts ...http.CallOption) (rsp *v1.UserIdentityListResponse, err error)
}

type BackofficeUserHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficeUserHTTPClient(client *http.Client) BackofficeUserHTTPClient {
	return &BackofficeUserHTTPClientImpl{client}
}

func (c *BackofficeUserHTTPClientImpl) AddUserComment(ctx context.Context, in *AddUserCommentRequest, opts ...http.CallOption) (*AddUserCommentResponse, error) {
	var out AddUserCommentResponse
	pattern := "/v1/backoffice/user/comments/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserAddUserComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) DeleteUserResponsibleGamblingConfig(ctx context.Context, in *DeleteUserResponsibleGamblingConfigRequest, opts ...http.CallOption) (*v1.DeleteResponsibleGamblingConfigResponse, error) {
	var out v1.DeleteResponsibleGamblingConfigResponse
	pattern := "/v1/backoffice/user/responsible-gambling/config/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserDeleteUserResponsibleGamblingConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) GetOperatorTags(ctx context.Context, in *GetOperatorTagsRequest, opts ...http.CallOption) (*GetOperatorTagsResponse, error) {
	var out GetOperatorTagsResponse
	pattern := "/v1/backoffice/user/operator-tags/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserGetOperatorTags))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) GetOperatorTagsConfig(ctx context.Context, in *GetOperatorTagsConfigRequest, opts ...http.CallOption) (*GetOperatorTagsConfigResponse, error) {
	var out GetOperatorTagsConfigResponse
	pattern := "/v1/backoffice/user/operator-tags/config/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserGetOperatorTagsConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) GetUserOverview(ctx context.Context, in *GetUserOverviewRequest, opts ...http.CallOption) (*GetUserOverviewResponse, error) {
	var out GetUserOverviewResponse
	pattern := "/v1/backoffice/user/overview/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserGetUserOverview))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...http.CallOption) (*v1.GetUserProfileResponse, error) {
	var out v1.GetUserProfileResponse
	pattern := "/v1/backoffice/user/profile/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserGetUserProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) GetUserResponsibleGamblingConfig(ctx context.Context, in *GetUserResponsibleGamblingConfigRequest, opts ...http.CallOption) (*v1.GetResponsibleGamblingConfigResponse, error) {
	var out v1.GetResponsibleGamblingConfigResponse
	pattern := "/v1/backoffice/user/responsible-gambling/config/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserGetUserResponsibleGamblingConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) GetUserTags(ctx context.Context, in *GetUserTagsRequest, opts ...http.CallOption) (*GetUserTagsResponse, error) {
	var out GetUserTagsResponse
	pattern := "/v1/backoffice/user/tags/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserGetUserTags))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) ListUserComments(ctx context.Context, in *ListUserCommentsRequest, opts ...http.CallOption) (*ListUserCommentsResponse, error) {
	var out ListUserCommentsResponse
	pattern := "/v1/backoffice/user/comments/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserListUserComments))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...http.CallOption) (*ListUsersResponse, error) {
	var out ListUsersResponse
	pattern := "/v1/backoffice/user/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserListUsers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) PreLaunchCheck(ctx context.Context, in *PreLaunchCheckRequest, opts ...http.CallOption) (*v1.PreLaunchCheckResponse, error) {
	var out v1.PreLaunchCheckResponse
	pattern := "/v1/backoffice/user/operator/prelaunch/check"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserPreLaunchCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) SendEmailVerificationCode(ctx context.Context, in *SendEmailVerificationCodeRequest, opts ...http.CallOption) (*SendEmailVerificationCodeResponse, error) {
	var out SendEmailVerificationCodeResponse
	pattern := "/v1/backoffice/user/send-email-verification-code"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserSendEmailVerificationCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) SetOperatorTags(ctx context.Context, in *SetOperatorTagsRequest, opts ...http.CallOption) (*SetOperatorTagsResponse, error) {
	var out SetOperatorTagsResponse
	pattern := "/v1/backoffice/user/operator-tags/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserSetOperatorTags))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) SetOperatorTagsConfig(ctx context.Context, in *SetOperatorTagsConfigRequest, opts ...http.CallOption) (*SetOperatorTagsConfigResponse, error) {
	var out SetOperatorTagsConfigResponse
	pattern := "/v1/backoffice/user/operator-tags/config/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserSetOperatorTagsConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) SetUserTags(ctx context.Context, in *SetUserTagsRequest, opts ...http.CallOption) (*SetUserTagsResponse, error) {
	var out SetUserTagsResponse
	pattern := "/v1/backoffice/user/tags/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserSetUserTags))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...http.CallOption) (*UpdateUserResponse, error) {
	var out UpdateUserResponse
	pattern := "/v1/backoffice/user/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) UserIdentityAudit(ctx context.Context, in *UserIdentityAuditRequest, opts ...http.CallOption) (*v1.UserIdentityAuditResponse, error) {
	var out v1.UserIdentityAuditResponse
	pattern := "/v1/backoffice/user/identity/set"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserUserIdentityAudit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) UserIdentityList(ctx context.Context, in *UserIdentityListRequest, opts ...http.CallOption) (*v1.UserIdentityListResponse, error) {
	var out v1.UserIdentityListResponse
	pattern := "/v1/backoffice/user/identity/list/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserUserIdentityList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
