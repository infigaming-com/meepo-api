// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficeUserAddOperatorUserTag = "/api.backoffice.service.v1.BackofficeUser/AddOperatorUserTag"
const OperationBackofficeUserAddUserComment = "/api.backoffice.service.v1.BackofficeUser/AddUserComment"
const OperationBackofficeUserAddUserTag = "/api.backoffice.service.v1.BackofficeUser/AddUserTag"
const OperationBackofficeUserDeleteOperatorUserTag = "/api.backoffice.service.v1.BackofficeUser/DeleteOperatorUserTag"
const OperationBackofficeUserDeleteUserTag = "/api.backoffice.service.v1.BackofficeUser/DeleteUserTag"
const OperationBackofficeUserGetOperatorUserTags = "/api.backoffice.service.v1.BackofficeUser/GetOperatorUserTags"
const OperationBackofficeUserGetUserOverview = "/api.backoffice.service.v1.BackofficeUser/GetUserOverview"
const OperationBackofficeUserGetUserProfile = "/api.backoffice.service.v1.BackofficeUser/GetUserProfile"
const OperationBackofficeUserListUserComments = "/api.backoffice.service.v1.BackofficeUser/ListUserComments"
const OperationBackofficeUserListUsers = "/api.backoffice.service.v1.BackofficeUser/ListUsers"

type BackofficeUserHTTPServer interface {
	AddOperatorUserTag(context.Context, *AddOperatorUserTagRequest) (*AddOperatorUserTagResponse, error)
	AddUserComment(context.Context, *AddUserCommentRequest) (*AddUserCommentResponse, error)
	AddUserTag(context.Context, *AddUserTagRequest) (*AddUserTagResponse, error)
	DeleteOperatorUserTag(context.Context, *DeleteOperatorUserTagRequest) (*DeleteOperatorUserTagResponse, error)
	DeleteUserTag(context.Context, *DeleteUserTagRequest) (*DeleteUserTagResponse, error)
	GetOperatorUserTags(context.Context, *GetOperatorUserTagsRequest) (*GetOperatorUserTagsResponse, error)
	GetUserOverview(context.Context, *GetUserOverviewRequest) (*GetUserOverviewResponse, error)
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	ListUserComments(context.Context, *ListUserCommentsRequest) (*ListUserCommentsResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
}

func RegisterBackofficeUserHTTPServer(s *http.Server, srv BackofficeUserHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/user/list", _BackofficeUser_ListUsers0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/overview/get", _BackofficeUser_GetUserOverview0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/profile/get", _BackofficeUser_GetUserProfile0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/user-tags/add", _BackofficeUser_AddOperatorUserTag0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/user-tags/delete", _BackofficeUser_DeleteOperatorUserTag0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/user-tags/get", _BackofficeUser_GetOperatorUserTags0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/tags/add", _BackofficeUser_AddUserTag1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/tags/delete", _BackofficeUser_DeleteUserTag1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/comments/add", _BackofficeUser_AddUserComment0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/comments/list", _BackofficeUser_ListUserComments0_HTTP_Handler(srv))
}

func _BackofficeUser_ListUsers0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUsersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserListUsers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUsers(ctx, req.(*ListUsersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUsersResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_GetUserOverview0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserOverviewRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserGetUserOverview)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserOverview(ctx, req.(*GetUserOverviewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserOverviewResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_GetUserProfile0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserProfileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserGetUserProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserProfile(ctx, req.(*GetUserProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserProfileResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_AddOperatorUserTag0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddOperatorUserTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserAddOperatorUserTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddOperatorUserTag(ctx, req.(*AddOperatorUserTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddOperatorUserTagResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_DeleteOperatorUserTag0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOperatorUserTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserDeleteOperatorUserTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOperatorUserTag(ctx, req.(*DeleteOperatorUserTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteOperatorUserTagResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_GetOperatorUserTags0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOperatorUserTagsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserGetOperatorUserTags)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOperatorUserTags(ctx, req.(*GetOperatorUserTagsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOperatorUserTagsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_AddUserTag1_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserAddUserTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddUserTag(ctx, req.(*AddUserTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddUserTagResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_DeleteUserTag1_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserDeleteUserTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUserTag(ctx, req.(*DeleteUserTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserTagResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_AddUserComment0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserAddUserComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddUserComment(ctx, req.(*AddUserCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddUserCommentResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeUser_ListUserComments0_HTTP_Handler(srv BackofficeUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserCommentsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUserListUserComments)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserComments(ctx, req.(*ListUserCommentsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserCommentsResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficeUserHTTPClient interface {
	AddOperatorUserTag(ctx context.Context, req *AddOperatorUserTagRequest, opts ...http.CallOption) (rsp *AddOperatorUserTagResponse, err error)
	AddUserComment(ctx context.Context, req *AddUserCommentRequest, opts ...http.CallOption) (rsp *AddUserCommentResponse, err error)
	AddUserTag(ctx context.Context, req *AddUserTagRequest, opts ...http.CallOption) (rsp *AddUserTagResponse, err error)
	DeleteOperatorUserTag(ctx context.Context, req *DeleteOperatorUserTagRequest, opts ...http.CallOption) (rsp *DeleteOperatorUserTagResponse, err error)
	DeleteUserTag(ctx context.Context, req *DeleteUserTagRequest, opts ...http.CallOption) (rsp *DeleteUserTagResponse, err error)
	GetOperatorUserTags(ctx context.Context, req *GetOperatorUserTagsRequest, opts ...http.CallOption) (rsp *GetOperatorUserTagsResponse, err error)
	GetUserOverview(ctx context.Context, req *GetUserOverviewRequest, opts ...http.CallOption) (rsp *GetUserOverviewResponse, err error)
	GetUserProfile(ctx context.Context, req *GetUserProfileRequest, opts ...http.CallOption) (rsp *GetUserProfileResponse, err error)
	ListUserComments(ctx context.Context, req *ListUserCommentsRequest, opts ...http.CallOption) (rsp *ListUserCommentsResponse, err error)
	ListUsers(ctx context.Context, req *ListUsersRequest, opts ...http.CallOption) (rsp *ListUsersResponse, err error)
}

type BackofficeUserHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficeUserHTTPClient(client *http.Client) BackofficeUserHTTPClient {
	return &BackofficeUserHTTPClientImpl{client}
}

func (c *BackofficeUserHTTPClientImpl) AddOperatorUserTag(ctx context.Context, in *AddOperatorUserTagRequest, opts ...http.CallOption) (*AddOperatorUserTagResponse, error) {
	var out AddOperatorUserTagResponse
	pattern := "/v1/backoffice/operator/user-tags/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserAddOperatorUserTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) AddUserComment(ctx context.Context, in *AddUserCommentRequest, opts ...http.CallOption) (*AddUserCommentResponse, error) {
	var out AddUserCommentResponse
	pattern := "/v1/backoffice/user/comments/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserAddUserComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) AddUserTag(ctx context.Context, in *AddUserTagRequest, opts ...http.CallOption) (*AddUserTagResponse, error) {
	var out AddUserTagResponse
	pattern := "/v1/backoffice/user/tags/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserAddUserTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) DeleteOperatorUserTag(ctx context.Context, in *DeleteOperatorUserTagRequest, opts ...http.CallOption) (*DeleteOperatorUserTagResponse, error) {
	var out DeleteOperatorUserTagResponse
	pattern := "/v1/backoffice/operator/user-tags/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserDeleteOperatorUserTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) DeleteUserTag(ctx context.Context, in *DeleteUserTagRequest, opts ...http.CallOption) (*DeleteUserTagResponse, error) {
	var out DeleteUserTagResponse
	pattern := "/v1/backoffice/user/tags/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserDeleteUserTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) GetOperatorUserTags(ctx context.Context, in *GetOperatorUserTagsRequest, opts ...http.CallOption) (*GetOperatorUserTagsResponse, error) {
	var out GetOperatorUserTagsResponse
	pattern := "/v1/backoffice/operator/user-tags/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserGetOperatorUserTags))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) GetUserOverview(ctx context.Context, in *GetUserOverviewRequest, opts ...http.CallOption) (*GetUserOverviewResponse, error) {
	var out GetUserOverviewResponse
	pattern := "/v1/backoffice/user/overview/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserGetUserOverview))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...http.CallOption) (*GetUserProfileResponse, error) {
	var out GetUserProfileResponse
	pattern := "/v1/backoffice/user/profile/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserGetUserProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) ListUserComments(ctx context.Context, in *ListUserCommentsRequest, opts ...http.CallOption) (*ListUserCommentsResponse, error) {
	var out ListUserCommentsResponse
	pattern := "/v1/backoffice/user/comments/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserListUserComments))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeUserHTTPClientImpl) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...http.CallOption) (*ListUsersResponse, error) {
	var out ListUsersResponse
	pattern := "/v1/backoffice/user/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUserListUsers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
