// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackoffice_UserAddOperatorUserTag = "/api.backoffice.service.v1.Backoffice_User/AddOperatorUserTag"
const OperationBackoffice_UserAddUserComment = "/api.backoffice.service.v1.Backoffice_User/AddUserComment"
const OperationBackoffice_UserAddUserTag = "/api.backoffice.service.v1.Backoffice_User/AddUserTag"
const OperationBackoffice_UserDeleteOperatorUserTag = "/api.backoffice.service.v1.Backoffice_User/DeleteOperatorUserTag"
const OperationBackoffice_UserDeleteUserTag = "/api.backoffice.service.v1.Backoffice_User/DeleteUserTag"
const OperationBackoffice_UserGetOperatorUserTags = "/api.backoffice.service.v1.Backoffice_User/GetOperatorUserTags"
const OperationBackoffice_UserGetUserOverview = "/api.backoffice.service.v1.Backoffice_User/GetUserOverview"
const OperationBackoffice_UserGetUserProfile = "/api.backoffice.service.v1.Backoffice_User/GetUserProfile"
const OperationBackoffice_UserListUsers = "/api.backoffice.service.v1.Backoffice_User/ListUsers"

type Backoffice_UserHTTPServer interface {
	AddOperatorUserTag(context.Context, *AddOperatorUserTagRequest) (*AddOperatorUserTagResponse, error)
	AddUserComment(context.Context, *AddUserCommentRequest) (*AddUserCommentResponse, error)
	AddUserTag(context.Context, *AddUserTagRequest) (*AddUserTagResponse, error)
	DeleteOperatorUserTag(context.Context, *DeleteOperatorUserTagRequest) (*DeleteOperatorUserTagResponse, error)
	DeleteUserTag(context.Context, *DeleteUserTagRequest) (*DeleteUserTagResponse, error)
	GetOperatorUserTags(context.Context, *GetOperatorUserTagsRequest) (*GetOperatorUserTagsResponse, error)
	GetUserOverview(context.Context, *GetUserOverviewRequest) (*GetUserOverviewResponse, error)
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
}

func RegisterBackoffice_UserHTTPServer(s *http.Server, srv Backoffice_UserHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/user/list", _Backoffice_User_ListUsers0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/overview/get", _Backoffice_User_GetUserOverview0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/profile/get", _Backoffice_User_GetUserProfile0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/user-tags/add", _Backoffice_User_AddOperatorUserTag0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/user-tags/delete", _Backoffice_User_DeleteOperatorUserTag0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/user-tags/get", _Backoffice_User_GetOperatorUserTags0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/tags/add", _Backoffice_User_AddUserTag1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/tags/delete", _Backoffice_User_DeleteUserTag1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/comments/add", _Backoffice_User_AddUserComment0_HTTP_Handler(srv))
}

func _Backoffice_User_ListUsers0_HTTP_Handler(srv Backoffice_UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUsersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_UserListUsers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUsers(ctx, req.(*ListUsersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUsersResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_User_GetUserOverview0_HTTP_Handler(srv Backoffice_UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserOverviewRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_UserGetUserOverview)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserOverview(ctx, req.(*GetUserOverviewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserOverviewResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_User_GetUserProfile0_HTTP_Handler(srv Backoffice_UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserProfileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_UserGetUserProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserProfile(ctx, req.(*GetUserProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserProfileResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_User_AddOperatorUserTag0_HTTP_Handler(srv Backoffice_UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddOperatorUserTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_UserAddOperatorUserTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddOperatorUserTag(ctx, req.(*AddOperatorUserTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddOperatorUserTagResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_User_DeleteOperatorUserTag0_HTTP_Handler(srv Backoffice_UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOperatorUserTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_UserDeleteOperatorUserTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOperatorUserTag(ctx, req.(*DeleteOperatorUserTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteOperatorUserTagResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_User_GetOperatorUserTags0_HTTP_Handler(srv Backoffice_UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOperatorUserTagsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_UserGetOperatorUserTags)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOperatorUserTags(ctx, req.(*GetOperatorUserTagsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOperatorUserTagsResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_User_AddUserTag1_HTTP_Handler(srv Backoffice_UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_UserAddUserTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddUserTag(ctx, req.(*AddUserTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddUserTagResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_User_DeleteUserTag1_HTTP_Handler(srv Backoffice_UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_UserDeleteUserTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUserTag(ctx, req.(*DeleteUserTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserTagResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_User_AddUserComment0_HTTP_Handler(srv Backoffice_UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_UserAddUserComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddUserComment(ctx, req.(*AddUserCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddUserCommentResponse)
		return ctx.Result(200, reply)
	}
}

type Backoffice_UserHTTPClient interface {
	AddOperatorUserTag(ctx context.Context, req *AddOperatorUserTagRequest, opts ...http.CallOption) (rsp *AddOperatorUserTagResponse, err error)
	AddUserComment(ctx context.Context, req *AddUserCommentRequest, opts ...http.CallOption) (rsp *AddUserCommentResponse, err error)
	AddUserTag(ctx context.Context, req *AddUserTagRequest, opts ...http.CallOption) (rsp *AddUserTagResponse, err error)
	DeleteOperatorUserTag(ctx context.Context, req *DeleteOperatorUserTagRequest, opts ...http.CallOption) (rsp *DeleteOperatorUserTagResponse, err error)
	DeleteUserTag(ctx context.Context, req *DeleteUserTagRequest, opts ...http.CallOption) (rsp *DeleteUserTagResponse, err error)
	GetOperatorUserTags(ctx context.Context, req *GetOperatorUserTagsRequest, opts ...http.CallOption) (rsp *GetOperatorUserTagsResponse, err error)
	GetUserOverview(ctx context.Context, req *GetUserOverviewRequest, opts ...http.CallOption) (rsp *GetUserOverviewResponse, err error)
	GetUserProfile(ctx context.Context, req *GetUserProfileRequest, opts ...http.CallOption) (rsp *GetUserProfileResponse, err error)
	ListUsers(ctx context.Context, req *ListUsersRequest, opts ...http.CallOption) (rsp *ListUsersResponse, err error)
}

type Backoffice_UserHTTPClientImpl struct {
	cc *http.Client
}

func NewBackoffice_UserHTTPClient(client *http.Client) Backoffice_UserHTTPClient {
	return &Backoffice_UserHTTPClientImpl{client}
}

func (c *Backoffice_UserHTTPClientImpl) AddOperatorUserTag(ctx context.Context, in *AddOperatorUserTagRequest, opts ...http.CallOption) (*AddOperatorUserTagResponse, error) {
	var out AddOperatorUserTagResponse
	pattern := "/v1/backoffice/operator/user-tags/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_UserAddOperatorUserTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_UserHTTPClientImpl) AddUserComment(ctx context.Context, in *AddUserCommentRequest, opts ...http.CallOption) (*AddUserCommentResponse, error) {
	var out AddUserCommentResponse
	pattern := "/v1/backoffice/user/comments/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_UserAddUserComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_UserHTTPClientImpl) AddUserTag(ctx context.Context, in *AddUserTagRequest, opts ...http.CallOption) (*AddUserTagResponse, error) {
	var out AddUserTagResponse
	pattern := "/v1/backoffice/user/tags/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_UserAddUserTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_UserHTTPClientImpl) DeleteOperatorUserTag(ctx context.Context, in *DeleteOperatorUserTagRequest, opts ...http.CallOption) (*DeleteOperatorUserTagResponse, error) {
	var out DeleteOperatorUserTagResponse
	pattern := "/v1/backoffice/operator/user-tags/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_UserDeleteOperatorUserTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_UserHTTPClientImpl) DeleteUserTag(ctx context.Context, in *DeleteUserTagRequest, opts ...http.CallOption) (*DeleteUserTagResponse, error) {
	var out DeleteUserTagResponse
	pattern := "/v1/backoffice/user/tags/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_UserDeleteUserTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_UserHTTPClientImpl) GetOperatorUserTags(ctx context.Context, in *GetOperatorUserTagsRequest, opts ...http.CallOption) (*GetOperatorUserTagsResponse, error) {
	var out GetOperatorUserTagsResponse
	pattern := "/v1/backoffice/operator/user-tags/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_UserGetOperatorUserTags))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_UserHTTPClientImpl) GetUserOverview(ctx context.Context, in *GetUserOverviewRequest, opts ...http.CallOption) (*GetUserOverviewResponse, error) {
	var out GetUserOverviewResponse
	pattern := "/v1/backoffice/user/overview/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_UserGetUserOverview))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_UserHTTPClientImpl) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...http.CallOption) (*GetUserProfileResponse, error) {
	var out GetUserProfileResponse
	pattern := "/v1/backoffice/user/profile/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_UserGetUserProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_UserHTTPClientImpl) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...http.CallOption) (*ListUsersResponse, error) {
	var out ListUsersResponse
	pattern := "/v1/backoffice/user/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_UserListUsers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
