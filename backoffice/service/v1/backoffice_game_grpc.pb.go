// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_game.proto

package v1

import (
	context "context"
	v1 "github.com/infigaming-com/meepo-api/game/service/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackofficeGame_ListProviders_FullMethodName               = "/api.backoffice.service.v1.BackofficeGame/ListProviders"
	BackofficeGame_ListProvidersWithDetail_FullMethodName     = "/api.backoffice.service.v1.BackofficeGame/ListProvidersWithDetail"
	BackofficeGame_ListCategories_FullMethodName              = "/api.backoffice.service.v1.BackofficeGame/ListCategories"
	BackofficeGame_ListFeeGroups_FullMethodName               = "/api.backoffice.service.v1.BackofficeGame/ListFeeGroups"
	BackofficeGame_ListTags_FullMethodName                    = "/api.backoffice.service.v1.BackofficeGame/ListTags"
	BackofficeGame_ListThemes_FullMethodName                  = "/api.backoffice.service.v1.BackofficeGame/ListThemes"
	BackofficeGame_ListCurrencies_FullMethodName              = "/api.backoffice.service.v1.BackofficeGame/ListCurrencies"
	BackofficeGame_ListBets_FullMethodName                    = "/api.backoffice.service.v1.BackofficeGame/ListBets"
	BackofficeGame_ExportBets_FullMethodName                  = "/api.backoffice.service.v1.BackofficeGame/ExportBets"
	BackofficeGame_GetBetById_FullMethodName                  = "/api.backoffice.service.v1.BackofficeGame/GetBetById"
	BackofficeGame_GetUserBetsOverview_FullMethodName         = "/api.backoffice.service.v1.BackofficeGame/GetUserBetsOverview"
	BackofficeGame_GetGameTransactionsForBet_FullMethodName   = "/api.backoffice.service.v1.BackofficeGame/GetGameTransactionsForBet"
	BackofficeGame_ListGames_FullMethodName                   = "/api.backoffice.service.v1.BackofficeGame/ListGames"
	BackofficeGame_UpdateGame_FullMethodName                  = "/api.backoffice.service.v1.BackofficeGame/UpdateGame"
	BackofficeGame_UpdateProvider_FullMethodName              = "/api.backoffice.service.v1.BackofficeGame/UpdateProvider"
	BackofficeGame_ListProviderRates_FullMethodName           = "/api.backoffice.service.v1.BackofficeGame/ListProviderRates"
	BackofficeGame_GetGameTransactionById_FullMethodName      = "/api.backoffice.service.v1.BackofficeGame/GetGameTransactionById"
	BackofficeGame_ListUnpaidBets_FullMethodName              = "/api.backoffice.service.v1.BackofficeGame/ListUnpaidBets"
	BackofficeGame_ExportUnpaidBets_FullMethodName            = "/api.backoffice.service.v1.BackofficeGame/ExportUnpaidBets"
	BackofficeGame_ListMultipleBets_FullMethodName            = "/api.backoffice.service.v1.BackofficeGame/ListMultipleBets"
	BackofficeGame_ExportMultipleBets_FullMethodName          = "/api.backoffice.service.v1.BackofficeGame/ExportMultipleBets"
	BackofficeGame_ListStakeVarianceBets_FullMethodName       = "/api.backoffice.service.v1.BackofficeGame/ListStakeVarianceBets"
	BackofficeGame_ExportStakeVarianceBets_FullMethodName     = "/api.backoffice.service.v1.BackofficeGame/ExportStakeVarianceBets"
	BackofficeGame_ListCustomerStrikeReports_FullMethodName   = "/api.backoffice.service.v1.BackofficeGame/ListCustomerStrikeReports"
	BackofficeGame_ExportCustomerStrikeReports_FullMethodName = "/api.backoffice.service.v1.BackofficeGame/ExportCustomerStrikeReports"
	BackofficeGame_ExportSportEvents_FullMethodName           = "/api.backoffice.service.v1.BackofficeGame/ExportSportEvents"
	BackofficeGame_AddGameBetDisplayConfig_FullMethodName     = "/api.backoffice.service.v1.BackofficeGame/AddGameBetDisplayConfig"
	BackofficeGame_UpdateGameBetDisplayConfig_FullMethodName  = "/api.backoffice.service.v1.BackofficeGame/UpdateGameBetDisplayConfig"
	BackofficeGame_ListGameBetDisplayConfig_FullMethodName    = "/api.backoffice.service.v1.BackofficeGame/ListGameBetDisplayConfig"
	BackofficeGame_ListTag_FullMethodName                     = "/api.backoffice.service.v1.BackofficeGame/ListTag"
	BackofficeGame_CreateTag_FullMethodName                   = "/api.backoffice.service.v1.BackofficeGame/CreateTag"
	BackofficeGame_UpdateTag_FullMethodName                   = "/api.backoffice.service.v1.BackofficeGame/UpdateTag"
	BackofficeGame_DeleteTag_FullMethodName                   = "/api.backoffice.service.v1.BackofficeGame/DeleteTag"
	BackofficeGame_GetTag_FullMethodName                      = "/api.backoffice.service.v1.BackofficeGame/GetTag"
	BackofficeGame_CreateTagConfig_FullMethodName             = "/api.backoffice.service.v1.BackofficeGame/CreateTagConfig"
	BackofficeGame_UpdateTagConfig_FullMethodName             = "/api.backoffice.service.v1.BackofficeGame/UpdateTagConfig"
	BackofficeGame_GetTagConfig_FullMethodName                = "/api.backoffice.service.v1.BackofficeGame/GetTagConfig"
	BackofficeGame_UpdateTagConfigGames_FullMethodName        = "/api.backoffice.service.v1.BackofficeGame/UpdateTagConfigGames"
	BackofficeGame_ListGameTags_FullMethodName                = "/api.backoffice.service.v1.BackofficeGame/ListGameTags"
)

// BackofficeGameClient is the client API for BackofficeGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackofficeGameClient interface {
	// ListProviders returns all providers with optional filter for enabled status.
	// If not provided, all providers will be returned.
	// ListProviders is used for the providers drop down list and provider search.
	ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error)
	// ListProvidersWithDetail returns all providers with detailed information,
	// including game count and enabled status.
	// ListProvidersWithDetail is used for the providers page.
	ListProvidersWithDetail(ctx context.Context, in *ListProvidersWithDetailRequest, opts ...grpc.CallOption) (*ListProvidersWithDetailResponse, error)
	ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error)
	ListFeeGroups(ctx context.Context, in *ListFeeGroupsRequest, opts ...grpc.CallOption) (*ListFeeGroupsResponse, error)
	ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error)
	ListThemes(ctx context.Context, in *ListThemesRequest, opts ...grpc.CallOption) (*ListThemesResponse, error)
	ListCurrencies(ctx context.Context, in *ListCurrenciesRequest, opts ...grpc.CallOption) (*ListCurrenciesResponse, error)
	ListBets(ctx context.Context, in *ListBetsRequest, opts ...grpc.CallOption) (*ListBetsResponse, error)
	ExportBets(ctx context.Context, in *ExportBetsRequest, opts ...grpc.CallOption) (*v1.ExportBetsResponse, error)
	GetBetById(ctx context.Context, in *GetBetByIdRequest, opts ...grpc.CallOption) (*v1.GetBetByIdResponse, error)
	GetUserBetsOverview(ctx context.Context, in *GetUserBetsOverviewRequest, opts ...grpc.CallOption) (*GetUserBetsOverviewResponse, error)
	GetGameTransactionsForBet(ctx context.Context, in *GetGameTransactionsForBetRequest, opts ...grpc.CallOption) (*GetGameTransactionsForBetResponse, error)
	ListGames(ctx context.Context, in *ListGamesRequest, opts ...grpc.CallOption) (*ListGamesResponse, error)
	UpdateGame(ctx context.Context, in *UpdateGameRequest, opts ...grpc.CallOption) (*UpdateGameResponse, error)
	UpdateProvider(ctx context.Context, in *UpdateProviderRequest, opts ...grpc.CallOption) (*UpdateProviderResponse, error)
	ListProviderRates(ctx context.Context, in *ListProviderRatesRequest, opts ...grpc.CallOption) (*ListProviderRatesResponse, error)
	GetGameTransactionById(ctx context.Context, in *GetGameTransactionByIdRequest, opts ...grpc.CallOption) (*v1.GetGameTransactionByIdResponse, error)
	ListUnpaidBets(ctx context.Context, in *ListUnpaidBetsRequest, opts ...grpc.CallOption) (*v1.ListUnpaidBetsResponse, error)
	ExportUnpaidBets(ctx context.Context, in *ExportUnpaidBetsRequest, opts ...grpc.CallOption) (*v1.ExportUnpaidBetsResponse, error)
	ListMultipleBets(ctx context.Context, in *ListMultipleBetsRequest, opts ...grpc.CallOption) (*v1.ListMultipleBetsResponse, error)
	ExportMultipleBets(ctx context.Context, in *ExportMultipleBetsRequest, opts ...grpc.CallOption) (*v1.ExportMultipleBetsResponse, error)
	ListStakeVarianceBets(ctx context.Context, in *ListStakeVarianceBetsRequest, opts ...grpc.CallOption) (*v1.ListStakeVarianceBetsResponse, error)
	ExportStakeVarianceBets(ctx context.Context, in *ExportStakeVarianceBetsRequest, opts ...grpc.CallOption) (*v1.ExportStakeVarianceBetsResponse, error)
	ListCustomerStrikeReports(ctx context.Context, in *ListCustomerStrikeReportsRequest, opts ...grpc.CallOption) (*v1.ListCustomerStrikeReportsResponse, error)
	ExportCustomerStrikeReports(ctx context.Context, in *ExportCustomerStrikeReportsRequest, opts ...grpc.CallOption) (*v1.ExportCustomerStrikeReportsResponse, error)
	ExportSportEvents(ctx context.Context, in *ExportSportEventsRequest, opts ...grpc.CallOption) (*v1.ExportSportEventsResponse, error)
	AddGameBetDisplayConfig(ctx context.Context, in *AddGameBetDisplayConfigRequest, opts ...grpc.CallOption) (*v1.AddGameBetDisplayConfigResponse, error)
	UpdateGameBetDisplayConfig(ctx context.Context, in *UpdateGameBetDisplayConfigRequest, opts ...grpc.CallOption) (*v1.UpdateGameBetDisplayConfigResponse, error)
	ListGameBetDisplayConfig(ctx context.Context, in *ListGameBetDisplayConfigRequest, opts ...grpc.CallOption) (*v1.ListGameBetDisplayConfigResponse, error)
	ListTag(ctx context.Context, in *ListTagRequest, opts ...grpc.CallOption) (*v1.ListTagResponse, error)
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*v1.CreateTagResponse, error)
	UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*v1.UpdateTagResponse, error)
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*v1.DeleteTagResponse, error)
	GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*v1.GetTagResponse, error)
	// Tag Config Management HTTP APIs
	CreateTagConfig(ctx context.Context, in *CreateTagConfigRequest, opts ...grpc.CallOption) (*v1.CreateTagConfigResponse, error)
	UpdateTagConfig(ctx context.Context, in *UpdateTagConfigRequest, opts ...grpc.CallOption) (*v1.UpdateTagConfigResponse, error)
	GetTagConfig(ctx context.Context, in *GetTagConfigRequest, opts ...grpc.CallOption) (*v1.GetTagConfigResponse, error)
	UpdateTagConfigGames(ctx context.Context, in *UpdateTagConfigGamesRequest, opts ...grpc.CallOption) (*v1.UpdateTagConfigGamesResponse, error)
	// Game Tag Management HTTP APIs
	ListGameTags(ctx context.Context, in *ListGameTagsRequest, opts ...grpc.CallOption) (*v1.ListGameTagsResponse, error)
}

type backofficeGameClient struct {
	cc grpc.ClientConnInterface
}

func NewBackofficeGameClient(cc grpc.ClientConnInterface) BackofficeGameClient {
	return &backofficeGameClient{cc}
}

func (c *backofficeGameClient) ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProvidersResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ListProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ListProvidersWithDetail(ctx context.Context, in *ListProvidersWithDetailRequest, opts ...grpc.CallOption) (*ListProvidersWithDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProvidersWithDetailResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ListProvidersWithDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCategoriesResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ListCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ListFeeGroups(ctx context.Context, in *ListFeeGroupsRequest, opts ...grpc.CallOption) (*ListFeeGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeeGroupsResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ListFeeGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTagsResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ListTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ListThemes(ctx context.Context, in *ListThemesRequest, opts ...grpc.CallOption) (*ListThemesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListThemesResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ListThemes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ListCurrencies(ctx context.Context, in *ListCurrenciesRequest, opts ...grpc.CallOption) (*ListCurrenciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCurrenciesResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ListCurrencies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ListBets(ctx context.Context, in *ListBetsRequest, opts ...grpc.CallOption) (*ListBetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBetsResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ListBets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ExportBets(ctx context.Context, in *ExportBetsRequest, opts ...grpc.CallOption) (*v1.ExportBetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ExportBetsResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ExportBets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) GetBetById(ctx context.Context, in *GetBetByIdRequest, opts ...grpc.CallOption) (*v1.GetBetByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetBetByIdResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_GetBetById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) GetUserBetsOverview(ctx context.Context, in *GetUserBetsOverviewRequest, opts ...grpc.CallOption) (*GetUserBetsOverviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBetsOverviewResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_GetUserBetsOverview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) GetGameTransactionsForBet(ctx context.Context, in *GetGameTransactionsForBetRequest, opts ...grpc.CallOption) (*GetGameTransactionsForBetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGameTransactionsForBetResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_GetGameTransactionsForBet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ListGames(ctx context.Context, in *ListGamesRequest, opts ...grpc.CallOption) (*ListGamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGamesResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ListGames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) UpdateGame(ctx context.Context, in *UpdateGameRequest, opts ...grpc.CallOption) (*UpdateGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGameResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_UpdateGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) UpdateProvider(ctx context.Context, in *UpdateProviderRequest, opts ...grpc.CallOption) (*UpdateProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProviderResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_UpdateProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ListProviderRates(ctx context.Context, in *ListProviderRatesRequest, opts ...grpc.CallOption) (*ListProviderRatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProviderRatesResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ListProviderRates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) GetGameTransactionById(ctx context.Context, in *GetGameTransactionByIdRequest, opts ...grpc.CallOption) (*v1.GetGameTransactionByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetGameTransactionByIdResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_GetGameTransactionById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ListUnpaidBets(ctx context.Context, in *ListUnpaidBetsRequest, opts ...grpc.CallOption) (*v1.ListUnpaidBetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListUnpaidBetsResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ListUnpaidBets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ExportUnpaidBets(ctx context.Context, in *ExportUnpaidBetsRequest, opts ...grpc.CallOption) (*v1.ExportUnpaidBetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ExportUnpaidBetsResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ExportUnpaidBets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ListMultipleBets(ctx context.Context, in *ListMultipleBetsRequest, opts ...grpc.CallOption) (*v1.ListMultipleBetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListMultipleBetsResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ListMultipleBets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ExportMultipleBets(ctx context.Context, in *ExportMultipleBetsRequest, opts ...grpc.CallOption) (*v1.ExportMultipleBetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ExportMultipleBetsResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ExportMultipleBets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ListStakeVarianceBets(ctx context.Context, in *ListStakeVarianceBetsRequest, opts ...grpc.CallOption) (*v1.ListStakeVarianceBetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListStakeVarianceBetsResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ListStakeVarianceBets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ExportStakeVarianceBets(ctx context.Context, in *ExportStakeVarianceBetsRequest, opts ...grpc.CallOption) (*v1.ExportStakeVarianceBetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ExportStakeVarianceBetsResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ExportStakeVarianceBets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ListCustomerStrikeReports(ctx context.Context, in *ListCustomerStrikeReportsRequest, opts ...grpc.CallOption) (*v1.ListCustomerStrikeReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListCustomerStrikeReportsResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ListCustomerStrikeReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ExportCustomerStrikeReports(ctx context.Context, in *ExportCustomerStrikeReportsRequest, opts ...grpc.CallOption) (*v1.ExportCustomerStrikeReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ExportCustomerStrikeReportsResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ExportCustomerStrikeReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ExportSportEvents(ctx context.Context, in *ExportSportEventsRequest, opts ...grpc.CallOption) (*v1.ExportSportEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ExportSportEventsResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ExportSportEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) AddGameBetDisplayConfig(ctx context.Context, in *AddGameBetDisplayConfigRequest, opts ...grpc.CallOption) (*v1.AddGameBetDisplayConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.AddGameBetDisplayConfigResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_AddGameBetDisplayConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) UpdateGameBetDisplayConfig(ctx context.Context, in *UpdateGameBetDisplayConfigRequest, opts ...grpc.CallOption) (*v1.UpdateGameBetDisplayConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.UpdateGameBetDisplayConfigResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_UpdateGameBetDisplayConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ListGameBetDisplayConfig(ctx context.Context, in *ListGameBetDisplayConfigRequest, opts ...grpc.CallOption) (*v1.ListGameBetDisplayConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListGameBetDisplayConfigResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ListGameBetDisplayConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ListTag(ctx context.Context, in *ListTagRequest, opts ...grpc.CallOption) (*v1.ListTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListTagResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ListTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*v1.CreateTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.CreateTagResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_CreateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*v1.UpdateTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.UpdateTagResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_UpdateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*v1.DeleteTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DeleteTagResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_DeleteTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*v1.GetTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetTagResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_GetTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) CreateTagConfig(ctx context.Context, in *CreateTagConfigRequest, opts ...grpc.CallOption) (*v1.CreateTagConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.CreateTagConfigResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_CreateTagConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) UpdateTagConfig(ctx context.Context, in *UpdateTagConfigRequest, opts ...grpc.CallOption) (*v1.UpdateTagConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.UpdateTagConfigResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_UpdateTagConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) GetTagConfig(ctx context.Context, in *GetTagConfigRequest, opts ...grpc.CallOption) (*v1.GetTagConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetTagConfigResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_GetTagConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) UpdateTagConfigGames(ctx context.Context, in *UpdateTagConfigGamesRequest, opts ...grpc.CallOption) (*v1.UpdateTagConfigGamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.UpdateTagConfigGamesResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_UpdateTagConfigGames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeGameClient) ListGameTags(ctx context.Context, in *ListGameTagsRequest, opts ...grpc.CallOption) (*v1.ListGameTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListGameTagsResponse)
	err := c.cc.Invoke(ctx, BackofficeGame_ListGameTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackofficeGameServer is the server API for BackofficeGame service.
// All implementations must embed UnimplementedBackofficeGameServer
// for forward compatibility.
type BackofficeGameServer interface {
	// ListProviders returns all providers with optional filter for enabled status.
	// If not provided, all providers will be returned.
	// ListProviders is used for the providers drop down list and provider search.
	ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error)
	// ListProvidersWithDetail returns all providers with detailed information,
	// including game count and enabled status.
	// ListProvidersWithDetail is used for the providers page.
	ListProvidersWithDetail(context.Context, *ListProvidersWithDetailRequest) (*ListProvidersWithDetailResponse, error)
	ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error)
	ListFeeGroups(context.Context, *ListFeeGroupsRequest) (*ListFeeGroupsResponse, error)
	ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error)
	ListThemes(context.Context, *ListThemesRequest) (*ListThemesResponse, error)
	ListCurrencies(context.Context, *ListCurrenciesRequest) (*ListCurrenciesResponse, error)
	ListBets(context.Context, *ListBetsRequest) (*ListBetsResponse, error)
	ExportBets(context.Context, *ExportBetsRequest) (*v1.ExportBetsResponse, error)
	GetBetById(context.Context, *GetBetByIdRequest) (*v1.GetBetByIdResponse, error)
	GetUserBetsOverview(context.Context, *GetUserBetsOverviewRequest) (*GetUserBetsOverviewResponse, error)
	GetGameTransactionsForBet(context.Context, *GetGameTransactionsForBetRequest) (*GetGameTransactionsForBetResponse, error)
	ListGames(context.Context, *ListGamesRequest) (*ListGamesResponse, error)
	UpdateGame(context.Context, *UpdateGameRequest) (*UpdateGameResponse, error)
	UpdateProvider(context.Context, *UpdateProviderRequest) (*UpdateProviderResponse, error)
	ListProviderRates(context.Context, *ListProviderRatesRequest) (*ListProviderRatesResponse, error)
	GetGameTransactionById(context.Context, *GetGameTransactionByIdRequest) (*v1.GetGameTransactionByIdResponse, error)
	ListUnpaidBets(context.Context, *ListUnpaidBetsRequest) (*v1.ListUnpaidBetsResponse, error)
	ExportUnpaidBets(context.Context, *ExportUnpaidBetsRequest) (*v1.ExportUnpaidBetsResponse, error)
	ListMultipleBets(context.Context, *ListMultipleBetsRequest) (*v1.ListMultipleBetsResponse, error)
	ExportMultipleBets(context.Context, *ExportMultipleBetsRequest) (*v1.ExportMultipleBetsResponse, error)
	ListStakeVarianceBets(context.Context, *ListStakeVarianceBetsRequest) (*v1.ListStakeVarianceBetsResponse, error)
	ExportStakeVarianceBets(context.Context, *ExportStakeVarianceBetsRequest) (*v1.ExportStakeVarianceBetsResponse, error)
	ListCustomerStrikeReports(context.Context, *ListCustomerStrikeReportsRequest) (*v1.ListCustomerStrikeReportsResponse, error)
	ExportCustomerStrikeReports(context.Context, *ExportCustomerStrikeReportsRequest) (*v1.ExportCustomerStrikeReportsResponse, error)
	ExportSportEvents(context.Context, *ExportSportEventsRequest) (*v1.ExportSportEventsResponse, error)
	AddGameBetDisplayConfig(context.Context, *AddGameBetDisplayConfigRequest) (*v1.AddGameBetDisplayConfigResponse, error)
	UpdateGameBetDisplayConfig(context.Context, *UpdateGameBetDisplayConfigRequest) (*v1.UpdateGameBetDisplayConfigResponse, error)
	ListGameBetDisplayConfig(context.Context, *ListGameBetDisplayConfigRequest) (*v1.ListGameBetDisplayConfigResponse, error)
	ListTag(context.Context, *ListTagRequest) (*v1.ListTagResponse, error)
	CreateTag(context.Context, *CreateTagRequest) (*v1.CreateTagResponse, error)
	UpdateTag(context.Context, *UpdateTagRequest) (*v1.UpdateTagResponse, error)
	DeleteTag(context.Context, *DeleteTagRequest) (*v1.DeleteTagResponse, error)
	GetTag(context.Context, *GetTagRequest) (*v1.GetTagResponse, error)
	// Tag Config Management HTTP APIs
	CreateTagConfig(context.Context, *CreateTagConfigRequest) (*v1.CreateTagConfigResponse, error)
	UpdateTagConfig(context.Context, *UpdateTagConfigRequest) (*v1.UpdateTagConfigResponse, error)
	GetTagConfig(context.Context, *GetTagConfigRequest) (*v1.GetTagConfigResponse, error)
	UpdateTagConfigGames(context.Context, *UpdateTagConfigGamesRequest) (*v1.UpdateTagConfigGamesResponse, error)
	// Game Tag Management HTTP APIs
	ListGameTags(context.Context, *ListGameTagsRequest) (*v1.ListGameTagsResponse, error)
	mustEmbedUnimplementedBackofficeGameServer()
}

// UnimplementedBackofficeGameServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackofficeGameServer struct{}

func (UnimplementedBackofficeGameServer) ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProviders not implemented")
}
func (UnimplementedBackofficeGameServer) ListProvidersWithDetail(context.Context, *ListProvidersWithDetailRequest) (*ListProvidersWithDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProvidersWithDetail not implemented")
}
func (UnimplementedBackofficeGameServer) ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedBackofficeGameServer) ListFeeGroups(context.Context, *ListFeeGroupsRequest) (*ListFeeGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeeGroups not implemented")
}
func (UnimplementedBackofficeGameServer) ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (UnimplementedBackofficeGameServer) ListThemes(context.Context, *ListThemesRequest) (*ListThemesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListThemes not implemented")
}
func (UnimplementedBackofficeGameServer) ListCurrencies(context.Context, *ListCurrenciesRequest) (*ListCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrencies not implemented")
}
func (UnimplementedBackofficeGameServer) ListBets(context.Context, *ListBetsRequest) (*ListBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBets not implemented")
}
func (UnimplementedBackofficeGameServer) ExportBets(context.Context, *ExportBetsRequest) (*v1.ExportBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportBets not implemented")
}
func (UnimplementedBackofficeGameServer) GetBetById(context.Context, *GetBetByIdRequest) (*v1.GetBetByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBetById not implemented")
}
func (UnimplementedBackofficeGameServer) GetUserBetsOverview(context.Context, *GetUserBetsOverviewRequest) (*GetUserBetsOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBetsOverview not implemented")
}
func (UnimplementedBackofficeGameServer) GetGameTransactionsForBet(context.Context, *GetGameTransactionsForBetRequest) (*GetGameTransactionsForBetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameTransactionsForBet not implemented")
}
func (UnimplementedBackofficeGameServer) ListGames(context.Context, *ListGamesRequest) (*ListGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGames not implemented")
}
func (UnimplementedBackofficeGameServer) UpdateGame(context.Context, *UpdateGameRequest) (*UpdateGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGame not implemented")
}
func (UnimplementedBackofficeGameServer) UpdateProvider(context.Context, *UpdateProviderRequest) (*UpdateProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProvider not implemented")
}
func (UnimplementedBackofficeGameServer) ListProviderRates(context.Context, *ListProviderRatesRequest) (*ListProviderRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProviderRates not implemented")
}
func (UnimplementedBackofficeGameServer) GetGameTransactionById(context.Context, *GetGameTransactionByIdRequest) (*v1.GetGameTransactionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameTransactionById not implemented")
}
func (UnimplementedBackofficeGameServer) ListUnpaidBets(context.Context, *ListUnpaidBetsRequest) (*v1.ListUnpaidBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnpaidBets not implemented")
}
func (UnimplementedBackofficeGameServer) ExportUnpaidBets(context.Context, *ExportUnpaidBetsRequest) (*v1.ExportUnpaidBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportUnpaidBets not implemented")
}
func (UnimplementedBackofficeGameServer) ListMultipleBets(context.Context, *ListMultipleBetsRequest) (*v1.ListMultipleBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMultipleBets not implemented")
}
func (UnimplementedBackofficeGameServer) ExportMultipleBets(context.Context, *ExportMultipleBetsRequest) (*v1.ExportMultipleBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportMultipleBets not implemented")
}
func (UnimplementedBackofficeGameServer) ListStakeVarianceBets(context.Context, *ListStakeVarianceBetsRequest) (*v1.ListStakeVarianceBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStakeVarianceBets not implemented")
}
func (UnimplementedBackofficeGameServer) ExportStakeVarianceBets(context.Context, *ExportStakeVarianceBetsRequest) (*v1.ExportStakeVarianceBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportStakeVarianceBets not implemented")
}
func (UnimplementedBackofficeGameServer) ListCustomerStrikeReports(context.Context, *ListCustomerStrikeReportsRequest) (*v1.ListCustomerStrikeReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomerStrikeReports not implemented")
}
func (UnimplementedBackofficeGameServer) ExportCustomerStrikeReports(context.Context, *ExportCustomerStrikeReportsRequest) (*v1.ExportCustomerStrikeReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportCustomerStrikeReports not implemented")
}
func (UnimplementedBackofficeGameServer) ExportSportEvents(context.Context, *ExportSportEventsRequest) (*v1.ExportSportEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSportEvents not implemented")
}
func (UnimplementedBackofficeGameServer) AddGameBetDisplayConfig(context.Context, *AddGameBetDisplayConfigRequest) (*v1.AddGameBetDisplayConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGameBetDisplayConfig not implemented")
}
func (UnimplementedBackofficeGameServer) UpdateGameBetDisplayConfig(context.Context, *UpdateGameBetDisplayConfigRequest) (*v1.UpdateGameBetDisplayConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameBetDisplayConfig not implemented")
}
func (UnimplementedBackofficeGameServer) ListGameBetDisplayConfig(context.Context, *ListGameBetDisplayConfigRequest) (*v1.ListGameBetDisplayConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGameBetDisplayConfig not implemented")
}
func (UnimplementedBackofficeGameServer) ListTag(context.Context, *ListTagRequest) (*v1.ListTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTag not implemented")
}
func (UnimplementedBackofficeGameServer) CreateTag(context.Context, *CreateTagRequest) (*v1.CreateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedBackofficeGameServer) UpdateTag(context.Context, *UpdateTagRequest) (*v1.UpdateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedBackofficeGameServer) DeleteTag(context.Context, *DeleteTagRequest) (*v1.DeleteTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedBackofficeGameServer) GetTag(context.Context, *GetTagRequest) (*v1.GetTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}
func (UnimplementedBackofficeGameServer) CreateTagConfig(context.Context, *CreateTagConfigRequest) (*v1.CreateTagConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTagConfig not implemented")
}
func (UnimplementedBackofficeGameServer) UpdateTagConfig(context.Context, *UpdateTagConfigRequest) (*v1.UpdateTagConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTagConfig not implemented")
}
func (UnimplementedBackofficeGameServer) GetTagConfig(context.Context, *GetTagConfigRequest) (*v1.GetTagConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagConfig not implemented")
}
func (UnimplementedBackofficeGameServer) UpdateTagConfigGames(context.Context, *UpdateTagConfigGamesRequest) (*v1.UpdateTagConfigGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTagConfigGames not implemented")
}
func (UnimplementedBackofficeGameServer) ListGameTags(context.Context, *ListGameTagsRequest) (*v1.ListGameTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGameTags not implemented")
}
func (UnimplementedBackofficeGameServer) mustEmbedUnimplementedBackofficeGameServer() {}
func (UnimplementedBackofficeGameServer) testEmbeddedByValue()                        {}

// UnsafeBackofficeGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackofficeGameServer will
// result in compilation errors.
type UnsafeBackofficeGameServer interface {
	mustEmbedUnimplementedBackofficeGameServer()
}

func RegisterBackofficeGameServer(s grpc.ServiceRegistrar, srv BackofficeGameServer) {
	// If the following call pancis, it indicates UnimplementedBackofficeGameServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackofficeGame_ServiceDesc, srv)
}

func _BackofficeGame_ListProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ListProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ListProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ListProviders(ctx, req.(*ListProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ListProvidersWithDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProvidersWithDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ListProvidersWithDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ListProvidersWithDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ListProvidersWithDetail(ctx, req.(*ListProvidersWithDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ListCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ListCategories(ctx, req.(*ListCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ListFeeGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeeGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ListFeeGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ListFeeGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ListFeeGroups(ctx, req.(*ListFeeGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ListTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ListTags(ctx, req.(*ListTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ListThemes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListThemesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ListThemes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ListThemes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ListThemes(ctx, req.(*ListThemesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ListCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ListCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ListCurrencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ListCurrencies(ctx, req.(*ListCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ListBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ListBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ListBets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ListBets(ctx, req.(*ListBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ExportBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ExportBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ExportBets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ExportBets(ctx, req.(*ExportBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_GetBetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).GetBetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_GetBetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).GetBetById(ctx, req.(*GetBetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_GetUserBetsOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBetsOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).GetUserBetsOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_GetUserBetsOverview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).GetUserBetsOverview(ctx, req.(*GetUserBetsOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_GetGameTransactionsForBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameTransactionsForBetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).GetGameTransactionsForBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_GetGameTransactionsForBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).GetGameTransactionsForBet(ctx, req.(*GetGameTransactionsForBetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ListGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ListGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ListGames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ListGames(ctx, req.(*ListGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_UpdateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).UpdateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_UpdateGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).UpdateGame(ctx, req.(*UpdateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_UpdateProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).UpdateProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_UpdateProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).UpdateProvider(ctx, req.(*UpdateProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ListProviderRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProviderRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ListProviderRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ListProviderRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ListProviderRates(ctx, req.(*ListProviderRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_GetGameTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameTransactionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).GetGameTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_GetGameTransactionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).GetGameTransactionById(ctx, req.(*GetGameTransactionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ListUnpaidBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnpaidBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ListUnpaidBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ListUnpaidBets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ListUnpaidBets(ctx, req.(*ListUnpaidBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ExportUnpaidBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportUnpaidBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ExportUnpaidBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ExportUnpaidBets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ExportUnpaidBets(ctx, req.(*ExportUnpaidBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ListMultipleBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMultipleBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ListMultipleBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ListMultipleBets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ListMultipleBets(ctx, req.(*ListMultipleBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ExportMultipleBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportMultipleBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ExportMultipleBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ExportMultipleBets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ExportMultipleBets(ctx, req.(*ExportMultipleBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ListStakeVarianceBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStakeVarianceBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ListStakeVarianceBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ListStakeVarianceBets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ListStakeVarianceBets(ctx, req.(*ListStakeVarianceBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ExportStakeVarianceBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportStakeVarianceBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ExportStakeVarianceBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ExportStakeVarianceBets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ExportStakeVarianceBets(ctx, req.(*ExportStakeVarianceBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ListCustomerStrikeReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomerStrikeReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ListCustomerStrikeReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ListCustomerStrikeReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ListCustomerStrikeReports(ctx, req.(*ListCustomerStrikeReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ExportCustomerStrikeReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportCustomerStrikeReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ExportCustomerStrikeReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ExportCustomerStrikeReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ExportCustomerStrikeReports(ctx, req.(*ExportCustomerStrikeReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ExportSportEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportSportEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ExportSportEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ExportSportEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ExportSportEvents(ctx, req.(*ExportSportEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_AddGameBetDisplayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGameBetDisplayConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).AddGameBetDisplayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_AddGameBetDisplayConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).AddGameBetDisplayConfig(ctx, req.(*AddGameBetDisplayConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_UpdateGameBetDisplayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameBetDisplayConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).UpdateGameBetDisplayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_UpdateGameBetDisplayConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).UpdateGameBetDisplayConfig(ctx, req.(*UpdateGameBetDisplayConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ListGameBetDisplayConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameBetDisplayConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ListGameBetDisplayConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ListGameBetDisplayConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ListGameBetDisplayConfig(ctx, req.(*ListGameBetDisplayConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ListTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ListTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ListTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ListTag(ctx, req.(*ListTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_CreateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_UpdateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).UpdateTag(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_DeleteTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_GetTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).GetTag(ctx, req.(*GetTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_CreateTagConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).CreateTagConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_CreateTagConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).CreateTagConfig(ctx, req.(*CreateTagConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_UpdateTagConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).UpdateTagConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_UpdateTagConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).UpdateTagConfig(ctx, req.(*UpdateTagConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_GetTagConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).GetTagConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_GetTagConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).GetTagConfig(ctx, req.(*GetTagConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_UpdateTagConfigGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagConfigGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).UpdateTagConfigGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_UpdateTagConfigGames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).UpdateTagConfigGames(ctx, req.(*UpdateTagConfigGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeGame_ListGameTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeGameServer).ListGameTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeGame_ListGameTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeGameServer).ListGameTags(ctx, req.(*ListGameTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackofficeGame_ServiceDesc is the grpc.ServiceDesc for BackofficeGame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackofficeGame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.BackofficeGame",
	HandlerType: (*BackofficeGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProviders",
			Handler:    _BackofficeGame_ListProviders_Handler,
		},
		{
			MethodName: "ListProvidersWithDetail",
			Handler:    _BackofficeGame_ListProvidersWithDetail_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _BackofficeGame_ListCategories_Handler,
		},
		{
			MethodName: "ListFeeGroups",
			Handler:    _BackofficeGame_ListFeeGroups_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _BackofficeGame_ListTags_Handler,
		},
		{
			MethodName: "ListThemes",
			Handler:    _BackofficeGame_ListThemes_Handler,
		},
		{
			MethodName: "ListCurrencies",
			Handler:    _BackofficeGame_ListCurrencies_Handler,
		},
		{
			MethodName: "ListBets",
			Handler:    _BackofficeGame_ListBets_Handler,
		},
		{
			MethodName: "ExportBets",
			Handler:    _BackofficeGame_ExportBets_Handler,
		},
		{
			MethodName: "GetBetById",
			Handler:    _BackofficeGame_GetBetById_Handler,
		},
		{
			MethodName: "GetUserBetsOverview",
			Handler:    _BackofficeGame_GetUserBetsOverview_Handler,
		},
		{
			MethodName: "GetGameTransactionsForBet",
			Handler:    _BackofficeGame_GetGameTransactionsForBet_Handler,
		},
		{
			MethodName: "ListGames",
			Handler:    _BackofficeGame_ListGames_Handler,
		},
		{
			MethodName: "UpdateGame",
			Handler:    _BackofficeGame_UpdateGame_Handler,
		},
		{
			MethodName: "UpdateProvider",
			Handler:    _BackofficeGame_UpdateProvider_Handler,
		},
		{
			MethodName: "ListProviderRates",
			Handler:    _BackofficeGame_ListProviderRates_Handler,
		},
		{
			MethodName: "GetGameTransactionById",
			Handler:    _BackofficeGame_GetGameTransactionById_Handler,
		},
		{
			MethodName: "ListUnpaidBets",
			Handler:    _BackofficeGame_ListUnpaidBets_Handler,
		},
		{
			MethodName: "ExportUnpaidBets",
			Handler:    _BackofficeGame_ExportUnpaidBets_Handler,
		},
		{
			MethodName: "ListMultipleBets",
			Handler:    _BackofficeGame_ListMultipleBets_Handler,
		},
		{
			MethodName: "ExportMultipleBets",
			Handler:    _BackofficeGame_ExportMultipleBets_Handler,
		},
		{
			MethodName: "ListStakeVarianceBets",
			Handler:    _BackofficeGame_ListStakeVarianceBets_Handler,
		},
		{
			MethodName: "ExportStakeVarianceBets",
			Handler:    _BackofficeGame_ExportStakeVarianceBets_Handler,
		},
		{
			MethodName: "ListCustomerStrikeReports",
			Handler:    _BackofficeGame_ListCustomerStrikeReports_Handler,
		},
		{
			MethodName: "ExportCustomerStrikeReports",
			Handler:    _BackofficeGame_ExportCustomerStrikeReports_Handler,
		},
		{
			MethodName: "ExportSportEvents",
			Handler:    _BackofficeGame_ExportSportEvents_Handler,
		},
		{
			MethodName: "AddGameBetDisplayConfig",
			Handler:    _BackofficeGame_AddGameBetDisplayConfig_Handler,
		},
		{
			MethodName: "UpdateGameBetDisplayConfig",
			Handler:    _BackofficeGame_UpdateGameBetDisplayConfig_Handler,
		},
		{
			MethodName: "ListGameBetDisplayConfig",
			Handler:    _BackofficeGame_ListGameBetDisplayConfig_Handler,
		},
		{
			MethodName: "ListTag",
			Handler:    _BackofficeGame_ListTag_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _BackofficeGame_CreateTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _BackofficeGame_UpdateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _BackofficeGame_DeleteTag_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _BackofficeGame_GetTag_Handler,
		},
		{
			MethodName: "CreateTagConfig",
			Handler:    _BackofficeGame_CreateTagConfig_Handler,
		},
		{
			MethodName: "UpdateTagConfig",
			Handler:    _BackofficeGame_UpdateTagConfig_Handler,
		},
		{
			MethodName: "GetTagConfig",
			Handler:    _BackofficeGame_GetTagConfig_Handler,
		},
		{
			MethodName: "UpdateTagConfigGames",
			Handler:    _BackofficeGame_UpdateTagConfigGames_Handler,
		},
		{
			MethodName: "ListGameTags",
			Handler:    _BackofficeGame_ListGameTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_game.proto",
}
