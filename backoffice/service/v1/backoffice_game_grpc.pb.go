// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_game.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Backoffice_Game_ListBets_FullMethodName                  = "/api.backoffice.service.v1.Backoffice_Game/ListBets"
	Backoffice_Game_GetUserBetsOverview_FullMethodName       = "/api.backoffice.service.v1.Backoffice_Game/GetUserBetsOverview"
	Backoffice_Game_GetGameTransactionsForBet_FullMethodName = "/api.backoffice.service.v1.Backoffice_Game/GetGameTransactionsForBet"
	Backoffice_Game_ListUserBets_FullMethodName              = "/api.backoffice.service.v1.Backoffice_Game/ListUserBets"
	Backoffice_Game_ListGames_FullMethodName                 = "/api.backoffice.service.v1.Backoffice_Game/ListGames"
)

// Backoffice_GameClient is the client API for Backoffice_Game service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Backoffice_GameClient interface {
	ListBets(ctx context.Context, in *ListBetsRequest, opts ...grpc.CallOption) (*ListBetsResponse, error)
	GetUserBetsOverview(ctx context.Context, in *GetUserBetsOverviewRequest, opts ...grpc.CallOption) (*GetUserBetsOverviewResponse, error)
	GetGameTransactionsForBet(ctx context.Context, in *GetGameTransactionsForBetRequest, opts ...grpc.CallOption) (*GetGameTransactionsForBetResponse, error)
	ListUserBets(ctx context.Context, in *ListUserBetsRequest, opts ...grpc.CallOption) (*ListUserBetsResponse, error)
	ListGames(ctx context.Context, in *ListGamesRequest, opts ...grpc.CallOption) (*ListGamesResponse, error)
}

type backoffice_GameClient struct {
	cc grpc.ClientConnInterface
}

func NewBackoffice_GameClient(cc grpc.ClientConnInterface) Backoffice_GameClient {
	return &backoffice_GameClient{cc}
}

func (c *backoffice_GameClient) ListBets(ctx context.Context, in *ListBetsRequest, opts ...grpc.CallOption) (*ListBetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBetsResponse)
	err := c.cc.Invoke(ctx, Backoffice_Game_ListBets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_GameClient) GetUserBetsOverview(ctx context.Context, in *GetUserBetsOverviewRequest, opts ...grpc.CallOption) (*GetUserBetsOverviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBetsOverviewResponse)
	err := c.cc.Invoke(ctx, Backoffice_Game_GetUserBetsOverview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_GameClient) GetGameTransactionsForBet(ctx context.Context, in *GetGameTransactionsForBetRequest, opts ...grpc.CallOption) (*GetGameTransactionsForBetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGameTransactionsForBetResponse)
	err := c.cc.Invoke(ctx, Backoffice_Game_GetGameTransactionsForBet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_GameClient) ListUserBets(ctx context.Context, in *ListUserBetsRequest, opts ...grpc.CallOption) (*ListUserBetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserBetsResponse)
	err := c.cc.Invoke(ctx, Backoffice_Game_ListUserBets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_GameClient) ListGames(ctx context.Context, in *ListGamesRequest, opts ...grpc.CallOption) (*ListGamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGamesResponse)
	err := c.cc.Invoke(ctx, Backoffice_Game_ListGames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Backoffice_GameServer is the server API for Backoffice_Game service.
// All implementations must embed UnimplementedBackoffice_GameServer
// for forward compatibility.
type Backoffice_GameServer interface {
	ListBets(context.Context, *ListBetsRequest) (*ListBetsResponse, error)
	GetUserBetsOverview(context.Context, *GetUserBetsOverviewRequest) (*GetUserBetsOverviewResponse, error)
	GetGameTransactionsForBet(context.Context, *GetGameTransactionsForBetRequest) (*GetGameTransactionsForBetResponse, error)
	ListUserBets(context.Context, *ListUserBetsRequest) (*ListUserBetsResponse, error)
	ListGames(context.Context, *ListGamesRequest) (*ListGamesResponse, error)
	mustEmbedUnimplementedBackoffice_GameServer()
}

// UnimplementedBackoffice_GameServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackoffice_GameServer struct{}

func (UnimplementedBackoffice_GameServer) ListBets(context.Context, *ListBetsRequest) (*ListBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBets not implemented")
}
func (UnimplementedBackoffice_GameServer) GetUserBetsOverview(context.Context, *GetUserBetsOverviewRequest) (*GetUserBetsOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBetsOverview not implemented")
}
func (UnimplementedBackoffice_GameServer) GetGameTransactionsForBet(context.Context, *GetGameTransactionsForBetRequest) (*GetGameTransactionsForBetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameTransactionsForBet not implemented")
}
func (UnimplementedBackoffice_GameServer) ListUserBets(context.Context, *ListUserBetsRequest) (*ListUserBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserBets not implemented")
}
func (UnimplementedBackoffice_GameServer) ListGames(context.Context, *ListGamesRequest) (*ListGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGames not implemented")
}
func (UnimplementedBackoffice_GameServer) mustEmbedUnimplementedBackoffice_GameServer() {}
func (UnimplementedBackoffice_GameServer) testEmbeddedByValue()                         {}

// UnsafeBackoffice_GameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Backoffice_GameServer will
// result in compilation errors.
type UnsafeBackoffice_GameServer interface {
	mustEmbedUnimplementedBackoffice_GameServer()
}

func RegisterBackoffice_GameServer(s grpc.ServiceRegistrar, srv Backoffice_GameServer) {
	// If the following call pancis, it indicates UnimplementedBackoffice_GameServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Backoffice_Game_ServiceDesc, srv)
}

func _Backoffice_Game_ListBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_GameServer).ListBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Game_ListBets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_GameServer).ListBets(ctx, req.(*ListBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Game_GetUserBetsOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBetsOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_GameServer).GetUserBetsOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Game_GetUserBetsOverview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_GameServer).GetUserBetsOverview(ctx, req.(*GetUserBetsOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Game_GetGameTransactionsForBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameTransactionsForBetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_GameServer).GetGameTransactionsForBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Game_GetGameTransactionsForBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_GameServer).GetGameTransactionsForBet(ctx, req.(*GetGameTransactionsForBetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Game_ListUserBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_GameServer).ListUserBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Game_ListUserBets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_GameServer).ListUserBets(ctx, req.(*ListUserBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Game_ListGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_GameServer).ListGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Game_ListGames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_GameServer).ListGames(ctx, req.(*ListGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Backoffice_Game_ServiceDesc is the grpc.ServiceDesc for Backoffice_Game service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backoffice_Game_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.Backoffice_Game",
	HandlerType: (*Backoffice_GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBets",
			Handler:    _Backoffice_Game_ListBets_Handler,
		},
		{
			MethodName: "GetUserBetsOverview",
			Handler:    _Backoffice_Game_GetUserBetsOverview_Handler,
		},
		{
			MethodName: "GetGameTransactionsForBet",
			Handler:    _Backoffice_Game_GetGameTransactionsForBet_Handler,
		},
		{
			MethodName: "ListUserBets",
			Handler:    _Backoffice_Game_ListUserBets_Handler,
		},
		{
			MethodName: "ListGames",
			Handler:    _Backoffice_Game_ListGames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_game.proto",
}
