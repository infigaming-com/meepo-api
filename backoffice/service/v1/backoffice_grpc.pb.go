// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Backoffice_AddAccount_FullMethodName                  = "/api.backoffice.service.v1.Backoffice/AddAccount"
	Backoffice_SendEmailVerification_FullMethodName       = "/api.backoffice.service.v1.Backoffice/SendEmailVerification"
	Backoffice_VerifyEmail_FullMethodName                 = "/api.backoffice.service.v1.Backoffice/VerifyEmail"
	Backoffice_SendMobileVerification_FullMethodName      = "/api.backoffice.service.v1.Backoffice/SendMobileVerification"
	Backoffice_VerifyMobile_FullMethodName                = "/api.backoffice.service.v1.Backoffice/VerifyMobile"
	Backoffice_ResetPassword_FullMethodName               = "/api.backoffice.service.v1.Backoffice/ResetPassword"
	Backoffice_Generate2Fa_FullMethodName                 = "/api.backoffice.service.v1.Backoffice/Generate2fa"
	Backoffice_Bind2Fa_FullMethodName                     = "/api.backoffice.service.v1.Backoffice/Bind2fa"
	Backoffice_Unbind2Fa_FullMethodName                   = "/api.backoffice.service.v1.Backoffice/Unbind2fa"
	Backoffice_UpdateAccount_FullMethodName               = "/api.backoffice.service.v1.Backoffice/UpdateAccount"
	Backoffice_GetOverviewDashboard_FullMethodName        = "/api.backoffice.service.v1.Backoffice/GetOverviewDashboard"
	Backoffice_GetTimeRangedDashboard_FullMethodName      = "/api.backoffice.service.v1.Backoffice/GetTimeRangedDashboard"
	Backoffice_GetTopOperatorsDashboard_FullMethodName    = "/api.backoffice.service.v1.Backoffice/GetTopOperatorsDashboard"
	Backoffice_ListBets_FullMethodName                    = "/api.backoffice.service.v1.Backoffice/ListBets"
	Backoffice_GetUserBetsOverview_FullMethodName         = "/api.backoffice.service.v1.Backoffice/GetUserBetsOverview"
	Backoffice_GetGameTransactionsForBet_FullMethodName   = "/api.backoffice.service.v1.Backoffice/GetGameTransactionsForBet"
	Backoffice_ListUserBets_FullMethodName                = "/api.backoffice.service.v1.Backoffice/ListUserBets"
	Backoffice_ListGames_FullMethodName                   = "/api.backoffice.service.v1.Backoffice/ListGames"
	Backoffice_ListUsers_FullMethodName                   = "/api.backoffice.service.v1.Backoffice/ListUsers"
	Backoffice_GetUserOverview_FullMethodName             = "/api.backoffice.service.v1.Backoffice/GetUserOverview"
	Backoffice_GetUserProfile_FullMethodName              = "/api.backoffice.service.v1.Backoffice/GetUserProfile"
	Backoffice_AddOperatorUserTag_FullMethodName          = "/api.backoffice.service.v1.Backoffice/AddOperatorUserTag"
	Backoffice_DeleteOperatorUserTag_FullMethodName       = "/api.backoffice.service.v1.Backoffice/DeleteOperatorUserTag"
	Backoffice_GetOperatorUserTags_FullMethodName         = "/api.backoffice.service.v1.Backoffice/GetOperatorUserTags"
	Backoffice_AddUserTag_FullMethodName                  = "/api.backoffice.service.v1.Backoffice/AddUserTag"
	Backoffice_DeleteUserTag_FullMethodName               = "/api.backoffice.service.v1.Backoffice/DeleteUserTag"
	Backoffice_AddUserComment_FullMethodName              = "/api.backoffice.service.v1.Backoffice/AddUserComment"
	Backoffice_ListPaymentTransactions_FullMethodName     = "/api.backoffice.service.v1.Backoffice/ListPaymentTransactions"
	Backoffice_GetWallets_FullMethodName                  = "/api.backoffice.service.v1.Backoffice/GetWallets"
	Backoffice_GetWalletCreditTransactions_FullMethodName = "/api.backoffice.service.v1.Backoffice/GetWalletCreditTransactions"
	Backoffice_UpdateWallet_FullMethodName                = "/api.backoffice.service.v1.Backoffice/UpdateWallet"
	Backoffice_ListWithdrawReviewTickets_FullMethodName   = "/api.backoffice.service.v1.Backoffice/ListWithdrawReviewTickets"
	Backoffice_ReviewTicket_FullMethodName                = "/api.backoffice.service.v1.Backoffice/ReviewTicket"
	Backoffice_GetSummary_FullMethodName                  = "/api.backoffice.service.v1.Backoffice/GetSummary"
	Backoffice_ListDailySummaries_FullMethodName          = "/api.backoffice.service.v1.Backoffice/ListDailySummaries"
	Backoffice_GetGameDataSummary_FullMethodName          = "/api.backoffice.service.v1.Backoffice/GetGameDataSummary"
	Backoffice_ListGameDataDailySummaries_FullMethodName  = "/api.backoffice.service.v1.Backoffice/ListGameDataDailySummaries"
	Backoffice_GetPlayerGameDataSummary_FullMethodName    = "/api.backoffice.service.v1.Backoffice/GetPlayerGameDataSummary"
	Backoffice_ListDepositDailySummaries_FullMethodName   = "/api.backoffice.service.v1.Backoffice/ListDepositDailySummaries"
	Backoffice_ListDepositDailyDetails_FullMethodName     = "/api.backoffice.service.v1.Backoffice/ListDepositDailyDetails"
	Backoffice_ListWithdrawDailySummaries_FullMethodName  = "/api.backoffice.service.v1.Backoffice/ListWithdrawDailySummaries"
	Backoffice_ListWithdrawDailyDetails_FullMethodName    = "/api.backoffice.service.v1.Backoffice/ListWithdrawDailyDetails"
)

// BackofficeClient is the client API for Backoffice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Backoffice service provides system and account management functionality.
type BackofficeClient interface {
	// Account
	AddAccount(ctx context.Context, in *AddAccountRequest, opts ...grpc.CallOption) (*AddAccountResponse, error)
	SendEmailVerification(ctx context.Context, in *SendEmailVerificationRequest, opts ...grpc.CallOption) (*SendEmailVerificationResponse, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	SendMobileVerification(ctx context.Context, in *SendMobileVerificationRequest, opts ...grpc.CallOption) (*SendMobileVerificationResponse, error)
	VerifyMobile(ctx context.Context, in *VerifyMobileRequest, opts ...grpc.CallOption) (*VerifyMobileResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	Generate2Fa(ctx context.Context, in *Generate2FaRequest, opts ...grpc.CallOption) (*Generate2FaResponse, error)
	Bind2Fa(ctx context.Context, in *Bind2FaRequest, opts ...grpc.CallOption) (*Bind2FaResponse, error)
	Unbind2Fa(ctx context.Context, in *Unbind2FaRequest, opts ...grpc.CallOption) (*Unbind2FaResponse, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	// Dashboard
	GetOverviewDashboard(ctx context.Context, in *GetOverviewDashboardRequest, opts ...grpc.CallOption) (*GetOverviewDashboardResponse, error)
	GetTimeRangedDashboard(ctx context.Context, in *GetTimeRangedDashboardRequest, opts ...grpc.CallOption) (*GetTimeRangedDashboardResponse, error)
	GetTopOperatorsDashboard(ctx context.Context, in *GetTopOperatorsDashboardRequest, opts ...grpc.CallOption) (*GetTopOperatorsDashboardResponse, error)
	// Game
	ListBets(ctx context.Context, in *ListBetsRequest, opts ...grpc.CallOption) (*ListBetsResponse, error)
	GetUserBetsOverview(ctx context.Context, in *GetUserBetsOverviewRequest, opts ...grpc.CallOption) (*GetUserBetsOverviewResponse, error)
	GetGameTransactionsForBet(ctx context.Context, in *GetGameTransactionsForBetRequest, opts ...grpc.CallOption) (*GetGameTransactionsForBetResponse, error)
	ListUserBets(ctx context.Context, in *ListUserBetsRequest, opts ...grpc.CallOption) (*ListUserBetsResponse, error)
	ListGames(ctx context.Context, in *ListGamesRequest, opts ...grpc.CallOption) (*ListGamesResponse, error)
	// User
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	GetUserOverview(ctx context.Context, in *GetUserOverviewRequest, opts ...grpc.CallOption) (*GetUserOverviewResponse, error)
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	AddOperatorUserTag(ctx context.Context, in *AddOperatorUserTagRequest, opts ...grpc.CallOption) (*AddOperatorUserTagResponse, error)
	DeleteOperatorUserTag(ctx context.Context, in *DeleteOperatorUserTagRequest, opts ...grpc.CallOption) (*DeleteOperatorUserTagResponse, error)
	GetOperatorUserTags(ctx context.Context, in *GetOperatorUserTagsRequest, opts ...grpc.CallOption) (*GetOperatorUserTagsResponse, error)
	AddUserTag(ctx context.Context, in *AddUserTagRequest, opts ...grpc.CallOption) (*AddUserTagResponse, error)
	DeleteUserTag(ctx context.Context, in *DeleteUserTagRequest, opts ...grpc.CallOption) (*DeleteUserTagResponse, error)
	AddUserComment(ctx context.Context, in *AddUserCommentRequest, opts ...grpc.CallOption) (*AddUserCommentResponse, error)
	// Payment
	ListPaymentTransactions(ctx context.Context, in *ListPaymentTransactionsRequest, opts ...grpc.CallOption) (*ListPaymentTransactionsResponse, error)
	// Wallet
	GetWallets(ctx context.Context, in *GetWalletsRequest, opts ...grpc.CallOption) (*GetWalletsResponse, error)
	GetWalletCreditTransactions(ctx context.Context, in *GetWalletCreditTransactionsRequest, opts ...grpc.CallOption) (*GetWalletCreditTransactionsResponse, error)
	UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...grpc.CallOption) (*UpdateWalletResponse, error)
	// Review
	ListWithdrawReviewTickets(ctx context.Context, in *ListWithdrawReviewTicketsRequest, opts ...grpc.CallOption) (*ListWithdrawReviewTicketsResponse, error)
	ReviewTicket(ctx context.Context, in *ReviewTicketRequest, opts ...grpc.CallOption) (*ReviewTicketResponse, error)
	// Report
	GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*GetSummaryResponse, error)
	ListDailySummaries(ctx context.Context, in *ListDailySummariesRequest, opts ...grpc.CallOption) (*ListDailySummariesResponse, error)
	GetGameDataSummary(ctx context.Context, in *GetGameDataSummaryRequest, opts ...grpc.CallOption) (*GetGameDataSummaryResponse, error)
	ListGameDataDailySummaries(ctx context.Context, in *ListGameDataDailySummariesRequest, opts ...grpc.CallOption) (*ListGameDataDailySummariesResponse, error)
	GetPlayerGameDataSummary(ctx context.Context, in *GetPlayerGameDataSummaryRequest, opts ...grpc.CallOption) (*GetPlayerGameDataSummaryResponse, error)
	ListDepositDailySummaries(ctx context.Context, in *ListDepositDailySummariesRequest, opts ...grpc.CallOption) (*ListDepositDailySummariesResponse, error)
	ListDepositDailyDetails(ctx context.Context, in *ListDepositDailyDetailsRequest, opts ...grpc.CallOption) (*ListDepositDailyDetailsResponse, error)
	ListWithdrawDailySummaries(ctx context.Context, in *ListWithdrawDailySummariesRequest, opts ...grpc.CallOption) (*ListWithdrawDailySummariesResponse, error)
	ListWithdrawDailyDetails(ctx context.Context, in *ListWithdrawDailyDetailsRequest, opts ...grpc.CallOption) (*ListWithdrawDailyDetailsResponse, error)
}

type backofficeClient struct {
	cc grpc.ClientConnInterface
}

func NewBackofficeClient(cc grpc.ClientConnInterface) BackofficeClient {
	return &backofficeClient{cc}
}

func (c *backofficeClient) AddAccount(ctx context.Context, in *AddAccountRequest, opts ...grpc.CallOption) (*AddAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAccountResponse)
	err := c.cc.Invoke(ctx, Backoffice_AddAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) SendEmailVerification(ctx context.Context, in *SendEmailVerificationRequest, opts ...grpc.CallOption) (*SendEmailVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailVerificationResponse)
	err := c.cc.Invoke(ctx, Backoffice_SendEmailVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, Backoffice_VerifyEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) SendMobileVerification(ctx context.Context, in *SendMobileVerificationRequest, opts ...grpc.CallOption) (*SendMobileVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMobileVerificationResponse)
	err := c.cc.Invoke(ctx, Backoffice_SendMobileVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) VerifyMobile(ctx context.Context, in *VerifyMobileRequest, opts ...grpc.CallOption) (*VerifyMobileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyMobileResponse)
	err := c.cc.Invoke(ctx, Backoffice_VerifyMobile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, Backoffice_ResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) Generate2Fa(ctx context.Context, in *Generate2FaRequest, opts ...grpc.CallOption) (*Generate2FaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Generate2FaResponse)
	err := c.cc.Invoke(ctx, Backoffice_Generate2Fa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) Bind2Fa(ctx context.Context, in *Bind2FaRequest, opts ...grpc.CallOption) (*Bind2FaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bind2FaResponse)
	err := c.cc.Invoke(ctx, Backoffice_Bind2Fa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) Unbind2Fa(ctx context.Context, in *Unbind2FaRequest, opts ...grpc.CallOption) (*Unbind2FaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Unbind2FaResponse)
	err := c.cc.Invoke(ctx, Backoffice_Unbind2Fa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAccountResponse)
	err := c.cc.Invoke(ctx, Backoffice_UpdateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) GetOverviewDashboard(ctx context.Context, in *GetOverviewDashboardRequest, opts ...grpc.CallOption) (*GetOverviewDashboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOverviewDashboardResponse)
	err := c.cc.Invoke(ctx, Backoffice_GetOverviewDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) GetTimeRangedDashboard(ctx context.Context, in *GetTimeRangedDashboardRequest, opts ...grpc.CallOption) (*GetTimeRangedDashboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTimeRangedDashboardResponse)
	err := c.cc.Invoke(ctx, Backoffice_GetTimeRangedDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) GetTopOperatorsDashboard(ctx context.Context, in *GetTopOperatorsDashboardRequest, opts ...grpc.CallOption) (*GetTopOperatorsDashboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopOperatorsDashboardResponse)
	err := c.cc.Invoke(ctx, Backoffice_GetTopOperatorsDashboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) ListBets(ctx context.Context, in *ListBetsRequest, opts ...grpc.CallOption) (*ListBetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBetsResponse)
	err := c.cc.Invoke(ctx, Backoffice_ListBets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) GetUserBetsOverview(ctx context.Context, in *GetUserBetsOverviewRequest, opts ...grpc.CallOption) (*GetUserBetsOverviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBetsOverviewResponse)
	err := c.cc.Invoke(ctx, Backoffice_GetUserBetsOverview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) GetGameTransactionsForBet(ctx context.Context, in *GetGameTransactionsForBetRequest, opts ...grpc.CallOption) (*GetGameTransactionsForBetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGameTransactionsForBetResponse)
	err := c.cc.Invoke(ctx, Backoffice_GetGameTransactionsForBet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) ListUserBets(ctx context.Context, in *ListUserBetsRequest, opts ...grpc.CallOption) (*ListUserBetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserBetsResponse)
	err := c.cc.Invoke(ctx, Backoffice_ListUserBets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) ListGames(ctx context.Context, in *ListGamesRequest, opts ...grpc.CallOption) (*ListGamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGamesResponse)
	err := c.cc.Invoke(ctx, Backoffice_ListGames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, Backoffice_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) GetUserOverview(ctx context.Context, in *GetUserOverviewRequest, opts ...grpc.CallOption) (*GetUserOverviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserOverviewResponse)
	err := c.cc.Invoke(ctx, Backoffice_GetUserOverview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, Backoffice_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) AddOperatorUserTag(ctx context.Context, in *AddOperatorUserTagRequest, opts ...grpc.CallOption) (*AddOperatorUserTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOperatorUserTagResponse)
	err := c.cc.Invoke(ctx, Backoffice_AddOperatorUserTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) DeleteOperatorUserTag(ctx context.Context, in *DeleteOperatorUserTagRequest, opts ...grpc.CallOption) (*DeleteOperatorUserTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOperatorUserTagResponse)
	err := c.cc.Invoke(ctx, Backoffice_DeleteOperatorUserTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) GetOperatorUserTags(ctx context.Context, in *GetOperatorUserTagsRequest, opts ...grpc.CallOption) (*GetOperatorUserTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperatorUserTagsResponse)
	err := c.cc.Invoke(ctx, Backoffice_GetOperatorUserTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) AddUserTag(ctx context.Context, in *AddUserTagRequest, opts ...grpc.CallOption) (*AddUserTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserTagResponse)
	err := c.cc.Invoke(ctx, Backoffice_AddUserTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) DeleteUserTag(ctx context.Context, in *DeleteUserTagRequest, opts ...grpc.CallOption) (*DeleteUserTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserTagResponse)
	err := c.cc.Invoke(ctx, Backoffice_DeleteUserTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) AddUserComment(ctx context.Context, in *AddUserCommentRequest, opts ...grpc.CallOption) (*AddUserCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserCommentResponse)
	err := c.cc.Invoke(ctx, Backoffice_AddUserComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) ListPaymentTransactions(ctx context.Context, in *ListPaymentTransactionsRequest, opts ...grpc.CallOption) (*ListPaymentTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPaymentTransactionsResponse)
	err := c.cc.Invoke(ctx, Backoffice_ListPaymentTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) GetWallets(ctx context.Context, in *GetWalletsRequest, opts ...grpc.CallOption) (*GetWalletsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletsResponse)
	err := c.cc.Invoke(ctx, Backoffice_GetWallets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) GetWalletCreditTransactions(ctx context.Context, in *GetWalletCreditTransactionsRequest, opts ...grpc.CallOption) (*GetWalletCreditTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletCreditTransactionsResponse)
	err := c.cc.Invoke(ctx, Backoffice_GetWalletCreditTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...grpc.CallOption) (*UpdateWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWalletResponse)
	err := c.cc.Invoke(ctx, Backoffice_UpdateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) ListWithdrawReviewTickets(ctx context.Context, in *ListWithdrawReviewTicketsRequest, opts ...grpc.CallOption) (*ListWithdrawReviewTicketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWithdrawReviewTicketsResponse)
	err := c.cc.Invoke(ctx, Backoffice_ListWithdrawReviewTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) ReviewTicket(ctx context.Context, in *ReviewTicketRequest, opts ...grpc.CallOption) (*ReviewTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewTicketResponse)
	err := c.cc.Invoke(ctx, Backoffice_ReviewTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*GetSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSummaryResponse)
	err := c.cc.Invoke(ctx, Backoffice_GetSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) ListDailySummaries(ctx context.Context, in *ListDailySummariesRequest, opts ...grpc.CallOption) (*ListDailySummariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDailySummariesResponse)
	err := c.cc.Invoke(ctx, Backoffice_ListDailySummaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) GetGameDataSummary(ctx context.Context, in *GetGameDataSummaryRequest, opts ...grpc.CallOption) (*GetGameDataSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGameDataSummaryResponse)
	err := c.cc.Invoke(ctx, Backoffice_GetGameDataSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) ListGameDataDailySummaries(ctx context.Context, in *ListGameDataDailySummariesRequest, opts ...grpc.CallOption) (*ListGameDataDailySummariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGameDataDailySummariesResponse)
	err := c.cc.Invoke(ctx, Backoffice_ListGameDataDailySummaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) GetPlayerGameDataSummary(ctx context.Context, in *GetPlayerGameDataSummaryRequest, opts ...grpc.CallOption) (*GetPlayerGameDataSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlayerGameDataSummaryResponse)
	err := c.cc.Invoke(ctx, Backoffice_GetPlayerGameDataSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) ListDepositDailySummaries(ctx context.Context, in *ListDepositDailySummariesRequest, opts ...grpc.CallOption) (*ListDepositDailySummariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDepositDailySummariesResponse)
	err := c.cc.Invoke(ctx, Backoffice_ListDepositDailySummaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) ListDepositDailyDetails(ctx context.Context, in *ListDepositDailyDetailsRequest, opts ...grpc.CallOption) (*ListDepositDailyDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDepositDailyDetailsResponse)
	err := c.cc.Invoke(ctx, Backoffice_ListDepositDailyDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) ListWithdrawDailySummaries(ctx context.Context, in *ListWithdrawDailySummariesRequest, opts ...grpc.CallOption) (*ListWithdrawDailySummariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWithdrawDailySummariesResponse)
	err := c.cc.Invoke(ctx, Backoffice_ListWithdrawDailySummaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeClient) ListWithdrawDailyDetails(ctx context.Context, in *ListWithdrawDailyDetailsRequest, opts ...grpc.CallOption) (*ListWithdrawDailyDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWithdrawDailyDetailsResponse)
	err := c.cc.Invoke(ctx, Backoffice_ListWithdrawDailyDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackofficeServer is the server API for Backoffice service.
// All implementations must embed UnimplementedBackofficeServer
// for forward compatibility.
//
// Backoffice service provides system and account management functionality.
type BackofficeServer interface {
	// Account
	AddAccount(context.Context, *AddAccountRequest) (*AddAccountResponse, error)
	SendEmailVerification(context.Context, *SendEmailVerificationRequest) (*SendEmailVerificationResponse, error)
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	SendMobileVerification(context.Context, *SendMobileVerificationRequest) (*SendMobileVerificationResponse, error)
	VerifyMobile(context.Context, *VerifyMobileRequest) (*VerifyMobileResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	Generate2Fa(context.Context, *Generate2FaRequest) (*Generate2FaResponse, error)
	Bind2Fa(context.Context, *Bind2FaRequest) (*Bind2FaResponse, error)
	Unbind2Fa(context.Context, *Unbind2FaRequest) (*Unbind2FaResponse, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	// Dashboard
	GetOverviewDashboard(context.Context, *GetOverviewDashboardRequest) (*GetOverviewDashboardResponse, error)
	GetTimeRangedDashboard(context.Context, *GetTimeRangedDashboardRequest) (*GetTimeRangedDashboardResponse, error)
	GetTopOperatorsDashboard(context.Context, *GetTopOperatorsDashboardRequest) (*GetTopOperatorsDashboardResponse, error)
	// Game
	ListBets(context.Context, *ListBetsRequest) (*ListBetsResponse, error)
	GetUserBetsOverview(context.Context, *GetUserBetsOverviewRequest) (*GetUserBetsOverviewResponse, error)
	GetGameTransactionsForBet(context.Context, *GetGameTransactionsForBetRequest) (*GetGameTransactionsForBetResponse, error)
	ListUserBets(context.Context, *ListUserBetsRequest) (*ListUserBetsResponse, error)
	ListGames(context.Context, *ListGamesRequest) (*ListGamesResponse, error)
	// User
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	GetUserOverview(context.Context, *GetUserOverviewRequest) (*GetUserOverviewResponse, error)
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	AddOperatorUserTag(context.Context, *AddOperatorUserTagRequest) (*AddOperatorUserTagResponse, error)
	DeleteOperatorUserTag(context.Context, *DeleteOperatorUserTagRequest) (*DeleteOperatorUserTagResponse, error)
	GetOperatorUserTags(context.Context, *GetOperatorUserTagsRequest) (*GetOperatorUserTagsResponse, error)
	AddUserTag(context.Context, *AddUserTagRequest) (*AddUserTagResponse, error)
	DeleteUserTag(context.Context, *DeleteUserTagRequest) (*DeleteUserTagResponse, error)
	AddUserComment(context.Context, *AddUserCommentRequest) (*AddUserCommentResponse, error)
	// Payment
	ListPaymentTransactions(context.Context, *ListPaymentTransactionsRequest) (*ListPaymentTransactionsResponse, error)
	// Wallet
	GetWallets(context.Context, *GetWalletsRequest) (*GetWalletsResponse, error)
	GetWalletCreditTransactions(context.Context, *GetWalletCreditTransactionsRequest) (*GetWalletCreditTransactionsResponse, error)
	UpdateWallet(context.Context, *UpdateWalletRequest) (*UpdateWalletResponse, error)
	// Review
	ListWithdrawReviewTickets(context.Context, *ListWithdrawReviewTicketsRequest) (*ListWithdrawReviewTicketsResponse, error)
	ReviewTicket(context.Context, *ReviewTicketRequest) (*ReviewTicketResponse, error)
	// Report
	GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error)
	ListDailySummaries(context.Context, *ListDailySummariesRequest) (*ListDailySummariesResponse, error)
	GetGameDataSummary(context.Context, *GetGameDataSummaryRequest) (*GetGameDataSummaryResponse, error)
	ListGameDataDailySummaries(context.Context, *ListGameDataDailySummariesRequest) (*ListGameDataDailySummariesResponse, error)
	GetPlayerGameDataSummary(context.Context, *GetPlayerGameDataSummaryRequest) (*GetPlayerGameDataSummaryResponse, error)
	ListDepositDailySummaries(context.Context, *ListDepositDailySummariesRequest) (*ListDepositDailySummariesResponse, error)
	ListDepositDailyDetails(context.Context, *ListDepositDailyDetailsRequest) (*ListDepositDailyDetailsResponse, error)
	ListWithdrawDailySummaries(context.Context, *ListWithdrawDailySummariesRequest) (*ListWithdrawDailySummariesResponse, error)
	ListWithdrawDailyDetails(context.Context, *ListWithdrawDailyDetailsRequest) (*ListWithdrawDailyDetailsResponse, error)
	mustEmbedUnimplementedBackofficeServer()
}

// UnimplementedBackofficeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackofficeServer struct{}

func (UnimplementedBackofficeServer) AddAccount(context.Context, *AddAccountRequest) (*AddAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccount not implemented")
}
func (UnimplementedBackofficeServer) SendEmailVerification(context.Context, *SendEmailVerificationRequest) (*SendEmailVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailVerification not implemented")
}
func (UnimplementedBackofficeServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedBackofficeServer) SendMobileVerification(context.Context, *SendMobileVerificationRequest) (*SendMobileVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMobileVerification not implemented")
}
func (UnimplementedBackofficeServer) VerifyMobile(context.Context, *VerifyMobileRequest) (*VerifyMobileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMobile not implemented")
}
func (UnimplementedBackofficeServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedBackofficeServer) Generate2Fa(context.Context, *Generate2FaRequest) (*Generate2FaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate2Fa not implemented")
}
func (UnimplementedBackofficeServer) Bind2Fa(context.Context, *Bind2FaRequest) (*Bind2FaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bind2Fa not implemented")
}
func (UnimplementedBackofficeServer) Unbind2Fa(context.Context, *Unbind2FaRequest) (*Unbind2FaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unbind2Fa not implemented")
}
func (UnimplementedBackofficeServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedBackofficeServer) GetOverviewDashboard(context.Context, *GetOverviewDashboardRequest) (*GetOverviewDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOverviewDashboard not implemented")
}
func (UnimplementedBackofficeServer) GetTimeRangedDashboard(context.Context, *GetTimeRangedDashboardRequest) (*GetTimeRangedDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeRangedDashboard not implemented")
}
func (UnimplementedBackofficeServer) GetTopOperatorsDashboard(context.Context, *GetTopOperatorsDashboardRequest) (*GetTopOperatorsDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopOperatorsDashboard not implemented")
}
func (UnimplementedBackofficeServer) ListBets(context.Context, *ListBetsRequest) (*ListBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBets not implemented")
}
func (UnimplementedBackofficeServer) GetUserBetsOverview(context.Context, *GetUserBetsOverviewRequest) (*GetUserBetsOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBetsOverview not implemented")
}
func (UnimplementedBackofficeServer) GetGameTransactionsForBet(context.Context, *GetGameTransactionsForBetRequest) (*GetGameTransactionsForBetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameTransactionsForBet not implemented")
}
func (UnimplementedBackofficeServer) ListUserBets(context.Context, *ListUserBetsRequest) (*ListUserBetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserBets not implemented")
}
func (UnimplementedBackofficeServer) ListGames(context.Context, *ListGamesRequest) (*ListGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGames not implemented")
}
func (UnimplementedBackofficeServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedBackofficeServer) GetUserOverview(context.Context, *GetUserOverviewRequest) (*GetUserOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOverview not implemented")
}
func (UnimplementedBackofficeServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedBackofficeServer) AddOperatorUserTag(context.Context, *AddOperatorUserTagRequest) (*AddOperatorUserTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOperatorUserTag not implemented")
}
func (UnimplementedBackofficeServer) DeleteOperatorUserTag(context.Context, *DeleteOperatorUserTagRequest) (*DeleteOperatorUserTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOperatorUserTag not implemented")
}
func (UnimplementedBackofficeServer) GetOperatorUserTags(context.Context, *GetOperatorUserTagsRequest) (*GetOperatorUserTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorUserTags not implemented")
}
func (UnimplementedBackofficeServer) AddUserTag(context.Context, *AddUserTagRequest) (*AddUserTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserTag not implemented")
}
func (UnimplementedBackofficeServer) DeleteUserTag(context.Context, *DeleteUserTagRequest) (*DeleteUserTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserTag not implemented")
}
func (UnimplementedBackofficeServer) AddUserComment(context.Context, *AddUserCommentRequest) (*AddUserCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserComment not implemented")
}
func (UnimplementedBackofficeServer) ListPaymentTransactions(context.Context, *ListPaymentTransactionsRequest) (*ListPaymentTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaymentTransactions not implemented")
}
func (UnimplementedBackofficeServer) GetWallets(context.Context, *GetWalletsRequest) (*GetWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallets not implemented")
}
func (UnimplementedBackofficeServer) GetWalletCreditTransactions(context.Context, *GetWalletCreditTransactionsRequest) (*GetWalletCreditTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletCreditTransactions not implemented")
}
func (UnimplementedBackofficeServer) UpdateWallet(context.Context, *UpdateWalletRequest) (*UpdateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWallet not implemented")
}
func (UnimplementedBackofficeServer) ListWithdrawReviewTickets(context.Context, *ListWithdrawReviewTicketsRequest) (*ListWithdrawReviewTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawReviewTickets not implemented")
}
func (UnimplementedBackofficeServer) ReviewTicket(context.Context, *ReviewTicketRequest) (*ReviewTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewTicket not implemented")
}
func (UnimplementedBackofficeServer) GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummary not implemented")
}
func (UnimplementedBackofficeServer) ListDailySummaries(context.Context, *ListDailySummariesRequest) (*ListDailySummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDailySummaries not implemented")
}
func (UnimplementedBackofficeServer) GetGameDataSummary(context.Context, *GetGameDataSummaryRequest) (*GetGameDataSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameDataSummary not implemented")
}
func (UnimplementedBackofficeServer) ListGameDataDailySummaries(context.Context, *ListGameDataDailySummariesRequest) (*ListGameDataDailySummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGameDataDailySummaries not implemented")
}
func (UnimplementedBackofficeServer) GetPlayerGameDataSummary(context.Context, *GetPlayerGameDataSummaryRequest) (*GetPlayerGameDataSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerGameDataSummary not implemented")
}
func (UnimplementedBackofficeServer) ListDepositDailySummaries(context.Context, *ListDepositDailySummariesRequest) (*ListDepositDailySummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepositDailySummaries not implemented")
}
func (UnimplementedBackofficeServer) ListDepositDailyDetails(context.Context, *ListDepositDailyDetailsRequest) (*ListDepositDailyDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepositDailyDetails not implemented")
}
func (UnimplementedBackofficeServer) ListWithdrawDailySummaries(context.Context, *ListWithdrawDailySummariesRequest) (*ListWithdrawDailySummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawDailySummaries not implemented")
}
func (UnimplementedBackofficeServer) ListWithdrawDailyDetails(context.Context, *ListWithdrawDailyDetailsRequest) (*ListWithdrawDailyDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawDailyDetails not implemented")
}
func (UnimplementedBackofficeServer) mustEmbedUnimplementedBackofficeServer() {}
func (UnimplementedBackofficeServer) testEmbeddedByValue()                    {}

// UnsafeBackofficeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackofficeServer will
// result in compilation errors.
type UnsafeBackofficeServer interface {
	mustEmbedUnimplementedBackofficeServer()
}

func RegisterBackofficeServer(s grpc.ServiceRegistrar, srv BackofficeServer) {
	// If the following call pancis, it indicates UnimplementedBackofficeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Backoffice_ServiceDesc, srv)
}

func _Backoffice_AddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).AddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_AddAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).AddAccount(ctx, req.(*AddAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_SendEmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).SendEmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_SendEmailVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).SendEmailVerification(ctx, req.(*SendEmailVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_SendMobileVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMobileVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).SendMobileVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_SendMobileVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).SendMobileVerification(ctx, req.(*SendMobileVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_VerifyMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMobileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).VerifyMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_VerifyMobile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).VerifyMobile(ctx, req.(*VerifyMobileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Generate2Fa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Generate2FaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).Generate2Fa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Generate2Fa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).Generate2Fa(ctx, req.(*Generate2FaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Bind2Fa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bind2FaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).Bind2Fa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Bind2Fa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).Bind2Fa(ctx, req.(*Bind2FaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Unbind2Fa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Unbind2FaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).Unbind2Fa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Unbind2Fa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).Unbind2Fa(ctx, req.(*Unbind2FaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_GetOverviewDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOverviewDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).GetOverviewDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_GetOverviewDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).GetOverviewDashboard(ctx, req.(*GetOverviewDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_GetTimeRangedDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimeRangedDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).GetTimeRangedDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_GetTimeRangedDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).GetTimeRangedDashboard(ctx, req.(*GetTimeRangedDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_GetTopOperatorsDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopOperatorsDashboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).GetTopOperatorsDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_GetTopOperatorsDashboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).GetTopOperatorsDashboard(ctx, req.(*GetTopOperatorsDashboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_ListBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).ListBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_ListBets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).ListBets(ctx, req.(*ListBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_GetUserBetsOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBetsOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).GetUserBetsOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_GetUserBetsOverview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).GetUserBetsOverview(ctx, req.(*GetUserBetsOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_GetGameTransactionsForBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameTransactionsForBetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).GetGameTransactionsForBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_GetGameTransactionsForBet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).GetGameTransactionsForBet(ctx, req.(*GetGameTransactionsForBetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_ListUserBets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserBetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).ListUserBets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_ListUserBets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).ListUserBets(ctx, req.(*ListUserBetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_ListGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).ListGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_ListGames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).ListGames(ctx, req.(*ListGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_GetUserOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).GetUserOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_GetUserOverview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).GetUserOverview(ctx, req.(*GetUserOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_AddOperatorUserTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOperatorUserTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).AddOperatorUserTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_AddOperatorUserTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).AddOperatorUserTag(ctx, req.(*AddOperatorUserTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_DeleteOperatorUserTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOperatorUserTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).DeleteOperatorUserTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_DeleteOperatorUserTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).DeleteOperatorUserTag(ctx, req.(*DeleteOperatorUserTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_GetOperatorUserTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorUserTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).GetOperatorUserTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_GetOperatorUserTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).GetOperatorUserTags(ctx, req.(*GetOperatorUserTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_AddUserTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).AddUserTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_AddUserTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).AddUserTag(ctx, req.(*AddUserTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_DeleteUserTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).DeleteUserTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_DeleteUserTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).DeleteUserTag(ctx, req.(*DeleteUserTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_AddUserComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).AddUserComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_AddUserComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).AddUserComment(ctx, req.(*AddUserCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_ListPaymentTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).ListPaymentTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_ListPaymentTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).ListPaymentTransactions(ctx, req.(*ListPaymentTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_GetWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).GetWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_GetWallets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).GetWallets(ctx, req.(*GetWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_GetWalletCreditTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletCreditTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).GetWalletCreditTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_GetWalletCreditTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).GetWalletCreditTransactions(ctx, req.(*GetWalletCreditTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_UpdateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).UpdateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_UpdateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).UpdateWallet(ctx, req.(*UpdateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_ListWithdrawReviewTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawReviewTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).ListWithdrawReviewTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_ListWithdrawReviewTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).ListWithdrawReviewTickets(ctx, req.(*ListWithdrawReviewTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_ReviewTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).ReviewTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_ReviewTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).ReviewTicket(ctx, req.(*ReviewTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_GetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).GetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_GetSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).GetSummary(ctx, req.(*GetSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_ListDailySummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDailySummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).ListDailySummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_ListDailySummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).ListDailySummaries(ctx, req.(*ListDailySummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_GetGameDataSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameDataSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).GetGameDataSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_GetGameDataSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).GetGameDataSummary(ctx, req.(*GetGameDataSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_ListGameDataDailySummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameDataDailySummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).ListGameDataDailySummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_ListGameDataDailySummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).ListGameDataDailySummaries(ctx, req.(*ListGameDataDailySummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_GetPlayerGameDataSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerGameDataSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).GetPlayerGameDataSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_GetPlayerGameDataSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).GetPlayerGameDataSummary(ctx, req.(*GetPlayerGameDataSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_ListDepositDailySummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepositDailySummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).ListDepositDailySummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_ListDepositDailySummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).ListDepositDailySummaries(ctx, req.(*ListDepositDailySummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_ListDepositDailyDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepositDailyDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).ListDepositDailyDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_ListDepositDailyDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).ListDepositDailyDetails(ctx, req.(*ListDepositDailyDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_ListWithdrawDailySummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawDailySummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).ListWithdrawDailySummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_ListWithdrawDailySummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).ListWithdrawDailySummaries(ctx, req.(*ListWithdrawDailySummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_ListWithdrawDailyDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawDailyDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeServer).ListWithdrawDailyDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_ListWithdrawDailyDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeServer).ListWithdrawDailyDetails(ctx, req.(*ListWithdrawDailyDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Backoffice_ServiceDesc is the grpc.ServiceDesc for Backoffice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backoffice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.Backoffice",
	HandlerType: (*BackofficeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAccount",
			Handler:    _Backoffice_AddAccount_Handler,
		},
		{
			MethodName: "SendEmailVerification",
			Handler:    _Backoffice_SendEmailVerification_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _Backoffice_VerifyEmail_Handler,
		},
		{
			MethodName: "SendMobileVerification",
			Handler:    _Backoffice_SendMobileVerification_Handler,
		},
		{
			MethodName: "VerifyMobile",
			Handler:    _Backoffice_VerifyMobile_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Backoffice_ResetPassword_Handler,
		},
		{
			MethodName: "Generate2fa",
			Handler:    _Backoffice_Generate2Fa_Handler,
		},
		{
			MethodName: "Bind2fa",
			Handler:    _Backoffice_Bind2Fa_Handler,
		},
		{
			MethodName: "Unbind2fa",
			Handler:    _Backoffice_Unbind2Fa_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _Backoffice_UpdateAccount_Handler,
		},
		{
			MethodName: "GetOverviewDashboard",
			Handler:    _Backoffice_GetOverviewDashboard_Handler,
		},
		{
			MethodName: "GetTimeRangedDashboard",
			Handler:    _Backoffice_GetTimeRangedDashboard_Handler,
		},
		{
			MethodName: "GetTopOperatorsDashboard",
			Handler:    _Backoffice_GetTopOperatorsDashboard_Handler,
		},
		{
			MethodName: "ListBets",
			Handler:    _Backoffice_ListBets_Handler,
		},
		{
			MethodName: "GetUserBetsOverview",
			Handler:    _Backoffice_GetUserBetsOverview_Handler,
		},
		{
			MethodName: "GetGameTransactionsForBet",
			Handler:    _Backoffice_GetGameTransactionsForBet_Handler,
		},
		{
			MethodName: "ListUserBets",
			Handler:    _Backoffice_ListUserBets_Handler,
		},
		{
			MethodName: "ListGames",
			Handler:    _Backoffice_ListGames_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Backoffice_ListUsers_Handler,
		},
		{
			MethodName: "GetUserOverview",
			Handler:    _Backoffice_GetUserOverview_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _Backoffice_GetUserProfile_Handler,
		},
		{
			MethodName: "AddOperatorUserTag",
			Handler:    _Backoffice_AddOperatorUserTag_Handler,
		},
		{
			MethodName: "DeleteOperatorUserTag",
			Handler:    _Backoffice_DeleteOperatorUserTag_Handler,
		},
		{
			MethodName: "GetOperatorUserTags",
			Handler:    _Backoffice_GetOperatorUserTags_Handler,
		},
		{
			MethodName: "AddUserTag",
			Handler:    _Backoffice_AddUserTag_Handler,
		},
		{
			MethodName: "DeleteUserTag",
			Handler:    _Backoffice_DeleteUserTag_Handler,
		},
		{
			MethodName: "AddUserComment",
			Handler:    _Backoffice_AddUserComment_Handler,
		},
		{
			MethodName: "ListPaymentTransactions",
			Handler:    _Backoffice_ListPaymentTransactions_Handler,
		},
		{
			MethodName: "GetWallets",
			Handler:    _Backoffice_GetWallets_Handler,
		},
		{
			MethodName: "GetWalletCreditTransactions",
			Handler:    _Backoffice_GetWalletCreditTransactions_Handler,
		},
		{
			MethodName: "UpdateWallet",
			Handler:    _Backoffice_UpdateWallet_Handler,
		},
		{
			MethodName: "ListWithdrawReviewTickets",
			Handler:    _Backoffice_ListWithdrawReviewTickets_Handler,
		},
		{
			MethodName: "ReviewTicket",
			Handler:    _Backoffice_ReviewTicket_Handler,
		},
		{
			MethodName: "GetSummary",
			Handler:    _Backoffice_GetSummary_Handler,
		},
		{
			MethodName: "ListDailySummaries",
			Handler:    _Backoffice_ListDailySummaries_Handler,
		},
		{
			MethodName: "GetGameDataSummary",
			Handler:    _Backoffice_GetGameDataSummary_Handler,
		},
		{
			MethodName: "ListGameDataDailySummaries",
			Handler:    _Backoffice_ListGameDataDailySummaries_Handler,
		},
		{
			MethodName: "GetPlayerGameDataSummary",
			Handler:    _Backoffice_GetPlayerGameDataSummary_Handler,
		},
		{
			MethodName: "ListDepositDailySummaries",
			Handler:    _Backoffice_ListDepositDailySummaries_Handler,
		},
		{
			MethodName: "ListDepositDailyDetails",
			Handler:    _Backoffice_ListDepositDailyDetails_Handler,
		},
		{
			MethodName: "ListWithdrawDailySummaries",
			Handler:    _Backoffice_ListWithdrawDailySummaries_Handler,
		},
		{
			MethodName: "ListWithdrawDailyDetails",
			Handler:    _Backoffice_ListWithdrawDailyDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice.proto",
}
