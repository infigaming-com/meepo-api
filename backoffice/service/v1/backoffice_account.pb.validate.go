// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_account.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddAccountRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAccountRequestMultiError, or nil if none found.
func (m *AddAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for Password

	// no validation rules for RoleId

	if len(errors) > 0 {
		return AddAccountRequestMultiError(errors)
	}

	return nil
}

// AddAccountRequestMultiError is an error wrapping multiple validation errors
// returned by AddAccountRequest.ValidateAll() if the designated constraints
// aren't met.
type AddAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAccountRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAccountRequestMultiError) AllErrors() []error { return m }

// AddAccountRequestValidationError is the validation error returned by
// AddAccountRequest.Validate if the designated constraints aren't met.
type AddAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAccountRequestValidationError) ErrorName() string {
	return "AddAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAccountRequestValidationError{}

// Validate checks the field values on AddAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAccountResponseMultiError, or nil if none found.
func (m *AddAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddAccountResponseMultiError(errors)
	}

	return nil
}

// AddAccountResponseMultiError is an error wrapping multiple validation errors
// returned by AddAccountResponse.ValidateAll() if the designated constraints
// aren't met.
type AddAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAccountResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAccountResponseMultiError) AllErrors() []error { return m }

// AddAccountResponseValidationError is the validation error returned by
// AddAccountResponse.Validate if the designated constraints aren't met.
type AddAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAccountResponseValidationError) ErrorName() string {
	return "AddAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAccountResponseValidationError{}

// Validate checks the field values on SendEmailVerificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendEmailVerificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailVerificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendEmailVerificationRequestMultiError, or nil if none found.
func (m *SendEmailVerificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailVerificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendEmailVerificationRequestMultiError(errors)
	}

	return nil
}

// SendEmailVerificationRequestMultiError is an error wrapping multiple
// validation errors returned by SendEmailVerificationRequest.ValidateAll() if
// the designated constraints aren't met.
type SendEmailVerificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailVerificationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailVerificationRequestMultiError) AllErrors() []error { return m }

// SendEmailVerificationRequestValidationError is the validation error returned
// by SendEmailVerificationRequest.Validate if the designated constraints
// aren't met.
type SendEmailVerificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailVerificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailVerificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailVerificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailVerificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailVerificationRequestValidationError) ErrorName() string {
	return "SendEmailVerificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendEmailVerificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailVerificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailVerificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailVerificationRequestValidationError{}

// Validate checks the field values on SendEmailVerificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendEmailVerificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailVerificationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendEmailVerificationResponseMultiError, or nil if none found.
func (m *SendEmailVerificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailVerificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendEmailVerificationResponseMultiError(errors)
	}

	return nil
}

// SendEmailVerificationResponseMultiError is an error wrapping multiple
// validation errors returned by SendEmailVerificationResponse.ValidateAll()
// if the designated constraints aren't met.
type SendEmailVerificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailVerificationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailVerificationResponseMultiError) AllErrors() []error { return m }

// SendEmailVerificationResponseValidationError is the validation error
// returned by SendEmailVerificationResponse.Validate if the designated
// constraints aren't met.
type SendEmailVerificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailVerificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailVerificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailVerificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailVerificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailVerificationResponseValidationError) ErrorName() string {
	return "SendEmailVerificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendEmailVerificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailVerificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailVerificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailVerificationResponseValidationError{}

// Validate checks the field values on VerifyEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyEmailRequestMultiError, or nil if none found.
func (m *VerifyEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return VerifyEmailRequestMultiError(errors)
	}

	return nil
}

// VerifyEmailRequestMultiError is an error wrapping multiple validation errors
// returned by VerifyEmailRequest.ValidateAll() if the designated constraints
// aren't met.
type VerifyEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyEmailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyEmailRequestMultiError) AllErrors() []error { return m }

// VerifyEmailRequestValidationError is the validation error returned by
// VerifyEmailRequest.Validate if the designated constraints aren't met.
type VerifyEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyEmailRequestValidationError) ErrorName() string {
	return "VerifyEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyEmailRequestValidationError{}

// Validate checks the field values on VerifyEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyEmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyEmailResponseMultiError, or nil if none found.
func (m *VerifyEmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyEmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerifyEmailResponseMultiError(errors)
	}

	return nil
}

// VerifyEmailResponseMultiError is an error wrapping multiple validation
// errors returned by VerifyEmailResponse.ValidateAll() if the designated
// constraints aren't met.
type VerifyEmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyEmailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyEmailResponseMultiError) AllErrors() []error { return m }

// VerifyEmailResponseValidationError is the validation error returned by
// VerifyEmailResponse.Validate if the designated constraints aren't met.
type VerifyEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyEmailResponseValidationError) ErrorName() string {
	return "VerifyEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyEmailResponseValidationError{}

// Validate checks the field values on SendMobileVerificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendMobileVerificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMobileVerificationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendMobileVerificationRequestMultiError, or nil if none found.
func (m *SendMobileVerificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMobileVerificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendMobileVerificationRequestMultiError(errors)
	}

	return nil
}

// SendMobileVerificationRequestMultiError is an error wrapping multiple
// validation errors returned by SendMobileVerificationRequest.ValidateAll()
// if the designated constraints aren't met.
type SendMobileVerificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMobileVerificationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMobileVerificationRequestMultiError) AllErrors() []error { return m }

// SendMobileVerificationRequestValidationError is the validation error
// returned by SendMobileVerificationRequest.Validate if the designated
// constraints aren't met.
type SendMobileVerificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMobileVerificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMobileVerificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMobileVerificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMobileVerificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMobileVerificationRequestValidationError) ErrorName() string {
	return "SendMobileVerificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendMobileVerificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMobileVerificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMobileVerificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMobileVerificationRequestValidationError{}

// Validate checks the field values on SendMobileVerificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendMobileVerificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMobileVerificationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendMobileVerificationResponseMultiError, or nil if none found.
func (m *SendMobileVerificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMobileVerificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendMobileVerificationResponseMultiError(errors)
	}

	return nil
}

// SendMobileVerificationResponseMultiError is an error wrapping multiple
// validation errors returned by SendMobileVerificationResponse.ValidateAll()
// if the designated constraints aren't met.
type SendMobileVerificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMobileVerificationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMobileVerificationResponseMultiError) AllErrors() []error { return m }

// SendMobileVerificationResponseValidationError is the validation error
// returned by SendMobileVerificationResponse.Validate if the designated
// constraints aren't met.
type SendMobileVerificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMobileVerificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMobileVerificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMobileVerificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMobileVerificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMobileVerificationResponseValidationError) ErrorName() string {
	return "SendMobileVerificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendMobileVerificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMobileVerificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMobileVerificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMobileVerificationResponseValidationError{}

// Validate checks the field values on VerifyMobileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyMobileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyMobileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyMobileRequestMultiError, or nil if none found.
func (m *VerifyMobileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyMobileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return VerifyMobileRequestMultiError(errors)
	}

	return nil
}

// VerifyMobileRequestMultiError is an error wrapping multiple validation
// errors returned by VerifyMobileRequest.ValidateAll() if the designated
// constraints aren't met.
type VerifyMobileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyMobileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyMobileRequestMultiError) AllErrors() []error { return m }

// VerifyMobileRequestValidationError is the validation error returned by
// VerifyMobileRequest.Validate if the designated constraints aren't met.
type VerifyMobileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyMobileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyMobileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyMobileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyMobileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyMobileRequestValidationError) ErrorName() string {
	return "VerifyMobileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyMobileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyMobileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyMobileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyMobileRequestValidationError{}

// Validate checks the field values on VerifyMobileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyMobileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyMobileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyMobileResponseMultiError, or nil if none found.
func (m *VerifyMobileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyMobileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerifyMobileResponseMultiError(errors)
	}

	return nil
}

// VerifyMobileResponseMultiError is an error wrapping multiple validation
// errors returned by VerifyMobileResponse.ValidateAll() if the designated
// constraints aren't met.
type VerifyMobileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyMobileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyMobileResponseMultiError) AllErrors() []error { return m }

// VerifyMobileResponseValidationError is the validation error returned by
// VerifyMobileResponse.Validate if the designated constraints aren't met.
type VerifyMobileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyMobileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyMobileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyMobileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyMobileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyMobileResponseValidationError) ErrorName() string {
	return "VerifyMobileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyMobileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyMobileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyMobileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyMobileResponseValidationError{}

// Validate checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordRequestMultiError, or nil if none found.
func (m *ResetPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return ResetPasswordRequestMultiError(errors)
	}

	return nil
}

// ResetPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by ResetPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type ResetPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordRequestMultiError) AllErrors() []error { return m }

// ResetPasswordRequestValidationError is the validation error returned by
// ResetPasswordRequest.Validate if the designated constraints aren't met.
type ResetPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordRequestValidationError) ErrorName() string {
	return "ResetPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordRequestValidationError{}

// Validate checks the field values on ResetPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordResponseMultiError, or nil if none found.
func (m *ResetPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResetPasswordResponseMultiError(errors)
	}

	return nil
}

// ResetPasswordResponseMultiError is an error wrapping multiple validation
// errors returned by ResetPasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type ResetPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordResponseMultiError) AllErrors() []error { return m }

// ResetPasswordResponseValidationError is the validation error returned by
// ResetPasswordResponse.Validate if the designated constraints aren't met.
type ResetPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordResponseValidationError) ErrorName() string {
	return "ResetPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordResponseValidationError{}

// Validate checks the field values on Generate2FaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Generate2FaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generate2FaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Generate2FaRequestMultiError, or nil if none found.
func (m *Generate2FaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Generate2FaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Generate2FaRequestMultiError(errors)
	}

	return nil
}

// Generate2FaRequestMultiError is an error wrapping multiple validation errors
// returned by Generate2FaRequest.ValidateAll() if the designated constraints
// aren't met.
type Generate2FaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generate2FaRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generate2FaRequestMultiError) AllErrors() []error { return m }

// Generate2FaRequestValidationError is the validation error returned by
// Generate2FaRequest.Validate if the designated constraints aren't met.
type Generate2FaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generate2FaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generate2FaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generate2FaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generate2FaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generate2FaRequestValidationError) ErrorName() string {
	return "Generate2FaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Generate2FaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerate2FaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generate2FaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generate2FaRequestValidationError{}

// Validate checks the field values on Generate2FaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Generate2FaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generate2FaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Generate2FaResponseMultiError, or nil if none found.
func (m *Generate2FaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Generate2FaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Generate2FaResponseMultiError(errors)
	}

	return nil
}

// Generate2FaResponseMultiError is an error wrapping multiple validation
// errors returned by Generate2FaResponse.ValidateAll() if the designated
// constraints aren't met.
type Generate2FaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generate2FaResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generate2FaResponseMultiError) AllErrors() []error { return m }

// Generate2FaResponseValidationError is the validation error returned by
// Generate2FaResponse.Validate if the designated constraints aren't met.
type Generate2FaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generate2FaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generate2FaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generate2FaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generate2FaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generate2FaResponseValidationError) ErrorName() string {
	return "Generate2FaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Generate2FaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerate2FaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generate2FaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generate2FaResponseValidationError{}

// Validate checks the field values on Bind2FaRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Bind2FaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bind2FaRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Bind2FaRequestMultiError,
// or nil if none found.
func (m *Bind2FaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Bind2FaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return Bind2FaRequestMultiError(errors)
	}

	return nil
}

// Bind2FaRequestMultiError is an error wrapping multiple validation errors
// returned by Bind2FaRequest.ValidateAll() if the designated constraints
// aren't met.
type Bind2FaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Bind2FaRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Bind2FaRequestMultiError) AllErrors() []error { return m }

// Bind2FaRequestValidationError is the validation error returned by
// Bind2FaRequest.Validate if the designated constraints aren't met.
type Bind2FaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Bind2FaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Bind2FaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Bind2FaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Bind2FaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Bind2FaRequestValidationError) ErrorName() string { return "Bind2FaRequestValidationError" }

// Error satisfies the builtin error interface
func (e Bind2FaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBind2FaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Bind2FaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Bind2FaRequestValidationError{}

// Validate checks the field values on Bind2FaResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Bind2FaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bind2FaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Bind2FaResponseMultiError, or nil if none found.
func (m *Bind2FaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Bind2FaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Bind2FaResponseMultiError(errors)
	}

	return nil
}

// Bind2FaResponseMultiError is an error wrapping multiple validation errors
// returned by Bind2FaResponse.ValidateAll() if the designated constraints
// aren't met.
type Bind2FaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Bind2FaResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Bind2FaResponseMultiError) AllErrors() []error { return m }

// Bind2FaResponseValidationError is the validation error returned by
// Bind2FaResponse.Validate if the designated constraints aren't met.
type Bind2FaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Bind2FaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Bind2FaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Bind2FaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Bind2FaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Bind2FaResponseValidationError) ErrorName() string { return "Bind2FaResponseValidationError" }

// Error satisfies the builtin error interface
func (e Bind2FaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBind2FaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Bind2FaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Bind2FaResponseValidationError{}

// Validate checks the field values on Unbind2FaRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Unbind2FaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Unbind2FaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Unbind2FaRequestMultiError, or nil if none found.
func (m *Unbind2FaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Unbind2FaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return Unbind2FaRequestMultiError(errors)
	}

	return nil
}

// Unbind2FaRequestMultiError is an error wrapping multiple validation errors
// returned by Unbind2FaRequest.ValidateAll() if the designated constraints
// aren't met.
type Unbind2FaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Unbind2FaRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Unbind2FaRequestMultiError) AllErrors() []error { return m }

// Unbind2FaRequestValidationError is the validation error returned by
// Unbind2FaRequest.Validate if the designated constraints aren't met.
type Unbind2FaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Unbind2FaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Unbind2FaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Unbind2FaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Unbind2FaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Unbind2FaRequestValidationError) ErrorName() string { return "Unbind2FaRequestValidationError" }

// Error satisfies the builtin error interface
func (e Unbind2FaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnbind2FaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Unbind2FaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Unbind2FaRequestValidationError{}

// Validate checks the field values on Unbind2FaResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Unbind2FaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Unbind2FaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Unbind2FaResponseMultiError, or nil if none found.
func (m *Unbind2FaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Unbind2FaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Unbind2FaResponseMultiError(errors)
	}

	return nil
}

// Unbind2FaResponseMultiError is an error wrapping multiple validation errors
// returned by Unbind2FaResponse.ValidateAll() if the designated constraints
// aren't met.
type Unbind2FaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Unbind2FaResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Unbind2FaResponseMultiError) AllErrors() []error { return m }

// Unbind2FaResponseValidationError is the validation error returned by
// Unbind2FaResponse.Validate if the designated constraints aren't met.
type Unbind2FaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Unbind2FaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Unbind2FaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Unbind2FaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Unbind2FaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Unbind2FaResponseValidationError) ErrorName() string {
	return "Unbind2FaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Unbind2FaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnbind2FaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Unbind2FaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Unbind2FaResponseValidationError{}

// Validate checks the field values on UpdateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountRequestMultiError, or nil if none found.
func (m *UpdateAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.RoleId != nil {
		// no validation rules for RoleId
	}

	if len(errors) > 0 {
		return UpdateAccountRequestMultiError(errors)
	}

	return nil
}

// UpdateAccountRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountRequestMultiError) AllErrors() []error { return m }

// UpdateAccountRequestValidationError is the validation error returned by
// UpdateAccountRequest.Validate if the designated constraints aren't met.
type UpdateAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountRequestValidationError) ErrorName() string {
	return "UpdateAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountRequestValidationError{}

// Validate checks the field values on UpdateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountResponseMultiError, or nil if none found.
func (m *UpdateAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAccountResponseMultiError(errors)
	}

	return nil
}

// UpdateAccountResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountResponseMultiError) AllErrors() []error { return m }

// UpdateAccountResponseValidationError is the validation error returned by
// UpdateAccountResponse.Validate if the designated constraints aren't met.
type UpdateAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountResponseValidationError) ErrorName() string {
	return "UpdateAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountResponseValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestMultiError, or nil if none found.
func (m *RegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for VerificationCode

	// no validation rules for Password

	// no validation rules for Mobile

	if len(errors) > 0 {
		return RegisterRequestMultiError(errors)
	}

	return nil
}

// RegisterRequestMultiError is an error wrapping multiple validation errors
// returned by RegisterRequest.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestMultiError) AllErrors() []error { return m }

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on RegisterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterResponseMultiError, or nil if none found.
func (m *RegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return RegisterResponseMultiError(errors)
	}

	return nil
}

// RegisterResponseMultiError is an error wrapping multiple validation errors
// returned by RegisterResponse.ValidateAll() if the designated constraints
// aren't met.
type RegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterResponseMultiError) AllErrors() []error { return m }

// RegisterResponseValidationError is the validation error returned by
// RegisterResponse.Validate if the designated constraints aren't met.
type RegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponseValidationError) ErrorName() string { return "RegisterResponseValidationError" }

// Error satisfies the builtin error interface
func (e RegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponseValidationError{}

// Validate checks the field values on SendRegisterVerificationCodeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendRegisterVerificationCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendRegisterVerificationCodeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendRegisterVerificationCodeRequestMultiError, or nil if none found.
func (m *SendRegisterVerificationCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendRegisterVerificationCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return SendRegisterVerificationCodeRequestMultiError(errors)
	}

	return nil
}

// SendRegisterVerificationCodeRequestMultiError is an error wrapping multiple
// validation errors returned by
// SendRegisterVerificationCodeRequest.ValidateAll() if the designated
// constraints aren't met.
type SendRegisterVerificationCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendRegisterVerificationCodeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendRegisterVerificationCodeRequestMultiError) AllErrors() []error { return m }

// SendRegisterVerificationCodeRequestValidationError is the validation error
// returned by SendRegisterVerificationCodeRequest.Validate if the designated
// constraints aren't met.
type SendRegisterVerificationCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendRegisterVerificationCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendRegisterVerificationCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendRegisterVerificationCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendRegisterVerificationCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendRegisterVerificationCodeRequestValidationError) ErrorName() string {
	return "SendRegisterVerificationCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendRegisterVerificationCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendRegisterVerificationCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendRegisterVerificationCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendRegisterVerificationCodeRequestValidationError{}

// Validate checks the field values on SendRegisterVerificationCodeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SendRegisterVerificationCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendRegisterVerificationCodeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendRegisterVerificationCodeResponseMultiError, or nil if none found.
func (m *SendRegisterVerificationCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendRegisterVerificationCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendRegisterVerificationCodeResponseMultiError(errors)
	}

	return nil
}

// SendRegisterVerificationCodeResponseMultiError is an error wrapping multiple
// validation errors returned by
// SendRegisterVerificationCodeResponse.ValidateAll() if the designated
// constraints aren't met.
type SendRegisterVerificationCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendRegisterVerificationCodeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendRegisterVerificationCodeResponseMultiError) AllErrors() []error { return m }

// SendRegisterVerificationCodeResponseValidationError is the validation error
// returned by SendRegisterVerificationCodeResponse.Validate if the designated
// constraints aren't met.
type SendRegisterVerificationCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendRegisterVerificationCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendRegisterVerificationCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendRegisterVerificationCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendRegisterVerificationCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendRegisterVerificationCodeResponseValidationError) ErrorName() string {
	return "SendRegisterVerificationCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendRegisterVerificationCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendRegisterVerificationCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendRegisterVerificationCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendRegisterVerificationCodeResponseValidationError{}

// Validate checks the field values on AccountInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountInfoRequestMultiError, or nil if none found.
func (m *AccountInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AccountInfoRequestMultiError(errors)
	}

	return nil
}

// AccountInfoRequestMultiError is an error wrapping multiple validation errors
// returned by AccountInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type AccountInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountInfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountInfoRequestMultiError) AllErrors() []error { return m }

// AccountInfoRequestValidationError is the validation error returned by
// AccountInfoRequest.Validate if the designated constraints aren't met.
type AccountInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountInfoRequestValidationError) ErrorName() string {
	return "AccountInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccountInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountInfoRequestValidationError{}

// Validate checks the field values on AccountInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountInfoResponseMultiError, or nil if none found.
func (m *AccountInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for EmailVerified

	// no validation rules for MobileVerified

	// no validation rules for Enabled

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccountInfoResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccountInfoResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountInfoResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AccountInfoResponseMultiError(errors)
	}

	return nil
}

// AccountInfoResponseMultiError is an error wrapping multiple validation
// errors returned by AccountInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type AccountInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountInfoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountInfoResponseMultiError) AllErrors() []error { return m }

// AccountInfoResponseValidationError is the validation error returned by
// AccountInfoResponse.Validate if the designated constraints aren't met.
type AccountInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountInfoResponseValidationError) ErrorName() string {
	return "AccountInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AccountInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountInfoResponseValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for RoleId

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on Permission with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Permission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Permission with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PermissionMultiError, or
// nil if none found.
func (m *Permission) ValidateAll() error {
	return m.validate(true)
}

func (m *Permission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Module

	if len(errors) > 0 {
		return PermissionMultiError(errors)
	}

	return nil
}

// PermissionMultiError is an error wrapping multiple validation errors
// returned by Permission.ValidateAll() if the designated constraints aren't met.
type PermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionMultiError) AllErrors() []error { return m }

// PermissionValidationError is the validation error returned by
// Permission.Validate if the designated constraints aren't met.
type PermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionValidationError) ErrorName() string { return "PermissionValidationError" }

// Error satisfies the builtin error interface
func (e PermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionValidationError{}

// Validate checks the field values on ListAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccountsRequestMultiError, or nil if none found.
func (m *ListAccountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.RoleId != nil {
		// no validation rules for RoleId
	}

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListAccountsRequestMultiError(errors)
	}

	return nil
}

// ListAccountsRequestMultiError is an error wrapping multiple validation
// errors returned by ListAccountsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccountsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccountsRequestMultiError) AllErrors() []error { return m }

// ListAccountsRequestValidationError is the validation error returned by
// ListAccountsRequest.Validate if the designated constraints aren't met.
type ListAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountsRequestValidationError) ErrorName() string {
	return "ListAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountsRequestValidationError{}

// Validate checks the field values on ListAccountsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccountsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccountsResponseMultiError, or nil if none found.
func (m *ListAccountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAccountsResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAccountsResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAccountsResponseValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for TotalEnabled

	// no validation rules for TotalDisabled

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListAccountsResponseMultiError(errors)
	}

	return nil
}

// ListAccountsResponseMultiError is an error wrapping multiple validation
// errors returned by ListAccountsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAccountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccountsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccountsResponseMultiError) AllErrors() []error { return m }

// ListAccountsResponseValidationError is the validation error returned by
// ListAccountsResponse.Validate if the designated constraints aren't met.
type ListAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountsResponseValidationError) ErrorName() string {
	return "ListAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountsResponseValidationError{}

// Validate checks the field values on CreateRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleRequestMultiError, or nil if none found.
func (m *CreateRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateRoleRequestValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateRoleRequestValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateRoleRequestValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateRoleRequestMultiError(errors)
	}

	return nil
}

// CreateRoleRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleRequestMultiError) AllErrors() []error { return m }

// CreateRoleRequestValidationError is the validation error returned by
// CreateRoleRequest.Validate if the designated constraints aren't met.
type CreateRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleRequestValidationError) ErrorName() string {
	return "CreateRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleRequestValidationError{}

// Validate checks the field values on CreateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleResponseMultiError, or nil if none found.
func (m *CreateRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateRoleResponseMultiError(errors)
	}

	return nil
}

// CreateRoleResponseMultiError is an error wrapping multiple validation errors
// returned by CreateRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleResponseMultiError) AllErrors() []error { return m }

// CreateRoleResponseValidationError is the validation error returned by
// CreateRoleResponse.Validate if the designated constraints aren't met.
type CreateRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleResponseValidationError) ErrorName() string {
	return "CreateRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleResponseValidationError{}

// Validate checks the field values on ListRolesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRolesRequestMultiError, or nil if none found.
func (m *ListRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListRolesRequestMultiError(errors)
	}

	return nil
}

// ListRolesRequestMultiError is an error wrapping multiple validation errors
// returned by ListRolesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRolesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRolesRequestMultiError) AllErrors() []error { return m }

// ListRolesRequestValidationError is the validation error returned by
// ListRolesRequest.Validate if the designated constraints aren't met.
type ListRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolesRequestValidationError) ErrorName() string { return "ListRolesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolesRequestValidationError{}

// Validate checks the field values on ListRolesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRolesResponseMultiError, or nil if none found.
func (m *ListRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRolesResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListRolesResponseMultiError(errors)
	}

	return nil
}

// ListRolesResponseMultiError is an error wrapping multiple validation errors
// returned by ListRolesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRolesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRolesResponseMultiError) AllErrors() []error { return m }

// ListRolesResponseValidationError is the validation error returned by
// ListRolesResponse.Validate if the designated constraints aren't met.
type ListRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolesResponseValidationError) ErrorName() string {
	return "ListRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolesResponseValidationError{}

// Validate checks the field values on UpdateRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleRequestMultiError, or nil if none found.
func (m *UpdateRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for Name

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateRoleRequestValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateRoleRequestValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateRoleRequestValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateRoleRequestMultiError(errors)
	}

	return nil
}

// UpdateRoleRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleRequestMultiError) AllErrors() []error { return m }

// UpdateRoleRequestValidationError is the validation error returned by
// UpdateRoleRequest.Validate if the designated constraints aren't met.
type UpdateRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleRequestValidationError) ErrorName() string {
	return "UpdateRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleRequestValidationError{}

// Validate checks the field values on UpdateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleResponseMultiError, or nil if none found.
func (m *UpdateRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRoleResponseMultiError(errors)
	}

	return nil
}

// UpdateRoleResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleResponseMultiError) AllErrors() []error { return m }

// UpdateRoleResponseValidationError is the validation error returned by
// UpdateRoleResponse.Validate if the designated constraints aren't met.
type UpdateRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleResponseValidationError) ErrorName() string {
	return "UpdateRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleResponseValidationError{}

// Validate checks the field values on DeleteRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleRequestMultiError, or nil if none found.
func (m *DeleteRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return DeleteRoleRequestMultiError(errors)
	}

	return nil
}

// DeleteRoleRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleRequestMultiError) AllErrors() []error { return m }

// DeleteRoleRequestValidationError is the validation error returned by
// DeleteRoleRequest.Validate if the designated constraints aren't met.
type DeleteRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleRequestValidationError) ErrorName() string {
	return "DeleteRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleRequestValidationError{}

// Validate checks the field values on DeleteRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleResponseMultiError, or nil if none found.
func (m *DeleteRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRoleResponseMultiError(errors)
	}

	return nil
}

// DeleteRoleResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleResponseMultiError) AllErrors() []error { return m }

// DeleteRoleResponseValidationError is the validation error returned by
// DeleteRoleResponse.Validate if the designated constraints aren't met.
type DeleteRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleResponseValidationError) ErrorName() string {
	return "DeleteRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleResponseValidationError{}

// Validate checks the field values on CheckEmailExistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckEmailExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckEmailExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckEmailExistsRequestMultiError, or nil if none found.
func (m *CheckEmailExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckEmailExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return CheckEmailExistsRequestMultiError(errors)
	}

	return nil
}

// CheckEmailExistsRequestMultiError is an error wrapping multiple validation
// errors returned by CheckEmailExistsRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckEmailExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckEmailExistsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckEmailExistsRequestMultiError) AllErrors() []error { return m }

// CheckEmailExistsRequestValidationError is the validation error returned by
// CheckEmailExistsRequest.Validate if the designated constraints aren't met.
type CheckEmailExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckEmailExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckEmailExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckEmailExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckEmailExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckEmailExistsRequestValidationError) ErrorName() string {
	return "CheckEmailExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckEmailExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckEmailExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckEmailExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckEmailExistsRequestValidationError{}

// Validate checks the field values on CheckEmailExistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckEmailExistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckEmailExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckEmailExistsResponseMultiError, or nil if none found.
func (m *CheckEmailExistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckEmailExistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return CheckEmailExistsResponseMultiError(errors)
	}

	return nil
}

// CheckEmailExistsResponseMultiError is an error wrapping multiple validation
// errors returned by CheckEmailExistsResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckEmailExistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckEmailExistsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckEmailExistsResponseMultiError) AllErrors() []error { return m }

// CheckEmailExistsResponseValidationError is the validation error returned by
// CheckEmailExistsResponse.Validate if the designated constraints aren't met.
type CheckEmailExistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckEmailExistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckEmailExistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckEmailExistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckEmailExistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckEmailExistsResponseValidationError) ErrorName() string {
	return "CheckEmailExistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckEmailExistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckEmailExistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckEmailExistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckEmailExistsResponseValidationError{}

// Validate checks the field values on CheckSubdomainExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckSubdomainExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckSubdomainExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckSubdomainExistsRequestMultiError, or nil if none found.
func (m *CheckSubdomainExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckSubdomainExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subdomain

	if len(errors) > 0 {
		return CheckSubdomainExistsRequestMultiError(errors)
	}

	return nil
}

// CheckSubdomainExistsRequestMultiError is an error wrapping multiple
// validation errors returned by CheckSubdomainExistsRequest.ValidateAll() if
// the designated constraints aren't met.
type CheckSubdomainExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckSubdomainExistsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckSubdomainExistsRequestMultiError) AllErrors() []error { return m }

// CheckSubdomainExistsRequestValidationError is the validation error returned
// by CheckSubdomainExistsRequest.Validate if the designated constraints
// aren't met.
type CheckSubdomainExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckSubdomainExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckSubdomainExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckSubdomainExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckSubdomainExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckSubdomainExistsRequestValidationError) ErrorName() string {
	return "CheckSubdomainExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckSubdomainExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckSubdomainExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckSubdomainExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckSubdomainExistsRequestValidationError{}

// Validate checks the field values on CheckSubdomainExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckSubdomainExistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckSubdomainExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckSubdomainExistsResponseMultiError, or nil if none found.
func (m *CheckSubdomainExistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckSubdomainExistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return CheckSubdomainExistsResponseMultiError(errors)
	}

	return nil
}

// CheckSubdomainExistsResponseMultiError is an error wrapping multiple
// validation errors returned by CheckSubdomainExistsResponse.ValidateAll() if
// the designated constraints aren't met.
type CheckSubdomainExistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckSubdomainExistsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckSubdomainExistsResponseMultiError) AllErrors() []error { return m }

// CheckSubdomainExistsResponseValidationError is the validation error returned
// by CheckSubdomainExistsResponse.Validate if the designated constraints
// aren't met.
type CheckSubdomainExistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckSubdomainExistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckSubdomainExistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckSubdomainExistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckSubdomainExistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckSubdomainExistsResponseValidationError) ErrorName() string {
	return "CheckSubdomainExistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckSubdomainExistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckSubdomainExistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckSubdomainExistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckSubdomainExistsResponseValidationError{}

// Validate checks the field values on ListAccountsResponse_Account with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccountsResponse_Account) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccountsResponse_Account with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccountsResponse_AccountMultiError, or nil if none found.
func (m *ListAccountsResponse_Account) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccountsResponse_Account) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for Enabled

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAccountsResponse_AccountValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAccountsResponse_AccountValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAccountsResponse_AccountValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAccountsResponse_AccountValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAccountsResponse_AccountValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAccountsResponse_AccountValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAccountsResponse_AccountMultiError(errors)
	}

	return nil
}

// ListAccountsResponse_AccountMultiError is an error wrapping multiple
// validation errors returned by ListAccountsResponse_Account.ValidateAll() if
// the designated constraints aren't met.
type ListAccountsResponse_AccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccountsResponse_AccountMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccountsResponse_AccountMultiError) AllErrors() []error { return m }

// ListAccountsResponse_AccountValidationError is the validation error returned
// by ListAccountsResponse_Account.Validate if the designated constraints
// aren't met.
type ListAccountsResponse_AccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountsResponse_AccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountsResponse_AccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountsResponse_AccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountsResponse_AccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountsResponse_AccountValidationError) ErrorName() string {
	return "ListAccountsResponse_AccountValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccountsResponse_AccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountsResponse_Account.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountsResponse_AccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountsResponse_AccountValidationError{}
