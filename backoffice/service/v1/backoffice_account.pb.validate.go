// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_account.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddAccountRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAccountRequestMultiError, or nil if none found.
func (m *AddAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for Password

	// no validation rules for Role

	if len(errors) > 0 {
		return AddAccountRequestMultiError(errors)
	}

	return nil
}

// AddAccountRequestMultiError is an error wrapping multiple validation errors
// returned by AddAccountRequest.ValidateAll() if the designated constraints
// aren't met.
type AddAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAccountRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAccountRequestMultiError) AllErrors() []error { return m }

// AddAccountRequestValidationError is the validation error returned by
// AddAccountRequest.Validate if the designated constraints aren't met.
type AddAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAccountRequestValidationError) ErrorName() string {
	return "AddAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAccountRequestValidationError{}

// Validate checks the field values on AddAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAccountResponseMultiError, or nil if none found.
func (m *AddAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return AddAccountResponseMultiError(errors)
	}

	return nil
}

// AddAccountResponseMultiError is an error wrapping multiple validation errors
// returned by AddAccountResponse.ValidateAll() if the designated constraints
// aren't met.
type AddAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAccountResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAccountResponseMultiError) AllErrors() []error { return m }

// AddAccountResponseValidationError is the validation error returned by
// AddAccountResponse.Validate if the designated constraints aren't met.
type AddAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAccountResponseValidationError) ErrorName() string {
	return "AddAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAccountResponseValidationError{}

// Validate checks the field values on SendEmailVerificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendEmailVerificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailVerificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendEmailVerificationRequestMultiError, or nil if none found.
func (m *SendEmailVerificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailVerificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendEmailVerificationRequestMultiError(errors)
	}

	return nil
}

// SendEmailVerificationRequestMultiError is an error wrapping multiple
// validation errors returned by SendEmailVerificationRequest.ValidateAll() if
// the designated constraints aren't met.
type SendEmailVerificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailVerificationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailVerificationRequestMultiError) AllErrors() []error { return m }

// SendEmailVerificationRequestValidationError is the validation error returned
// by SendEmailVerificationRequest.Validate if the designated constraints
// aren't met.
type SendEmailVerificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailVerificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailVerificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailVerificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailVerificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailVerificationRequestValidationError) ErrorName() string {
	return "SendEmailVerificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendEmailVerificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailVerificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailVerificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailVerificationRequestValidationError{}

// Validate checks the field values on SendEmailVerificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendEmailVerificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailVerificationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendEmailVerificationResponseMultiError, or nil if none found.
func (m *SendEmailVerificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailVerificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendEmailVerificationResponseMultiError(errors)
	}

	return nil
}

// SendEmailVerificationResponseMultiError is an error wrapping multiple
// validation errors returned by SendEmailVerificationResponse.ValidateAll()
// if the designated constraints aren't met.
type SendEmailVerificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailVerificationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailVerificationResponseMultiError) AllErrors() []error { return m }

// SendEmailVerificationResponseValidationError is the validation error
// returned by SendEmailVerificationResponse.Validate if the designated
// constraints aren't met.
type SendEmailVerificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailVerificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailVerificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailVerificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailVerificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailVerificationResponseValidationError) ErrorName() string {
	return "SendEmailVerificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendEmailVerificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailVerificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailVerificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailVerificationResponseValidationError{}

// Validate checks the field values on VerifyEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyEmailRequestMultiError, or nil if none found.
func (m *VerifyEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return VerifyEmailRequestMultiError(errors)
	}

	return nil
}

// VerifyEmailRequestMultiError is an error wrapping multiple validation errors
// returned by VerifyEmailRequest.ValidateAll() if the designated constraints
// aren't met.
type VerifyEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyEmailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyEmailRequestMultiError) AllErrors() []error { return m }

// VerifyEmailRequestValidationError is the validation error returned by
// VerifyEmailRequest.Validate if the designated constraints aren't met.
type VerifyEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyEmailRequestValidationError) ErrorName() string {
	return "VerifyEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyEmailRequestValidationError{}

// Validate checks the field values on VerifyEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyEmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyEmailResponseMultiError, or nil if none found.
func (m *VerifyEmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyEmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerifyEmailResponseMultiError(errors)
	}

	return nil
}

// VerifyEmailResponseMultiError is an error wrapping multiple validation
// errors returned by VerifyEmailResponse.ValidateAll() if the designated
// constraints aren't met.
type VerifyEmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyEmailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyEmailResponseMultiError) AllErrors() []error { return m }

// VerifyEmailResponseValidationError is the validation error returned by
// VerifyEmailResponse.Validate if the designated constraints aren't met.
type VerifyEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyEmailResponseValidationError) ErrorName() string {
	return "VerifyEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyEmailResponseValidationError{}

// Validate checks the field values on SendMobileVerificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendMobileVerificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMobileVerificationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendMobileVerificationRequestMultiError, or nil if none found.
func (m *SendMobileVerificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMobileVerificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendMobileVerificationRequestMultiError(errors)
	}

	return nil
}

// SendMobileVerificationRequestMultiError is an error wrapping multiple
// validation errors returned by SendMobileVerificationRequest.ValidateAll()
// if the designated constraints aren't met.
type SendMobileVerificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMobileVerificationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMobileVerificationRequestMultiError) AllErrors() []error { return m }

// SendMobileVerificationRequestValidationError is the validation error
// returned by SendMobileVerificationRequest.Validate if the designated
// constraints aren't met.
type SendMobileVerificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMobileVerificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMobileVerificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMobileVerificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMobileVerificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMobileVerificationRequestValidationError) ErrorName() string {
	return "SendMobileVerificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendMobileVerificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMobileVerificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMobileVerificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMobileVerificationRequestValidationError{}

// Validate checks the field values on SendMobileVerificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendMobileVerificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMobileVerificationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendMobileVerificationResponseMultiError, or nil if none found.
func (m *SendMobileVerificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMobileVerificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendMobileVerificationResponseMultiError(errors)
	}

	return nil
}

// SendMobileVerificationResponseMultiError is an error wrapping multiple
// validation errors returned by SendMobileVerificationResponse.ValidateAll()
// if the designated constraints aren't met.
type SendMobileVerificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMobileVerificationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMobileVerificationResponseMultiError) AllErrors() []error { return m }

// SendMobileVerificationResponseValidationError is the validation error
// returned by SendMobileVerificationResponse.Validate if the designated
// constraints aren't met.
type SendMobileVerificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMobileVerificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMobileVerificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMobileVerificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMobileVerificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMobileVerificationResponseValidationError) ErrorName() string {
	return "SendMobileVerificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendMobileVerificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMobileVerificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMobileVerificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMobileVerificationResponseValidationError{}

// Validate checks the field values on VerifyMobileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyMobileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyMobileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyMobileRequestMultiError, or nil if none found.
func (m *VerifyMobileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyMobileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return VerifyMobileRequestMultiError(errors)
	}

	return nil
}

// VerifyMobileRequestMultiError is an error wrapping multiple validation
// errors returned by VerifyMobileRequest.ValidateAll() if the designated
// constraints aren't met.
type VerifyMobileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyMobileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyMobileRequestMultiError) AllErrors() []error { return m }

// VerifyMobileRequestValidationError is the validation error returned by
// VerifyMobileRequest.Validate if the designated constraints aren't met.
type VerifyMobileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyMobileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyMobileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyMobileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyMobileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyMobileRequestValidationError) ErrorName() string {
	return "VerifyMobileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyMobileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyMobileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyMobileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyMobileRequestValidationError{}

// Validate checks the field values on VerifyMobileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyMobileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyMobileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyMobileResponseMultiError, or nil if none found.
func (m *VerifyMobileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyMobileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerifyMobileResponseMultiError(errors)
	}

	return nil
}

// VerifyMobileResponseMultiError is an error wrapping multiple validation
// errors returned by VerifyMobileResponse.ValidateAll() if the designated
// constraints aren't met.
type VerifyMobileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyMobileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyMobileResponseMultiError) AllErrors() []error { return m }

// VerifyMobileResponseValidationError is the validation error returned by
// VerifyMobileResponse.Validate if the designated constraints aren't met.
type VerifyMobileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyMobileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyMobileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyMobileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyMobileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyMobileResponseValidationError) ErrorName() string {
	return "VerifyMobileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyMobileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyMobileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyMobileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyMobileResponseValidationError{}

// Validate checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordRequestMultiError, or nil if none found.
func (m *ResetPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return ResetPasswordRequestMultiError(errors)
	}

	return nil
}

// ResetPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by ResetPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type ResetPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordRequestMultiError) AllErrors() []error { return m }

// ResetPasswordRequestValidationError is the validation error returned by
// ResetPasswordRequest.Validate if the designated constraints aren't met.
type ResetPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordRequestValidationError) ErrorName() string {
	return "ResetPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordRequestValidationError{}

// Validate checks the field values on ResetPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordResponseMultiError, or nil if none found.
func (m *ResetPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResetPasswordResponseMultiError(errors)
	}

	return nil
}

// ResetPasswordResponseMultiError is an error wrapping multiple validation
// errors returned by ResetPasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type ResetPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordResponseMultiError) AllErrors() []error { return m }

// ResetPasswordResponseValidationError is the validation error returned by
// ResetPasswordResponse.Validate if the designated constraints aren't met.
type ResetPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordResponseValidationError) ErrorName() string {
	return "ResetPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordResponseValidationError{}

// Validate checks the field values on Generate2FaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Generate2FaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generate2FaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Generate2FaRequestMultiError, or nil if none found.
func (m *Generate2FaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Generate2FaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Generate2FaRequestMultiError(errors)
	}

	return nil
}

// Generate2FaRequestMultiError is an error wrapping multiple validation errors
// returned by Generate2FaRequest.ValidateAll() if the designated constraints
// aren't met.
type Generate2FaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generate2FaRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generate2FaRequestMultiError) AllErrors() []error { return m }

// Generate2FaRequestValidationError is the validation error returned by
// Generate2FaRequest.Validate if the designated constraints aren't met.
type Generate2FaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generate2FaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generate2FaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generate2FaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generate2FaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generate2FaRequestValidationError) ErrorName() string {
	return "Generate2FaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Generate2FaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerate2FaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generate2FaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generate2FaRequestValidationError{}

// Validate checks the field values on Generate2FaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Generate2FaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generate2FaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Generate2FaResponseMultiError, or nil if none found.
func (m *Generate2FaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Generate2FaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Generate2FaResponseMultiError(errors)
	}

	return nil
}

// Generate2FaResponseMultiError is an error wrapping multiple validation
// errors returned by Generate2FaResponse.ValidateAll() if the designated
// constraints aren't met.
type Generate2FaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generate2FaResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generate2FaResponseMultiError) AllErrors() []error { return m }

// Generate2FaResponseValidationError is the validation error returned by
// Generate2FaResponse.Validate if the designated constraints aren't met.
type Generate2FaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generate2FaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generate2FaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generate2FaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generate2FaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generate2FaResponseValidationError) ErrorName() string {
	return "Generate2FaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Generate2FaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerate2FaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generate2FaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generate2FaResponseValidationError{}

// Validate checks the field values on Bind2FaRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Bind2FaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bind2FaRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Bind2FaRequestMultiError,
// or nil if none found.
func (m *Bind2FaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Bind2FaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return Bind2FaRequestMultiError(errors)
	}

	return nil
}

// Bind2FaRequestMultiError is an error wrapping multiple validation errors
// returned by Bind2FaRequest.ValidateAll() if the designated constraints
// aren't met.
type Bind2FaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Bind2FaRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Bind2FaRequestMultiError) AllErrors() []error { return m }

// Bind2FaRequestValidationError is the validation error returned by
// Bind2FaRequest.Validate if the designated constraints aren't met.
type Bind2FaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Bind2FaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Bind2FaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Bind2FaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Bind2FaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Bind2FaRequestValidationError) ErrorName() string { return "Bind2FaRequestValidationError" }

// Error satisfies the builtin error interface
func (e Bind2FaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBind2FaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Bind2FaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Bind2FaRequestValidationError{}

// Validate checks the field values on Bind2FaResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Bind2FaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bind2FaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Bind2FaResponseMultiError, or nil if none found.
func (m *Bind2FaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Bind2FaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Bind2FaResponseMultiError(errors)
	}

	return nil
}

// Bind2FaResponseMultiError is an error wrapping multiple validation errors
// returned by Bind2FaResponse.ValidateAll() if the designated constraints
// aren't met.
type Bind2FaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Bind2FaResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Bind2FaResponseMultiError) AllErrors() []error { return m }

// Bind2FaResponseValidationError is the validation error returned by
// Bind2FaResponse.Validate if the designated constraints aren't met.
type Bind2FaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Bind2FaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Bind2FaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Bind2FaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Bind2FaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Bind2FaResponseValidationError) ErrorName() string { return "Bind2FaResponseValidationError" }

// Error satisfies the builtin error interface
func (e Bind2FaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBind2FaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Bind2FaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Bind2FaResponseValidationError{}

// Validate checks the field values on Unbind2FaRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Unbind2FaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Unbind2FaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Unbind2FaRequestMultiError, or nil if none found.
func (m *Unbind2FaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Unbind2FaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return Unbind2FaRequestMultiError(errors)
	}

	return nil
}

// Unbind2FaRequestMultiError is an error wrapping multiple validation errors
// returned by Unbind2FaRequest.ValidateAll() if the designated constraints
// aren't met.
type Unbind2FaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Unbind2FaRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Unbind2FaRequestMultiError) AllErrors() []error { return m }

// Unbind2FaRequestValidationError is the validation error returned by
// Unbind2FaRequest.Validate if the designated constraints aren't met.
type Unbind2FaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Unbind2FaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Unbind2FaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Unbind2FaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Unbind2FaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Unbind2FaRequestValidationError) ErrorName() string { return "Unbind2FaRequestValidationError" }

// Error satisfies the builtin error interface
func (e Unbind2FaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnbind2FaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Unbind2FaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Unbind2FaRequestValidationError{}

// Validate checks the field values on Unbind2FaResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Unbind2FaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Unbind2FaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Unbind2FaResponseMultiError, or nil if none found.
func (m *Unbind2FaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Unbind2FaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Unbind2FaResponseMultiError(errors)
	}

	return nil
}

// Unbind2FaResponseMultiError is an error wrapping multiple validation errors
// returned by Unbind2FaResponse.ValidateAll() if the designated constraints
// aren't met.
type Unbind2FaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Unbind2FaResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Unbind2FaResponseMultiError) AllErrors() []error { return m }

// Unbind2FaResponseValidationError is the validation error returned by
// Unbind2FaResponse.Validate if the designated constraints aren't met.
type Unbind2FaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Unbind2FaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Unbind2FaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Unbind2FaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Unbind2FaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Unbind2FaResponseValidationError) ErrorName() string {
	return "Unbind2FaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Unbind2FaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnbind2FaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Unbind2FaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Unbind2FaResponseValidationError{}

// Validate checks the field values on UpdateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountRequestMultiError, or nil if none found.
func (m *UpdateAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.Role != nil {
		// no validation rules for Role
	}

	if len(errors) > 0 {
		return UpdateAccountRequestMultiError(errors)
	}

	return nil
}

// UpdateAccountRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountRequestMultiError) AllErrors() []error { return m }

// UpdateAccountRequestValidationError is the validation error returned by
// UpdateAccountRequest.Validate if the designated constraints aren't met.
type UpdateAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountRequestValidationError) ErrorName() string {
	return "UpdateAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountRequestValidationError{}

// Validate checks the field values on UpdateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountResponseMultiError, or nil if none found.
func (m *UpdateAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAccountResponseMultiError(errors)
	}

	return nil
}

// UpdateAccountResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountResponseMultiError) AllErrors() []error { return m }

// UpdateAccountResponseValidationError is the validation error returned by
// UpdateAccountResponse.Validate if the designated constraints aren't met.
type UpdateAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountResponseValidationError) ErrorName() string {
	return "UpdateAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountResponseValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}
