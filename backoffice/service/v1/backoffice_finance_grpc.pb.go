// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_finance.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackofficeFinance_ListInvoices_FullMethodName                    = "/api.backoffice.service.v1.BackofficeFinance/ListInvoices"
	BackofficeFinance_GetInvoiceDetail_FullMethodName                = "/api.backoffice.service.v1.BackofficeFinance/GetInvoiceDetail"
	BackofficeFinance_ListOperatorRevenueShare_FullMethodName        = "/api.backoffice.service.v1.BackofficeFinance/ListOperatorRevenueShare"
	BackofficeFinance_ListThirdPartyFees_FullMethodName              = "/api.backoffice.service.v1.BackofficeFinance/ListThirdPartyFees"
	BackofficeFinance_ListAdjustments_FullMethodName                 = "/api.backoffice.service.v1.BackofficeFinance/ListAdjustments"
	BackofficeFinance_ListMonthlyRevenueShare_FullMethodName         = "/api.backoffice.service.v1.BackofficeFinance/ListMonthlyRevenueShare"
	BackofficeFinance_AddAdjustment_FullMethodName                   = "/api.backoffice.service.v1.BackofficeFinance/AddAdjustment"
	BackofficeFinance_ListAdjustmentConfigs_FullMethodName           = "/api.backoffice.service.v1.BackofficeFinance/ListAdjustmentConfigs"
	BackofficeFinance_CreateAdjustmentConfig_FullMethodName          = "/api.backoffice.service.v1.BackofficeFinance/CreateAdjustmentConfig"
	BackofficeFinance_UpdateAdjustmentConfig_FullMethodName          = "/api.backoffice.service.v1.BackofficeFinance/UpdateAdjustmentConfig"
	BackofficeFinance_DeleteAdjustmentConfig_FullMethodName          = "/api.backoffice.service.v1.BackofficeFinance/DeleteAdjustmentConfig"
	BackofficeFinance_SendInvoices_FullMethodName                    = "/api.backoffice.service.v1.BackofficeFinance/SendInvoices"
	BackofficeFinance_GetInvoiceSummary_FullMethodName               = "/api.backoffice.service.v1.BackofficeFinance/GetInvoiceSummary"
	BackofficeFinance_GetBalanceSummary_FullMethodName               = "/api.backoffice.service.v1.BackofficeFinance/GetBalanceSummary"
	BackofficeFinance_GetBalancesSummary_FullMethodName              = "/api.backoffice.service.v1.BackofficeFinance/GetBalancesSummary"
	BackofficeFinance_ListBillingPeriods_FullMethodName              = "/api.backoffice.service.v1.BackofficeFinance/ListBillingPeriods"
	BackofficeFinance_ListBalanceMonthlyRevenueShares_FullMethodName = "/api.backoffice.service.v1.BackofficeFinance/ListBalanceMonthlyRevenueShares"
	BackofficeFinance_ListBalancesSummary_FullMethodName             = "/api.backoffice.service.v1.BackofficeFinance/ListBalancesSummary"
)

// BackofficeFinanceClient is the client API for BackofficeFinance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackofficeFinanceClient interface {
	ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error)
	GetInvoiceDetail(ctx context.Context, in *GetInvoiceDetailRequest, opts ...grpc.CallOption) (*GetInvoiceDetailResponse, error)
	ListOperatorRevenueShare(ctx context.Context, in *ListOperatorRevenueShareRequest, opts ...grpc.CallOption) (*ListOperatorRevenueShareResponse, error)
	ListThirdPartyFees(ctx context.Context, in *ListThirdPartyFeesRequest, opts ...grpc.CallOption) (*ListThirdPartyFeesResponse, error)
	ListAdjustments(ctx context.Context, in *ListAdjustmentsRequest, opts ...grpc.CallOption) (*ListAdjustmentsResponse, error)
	ListMonthlyRevenueShare(ctx context.Context, in *ListMonthlyRevenueShareRequest, opts ...grpc.CallOption) (*ListMonthlyRevenueShareResponse, error)
	AddAdjustment(ctx context.Context, in *AddAdjustmentRequest, opts ...grpc.CallOption) (*AddAdjustmentResponse, error)
	ListAdjustmentConfigs(ctx context.Context, in *ListAdjustmentConfigsRequest, opts ...grpc.CallOption) (*ListAdjustmentConfigsResponse, error)
	CreateAdjustmentConfig(ctx context.Context, in *CreateAdjustmentConfigRequest, opts ...grpc.CallOption) (*CreateAdjustmentConfigResponse, error)
	UpdateAdjustmentConfig(ctx context.Context, in *UpdateAdjustmentConfigRequest, opts ...grpc.CallOption) (*UpdateAdjustmentConfigResponse, error)
	DeleteAdjustmentConfig(ctx context.Context, in *DeleteAdjustmentConfigRequest, opts ...grpc.CallOption) (*DeleteAdjustmentConfigResponse, error)
	SendInvoices(ctx context.Context, in *SendInvoicesRequest, opts ...grpc.CallOption) (*SendInvoicesResponse, error)
	GetInvoiceSummary(ctx context.Context, in *GetInvoiceSummaryRequest, opts ...grpc.CallOption) (*GetInvoiceSummaryResponse, error)
	GetBalanceSummary(ctx context.Context, in *GetBalanceSummaryRequest, opts ...grpc.CallOption) (*GetBalanceSummaryResponse, error)
	GetBalancesSummary(ctx context.Context, in *GetBalancesSummaryRequest, opts ...grpc.CallOption) (*GetBalancesSummaryResponse, error)
	ListBillingPeriods(ctx context.Context, in *ListBillingPeriodsRequest, opts ...grpc.CallOption) (*ListBillingPeriodsResponse, error)
	ListBalanceMonthlyRevenueShares(ctx context.Context, in *ListBalanceMonthlyRevenueSharesRequest, opts ...grpc.CallOption) (*ListBalanceMonthlyRevenueSharesResponse, error)
	ListBalancesSummary(ctx context.Context, in *ListBalancesSummaryRequest, opts ...grpc.CallOption) (*ListBalancesSummaryResponse, error)
}

type backofficeFinanceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackofficeFinanceClient(cc grpc.ClientConnInterface) BackofficeFinanceClient {
	return &backofficeFinanceClient{cc}
}

func (c *backofficeFinanceClient) ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvoicesResponse)
	err := c.cc.Invoke(ctx, BackofficeFinance_ListInvoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeFinanceClient) GetInvoiceDetail(ctx context.Context, in *GetInvoiceDetailRequest, opts ...grpc.CallOption) (*GetInvoiceDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoiceDetailResponse)
	err := c.cc.Invoke(ctx, BackofficeFinance_GetInvoiceDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeFinanceClient) ListOperatorRevenueShare(ctx context.Context, in *ListOperatorRevenueShareRequest, opts ...grpc.CallOption) (*ListOperatorRevenueShareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOperatorRevenueShareResponse)
	err := c.cc.Invoke(ctx, BackofficeFinance_ListOperatorRevenueShare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeFinanceClient) ListThirdPartyFees(ctx context.Context, in *ListThirdPartyFeesRequest, opts ...grpc.CallOption) (*ListThirdPartyFeesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListThirdPartyFeesResponse)
	err := c.cc.Invoke(ctx, BackofficeFinance_ListThirdPartyFees_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeFinanceClient) ListAdjustments(ctx context.Context, in *ListAdjustmentsRequest, opts ...grpc.CallOption) (*ListAdjustmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAdjustmentsResponse)
	err := c.cc.Invoke(ctx, BackofficeFinance_ListAdjustments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeFinanceClient) ListMonthlyRevenueShare(ctx context.Context, in *ListMonthlyRevenueShareRequest, opts ...grpc.CallOption) (*ListMonthlyRevenueShareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMonthlyRevenueShareResponse)
	err := c.cc.Invoke(ctx, BackofficeFinance_ListMonthlyRevenueShare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeFinanceClient) AddAdjustment(ctx context.Context, in *AddAdjustmentRequest, opts ...grpc.CallOption) (*AddAdjustmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAdjustmentResponse)
	err := c.cc.Invoke(ctx, BackofficeFinance_AddAdjustment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeFinanceClient) ListAdjustmentConfigs(ctx context.Context, in *ListAdjustmentConfigsRequest, opts ...grpc.CallOption) (*ListAdjustmentConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAdjustmentConfigsResponse)
	err := c.cc.Invoke(ctx, BackofficeFinance_ListAdjustmentConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeFinanceClient) CreateAdjustmentConfig(ctx context.Context, in *CreateAdjustmentConfigRequest, opts ...grpc.CallOption) (*CreateAdjustmentConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAdjustmentConfigResponse)
	err := c.cc.Invoke(ctx, BackofficeFinance_CreateAdjustmentConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeFinanceClient) UpdateAdjustmentConfig(ctx context.Context, in *UpdateAdjustmentConfigRequest, opts ...grpc.CallOption) (*UpdateAdjustmentConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAdjustmentConfigResponse)
	err := c.cc.Invoke(ctx, BackofficeFinance_UpdateAdjustmentConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeFinanceClient) DeleteAdjustmentConfig(ctx context.Context, in *DeleteAdjustmentConfigRequest, opts ...grpc.CallOption) (*DeleteAdjustmentConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAdjustmentConfigResponse)
	err := c.cc.Invoke(ctx, BackofficeFinance_DeleteAdjustmentConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeFinanceClient) SendInvoices(ctx context.Context, in *SendInvoicesRequest, opts ...grpc.CallOption) (*SendInvoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendInvoicesResponse)
	err := c.cc.Invoke(ctx, BackofficeFinance_SendInvoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeFinanceClient) GetInvoiceSummary(ctx context.Context, in *GetInvoiceSummaryRequest, opts ...grpc.CallOption) (*GetInvoiceSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoiceSummaryResponse)
	err := c.cc.Invoke(ctx, BackofficeFinance_GetInvoiceSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeFinanceClient) GetBalanceSummary(ctx context.Context, in *GetBalanceSummaryRequest, opts ...grpc.CallOption) (*GetBalanceSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBalanceSummaryResponse)
	err := c.cc.Invoke(ctx, BackofficeFinance_GetBalanceSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeFinanceClient) GetBalancesSummary(ctx context.Context, in *GetBalancesSummaryRequest, opts ...grpc.CallOption) (*GetBalancesSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBalancesSummaryResponse)
	err := c.cc.Invoke(ctx, BackofficeFinance_GetBalancesSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeFinanceClient) ListBillingPeriods(ctx context.Context, in *ListBillingPeriodsRequest, opts ...grpc.CallOption) (*ListBillingPeriodsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBillingPeriodsResponse)
	err := c.cc.Invoke(ctx, BackofficeFinance_ListBillingPeriods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeFinanceClient) ListBalanceMonthlyRevenueShares(ctx context.Context, in *ListBalanceMonthlyRevenueSharesRequest, opts ...grpc.CallOption) (*ListBalanceMonthlyRevenueSharesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBalanceMonthlyRevenueSharesResponse)
	err := c.cc.Invoke(ctx, BackofficeFinance_ListBalanceMonthlyRevenueShares_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeFinanceClient) ListBalancesSummary(ctx context.Context, in *ListBalancesSummaryRequest, opts ...grpc.CallOption) (*ListBalancesSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBalancesSummaryResponse)
	err := c.cc.Invoke(ctx, BackofficeFinance_ListBalancesSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackofficeFinanceServer is the server API for BackofficeFinance service.
// All implementations must embed UnimplementedBackofficeFinanceServer
// for forward compatibility.
type BackofficeFinanceServer interface {
	ListInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error)
	GetInvoiceDetail(context.Context, *GetInvoiceDetailRequest) (*GetInvoiceDetailResponse, error)
	ListOperatorRevenueShare(context.Context, *ListOperatorRevenueShareRequest) (*ListOperatorRevenueShareResponse, error)
	ListThirdPartyFees(context.Context, *ListThirdPartyFeesRequest) (*ListThirdPartyFeesResponse, error)
	ListAdjustments(context.Context, *ListAdjustmentsRequest) (*ListAdjustmentsResponse, error)
	ListMonthlyRevenueShare(context.Context, *ListMonthlyRevenueShareRequest) (*ListMonthlyRevenueShareResponse, error)
	AddAdjustment(context.Context, *AddAdjustmentRequest) (*AddAdjustmentResponse, error)
	ListAdjustmentConfigs(context.Context, *ListAdjustmentConfigsRequest) (*ListAdjustmentConfigsResponse, error)
	CreateAdjustmentConfig(context.Context, *CreateAdjustmentConfigRequest) (*CreateAdjustmentConfigResponse, error)
	UpdateAdjustmentConfig(context.Context, *UpdateAdjustmentConfigRequest) (*UpdateAdjustmentConfigResponse, error)
	DeleteAdjustmentConfig(context.Context, *DeleteAdjustmentConfigRequest) (*DeleteAdjustmentConfigResponse, error)
	SendInvoices(context.Context, *SendInvoicesRequest) (*SendInvoicesResponse, error)
	GetInvoiceSummary(context.Context, *GetInvoiceSummaryRequest) (*GetInvoiceSummaryResponse, error)
	GetBalanceSummary(context.Context, *GetBalanceSummaryRequest) (*GetBalanceSummaryResponse, error)
	GetBalancesSummary(context.Context, *GetBalancesSummaryRequest) (*GetBalancesSummaryResponse, error)
	ListBillingPeriods(context.Context, *ListBillingPeriodsRequest) (*ListBillingPeriodsResponse, error)
	ListBalanceMonthlyRevenueShares(context.Context, *ListBalanceMonthlyRevenueSharesRequest) (*ListBalanceMonthlyRevenueSharesResponse, error)
	ListBalancesSummary(context.Context, *ListBalancesSummaryRequest) (*ListBalancesSummaryResponse, error)
	mustEmbedUnimplementedBackofficeFinanceServer()
}

// UnimplementedBackofficeFinanceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackofficeFinanceServer struct{}

func (UnimplementedBackofficeFinanceServer) ListInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvoices not implemented")
}
func (UnimplementedBackofficeFinanceServer) GetInvoiceDetail(context.Context, *GetInvoiceDetailRequest) (*GetInvoiceDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceDetail not implemented")
}
func (UnimplementedBackofficeFinanceServer) ListOperatorRevenueShare(context.Context, *ListOperatorRevenueShareRequest) (*ListOperatorRevenueShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperatorRevenueShare not implemented")
}
func (UnimplementedBackofficeFinanceServer) ListThirdPartyFees(context.Context, *ListThirdPartyFeesRequest) (*ListThirdPartyFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListThirdPartyFees not implemented")
}
func (UnimplementedBackofficeFinanceServer) ListAdjustments(context.Context, *ListAdjustmentsRequest) (*ListAdjustmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdjustments not implemented")
}
func (UnimplementedBackofficeFinanceServer) ListMonthlyRevenueShare(context.Context, *ListMonthlyRevenueShareRequest) (*ListMonthlyRevenueShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMonthlyRevenueShare not implemented")
}
func (UnimplementedBackofficeFinanceServer) AddAdjustment(context.Context, *AddAdjustmentRequest) (*AddAdjustmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdjustment not implemented")
}
func (UnimplementedBackofficeFinanceServer) ListAdjustmentConfigs(context.Context, *ListAdjustmentConfigsRequest) (*ListAdjustmentConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdjustmentConfigs not implemented")
}
func (UnimplementedBackofficeFinanceServer) CreateAdjustmentConfig(context.Context, *CreateAdjustmentConfigRequest) (*CreateAdjustmentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdjustmentConfig not implemented")
}
func (UnimplementedBackofficeFinanceServer) UpdateAdjustmentConfig(context.Context, *UpdateAdjustmentConfigRequest) (*UpdateAdjustmentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdjustmentConfig not implemented")
}
func (UnimplementedBackofficeFinanceServer) DeleteAdjustmentConfig(context.Context, *DeleteAdjustmentConfigRequest) (*DeleteAdjustmentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdjustmentConfig not implemented")
}
func (UnimplementedBackofficeFinanceServer) SendInvoices(context.Context, *SendInvoicesRequest) (*SendInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvoices not implemented")
}
func (UnimplementedBackofficeFinanceServer) GetInvoiceSummary(context.Context, *GetInvoiceSummaryRequest) (*GetInvoiceSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceSummary not implemented")
}
func (UnimplementedBackofficeFinanceServer) GetBalanceSummary(context.Context, *GetBalanceSummaryRequest) (*GetBalanceSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceSummary not implemented")
}
func (UnimplementedBackofficeFinanceServer) GetBalancesSummary(context.Context, *GetBalancesSummaryRequest) (*GetBalancesSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalancesSummary not implemented")
}
func (UnimplementedBackofficeFinanceServer) ListBillingPeriods(context.Context, *ListBillingPeriodsRequest) (*ListBillingPeriodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBillingPeriods not implemented")
}
func (UnimplementedBackofficeFinanceServer) ListBalanceMonthlyRevenueShares(context.Context, *ListBalanceMonthlyRevenueSharesRequest) (*ListBalanceMonthlyRevenueSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBalanceMonthlyRevenueShares not implemented")
}
func (UnimplementedBackofficeFinanceServer) ListBalancesSummary(context.Context, *ListBalancesSummaryRequest) (*ListBalancesSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBalancesSummary not implemented")
}
func (UnimplementedBackofficeFinanceServer) mustEmbedUnimplementedBackofficeFinanceServer() {}
func (UnimplementedBackofficeFinanceServer) testEmbeddedByValue()                           {}

// UnsafeBackofficeFinanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackofficeFinanceServer will
// result in compilation errors.
type UnsafeBackofficeFinanceServer interface {
	mustEmbedUnimplementedBackofficeFinanceServer()
}

func RegisterBackofficeFinanceServer(s grpc.ServiceRegistrar, srv BackofficeFinanceServer) {
	// If the following call pancis, it indicates UnimplementedBackofficeFinanceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackofficeFinance_ServiceDesc, srv)
}

func _BackofficeFinance_ListInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeFinanceServer).ListInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeFinance_ListInvoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeFinanceServer).ListInvoices(ctx, req.(*ListInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeFinance_GetInvoiceDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeFinanceServer).GetInvoiceDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeFinance_GetInvoiceDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeFinanceServer).GetInvoiceDetail(ctx, req.(*GetInvoiceDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeFinance_ListOperatorRevenueShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperatorRevenueShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeFinanceServer).ListOperatorRevenueShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeFinance_ListOperatorRevenueShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeFinanceServer).ListOperatorRevenueShare(ctx, req.(*ListOperatorRevenueShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeFinance_ListThirdPartyFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListThirdPartyFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeFinanceServer).ListThirdPartyFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeFinance_ListThirdPartyFees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeFinanceServer).ListThirdPartyFees(ctx, req.(*ListThirdPartyFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeFinance_ListAdjustments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdjustmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeFinanceServer).ListAdjustments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeFinance_ListAdjustments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeFinanceServer).ListAdjustments(ctx, req.(*ListAdjustmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeFinance_ListMonthlyRevenueShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMonthlyRevenueShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeFinanceServer).ListMonthlyRevenueShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeFinance_ListMonthlyRevenueShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeFinanceServer).ListMonthlyRevenueShare(ctx, req.(*ListMonthlyRevenueShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeFinance_AddAdjustment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAdjustmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeFinanceServer).AddAdjustment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeFinance_AddAdjustment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeFinanceServer).AddAdjustment(ctx, req.(*AddAdjustmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeFinance_ListAdjustmentConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdjustmentConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeFinanceServer).ListAdjustmentConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeFinance_ListAdjustmentConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeFinanceServer).ListAdjustmentConfigs(ctx, req.(*ListAdjustmentConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeFinance_CreateAdjustmentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdjustmentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeFinanceServer).CreateAdjustmentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeFinance_CreateAdjustmentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeFinanceServer).CreateAdjustmentConfig(ctx, req.(*CreateAdjustmentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeFinance_UpdateAdjustmentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdjustmentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeFinanceServer).UpdateAdjustmentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeFinance_UpdateAdjustmentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeFinanceServer).UpdateAdjustmentConfig(ctx, req.(*UpdateAdjustmentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeFinance_DeleteAdjustmentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdjustmentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeFinanceServer).DeleteAdjustmentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeFinance_DeleteAdjustmentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeFinanceServer).DeleteAdjustmentConfig(ctx, req.(*DeleteAdjustmentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeFinance_SendInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeFinanceServer).SendInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeFinance_SendInvoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeFinanceServer).SendInvoices(ctx, req.(*SendInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeFinance_GetInvoiceSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeFinanceServer).GetInvoiceSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeFinance_GetInvoiceSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeFinanceServer).GetInvoiceSummary(ctx, req.(*GetInvoiceSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeFinance_GetBalanceSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeFinanceServer).GetBalanceSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeFinance_GetBalanceSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeFinanceServer).GetBalanceSummary(ctx, req.(*GetBalanceSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeFinance_GetBalancesSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalancesSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeFinanceServer).GetBalancesSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeFinance_GetBalancesSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeFinanceServer).GetBalancesSummary(ctx, req.(*GetBalancesSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeFinance_ListBillingPeriods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBillingPeriodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeFinanceServer).ListBillingPeriods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeFinance_ListBillingPeriods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeFinanceServer).ListBillingPeriods(ctx, req.(*ListBillingPeriodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeFinance_ListBalanceMonthlyRevenueShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBalanceMonthlyRevenueSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeFinanceServer).ListBalanceMonthlyRevenueShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeFinance_ListBalanceMonthlyRevenueShares_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeFinanceServer).ListBalanceMonthlyRevenueShares(ctx, req.(*ListBalanceMonthlyRevenueSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeFinance_ListBalancesSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBalancesSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeFinanceServer).ListBalancesSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeFinance_ListBalancesSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeFinanceServer).ListBalancesSummary(ctx, req.(*ListBalancesSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackofficeFinance_ServiceDesc is the grpc.ServiceDesc for BackofficeFinance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackofficeFinance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.BackofficeFinance",
	HandlerType: (*BackofficeFinanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListInvoices",
			Handler:    _BackofficeFinance_ListInvoices_Handler,
		},
		{
			MethodName: "GetInvoiceDetail",
			Handler:    _BackofficeFinance_GetInvoiceDetail_Handler,
		},
		{
			MethodName: "ListOperatorRevenueShare",
			Handler:    _BackofficeFinance_ListOperatorRevenueShare_Handler,
		},
		{
			MethodName: "ListThirdPartyFees",
			Handler:    _BackofficeFinance_ListThirdPartyFees_Handler,
		},
		{
			MethodName: "ListAdjustments",
			Handler:    _BackofficeFinance_ListAdjustments_Handler,
		},
		{
			MethodName: "ListMonthlyRevenueShare",
			Handler:    _BackofficeFinance_ListMonthlyRevenueShare_Handler,
		},
		{
			MethodName: "AddAdjustment",
			Handler:    _BackofficeFinance_AddAdjustment_Handler,
		},
		{
			MethodName: "ListAdjustmentConfigs",
			Handler:    _BackofficeFinance_ListAdjustmentConfigs_Handler,
		},
		{
			MethodName: "CreateAdjustmentConfig",
			Handler:    _BackofficeFinance_CreateAdjustmentConfig_Handler,
		},
		{
			MethodName: "UpdateAdjustmentConfig",
			Handler:    _BackofficeFinance_UpdateAdjustmentConfig_Handler,
		},
		{
			MethodName: "DeleteAdjustmentConfig",
			Handler:    _BackofficeFinance_DeleteAdjustmentConfig_Handler,
		},
		{
			MethodName: "SendInvoices",
			Handler:    _BackofficeFinance_SendInvoices_Handler,
		},
		{
			MethodName: "GetInvoiceSummary",
			Handler:    _BackofficeFinance_GetInvoiceSummary_Handler,
		},
		{
			MethodName: "GetBalanceSummary",
			Handler:    _BackofficeFinance_GetBalanceSummary_Handler,
		},
		{
			MethodName: "GetBalancesSummary",
			Handler:    _BackofficeFinance_GetBalancesSummary_Handler,
		},
		{
			MethodName: "ListBillingPeriods",
			Handler:    _BackofficeFinance_ListBillingPeriods_Handler,
		},
		{
			MethodName: "ListBalanceMonthlyRevenueShares",
			Handler:    _BackofficeFinance_ListBalanceMonthlyRevenueShares_Handler,
		},
		{
			MethodName: "ListBalancesSummary",
			Handler:    _BackofficeFinance_ListBalancesSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_finance.proto",
}
