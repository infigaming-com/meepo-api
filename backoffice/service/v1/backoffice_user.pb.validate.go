// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersRequestMultiError, or nil if none found.
func (m *ListUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.RegistrationStartTime != nil {

		if all {
			switch v := interface{}(m.GetRegistrationStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersRequestValidationError{
						field:  "RegistrationStartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersRequestValidationError{
						field:  "RegistrationStartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegistrationStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersRequestValidationError{
					field:  "RegistrationStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RegistrationEndTime != nil {

		if all {
			switch v := interface{}(m.GetRegistrationEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersRequestValidationError{
						field:  "RegistrationEndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersRequestValidationError{
						field:  "RegistrationEndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegistrationEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersRequestValidationError{
					field:  "RegistrationEndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.VipLevel != nil {
		// no validation rules for VipLevel
	}

	if m.RetailerOperatorId != nil {
		// no validation rules for RetailerOperatorId
	}

	if m.GroupOperatorId != nil {
		// no validation rules for GroupOperatorId
	}

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if m.RiskLevelMin != nil {
		// no validation rules for RiskLevelMin
	}

	if m.RiskLevelMax != nil {
		// no validation rules for RiskLevelMax
	}

	if m.HasMadeDeposit != nil {
		// no validation rules for HasMadeDeposit
	}

	if m.DepositMin != nil {
		// no validation rules for DepositMin
	}

	if m.DepositMax != nil {
		// no validation rules for DepositMax
	}

	if m.WithdrawalMin != nil {
		// no validation rules for WithdrawalMin
	}

	if m.WithdrawalMax != nil {
		// no validation rules for WithdrawalMax
	}

	if m.BanWithdraw != nil {
		// no validation rules for BanWithdraw
	}

	if m.BanGame != nil {
		// no validation rules for BanGame
	}

	if m.BanLogin != nil {
		// no validation rules for BanLogin
	}

	if m.Online != nil {
		// no validation rules for Online
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListUsersRequestMultiError(errors)
	}

	return nil
}

// ListUsersRequestMultiError is an error wrapping multiple validation errors
// returned by ListUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersRequestMultiError) AllErrors() []error { return m }

// ListUsersRequestValidationError is the validation error returned by
// ListUsersRequest.Validate if the designated constraints aren't met.
type ListUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersRequestValidationError) ErrorName() string { return "ListUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersRequestValidationError{}

// Validate checks the field values on ListUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersResponseMultiError, or nil if none found.
func (m *ListUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return ListUsersResponseMultiError(errors)
	}

	return nil
}

// ListUsersResponseMultiError is an error wrapping multiple validation errors
// returned by ListUsersResponse.ValidateAll() if the designated constraints
// aren't met.
type ListUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersResponseMultiError) AllErrors() []error { return m }

// ListUsersResponseValidationError is the validation error returned by
// ListUsersResponse.Validate if the designated constraints aren't met.
type ListUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponseValidationError) ErrorName() string {
	return "ListUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponseValidationError{}

// Validate checks the field values on GetUserOverviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserOverviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserOverviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserOverviewRequestMultiError, or nil if none found.
func (m *GetUserOverviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserOverviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserOverviewRequestMultiError(errors)
	}

	return nil
}

// GetUserOverviewRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserOverviewRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserOverviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserOverviewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserOverviewRequestMultiError) AllErrors() []error { return m }

// GetUserOverviewRequestValidationError is the validation error returned by
// GetUserOverviewRequest.Validate if the designated constraints aren't met.
type GetUserOverviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserOverviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserOverviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserOverviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserOverviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserOverviewRequestValidationError) ErrorName() string {
	return "GetUserOverviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserOverviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserOverviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserOverviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserOverviewRequestValidationError{}

// Validate checks the field values on GetUserOverviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserOverviewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserOverviewResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserOverviewResponseMultiError, or nil if none found.
func (m *GetUserOverviewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserOverviewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Balance

	// no validation rules for DepositMinusWithdraw

	// no validation rules for CashTurnover

	// no validation rules for BonusTurnover

	// no validation rules for Deposit

	// no validation rules for LastDeposit

	// no validation rules for DepositCount

	// no validation rules for Withdraw

	// no validation rules for LastWithdraw

	// no validation rules for WithdrawCount

	// no validation rules for Bonus

	// no validation rules for ValidTurnover

	// no validation rules for AverageBetAmount

	// no validation rules for Ggr

	// no validation rules for GgrPercentage

	// no validation rules for ManuallyAddedBalance

	// no validation rules for BonusClaimed

	// no validation rules for Ngr

	// no validation rules for GgrToNgrPercentage

	// no validation rules for TurnoverMultiplier

	// no validation rules for DepositToWithdrawRatio

	// no validation rules for RtpPercentage

	for idx, item := range m.GetGameData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserOverviewResponseValidationError{
						field:  fmt.Sprintf("GameData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserOverviewResponseValidationError{
						field:  fmt.Sprintf("GameData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserOverviewResponseValidationError{
					field:  fmt.Sprintf("GameData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for VpnUsed

	// no validation rules for Has_1XDepositsBeforeWd

	// no validation rules for MoreThan_2Deposits

	// no validation rules for AccountOlderThan_3Months

	if all {
		switch v := interface{}(m.GetLastDepositAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserOverviewResponseValidationError{
					field:  "LastDepositAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserOverviewResponseValidationError{
					field:  "LastDepositAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastDepositAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserOverviewResponseValidationError{
				field:  "LastDepositAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FirstDepositOnToday

	if len(errors) > 0 {
		return GetUserOverviewResponseMultiError(errors)
	}

	return nil
}

// GetUserOverviewResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserOverviewResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserOverviewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserOverviewResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserOverviewResponseMultiError) AllErrors() []error { return m }

// GetUserOverviewResponseValidationError is the validation error returned by
// GetUserOverviewResponse.Validate if the designated constraints aren't met.
type GetUserOverviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserOverviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserOverviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserOverviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserOverviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserOverviewResponseValidationError) ErrorName() string {
	return "GetUserOverviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserOverviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserOverviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserOverviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserOverviewResponseValidationError{}

// Validate checks the field values on GetUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProfileRequestMultiError, or nil if none found.
func (m *GetUserProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserProfileRequestMultiError(errors)
	}

	return nil
}

// GetUserProfileRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileRequestMultiError) AllErrors() []error { return m }

// GetUserProfileRequestValidationError is the validation error returned by
// GetUserProfileRequest.Validate if the designated constraints aren't met.
type GetUserProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileRequestValidationError) ErrorName() string {
	return "GetUserProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileRequestValidationError{}

// Validate checks the field values on GetUserProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProfileResponseMultiError, or nil if none found.
func (m *GetUserProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Nickname

	// no validation rules for UserId

	// no validation rules for VipLevel

	// no validation rules for Online

	if all {
		switch v := interface{}(m.GetRegistrationRecord()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponseValidationError{
					field:  "RegistrationRecord",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponseValidationError{
					field:  "RegistrationRecord",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegistrationRecord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponseValidationError{
				field:  "RegistrationRecord",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLoginRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("LoginRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("LoginRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfileResponseValidationError{
					field:  fmt.Sprintf("LoginRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfileResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserProfileResponseMultiError(errors)
	}

	return nil
}

// GetUserProfileResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponseMultiError) AllErrors() []error { return m }

// GetUserProfileResponseValidationError is the validation error returned by
// GetUserProfileResponse.Validate if the designated constraints aren't met.
type GetUserProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponseValidationError) ErrorName() string {
	return "GetUserProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponseValidationError{}

// Validate checks the field values on AddOperatorUserTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOperatorUserTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOperatorUserTagRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOperatorUserTagRequestMultiError, or nil if none found.
func (m *AddOperatorUserTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOperatorUserTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tag

	if len(errors) > 0 {
		return AddOperatorUserTagRequestMultiError(errors)
	}

	return nil
}

// AddOperatorUserTagRequestMultiError is an error wrapping multiple validation
// errors returned by AddOperatorUserTagRequest.ValidateAll() if the
// designated constraints aren't met.
type AddOperatorUserTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOperatorUserTagRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOperatorUserTagRequestMultiError) AllErrors() []error { return m }

// AddOperatorUserTagRequestValidationError is the validation error returned by
// AddOperatorUserTagRequest.Validate if the designated constraints aren't met.
type AddOperatorUserTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOperatorUserTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOperatorUserTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOperatorUserTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOperatorUserTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOperatorUserTagRequestValidationError) ErrorName() string {
	return "AddOperatorUserTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOperatorUserTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOperatorUserTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOperatorUserTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOperatorUserTagRequestValidationError{}

// Validate checks the field values on AddOperatorUserTagResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOperatorUserTagResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOperatorUserTagResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOperatorUserTagResponseMultiError, or nil if none found.
func (m *AddOperatorUserTagResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOperatorUserTagResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddOperatorUserTagResponseMultiError(errors)
	}

	return nil
}

// AddOperatorUserTagResponseMultiError is an error wrapping multiple
// validation errors returned by AddOperatorUserTagResponse.ValidateAll() if
// the designated constraints aren't met.
type AddOperatorUserTagResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOperatorUserTagResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOperatorUserTagResponseMultiError) AllErrors() []error { return m }

// AddOperatorUserTagResponseValidationError is the validation error returned
// by AddOperatorUserTagResponse.Validate if the designated constraints aren't met.
type AddOperatorUserTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOperatorUserTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOperatorUserTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOperatorUserTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOperatorUserTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOperatorUserTagResponseValidationError) ErrorName() string {
	return "AddOperatorUserTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOperatorUserTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOperatorUserTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOperatorUserTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOperatorUserTagResponseValidationError{}

// Validate checks the field values on DeleteOperatorUserTagRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOperatorUserTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOperatorUserTagRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOperatorUserTagRequestMultiError, or nil if none found.
func (m *DeleteOperatorUserTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOperatorUserTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tag

	if len(errors) > 0 {
		return DeleteOperatorUserTagRequestMultiError(errors)
	}

	return nil
}

// DeleteOperatorUserTagRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteOperatorUserTagRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteOperatorUserTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOperatorUserTagRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOperatorUserTagRequestMultiError) AllErrors() []error { return m }

// DeleteOperatorUserTagRequestValidationError is the validation error returned
// by DeleteOperatorUserTagRequest.Validate if the designated constraints
// aren't met.
type DeleteOperatorUserTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOperatorUserTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOperatorUserTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOperatorUserTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOperatorUserTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOperatorUserTagRequestValidationError) ErrorName() string {
	return "DeleteOperatorUserTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOperatorUserTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOperatorUserTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOperatorUserTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOperatorUserTagRequestValidationError{}

// Validate checks the field values on DeleteOperatorUserTagResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOperatorUserTagResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOperatorUserTagResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOperatorUserTagResponseMultiError, or nil if none found.
func (m *DeleteOperatorUserTagResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOperatorUserTagResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOperatorUserTagResponseMultiError(errors)
	}

	return nil
}

// DeleteOperatorUserTagResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteOperatorUserTagResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteOperatorUserTagResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOperatorUserTagResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOperatorUserTagResponseMultiError) AllErrors() []error { return m }

// DeleteOperatorUserTagResponseValidationError is the validation error
// returned by DeleteOperatorUserTagResponse.Validate if the designated
// constraints aren't met.
type DeleteOperatorUserTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOperatorUserTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOperatorUserTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOperatorUserTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOperatorUserTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOperatorUserTagResponseValidationError) ErrorName() string {
	return "DeleteOperatorUserTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOperatorUserTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOperatorUserTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOperatorUserTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOperatorUserTagResponseValidationError{}

// Validate checks the field values on GetOperatorUserTagsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorUserTagsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorUserTagsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorUserTagsRequestMultiError, or nil if none found.
func (m *GetOperatorUserTagsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorUserTagsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOperatorUserTagsRequestMultiError(errors)
	}

	return nil
}

// GetOperatorUserTagsRequestMultiError is an error wrapping multiple
// validation errors returned by GetOperatorUserTagsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOperatorUserTagsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorUserTagsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorUserTagsRequestMultiError) AllErrors() []error { return m }

// GetOperatorUserTagsRequestValidationError is the validation error returned
// by GetOperatorUserTagsRequest.Validate if the designated constraints aren't met.
type GetOperatorUserTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorUserTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorUserTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorUserTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorUserTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorUserTagsRequestValidationError) ErrorName() string {
	return "GetOperatorUserTagsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorUserTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorUserTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorUserTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorUserTagsRequestValidationError{}

// Validate checks the field values on GetOperatorUserTagsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorUserTagsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorUserTagsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorUserTagsResponseMultiError, or nil if none found.
func (m *GetOperatorUserTagsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorUserTagsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOperatorUserTagsResponseMultiError(errors)
	}

	return nil
}

// GetOperatorUserTagsResponseMultiError is an error wrapping multiple
// validation errors returned by GetOperatorUserTagsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetOperatorUserTagsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorUserTagsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorUserTagsResponseMultiError) AllErrors() []error { return m }

// GetOperatorUserTagsResponseValidationError is the validation error returned
// by GetOperatorUserTagsResponse.Validate if the designated constraints
// aren't met.
type GetOperatorUserTagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorUserTagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorUserTagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorUserTagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorUserTagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorUserTagsResponseValidationError) ErrorName() string {
	return "GetOperatorUserTagsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorUserTagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorUserTagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorUserTagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorUserTagsResponseValidationError{}

// Validate checks the field values on AddUserTagRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddUserTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserTagRequestMultiError, or nil if none found.
func (m *AddUserTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Tag

	if len(errors) > 0 {
		return AddUserTagRequestMultiError(errors)
	}

	return nil
}

// AddUserTagRequestMultiError is an error wrapping multiple validation errors
// returned by AddUserTagRequest.ValidateAll() if the designated constraints
// aren't met.
type AddUserTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserTagRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserTagRequestMultiError) AllErrors() []error { return m }

// AddUserTagRequestValidationError is the validation error returned by
// AddUserTagRequest.Validate if the designated constraints aren't met.
type AddUserTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserTagRequestValidationError) ErrorName() string {
	return "AddUserTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserTagRequestValidationError{}

// Validate checks the field values on AddUserTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUserTagResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserTagResponseMultiError, or nil if none found.
func (m *AddUserTagResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserTagResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddUserTagResponseMultiError(errors)
	}

	return nil
}

// AddUserTagResponseMultiError is an error wrapping multiple validation errors
// returned by AddUserTagResponse.ValidateAll() if the designated constraints
// aren't met.
type AddUserTagResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserTagResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserTagResponseMultiError) AllErrors() []error { return m }

// AddUserTagResponseValidationError is the validation error returned by
// AddUserTagResponse.Validate if the designated constraints aren't met.
type AddUserTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserTagResponseValidationError) ErrorName() string {
	return "AddUserTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserTagResponseValidationError{}

// Validate checks the field values on DeleteUserTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserTagRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserTagRequestMultiError, or nil if none found.
func (m *DeleteUserTagRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserTagRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Tag

	if len(errors) > 0 {
		return DeleteUserTagRequestMultiError(errors)
	}

	return nil
}

// DeleteUserTagRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserTagRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserTagRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserTagRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserTagRequestMultiError) AllErrors() []error { return m }

// DeleteUserTagRequestValidationError is the validation error returned by
// DeleteUserTagRequest.Validate if the designated constraints aren't met.
type DeleteUserTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserTagRequestValidationError) ErrorName() string {
	return "DeleteUserTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserTagRequestValidationError{}

// Validate checks the field values on DeleteUserTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserTagResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserTagResponseMultiError, or nil if none found.
func (m *DeleteUserTagResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserTagResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserTagResponseMultiError(errors)
	}

	return nil
}

// DeleteUserTagResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteUserTagResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserTagResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserTagResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserTagResponseMultiError) AllErrors() []error { return m }

// DeleteUserTagResponseValidationError is the validation error returned by
// DeleteUserTagResponse.Validate if the designated constraints aren't met.
type DeleteUserTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserTagResponseValidationError) ErrorName() string {
	return "DeleteUserTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserTagResponseValidationError{}

// Validate checks the field values on AddUserCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUserCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserCommentRequestMultiError, or nil if none found.
func (m *AddUserCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for AuthorUserId

	// no validation rules for Content

	if len(errors) > 0 {
		return AddUserCommentRequestMultiError(errors)
	}

	return nil
}

// AddUserCommentRequestMultiError is an error wrapping multiple validation
// errors returned by AddUserCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type AddUserCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserCommentRequestMultiError) AllErrors() []error { return m }

// AddUserCommentRequestValidationError is the validation error returned by
// AddUserCommentRequest.Validate if the designated constraints aren't met.
type AddUserCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserCommentRequestValidationError) ErrorName() string {
	return "AddUserCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserCommentRequestValidationError{}

// Validate checks the field values on AddUserCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUserCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserCommentResponseMultiError, or nil if none found.
func (m *AddUserCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddUserCommentResponseMultiError(errors)
	}

	return nil
}

// AddUserCommentResponseMultiError is an error wrapping multiple validation
// errors returned by AddUserCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type AddUserCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserCommentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserCommentResponseMultiError) AllErrors() []error { return m }

// AddUserCommentResponseValidationError is the validation error returned by
// AddUserCommentResponse.Validate if the designated constraints aren't met.
type AddUserCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserCommentResponseValidationError) ErrorName() string {
	return "AddUserCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserCommentResponseValidationError{}

// Validate checks the field values on GetUserWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserWalletRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserWalletRequestMultiError, or nil if none found.
func (m *GetUserWalletRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserWalletRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserWalletRequestMultiError(errors)
	}

	return nil
}

// GetUserWalletRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserWalletRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserWalletRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserWalletRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserWalletRequestMultiError) AllErrors() []error { return m }

// GetUserWalletRequestValidationError is the validation error returned by
// GetUserWalletRequest.Validate if the designated constraints aren't met.
type GetUserWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserWalletRequestValidationError) ErrorName() string {
	return "GetUserWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserWalletRequestValidationError{}

// Validate checks the field values on ListUsersResponse_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUsersResponse_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersResponse_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersResponse_UserMultiError, or nil if none found.
func (m *ListUsersResponse_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersResponse_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Retailer

	// no validation rules for Group

	// no validation rules for Operator

	// no validation rules for UserId

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for VipLevel

	// no validation rules for KycLevel

	// no validation rules for Deposit

	// no validation rules for Withdraw

	// no validation rules for BanWithdraw

	// no validation rules for BanGame

	// no validation rules for BanLogin

	// no validation rules for Online

	if all {
		switch v := interface{}(m.GetLastLoginAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "LastLoginAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "LastLoginAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastLoginAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersResponse_UserValidationError{
				field:  "LastLoginAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRegisteredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "RegisteredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "RegisteredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegisteredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersResponse_UserValidationError{
				field:  "RegisteredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RiskLevel

	// no validation rules for ReferralCode

	// no validation rules for AffiliateCode

	// no validation rules for Country

	// no validation rules for Device

	// no validation rules for Source

	// no validation rules for RegistrationIp

	if len(errors) > 0 {
		return ListUsersResponse_UserMultiError(errors)
	}

	return nil
}

// ListUsersResponse_UserMultiError is an error wrapping multiple validation
// errors returned by ListUsersResponse_User.ValidateAll() if the designated
// constraints aren't met.
type ListUsersResponse_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersResponse_UserMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersResponse_UserMultiError) AllErrors() []error { return m }

// ListUsersResponse_UserValidationError is the validation error returned by
// ListUsersResponse_User.Validate if the designated constraints aren't met.
type ListUsersResponse_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponse_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponse_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponse_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponse_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponse_UserValidationError) ErrorName() string {
	return "ListUsersResponse_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponse_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponse_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponse_UserValidationError{}

// Validate checks the field values on GetUserOverviewResponse_GameData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserOverviewResponse_GameData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserOverviewResponse_GameData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserOverviewResponse_GameDataMultiError, or nil if none found.
func (m *GetUserOverviewResponse_GameData) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserOverviewResponse_GameData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameType

	// no validation rules for Ggr

	// no validation rules for Turnover

	// no validation rules for Rtp

	if len(errors) > 0 {
		return GetUserOverviewResponse_GameDataMultiError(errors)
	}

	return nil
}

// GetUserOverviewResponse_GameDataMultiError is an error wrapping multiple
// validation errors returned by
// GetUserOverviewResponse_GameData.ValidateAll() if the designated
// constraints aren't met.
type GetUserOverviewResponse_GameDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserOverviewResponse_GameDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserOverviewResponse_GameDataMultiError) AllErrors() []error { return m }

// GetUserOverviewResponse_GameDataValidationError is the validation error
// returned by GetUserOverviewResponse_GameData.Validate if the designated
// constraints aren't met.
type GetUserOverviewResponse_GameDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserOverviewResponse_GameDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserOverviewResponse_GameDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserOverviewResponse_GameDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserOverviewResponse_GameDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserOverviewResponse_GameDataValidationError) ErrorName() string {
	return "GetUserOverviewResponse_GameDataValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserOverviewResponse_GameDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserOverviewResponse_GameData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserOverviewResponse_GameDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserOverviewResponse_GameDataValidationError{}

// Validate checks the field values on
// GetUserProfileResponse_RegistrationRecord with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileResponse_RegistrationRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserProfileResponse_RegistrationRecord with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetUserProfileResponse_RegistrationRecordMultiError, or nil if none found.
func (m *GetUserProfileResponse_RegistrationRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse_RegistrationRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRegisteredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponse_RegistrationRecordValidationError{
					field:  "RegisteredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponse_RegistrationRecordValidationError{
					field:  "RegisteredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegisteredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponse_RegistrationRecordValidationError{
				field:  "RegisteredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RegistrationIp

	// no validation rules for Device

	// no validation rules for Method

	// no validation rules for Browser

	// no validation rules for App

	// no validation rules for Mobile

	// no validation rules for Email

	// no validation rules for Username

	// no validation rules for Source

	if len(errors) > 0 {
		return GetUserProfileResponse_RegistrationRecordMultiError(errors)
	}

	return nil
}

// GetUserProfileResponse_RegistrationRecordMultiError is an error wrapping
// multiple validation errors returned by
// GetUserProfileResponse_RegistrationRecord.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileResponse_RegistrationRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponse_RegistrationRecordMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponse_RegistrationRecordMultiError) AllErrors() []error { return m }

// GetUserProfileResponse_RegistrationRecordValidationError is the validation
// error returned by GetUserProfileResponse_RegistrationRecord.Validate if the
// designated constraints aren't met.
type GetUserProfileResponse_RegistrationRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponse_RegistrationRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponse_RegistrationRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponse_RegistrationRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponse_RegistrationRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponse_RegistrationRecordValidationError) ErrorName() string {
	return "GetUserProfileResponse_RegistrationRecordValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponse_RegistrationRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse_RegistrationRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponse_RegistrationRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponse_RegistrationRecordValidationError{}

// Validate checks the field values on GetUserProfileResponse_LoginRecord with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserProfileResponse_LoginRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileResponse_LoginRecord
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserProfileResponse_LoginRecordMultiError, or nil if none found.
func (m *GetUserProfileResponse_LoginRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse_LoginRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLoginAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponse_LoginRecordValidationError{
					field:  "LoginAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponse_LoginRecordValidationError{
					field:  "LoginAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLoginAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponse_LoginRecordValidationError{
				field:  "LoginAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LoginIp

	// no validation rules for Device

	// no validation rules for Method

	// no validation rules for Browser

	// no validation rules for App

	// no validation rules for Email

	// no validation rules for Mobile

	if len(errors) > 0 {
		return GetUserProfileResponse_LoginRecordMultiError(errors)
	}

	return nil
}

// GetUserProfileResponse_LoginRecordMultiError is an error wrapping multiple
// validation errors returned by
// GetUserProfileResponse_LoginRecord.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileResponse_LoginRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponse_LoginRecordMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponse_LoginRecordMultiError) AllErrors() []error { return m }

// GetUserProfileResponse_LoginRecordValidationError is the validation error
// returned by GetUserProfileResponse_LoginRecord.Validate if the designated
// constraints aren't met.
type GetUserProfileResponse_LoginRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponse_LoginRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponse_LoginRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponse_LoginRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponse_LoginRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponse_LoginRecordValidationError) ErrorName() string {
	return "GetUserProfileResponse_LoginRecordValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponse_LoginRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse_LoginRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponse_LoginRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponse_LoginRecordValidationError{}

// Validate checks the field values on GetUserProfileResponse_Comment with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileResponse_Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileResponse_Comment with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserProfileResponse_CommentMultiError, or nil if none found.
func (m *GetUserProfileResponse_Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse_Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuthorUserId

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponse_CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponse_CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponse_CommentValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserProfileResponse_CommentMultiError(errors)
	}

	return nil
}

// GetUserProfileResponse_CommentMultiError is an error wrapping multiple
// validation errors returned by GetUserProfileResponse_Comment.ValidateAll()
// if the designated constraints aren't met.
type GetUserProfileResponse_CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponse_CommentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponse_CommentMultiError) AllErrors() []error { return m }

// GetUserProfileResponse_CommentValidationError is the validation error
// returned by GetUserProfileResponse_Comment.Validate if the designated
// constraints aren't met.
type GetUserProfileResponse_CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponse_CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponse_CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponse_CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponse_CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponse_CommentValidationError) ErrorName() string {
	return "GetUserProfileResponse_CommentValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponse_CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse_Comment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponse_CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponse_CommentValidationError{}
