// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersRequestMultiError, or nil if none found.
func (m *ListUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.RegistrationStartTime != nil {

		if all {
			switch v := interface{}(m.GetRegistrationStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersRequestValidationError{
						field:  "RegistrationStartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersRequestValidationError{
						field:  "RegistrationStartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegistrationStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersRequestValidationError{
					field:  "RegistrationStartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RegistrationEndTime != nil {

		if all {
			switch v := interface{}(m.GetRegistrationEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersRequestValidationError{
						field:  "RegistrationEndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersRequestValidationError{
						field:  "RegistrationEndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegistrationEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersRequestValidationError{
					field:  "RegistrationEndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.VipLevel != nil {
		// no validation rules for VipLevel
	}

	if m.Country != nil {
		// no validation rules for Country
	}

	if m.KycLevel != nil {
		// no validation rules for KycLevel
	}

	if m.DepositMin != nil {
		// no validation rules for DepositMin
	}

	if m.DepositMax != nil {
		// no validation rules for DepositMax
	}

	if m.WithdrawalMin != nil {
		// no validation rules for WithdrawalMin
	}

	if m.WithdrawalMax != nil {
		// no validation rules for WithdrawalMax
	}

	if m.BanWithdraw != nil {
		// no validation rules for BanWithdraw
	}

	if m.BanGame != nil {
		// no validation rules for BanGame
	}

	if m.BanLogin != nil {
		// no validation rules for BanLogin
	}

	if m.Online != nil {
		// no validation rules for Online
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Mobile != nil {
		// no validation rules for Mobile
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListUsersRequestMultiError(errors)
	}

	return nil
}

// ListUsersRequestMultiError is an error wrapping multiple validation errors
// returned by ListUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersRequestMultiError) AllErrors() []error { return m }

// ListUsersRequestValidationError is the validation error returned by
// ListUsersRequest.Validate if the designated constraints aren't met.
type ListUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersRequestValidationError) ErrorName() string { return "ListUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersRequestValidationError{}

// Validate checks the field values on ListUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersResponseMultiError, or nil if none found.
func (m *ListUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return ListUsersResponseMultiError(errors)
	}

	return nil
}

// ListUsersResponseMultiError is an error wrapping multiple validation errors
// returned by ListUsersResponse.ValidateAll() if the designated constraints
// aren't met.
type ListUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersResponseMultiError) AllErrors() []error { return m }

// ListUsersResponseValidationError is the validation error returned by
// ListUsersResponse.Validate if the designated constraints aren't met.
type ListUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponseValidationError) ErrorName() string {
	return "ListUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponseValidationError{}

// Validate checks the field values on GetUserOverviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserOverviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserOverviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserOverviewRequestMultiError, or nil if none found.
func (m *GetUserOverviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserOverviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if len(errors) > 0 {
		return GetUserOverviewRequestMultiError(errors)
	}

	return nil
}

// GetUserOverviewRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserOverviewRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserOverviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserOverviewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserOverviewRequestMultiError) AllErrors() []error { return m }

// GetUserOverviewRequestValidationError is the validation error returned by
// GetUserOverviewRequest.Validate if the designated constraints aren't met.
type GetUserOverviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserOverviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserOverviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserOverviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserOverviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserOverviewRequestValidationError) ErrorName() string {
	return "GetUserOverviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserOverviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserOverviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserOverviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserOverviewRequestValidationError{}

// Validate checks the field values on GetUserOverviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserOverviewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserOverviewResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserOverviewResponseMultiError, or nil if none found.
func (m *GetUserOverviewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserOverviewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BalanceUsd

	// no validation rules for DepositMinusWithdrawUsd

	// no validation rules for TurnoverUsd

	// no validation rules for CashTurnoverUsd

	// no validation rules for BonusTurnoverUsd

	// no validation rules for DepositUsd

	// no validation rules for LastDepositUsd

	// no validation rules for DepositCount

	// no validation rules for WithdrawUsd

	// no validation rules for LastWithdrawUsd

	// no validation rules for WithdrawCount

	// no validation rules for BonusUsd

	// no validation rules for ValidTurnoverUsd

	// no validation rules for AverageBetAmountUsd

	// no validation rules for GgrUsd

	// no validation rules for GgrPercentage

	// no validation rules for ManuallyAddedBalanceUsd

	// no validation rules for BonusClaimedUsd

	// no validation rules for NgrUsd

	// no validation rules for GgrToNgrPercentage

	// no validation rules for TurnoverMultiplier

	// no validation rules for WithdrawToDepositRatio

	// no validation rules for Rtp

	// no validation rules for ReportingCurrency

	// no validation rules for BalanceReportingCurrency

	// no validation rules for DepositMinusWithdrawReportingCurrency

	// no validation rules for TurnoverReportingCurrency

	// no validation rules for CashTurnoverReportingCurrency

	// no validation rules for BonusTurnoverReportingCurrency

	// no validation rules for DepositReportingCurrency

	// no validation rules for LastDepositReportingCurrency

	// no validation rules for WithdrawReportingCurrency

	// no validation rules for LastWithdrawReportingCurrency

	// no validation rules for BonusReportingCurrency

	// no validation rules for ValidTurnoverReportingCurrency

	// no validation rules for AverageBetAmountReportingCurrency

	// no validation rules for GgrReportingCurrency

	// no validation rules for ManuallyAddedBalanceReportingCurrency

	// no validation rules for BonusClaimedReportingCurrency

	// no validation rules for NgrReportingCurrency

	for idx, item := range m.GetGameData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserOverviewResponseValidationError{
						field:  fmt.Sprintf("GameData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserOverviewResponseValidationError{
						field:  fmt.Sprintf("GameData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserOverviewResponseValidationError{
					field:  fmt.Sprintf("GameData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserOverviewResponseMultiError(errors)
	}

	return nil
}

// GetUserOverviewResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserOverviewResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserOverviewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserOverviewResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserOverviewResponseMultiError) AllErrors() []error { return m }

// GetUserOverviewResponseValidationError is the validation error returned by
// GetUserOverviewResponse.Validate if the designated constraints aren't met.
type GetUserOverviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserOverviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserOverviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserOverviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserOverviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserOverviewResponseValidationError) ErrorName() string {
	return "GetUserOverviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserOverviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserOverviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserOverviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserOverviewResponseValidationError{}

// Validate checks the field values on GetUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProfileRequestMultiError, or nil if none found.
func (m *GetUserProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.LoginPage != nil {
		// no validation rules for LoginPage
	}

	if m.LoginPageSize != nil {
		// no validation rules for LoginPageSize
	}

	if len(errors) > 0 {
		return GetUserProfileRequestMultiError(errors)
	}

	return nil
}

// GetUserProfileRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileRequestMultiError) AllErrors() []error { return m }

// GetUserProfileRequestValidationError is the validation error returned by
// GetUserProfileRequest.Validate if the designated constraints aren't met.
type GetUserProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileRequestValidationError) ErrorName() string {
	return "GetUserProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileRequestValidationError{}

// Validate checks the field values on GetUserProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProfileResponseMultiError, or nil if none found.
func (m *GetUserProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Nickname

	// no validation rules for UserId

	// no validation rules for VipLevel

	// no validation rules for Online

	// no validation rules for BanWithdraw

	// no validation rules for BanGame

	// no validation rules for BanLogin

	if all {
		switch v := interface{}(m.GetRegistrationRecord()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponseValidationError{
					field:  "RegistrationRecord",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponseValidationError{
					field:  "RegistrationRecord",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegistrationRecord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponseValidationError{
				field:  "RegistrationRecord",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLoginRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("LoginRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("LoginRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfileResponseValidationError{
					field:  fmt.Sprintf("LoginRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProfileResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProfileResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalLoginCount

	// no validation rules for LoginPage

	// no validation rules for LoginPageSize

	if len(errors) > 0 {
		return GetUserProfileResponseMultiError(errors)
	}

	return nil
}

// GetUserProfileResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponseMultiError) AllErrors() []error { return m }

// GetUserProfileResponseValidationError is the validation error returned by
// GetUserProfileResponse.Validate if the designated constraints aren't met.
type GetUserProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponseValidationError) ErrorName() string {
	return "GetUserProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponseValidationError{}

// Validate checks the field values on AddUserCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUserCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserCommentRequestMultiError, or nil if none found.
func (m *AddUserCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Content

	if len(errors) > 0 {
		return AddUserCommentRequestMultiError(errors)
	}

	return nil
}

// AddUserCommentRequestMultiError is an error wrapping multiple validation
// errors returned by AddUserCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type AddUserCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserCommentRequestMultiError) AllErrors() []error { return m }

// AddUserCommentRequestValidationError is the validation error returned by
// AddUserCommentRequest.Validate if the designated constraints aren't met.
type AddUserCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserCommentRequestValidationError) ErrorName() string {
	return "AddUserCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserCommentRequestValidationError{}

// Validate checks the field values on AddUserCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddUserCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddUserCommentResponseMultiError, or nil if none found.
func (m *AddUserCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	if len(errors) > 0 {
		return AddUserCommentResponseMultiError(errors)
	}

	return nil
}

// AddUserCommentResponseMultiError is an error wrapping multiple validation
// errors returned by AddUserCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type AddUserCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserCommentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserCommentResponseMultiError) AllErrors() []error { return m }

// AddUserCommentResponseValidationError is the validation error returned by
// AddUserCommentResponse.Validate if the designated constraints aren't met.
type AddUserCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserCommentResponseValidationError) ErrorName() string {
	return "AddUserCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserCommentResponseValidationError{}

// Validate checks the field values on ListUserCommentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserCommentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserCommentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserCommentsRequestMultiError, or nil if none found.
func (m *ListUserCommentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserCommentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return ListUserCommentsRequestMultiError(errors)
	}

	return nil
}

// ListUserCommentsRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserCommentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserCommentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserCommentsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserCommentsRequestMultiError) AllErrors() []error { return m }

// ListUserCommentsRequestValidationError is the validation error returned by
// ListUserCommentsRequest.Validate if the designated constraints aren't met.
type ListUserCommentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserCommentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserCommentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserCommentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserCommentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserCommentsRequestValidationError) ErrorName() string {
	return "ListUserCommentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserCommentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserCommentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserCommentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserCommentsRequestValidationError{}

// Validate checks the field values on ListUserCommentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserCommentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserCommentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserCommentsResponseMultiError, or nil if none found.
func (m *ListUserCommentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserCommentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserCommentsResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserCommentsResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserCommentsResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserCommentsResponseMultiError(errors)
	}

	return nil
}

// ListUserCommentsResponseMultiError is an error wrapping multiple validation
// errors returned by ListUserCommentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserCommentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserCommentsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserCommentsResponseMultiError) AllErrors() []error { return m }

// ListUserCommentsResponseValidationError is the validation error returned by
// ListUserCommentsResponse.Validate if the designated constraints aren't met.
type ListUserCommentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserCommentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserCommentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserCommentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserCommentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserCommentsResponseValidationError) ErrorName() string {
	return "ListUserCommentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserCommentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserCommentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserCommentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserCommentsResponseValidationError{}

// Validate checks the field values on SendEmailVerificationCodeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendEmailVerificationCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailVerificationCodeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendEmailVerificationCodeRequestMultiError, or nil if none found.
func (m *SendEmailVerificationCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailVerificationCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return SendEmailVerificationCodeRequestMultiError(errors)
	}

	return nil
}

// SendEmailVerificationCodeRequestMultiError is an error wrapping multiple
// validation errors returned by
// SendEmailVerificationCodeRequest.ValidateAll() if the designated
// constraints aren't met.
type SendEmailVerificationCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailVerificationCodeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailVerificationCodeRequestMultiError) AllErrors() []error { return m }

// SendEmailVerificationCodeRequestValidationError is the validation error
// returned by SendEmailVerificationCodeRequest.Validate if the designated
// constraints aren't met.
type SendEmailVerificationCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailVerificationCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailVerificationCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailVerificationCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailVerificationCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailVerificationCodeRequestValidationError) ErrorName() string {
	return "SendEmailVerificationCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendEmailVerificationCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailVerificationCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailVerificationCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailVerificationCodeRequestValidationError{}

// Validate checks the field values on SendEmailVerificationCodeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendEmailVerificationCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailVerificationCodeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendEmailVerificationCodeResponseMultiError, or nil if none found.
func (m *SendEmailVerificationCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailVerificationCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendEmailVerificationCodeResponseMultiError(errors)
	}

	return nil
}

// SendEmailVerificationCodeResponseMultiError is an error wrapping multiple
// validation errors returned by
// SendEmailVerificationCodeResponse.ValidateAll() if the designated
// constraints aren't met.
type SendEmailVerificationCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailVerificationCodeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailVerificationCodeResponseMultiError) AllErrors() []error { return m }

// SendEmailVerificationCodeResponseValidationError is the validation error
// returned by SendEmailVerificationCodeResponse.Validate if the designated
// constraints aren't met.
type SendEmailVerificationCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailVerificationCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailVerificationCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailVerificationCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailVerificationCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailVerificationCodeResponseValidationError) ErrorName() string {
	return "SendEmailVerificationCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendEmailVerificationCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailVerificationCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailVerificationCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailVerificationCodeResponseValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.BanLogin != nil {
		// no validation rules for BanLogin
	}

	if m.BanGame != nil {
		// no validation rules for BanGame
	}

	if m.BanWithdraw != nil {
		// no validation rules for BanWithdraw
	}

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserResponseMultiError, or nil if none found.
func (m *UpdateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserResponseMultiError(errors)
	}

	return nil
}

// UpdateUserResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserResponseMultiError) AllErrors() []error { return m }

// UpdateUserResponseValidationError is the validation error returned by
// UpdateUserResponse.Validate if the designated constraints aren't met.
type UpdateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserResponseValidationError) ErrorName() string {
	return "UpdateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserResponseValidationError{}

// Validate checks the field values on SetOperatorTagsConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOperatorTagsConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOperatorTagsConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetOperatorTagsConfigRequestMultiError, or nil if none found.
func (m *SetOperatorTagsConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOperatorTagsConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for FollowParent

	if len(errors) > 0 {
		return SetOperatorTagsConfigRequestMultiError(errors)
	}

	return nil
}

// SetOperatorTagsConfigRequestMultiError is an error wrapping multiple
// validation errors returned by SetOperatorTagsConfigRequest.ValidateAll() if
// the designated constraints aren't met.
type SetOperatorTagsConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOperatorTagsConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOperatorTagsConfigRequestMultiError) AllErrors() []error { return m }

// SetOperatorTagsConfigRequestValidationError is the validation error returned
// by SetOperatorTagsConfigRequest.Validate if the designated constraints
// aren't met.
type SetOperatorTagsConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOperatorTagsConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOperatorTagsConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOperatorTagsConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOperatorTagsConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOperatorTagsConfigRequestValidationError) ErrorName() string {
	return "SetOperatorTagsConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetOperatorTagsConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOperatorTagsConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOperatorTagsConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOperatorTagsConfigRequestValidationError{}

// Validate checks the field values on SetOperatorTagsConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOperatorTagsConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOperatorTagsConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SetOperatorTagsConfigResponseMultiError, or nil if none found.
func (m *SetOperatorTagsConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOperatorTagsConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetOperatorTagsConfigResponseMultiError(errors)
	}

	return nil
}

// SetOperatorTagsConfigResponseMultiError is an error wrapping multiple
// validation errors returned by SetOperatorTagsConfigResponse.ValidateAll()
// if the designated constraints aren't met.
type SetOperatorTagsConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOperatorTagsConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOperatorTagsConfigResponseMultiError) AllErrors() []error { return m }

// SetOperatorTagsConfigResponseValidationError is the validation error
// returned by SetOperatorTagsConfigResponse.Validate if the designated
// constraints aren't met.
type SetOperatorTagsConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOperatorTagsConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOperatorTagsConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOperatorTagsConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOperatorTagsConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOperatorTagsConfigResponseValidationError) ErrorName() string {
	return "SetOperatorTagsConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetOperatorTagsConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOperatorTagsConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOperatorTagsConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOperatorTagsConfigResponseValidationError{}

// Validate checks the field values on SetOperatorTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOperatorTagsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOperatorTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetOperatorTagsRequestMultiError, or nil if none found.
func (m *SetOperatorTagsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOperatorTagsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return SetOperatorTagsRequestMultiError(errors)
	}

	return nil
}

// SetOperatorTagsRequestMultiError is an error wrapping multiple validation
// errors returned by SetOperatorTagsRequest.ValidateAll() if the designated
// constraints aren't met.
type SetOperatorTagsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOperatorTagsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOperatorTagsRequestMultiError) AllErrors() []error { return m }

// SetOperatorTagsRequestValidationError is the validation error returned by
// SetOperatorTagsRequest.Validate if the designated constraints aren't met.
type SetOperatorTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOperatorTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOperatorTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOperatorTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOperatorTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOperatorTagsRequestValidationError) ErrorName() string {
	return "SetOperatorTagsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetOperatorTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOperatorTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOperatorTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOperatorTagsRequestValidationError{}

// Validate checks the field values on SetOperatorTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOperatorTagsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOperatorTagsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetOperatorTagsResponseMultiError, or nil if none found.
func (m *SetOperatorTagsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOperatorTagsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetOperatorTagsResponseMultiError(errors)
	}

	return nil
}

// SetOperatorTagsResponseMultiError is an error wrapping multiple validation
// errors returned by SetOperatorTagsResponse.ValidateAll() if the designated
// constraints aren't met.
type SetOperatorTagsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOperatorTagsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOperatorTagsResponseMultiError) AllErrors() []error { return m }

// SetOperatorTagsResponseValidationError is the validation error returned by
// SetOperatorTagsResponse.Validate if the designated constraints aren't met.
type SetOperatorTagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOperatorTagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOperatorTagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOperatorTagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOperatorTagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOperatorTagsResponseValidationError) ErrorName() string {
	return "SetOperatorTagsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetOperatorTagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOperatorTagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOperatorTagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOperatorTagsResponseValidationError{}

// Validate checks the field values on GetOperatorTagsConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorTagsConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorTagsConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorTagsConfigRequestMultiError, or nil if none found.
func (m *GetOperatorTagsConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorTagsConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return GetOperatorTagsConfigRequestMultiError(errors)
	}

	return nil
}

// GetOperatorTagsConfigRequestMultiError is an error wrapping multiple
// validation errors returned by GetOperatorTagsConfigRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOperatorTagsConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorTagsConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorTagsConfigRequestMultiError) AllErrors() []error { return m }

// GetOperatorTagsConfigRequestValidationError is the validation error returned
// by GetOperatorTagsConfigRequest.Validate if the designated constraints
// aren't met.
type GetOperatorTagsConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorTagsConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorTagsConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorTagsConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorTagsConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorTagsConfigRequestValidationError) ErrorName() string {
	return "GetOperatorTagsConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorTagsConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorTagsConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorTagsConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorTagsConfigRequestValidationError{}

// Validate checks the field values on GetOperatorTagsConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorTagsConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorTagsConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOperatorTagsConfigResponseMultiError, or nil if none found.
func (m *GetOperatorTagsConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorTagsConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FollowParent

	if len(errors) > 0 {
		return GetOperatorTagsConfigResponseMultiError(errors)
	}

	return nil
}

// GetOperatorTagsConfigResponseMultiError is an error wrapping multiple
// validation errors returned by GetOperatorTagsConfigResponse.ValidateAll()
// if the designated constraints aren't met.
type GetOperatorTagsConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorTagsConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorTagsConfigResponseMultiError) AllErrors() []error { return m }

// GetOperatorTagsConfigResponseValidationError is the validation error
// returned by GetOperatorTagsConfigResponse.Validate if the designated
// constraints aren't met.
type GetOperatorTagsConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorTagsConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorTagsConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorTagsConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorTagsConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorTagsConfigResponseValidationError) ErrorName() string {
	return "GetOperatorTagsConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorTagsConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorTagsConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorTagsConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorTagsConfigResponseValidationError{}

// Validate checks the field values on GetOperatorTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorTagsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorTagsRequestMultiError, or nil if none found.
func (m *GetOperatorTagsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorTagsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOperatorTagsRequestMultiError(errors)
	}

	return nil
}

// GetOperatorTagsRequestMultiError is an error wrapping multiple validation
// errors returned by GetOperatorTagsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorTagsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorTagsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorTagsRequestMultiError) AllErrors() []error { return m }

// GetOperatorTagsRequestValidationError is the validation error returned by
// GetOperatorTagsRequest.Validate if the designated constraints aren't met.
type GetOperatorTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorTagsRequestValidationError) ErrorName() string {
	return "GetOperatorTagsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorTagsRequestValidationError{}

// Validate checks the field values on GetOperatorTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorTagsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorTagsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorTagsResponseMultiError, or nil if none found.
func (m *GetOperatorTagsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorTagsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOperatorTagsResponseMultiError(errors)
	}

	return nil
}

// GetOperatorTagsResponseMultiError is an error wrapping multiple validation
// errors returned by GetOperatorTagsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorTagsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorTagsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorTagsResponseMultiError) AllErrors() []error { return m }

// GetOperatorTagsResponseValidationError is the validation error returned by
// GetOperatorTagsResponse.Validate if the designated constraints aren't met.
type GetOperatorTagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorTagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorTagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorTagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorTagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorTagsResponseValidationError) ErrorName() string {
	return "GetOperatorTagsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorTagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorTagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorTagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorTagsResponseValidationError{}

// Validate checks the field values on GetUserTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTagsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTagsRequestMultiError, or nil if none found.
func (m *GetUserTagsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTagsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserTagsRequestMultiError(errors)
	}

	return nil
}

// GetUserTagsRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserTagsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserTagsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTagsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTagsRequestMultiError) AllErrors() []error { return m }

// GetUserTagsRequestValidationError is the validation error returned by
// GetUserTagsRequest.Validate if the designated constraints aren't met.
type GetUserTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTagsRequestValidationError) ErrorName() string {
	return "GetUserTagsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTagsRequestValidationError{}

// Validate checks the field values on GetUserTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserTagsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserTagsResponseMultiError, or nil if none found.
func (m *GetUserTagsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserTagsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserTagsResponseMultiError(errors)
	}

	return nil
}

// GetUserTagsResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserTagsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserTagsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserTagsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserTagsResponseMultiError) AllErrors() []error { return m }

// GetUserTagsResponseValidationError is the validation error returned by
// GetUserTagsResponse.Validate if the designated constraints aren't met.
type GetUserTagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserTagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserTagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserTagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserTagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserTagsResponseValidationError) ErrorName() string {
	return "GetUserTagsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserTagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserTagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserTagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserTagsResponseValidationError{}

// Validate checks the field values on SetUserTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserTagsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserTagsRequestMultiError, or nil if none found.
func (m *SetUserTagsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserTagsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return SetUserTagsRequestMultiError(errors)
	}

	return nil
}

// SetUserTagsRequestMultiError is an error wrapping multiple validation errors
// returned by SetUserTagsRequest.ValidateAll() if the designated constraints
// aren't met.
type SetUserTagsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserTagsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserTagsRequestMultiError) AllErrors() []error { return m }

// SetUserTagsRequestValidationError is the validation error returned by
// SetUserTagsRequest.Validate if the designated constraints aren't met.
type SetUserTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserTagsRequestValidationError) ErrorName() string {
	return "SetUserTagsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserTagsRequestValidationError{}

// Validate checks the field values on SetUserTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserTagsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserTagsResponseMultiError, or nil if none found.
func (m *SetUserTagsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserTagsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetUserTagsResponseMultiError(errors)
	}

	return nil
}

// SetUserTagsResponseMultiError is an error wrapping multiple validation
// errors returned by SetUserTagsResponse.ValidateAll() if the designated
// constraints aren't met.
type SetUserTagsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserTagsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserTagsResponseMultiError) AllErrors() []error { return m }

// SetUserTagsResponseValidationError is the validation error returned by
// SetUserTagsResponse.Validate if the designated constraints aren't met.
type SetUserTagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserTagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserTagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserTagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserTagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserTagsResponseValidationError) ErrorName() string {
	return "SetUserTagsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserTagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserTagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserTagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserTagsResponseValidationError{}

// Validate checks the field values on ListUsersResponse_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUsersResponse_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersResponse_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersResponse_UserMultiError, or nil if none found.
func (m *ListUsersResponse_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersResponse_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorName

	// no validation rules for CompanyOperatorName

	// no validation rules for RetailerOperatorName

	// no validation rules for SystemOperatorName

	// no validation rules for UserId

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for VipLevel

	// no validation rules for KycLevel

	// no validation rules for DepositUsd

	// no validation rules for WithdrawUsd

	// no validation rules for DepositReportingCurrency

	// no validation rules for WithdrawReportingCurrency

	// no validation rules for BanWithdraw

	// no validation rules for BanGame

	// no validation rules for BanLogin

	// no validation rules for Online

	if all {
		switch v := interface{}(m.GetLastLoginAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "LastLoginAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "LastLoginAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastLoginAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersResponse_UserValidationError{
				field:  "LastLoginAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRegisteredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "RegisteredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersResponse_UserValidationError{
					field:  "RegisteredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegisteredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersResponse_UserValidationError{
				field:  "RegisteredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Country

	// no validation rules for RegistrationIp

	if len(errors) > 0 {
		return ListUsersResponse_UserMultiError(errors)
	}

	return nil
}

// ListUsersResponse_UserMultiError is an error wrapping multiple validation
// errors returned by ListUsersResponse_User.ValidateAll() if the designated
// constraints aren't met.
type ListUsersResponse_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersResponse_UserMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersResponse_UserMultiError) AllErrors() []error { return m }

// ListUsersResponse_UserValidationError is the validation error returned by
// ListUsersResponse_User.Validate if the designated constraints aren't met.
type ListUsersResponse_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponse_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponse_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponse_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponse_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponse_UserValidationError) ErrorName() string {
	return "ListUsersResponse_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponse_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponse_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponse_UserValidationError{}

// Validate checks the field values on GetUserOverviewResponse_GameData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserOverviewResponse_GameData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserOverviewResponse_GameData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserOverviewResponse_GameDataMultiError, or nil if none found.
func (m *GetUserOverviewResponse_GameData) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserOverviewResponse_GameData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameType

	// no validation rules for Ggr

	// no validation rules for Turnover

	// no validation rules for Rtp

	if len(errors) > 0 {
		return GetUserOverviewResponse_GameDataMultiError(errors)
	}

	return nil
}

// GetUserOverviewResponse_GameDataMultiError is an error wrapping multiple
// validation errors returned by
// GetUserOverviewResponse_GameData.ValidateAll() if the designated
// constraints aren't met.
type GetUserOverviewResponse_GameDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserOverviewResponse_GameDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserOverviewResponse_GameDataMultiError) AllErrors() []error { return m }

// GetUserOverviewResponse_GameDataValidationError is the validation error
// returned by GetUserOverviewResponse_GameData.Validate if the designated
// constraints aren't met.
type GetUserOverviewResponse_GameDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserOverviewResponse_GameDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserOverviewResponse_GameDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserOverviewResponse_GameDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserOverviewResponse_GameDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserOverviewResponse_GameDataValidationError) ErrorName() string {
	return "GetUserOverviewResponse_GameDataValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserOverviewResponse_GameDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserOverviewResponse_GameData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserOverviewResponse_GameDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserOverviewResponse_GameDataValidationError{}

// Validate checks the field values on GetUserProfileResponse_IpInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileResponse_IpInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileResponse_IpInfo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserProfileResponse_IpInfoMultiError, or nil if none found.
func (m *GetUserProfileResponse_IpInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse_IpInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ip

	// no validation rules for Count

	// no validation rules for Country

	if len(errors) > 0 {
		return GetUserProfileResponse_IpInfoMultiError(errors)
	}

	return nil
}

// GetUserProfileResponse_IpInfoMultiError is an error wrapping multiple
// validation errors returned by GetUserProfileResponse_IpInfo.ValidateAll()
// if the designated constraints aren't met.
type GetUserProfileResponse_IpInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponse_IpInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponse_IpInfoMultiError) AllErrors() []error { return m }

// GetUserProfileResponse_IpInfoValidationError is the validation error
// returned by GetUserProfileResponse_IpInfo.Validate if the designated
// constraints aren't met.
type GetUserProfileResponse_IpInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponse_IpInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponse_IpInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponse_IpInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponse_IpInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponse_IpInfoValidationError) ErrorName() string {
	return "GetUserProfileResponse_IpInfoValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponse_IpInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse_IpInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponse_IpInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponse_IpInfoValidationError{}

// Validate checks the field values on
// GetUserProfileResponse_RegistrationRecord with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileResponse_RegistrationRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetUserProfileResponse_RegistrationRecord with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetUserProfileResponse_RegistrationRecordMultiError, or nil if none found.
func (m *GetUserProfileResponse_RegistrationRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse_RegistrationRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRegisteredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponse_RegistrationRecordValidationError{
					field:  "RegisteredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponse_RegistrationRecordValidationError{
					field:  "RegisteredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegisteredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponse_RegistrationRecordValidationError{
				field:  "RegisteredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIpInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponse_RegistrationRecordValidationError{
					field:  "IpInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponse_RegistrationRecordValidationError{
					field:  "IpInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIpInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponse_RegistrationRecordValidationError{
				field:  "IpInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Device

	// no validation rules for Method

	// no validation rules for Browser

	// no validation rules for App

	// no validation rules for Mobile

	// no validation rules for Email

	// no validation rules for Username

	// no validation rules for Source

	if len(errors) > 0 {
		return GetUserProfileResponse_RegistrationRecordMultiError(errors)
	}

	return nil
}

// GetUserProfileResponse_RegistrationRecordMultiError is an error wrapping
// multiple validation errors returned by
// GetUserProfileResponse_RegistrationRecord.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileResponse_RegistrationRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponse_RegistrationRecordMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponse_RegistrationRecordMultiError) AllErrors() []error { return m }

// GetUserProfileResponse_RegistrationRecordValidationError is the validation
// error returned by GetUserProfileResponse_RegistrationRecord.Validate if the
// designated constraints aren't met.
type GetUserProfileResponse_RegistrationRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponse_RegistrationRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponse_RegistrationRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponse_RegistrationRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponse_RegistrationRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponse_RegistrationRecordValidationError) ErrorName() string {
	return "GetUserProfileResponse_RegistrationRecordValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponse_RegistrationRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse_RegistrationRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponse_RegistrationRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponse_RegistrationRecordValidationError{}

// Validate checks the field values on GetUserProfileResponse_LoginRecord with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserProfileResponse_LoginRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileResponse_LoginRecord
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserProfileResponse_LoginRecordMultiError, or nil if none found.
func (m *GetUserProfileResponse_LoginRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse_LoginRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLoginAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponse_LoginRecordValidationError{
					field:  "LoginAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponse_LoginRecordValidationError{
					field:  "LoginAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLoginAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponse_LoginRecordValidationError{
				field:  "LoginAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIpInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponse_LoginRecordValidationError{
					field:  "IpInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponse_LoginRecordValidationError{
					field:  "IpInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIpInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponse_LoginRecordValidationError{
				field:  "IpInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Device

	// no validation rules for Method

	// no validation rules for Browser

	// no validation rules for App

	// no validation rules for Email

	// no validation rules for Mobile

	// no validation rules for Username

	if len(errors) > 0 {
		return GetUserProfileResponse_LoginRecordMultiError(errors)
	}

	return nil
}

// GetUserProfileResponse_LoginRecordMultiError is an error wrapping multiple
// validation errors returned by
// GetUserProfileResponse_LoginRecord.ValidateAll() if the designated
// constraints aren't met.
type GetUserProfileResponse_LoginRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponse_LoginRecordMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponse_LoginRecordMultiError) AllErrors() []error { return m }

// GetUserProfileResponse_LoginRecordValidationError is the validation error
// returned by GetUserProfileResponse_LoginRecord.Validate if the designated
// constraints aren't met.
type GetUserProfileResponse_LoginRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponse_LoginRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponse_LoginRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponse_LoginRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponse_LoginRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponse_LoginRecordValidationError) ErrorName() string {
	return "GetUserProfileResponse_LoginRecordValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponse_LoginRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse_LoginRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponse_LoginRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponse_LoginRecordValidationError{}

// Validate checks the field values on GetUserProfileResponse_Comment with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProfileResponse_Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProfileResponse_Comment with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserProfileResponse_CommentMultiError, or nil if none found.
func (m *GetUserProfileResponse_Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProfileResponse_Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	// no validation rules for Username

	// no validation rules for AuthorUsername

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserProfileResponse_CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserProfileResponse_CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProfileResponse_CommentValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserProfileResponse_CommentMultiError(errors)
	}

	return nil
}

// GetUserProfileResponse_CommentMultiError is an error wrapping multiple
// validation errors returned by GetUserProfileResponse_Comment.ValidateAll()
// if the designated constraints aren't met.
type GetUserProfileResponse_CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProfileResponse_CommentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProfileResponse_CommentMultiError) AllErrors() []error { return m }

// GetUserProfileResponse_CommentValidationError is the validation error
// returned by GetUserProfileResponse_Comment.Validate if the designated
// constraints aren't met.
type GetUserProfileResponse_CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProfileResponse_CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProfileResponse_CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProfileResponse_CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProfileResponse_CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProfileResponse_CommentValidationError) ErrorName() string {
	return "GetUserProfileResponse_CommentValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProfileResponse_CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProfileResponse_Comment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProfileResponse_CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProfileResponse_CommentValidationError{}

// Validate checks the field values on ListUserCommentsResponse_Comment with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListUserCommentsResponse_Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserCommentsResponse_Comment with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListUserCommentsResponse_CommentMultiError, or nil if none found.
func (m *ListUserCommentsResponse_Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserCommentsResponse_Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Author

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUserCommentsResponse_CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUserCommentsResponse_CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserCommentsResponse_CommentValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListUserCommentsResponse_CommentMultiError(errors)
	}

	return nil
}

// ListUserCommentsResponse_CommentMultiError is an error wrapping multiple
// validation errors returned by
// ListUserCommentsResponse_Comment.ValidateAll() if the designated
// constraints aren't met.
type ListUserCommentsResponse_CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserCommentsResponse_CommentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserCommentsResponse_CommentMultiError) AllErrors() []error { return m }

// ListUserCommentsResponse_CommentValidationError is the validation error
// returned by ListUserCommentsResponse_Comment.Validate if the designated
// constraints aren't met.
type ListUserCommentsResponse_CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserCommentsResponse_CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserCommentsResponse_CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserCommentsResponse_CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserCommentsResponse_CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserCommentsResponse_CommentValidationError) ErrorName() string {
	return "ListUserCommentsResponse_CommentValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserCommentsResponse_CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserCommentsResponse_Comment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserCommentsResponse_CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserCommentsResponse_CommentValidationError{}
