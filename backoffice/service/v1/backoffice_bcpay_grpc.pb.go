// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_bcpay.proto

package v1

import (
	context "context"
	v1 "github.com/infigaming-com/meepo-api/bcpay/service/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackofficeBcpay_GetMerchant_FullMethodName          = "/api.backoffice.service.v1.BackofficeBcpay/GetMerchant"
	BackofficeBcpay_CreateMerchant_FullMethodName       = "/api.backoffice.service.v1.BackofficeBcpay/CreateMerchant"
	BackofficeBcpay_BankAccountList_FullMethodName      = "/api.backoffice.service.v1.BackofficeBcpay/BankAccountList"
	BackofficeBcpay_AddBankAccount_FullMethodName       = "/api.backoffice.service.v1.BackofficeBcpay/AddBankAccount"
	BackofficeBcpay_UpdateBankAccount_FullMethodName    = "/api.backoffice.service.v1.BackofficeBcpay/UpdateBankAccount"
	BackofficeBcpay_DeleteBankAccount_FullMethodName    = "/api.backoffice.service.v1.BackofficeBcpay/DeleteBankAccount"
	BackofficeBcpay_TransactionList_FullMethodName      = "/api.backoffice.service.v1.BackofficeBcpay/TransactionList"
	BackofficeBcpay_AuditTransaction_FullMethodName     = "/api.backoffice.service.v1.BackofficeBcpay/AuditTransaction"
	BackofficeBcpay_AddNoteToTransaction_FullMethodName = "/api.backoffice.service.v1.BackofficeBcpay/AddNoteToTransaction"
	BackofficeBcpay_GetBankSchema_FullMethodName        = "/api.backoffice.service.v1.BackofficeBcpay/GetBankSchema"
)

// BackofficeBcpayClient is the client API for BackofficeBcpay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BackofficeBcpay service
// Provides methods for backoffice bcpay management
type BackofficeBcpayClient interface {
	GetMerchant(ctx context.Context, in *GetMerchantRequest, opts ...grpc.CallOption) (*v1.GetMerchantResponse, error)
	CreateMerchant(ctx context.Context, in *CreateMerchantRequest, opts ...grpc.CallOption) (*v1.CreateMerchantResponse, error)
	BankAccountList(ctx context.Context, in *BankAccountListRequest, opts ...grpc.CallOption) (*v1.BankAccountListResponse, error)
	AddBankAccount(ctx context.Context, in *AddBankAccountRequest, opts ...grpc.CallOption) (*v1.AddBankAccountResponse, error)
	UpdateBankAccount(ctx context.Context, in *UpdateBankAccountRequest, opts ...grpc.CallOption) (*v1.UpdateBankAccountResponse, error)
	DeleteBankAccount(ctx context.Context, in *v1.DeleteBankAccountRequest, opts ...grpc.CallOption) (*v1.DeleteBankAccountResponse, error)
	TransactionList(ctx context.Context, in *TransactionListRequest, opts ...grpc.CallOption) (*v1.TransactionListResponse, error)
	AuditTransaction(ctx context.Context, in *AuditTransactionRequest, opts ...grpc.CallOption) (*v1.AuditTransactionResponse, error)
	AddNoteToTransaction(ctx context.Context, in *v1.AddNoteToTransactionRequest, opts ...grpc.CallOption) (*v1.AddNoteToTransactionResponse, error)
	GetBankSchema(ctx context.Context, in *v1.GetBankSchemaRequest, opts ...grpc.CallOption) (*v1.GetBankSchemaResponse, error)
}

type backofficeBcpayClient struct {
	cc grpc.ClientConnInterface
}

func NewBackofficeBcpayClient(cc grpc.ClientConnInterface) BackofficeBcpayClient {
	return &backofficeBcpayClient{cc}
}

func (c *backofficeBcpayClient) GetMerchant(ctx context.Context, in *GetMerchantRequest, opts ...grpc.CallOption) (*v1.GetMerchantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetMerchantResponse)
	err := c.cc.Invoke(ctx, BackofficeBcpay_GetMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeBcpayClient) CreateMerchant(ctx context.Context, in *CreateMerchantRequest, opts ...grpc.CallOption) (*v1.CreateMerchantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.CreateMerchantResponse)
	err := c.cc.Invoke(ctx, BackofficeBcpay_CreateMerchant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeBcpayClient) BankAccountList(ctx context.Context, in *BankAccountListRequest, opts ...grpc.CallOption) (*v1.BankAccountListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BankAccountListResponse)
	err := c.cc.Invoke(ctx, BackofficeBcpay_BankAccountList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeBcpayClient) AddBankAccount(ctx context.Context, in *AddBankAccountRequest, opts ...grpc.CallOption) (*v1.AddBankAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.AddBankAccountResponse)
	err := c.cc.Invoke(ctx, BackofficeBcpay_AddBankAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeBcpayClient) UpdateBankAccount(ctx context.Context, in *UpdateBankAccountRequest, opts ...grpc.CallOption) (*v1.UpdateBankAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.UpdateBankAccountResponse)
	err := c.cc.Invoke(ctx, BackofficeBcpay_UpdateBankAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeBcpayClient) DeleteBankAccount(ctx context.Context, in *v1.DeleteBankAccountRequest, opts ...grpc.CallOption) (*v1.DeleteBankAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DeleteBankAccountResponse)
	err := c.cc.Invoke(ctx, BackofficeBcpay_DeleteBankAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeBcpayClient) TransactionList(ctx context.Context, in *TransactionListRequest, opts ...grpc.CallOption) (*v1.TransactionListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.TransactionListResponse)
	err := c.cc.Invoke(ctx, BackofficeBcpay_TransactionList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeBcpayClient) AuditTransaction(ctx context.Context, in *AuditTransactionRequest, opts ...grpc.CallOption) (*v1.AuditTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.AuditTransactionResponse)
	err := c.cc.Invoke(ctx, BackofficeBcpay_AuditTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeBcpayClient) AddNoteToTransaction(ctx context.Context, in *v1.AddNoteToTransactionRequest, opts ...grpc.CallOption) (*v1.AddNoteToTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.AddNoteToTransactionResponse)
	err := c.cc.Invoke(ctx, BackofficeBcpay_AddNoteToTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeBcpayClient) GetBankSchema(ctx context.Context, in *v1.GetBankSchemaRequest, opts ...grpc.CallOption) (*v1.GetBankSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetBankSchemaResponse)
	err := c.cc.Invoke(ctx, BackofficeBcpay_GetBankSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackofficeBcpayServer is the server API for BackofficeBcpay service.
// All implementations must embed UnimplementedBackofficeBcpayServer
// for forward compatibility.
//
// BackofficeBcpay service
// Provides methods for backoffice bcpay management
type BackofficeBcpayServer interface {
	GetMerchant(context.Context, *GetMerchantRequest) (*v1.GetMerchantResponse, error)
	CreateMerchant(context.Context, *CreateMerchantRequest) (*v1.CreateMerchantResponse, error)
	BankAccountList(context.Context, *BankAccountListRequest) (*v1.BankAccountListResponse, error)
	AddBankAccount(context.Context, *AddBankAccountRequest) (*v1.AddBankAccountResponse, error)
	UpdateBankAccount(context.Context, *UpdateBankAccountRequest) (*v1.UpdateBankAccountResponse, error)
	DeleteBankAccount(context.Context, *v1.DeleteBankAccountRequest) (*v1.DeleteBankAccountResponse, error)
	TransactionList(context.Context, *TransactionListRequest) (*v1.TransactionListResponse, error)
	AuditTransaction(context.Context, *AuditTransactionRequest) (*v1.AuditTransactionResponse, error)
	AddNoteToTransaction(context.Context, *v1.AddNoteToTransactionRequest) (*v1.AddNoteToTransactionResponse, error)
	GetBankSchema(context.Context, *v1.GetBankSchemaRequest) (*v1.GetBankSchemaResponse, error)
	mustEmbedUnimplementedBackofficeBcpayServer()
}

// UnimplementedBackofficeBcpayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackofficeBcpayServer struct{}

func (UnimplementedBackofficeBcpayServer) GetMerchant(context.Context, *GetMerchantRequest) (*v1.GetMerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchant not implemented")
}
func (UnimplementedBackofficeBcpayServer) CreateMerchant(context.Context, *CreateMerchantRequest) (*v1.CreateMerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMerchant not implemented")
}
func (UnimplementedBackofficeBcpayServer) BankAccountList(context.Context, *BankAccountListRequest) (*v1.BankAccountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankAccountList not implemented")
}
func (UnimplementedBackofficeBcpayServer) AddBankAccount(context.Context, *AddBankAccountRequest) (*v1.AddBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBankAccount not implemented")
}
func (UnimplementedBackofficeBcpayServer) UpdateBankAccount(context.Context, *UpdateBankAccountRequest) (*v1.UpdateBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBankAccount not implemented")
}
func (UnimplementedBackofficeBcpayServer) DeleteBankAccount(context.Context, *v1.DeleteBankAccountRequest) (*v1.DeleteBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBankAccount not implemented")
}
func (UnimplementedBackofficeBcpayServer) TransactionList(context.Context, *TransactionListRequest) (*v1.TransactionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionList not implemented")
}
func (UnimplementedBackofficeBcpayServer) AuditTransaction(context.Context, *AuditTransactionRequest) (*v1.AuditTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditTransaction not implemented")
}
func (UnimplementedBackofficeBcpayServer) AddNoteToTransaction(context.Context, *v1.AddNoteToTransactionRequest) (*v1.AddNoteToTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNoteToTransaction not implemented")
}
func (UnimplementedBackofficeBcpayServer) GetBankSchema(context.Context, *v1.GetBankSchemaRequest) (*v1.GetBankSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankSchema not implemented")
}
func (UnimplementedBackofficeBcpayServer) mustEmbedUnimplementedBackofficeBcpayServer() {}
func (UnimplementedBackofficeBcpayServer) testEmbeddedByValue()                         {}

// UnsafeBackofficeBcpayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackofficeBcpayServer will
// result in compilation errors.
type UnsafeBackofficeBcpayServer interface {
	mustEmbedUnimplementedBackofficeBcpayServer()
}

func RegisterBackofficeBcpayServer(s grpc.ServiceRegistrar, srv BackofficeBcpayServer) {
	// If the following call pancis, it indicates UnimplementedBackofficeBcpayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackofficeBcpay_ServiceDesc, srv)
}

func _BackofficeBcpay_GetMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeBcpayServer).GetMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeBcpay_GetMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeBcpayServer).GetMerchant(ctx, req.(*GetMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeBcpay_CreateMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeBcpayServer).CreateMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeBcpay_CreateMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeBcpayServer).CreateMerchant(ctx, req.(*CreateMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeBcpay_BankAccountList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankAccountListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeBcpayServer).BankAccountList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeBcpay_BankAccountList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeBcpayServer).BankAccountList(ctx, req.(*BankAccountListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeBcpay_AddBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeBcpayServer).AddBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeBcpay_AddBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeBcpayServer).AddBankAccount(ctx, req.(*AddBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeBcpay_UpdateBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeBcpayServer).UpdateBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeBcpay_UpdateBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeBcpayServer).UpdateBankAccount(ctx, req.(*UpdateBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeBcpay_DeleteBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeBcpayServer).DeleteBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeBcpay_DeleteBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeBcpayServer).DeleteBankAccount(ctx, req.(*v1.DeleteBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeBcpay_TransactionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeBcpayServer).TransactionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeBcpay_TransactionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeBcpayServer).TransactionList(ctx, req.(*TransactionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeBcpay_AuditTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeBcpayServer).AuditTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeBcpay_AuditTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeBcpayServer).AuditTransaction(ctx, req.(*AuditTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeBcpay_AddNoteToTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AddNoteToTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeBcpayServer).AddNoteToTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeBcpay_AddNoteToTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeBcpayServer).AddNoteToTransaction(ctx, req.(*v1.AddNoteToTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeBcpay_GetBankSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetBankSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeBcpayServer).GetBankSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeBcpay_GetBankSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeBcpayServer).GetBankSchema(ctx, req.(*v1.GetBankSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackofficeBcpay_ServiceDesc is the grpc.ServiceDesc for BackofficeBcpay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackofficeBcpay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.BackofficeBcpay",
	HandlerType: (*BackofficeBcpayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMerchant",
			Handler:    _BackofficeBcpay_GetMerchant_Handler,
		},
		{
			MethodName: "CreateMerchant",
			Handler:    _BackofficeBcpay_CreateMerchant_Handler,
		},
		{
			MethodName: "BankAccountList",
			Handler:    _BackofficeBcpay_BankAccountList_Handler,
		},
		{
			MethodName: "AddBankAccount",
			Handler:    _BackofficeBcpay_AddBankAccount_Handler,
		},
		{
			MethodName: "UpdateBankAccount",
			Handler:    _BackofficeBcpay_UpdateBankAccount_Handler,
		},
		{
			MethodName: "DeleteBankAccount",
			Handler:    _BackofficeBcpay_DeleteBankAccount_Handler,
		},
		{
			MethodName: "TransactionList",
			Handler:    _BackofficeBcpay_TransactionList_Handler,
		},
		{
			MethodName: "AuditTransaction",
			Handler:    _BackofficeBcpay_AuditTransaction_Handler,
		},
		{
			MethodName: "AddNoteToTransaction",
			Handler:    _BackofficeBcpay_AddNoteToTransaction_Handler,
		},
		{
			MethodName: "GetBankSchema",
			Handler:    _BackofficeBcpay_GetBankSchema_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_bcpay.proto",
}
