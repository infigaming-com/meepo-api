// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_finance.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficeFinanceAddAdjustment = "/api.backoffice.service.v1.BackofficeFinance/AddAdjustment"
const OperationBackofficeFinanceDeleteAdjustmentConfig = "/api.backoffice.service.v1.BackofficeFinance/DeleteAdjustmentConfig"
const OperationBackofficeFinanceGetInvoiceDetail = "/api.backoffice.service.v1.BackofficeFinance/GetInvoiceDetail"
const OperationBackofficeFinanceListAdjustmentConfigs = "/api.backoffice.service.v1.BackofficeFinance/ListAdjustmentConfigs"
const OperationBackofficeFinanceListAdjustments = "/api.backoffice.service.v1.BackofficeFinance/ListAdjustments"
const OperationBackofficeFinanceListInvovies = "/api.backoffice.service.v1.BackofficeFinance/ListInvovies"
const OperationBackofficeFinanceListMonthlyRevenueShare = "/api.backoffice.service.v1.BackofficeFinance/ListMonthlyRevenueShare"
const OperationBackofficeFinanceListOperatorRevenueShare = "/api.backoffice.service.v1.BackofficeFinance/ListOperatorRevenueShare"
const OperationBackofficeFinanceListThirdPartyFees = "/api.backoffice.service.v1.BackofficeFinance/ListThirdPartyFees"
const OperationBackofficeFinanceUpdateAdjustmentConfig = "/api.backoffice.service.v1.BackofficeFinance/UpdateAdjustmentConfig"

type BackofficeFinanceHTTPServer interface {
	AddAdjustment(context.Context, *AddAdjustmentRequest) (*AddAdjustmentResponse, error)
	DeleteAdjustmentConfig(context.Context, *DeleteAdjustmentConfigRequest) (*DeleteAdjustmentConfigResponse, error)
	GetInvoiceDetail(context.Context, *GetInvoiceDetailRequest) (*GetInvoiceDetailResponse, error)
	ListAdjustmentConfigs(context.Context, *ListAdjustmentConfigsRequest) (*ListAdjustmentConfigsResponse, error)
	ListAdjustments(context.Context, *ListAdjustmentsRequest) (*ListAdjustmentsResponse, error)
	ListInvovies(context.Context, *ListInvoviesRequest) (*ListInvoviesResponse, error)
	ListMonthlyRevenueShare(context.Context, *ListMonthlyRevenueShareRequest) (*ListMonthlyRevenueShareResponse, error)
	ListOperatorRevenueShare(context.Context, *ListOperatorRevenueShareRequest) (*ListOperatorRevenueShareResponse, error)
	ListThirdPartyFees(context.Context, *ListThirdPartyFeesRequest) (*ListThirdPartyFeesResponse, error)
	UpdateAdjustmentConfig(context.Context, *UpdateAdjustmentConfigRequest) (*UpdateAdjustmentConfigResponse, error)
}

func RegisterBackofficeFinanceHTTPServer(s *http.Server, srv BackofficeFinanceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/finance/invovies/list", _BackofficeFinance_ListInvovies0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/finance/invoice/detail", _BackofficeFinance_GetInvoiceDetail0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/finance/revenue-shares/list", _BackofficeFinance_ListOperatorRevenueShare0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/finance/third-party-fees/list", _BackofficeFinance_ListThirdPartyFees0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/finance/adjustments/list", _BackofficeFinance_ListAdjustments0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/finance/monthly-revenue-shares/list", _BackofficeFinance_ListMonthlyRevenueShare0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/finance/adjustment/add", _BackofficeFinance_AddAdjustment0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/finance/adjustment-configs/list", _BackofficeFinance_ListAdjustmentConfigs0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/finance/adjustment-configs/update", _BackofficeFinance_UpdateAdjustmentConfig0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/finance/adjustment-configs/delete", _BackofficeFinance_DeleteAdjustmentConfig0_HTTP_Handler(srv))
}

func _BackofficeFinance_ListInvovies0_HTTP_Handler(srv BackofficeFinanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListInvoviesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeFinanceListInvovies)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListInvovies(ctx, req.(*ListInvoviesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListInvoviesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeFinance_GetInvoiceDetail0_HTTP_Handler(srv BackofficeFinanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetInvoiceDetailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeFinanceGetInvoiceDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetInvoiceDetail(ctx, req.(*GetInvoiceDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetInvoiceDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeFinance_ListOperatorRevenueShare0_HTTP_Handler(srv BackofficeFinanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOperatorRevenueShareRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeFinanceListOperatorRevenueShare)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOperatorRevenueShare(ctx, req.(*ListOperatorRevenueShareRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOperatorRevenueShareResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeFinance_ListThirdPartyFees0_HTTP_Handler(srv BackofficeFinanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListThirdPartyFeesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeFinanceListThirdPartyFees)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListThirdPartyFees(ctx, req.(*ListThirdPartyFeesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListThirdPartyFeesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeFinance_ListAdjustments0_HTTP_Handler(srv BackofficeFinanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAdjustmentsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeFinanceListAdjustments)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAdjustments(ctx, req.(*ListAdjustmentsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAdjustmentsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeFinance_ListMonthlyRevenueShare0_HTTP_Handler(srv BackofficeFinanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMonthlyRevenueShareRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeFinanceListMonthlyRevenueShare)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMonthlyRevenueShare(ctx, req.(*ListMonthlyRevenueShareRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMonthlyRevenueShareResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeFinance_AddAdjustment0_HTTP_Handler(srv BackofficeFinanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddAdjustmentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeFinanceAddAdjustment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddAdjustment(ctx, req.(*AddAdjustmentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddAdjustmentResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeFinance_ListAdjustmentConfigs0_HTTP_Handler(srv BackofficeFinanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAdjustmentConfigsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeFinanceListAdjustmentConfigs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAdjustmentConfigs(ctx, req.(*ListAdjustmentConfigsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAdjustmentConfigsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeFinance_UpdateAdjustmentConfig0_HTTP_Handler(srv BackofficeFinanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAdjustmentConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeFinanceUpdateAdjustmentConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAdjustmentConfig(ctx, req.(*UpdateAdjustmentConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAdjustmentConfigResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeFinance_DeleteAdjustmentConfig0_HTTP_Handler(srv BackofficeFinanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAdjustmentConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeFinanceDeleteAdjustmentConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAdjustmentConfig(ctx, req.(*DeleteAdjustmentConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAdjustmentConfigResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficeFinanceHTTPClient interface {
	AddAdjustment(ctx context.Context, req *AddAdjustmentRequest, opts ...http.CallOption) (rsp *AddAdjustmentResponse, err error)
	DeleteAdjustmentConfig(ctx context.Context, req *DeleteAdjustmentConfigRequest, opts ...http.CallOption) (rsp *DeleteAdjustmentConfigResponse, err error)
	GetInvoiceDetail(ctx context.Context, req *GetInvoiceDetailRequest, opts ...http.CallOption) (rsp *GetInvoiceDetailResponse, err error)
	ListAdjustmentConfigs(ctx context.Context, req *ListAdjustmentConfigsRequest, opts ...http.CallOption) (rsp *ListAdjustmentConfigsResponse, err error)
	ListAdjustments(ctx context.Context, req *ListAdjustmentsRequest, opts ...http.CallOption) (rsp *ListAdjustmentsResponse, err error)
	ListInvovies(ctx context.Context, req *ListInvoviesRequest, opts ...http.CallOption) (rsp *ListInvoviesResponse, err error)
	ListMonthlyRevenueShare(ctx context.Context, req *ListMonthlyRevenueShareRequest, opts ...http.CallOption) (rsp *ListMonthlyRevenueShareResponse, err error)
	ListOperatorRevenueShare(ctx context.Context, req *ListOperatorRevenueShareRequest, opts ...http.CallOption) (rsp *ListOperatorRevenueShareResponse, err error)
	ListThirdPartyFees(ctx context.Context, req *ListThirdPartyFeesRequest, opts ...http.CallOption) (rsp *ListThirdPartyFeesResponse, err error)
	UpdateAdjustmentConfig(ctx context.Context, req *UpdateAdjustmentConfigRequest, opts ...http.CallOption) (rsp *UpdateAdjustmentConfigResponse, err error)
}

type BackofficeFinanceHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficeFinanceHTTPClient(client *http.Client) BackofficeFinanceHTTPClient {
	return &BackofficeFinanceHTTPClientImpl{client}
}

func (c *BackofficeFinanceHTTPClientImpl) AddAdjustment(ctx context.Context, in *AddAdjustmentRequest, opts ...http.CallOption) (*AddAdjustmentResponse, error) {
	var out AddAdjustmentResponse
	pattern := "/v1/backoffice/finance/adjustment/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeFinanceAddAdjustment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeFinanceHTTPClientImpl) DeleteAdjustmentConfig(ctx context.Context, in *DeleteAdjustmentConfigRequest, opts ...http.CallOption) (*DeleteAdjustmentConfigResponse, error) {
	var out DeleteAdjustmentConfigResponse
	pattern := "/v1/backoffice/finance/adjustment-configs/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeFinanceDeleteAdjustmentConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeFinanceHTTPClientImpl) GetInvoiceDetail(ctx context.Context, in *GetInvoiceDetailRequest, opts ...http.CallOption) (*GetInvoiceDetailResponse, error) {
	var out GetInvoiceDetailResponse
	pattern := "/v1/backoffice/finance/invoice/detail"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeFinanceGetInvoiceDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeFinanceHTTPClientImpl) ListAdjustmentConfigs(ctx context.Context, in *ListAdjustmentConfigsRequest, opts ...http.CallOption) (*ListAdjustmentConfigsResponse, error) {
	var out ListAdjustmentConfigsResponse
	pattern := "/v1/backoffice/finance/adjustment-configs/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeFinanceListAdjustmentConfigs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeFinanceHTTPClientImpl) ListAdjustments(ctx context.Context, in *ListAdjustmentsRequest, opts ...http.CallOption) (*ListAdjustmentsResponse, error) {
	var out ListAdjustmentsResponse
	pattern := "/v1/backoffice/finance/adjustments/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeFinanceListAdjustments))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeFinanceHTTPClientImpl) ListInvovies(ctx context.Context, in *ListInvoviesRequest, opts ...http.CallOption) (*ListInvoviesResponse, error) {
	var out ListInvoviesResponse
	pattern := "/v1/backoffice/finance/invovies/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeFinanceListInvovies))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeFinanceHTTPClientImpl) ListMonthlyRevenueShare(ctx context.Context, in *ListMonthlyRevenueShareRequest, opts ...http.CallOption) (*ListMonthlyRevenueShareResponse, error) {
	var out ListMonthlyRevenueShareResponse
	pattern := "/v1/backoffice/finance/monthly-revenue-shares/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeFinanceListMonthlyRevenueShare))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeFinanceHTTPClientImpl) ListOperatorRevenueShare(ctx context.Context, in *ListOperatorRevenueShareRequest, opts ...http.CallOption) (*ListOperatorRevenueShareResponse, error) {
	var out ListOperatorRevenueShareResponse
	pattern := "/v1/backoffice/finance/revenue-shares/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeFinanceListOperatorRevenueShare))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeFinanceHTTPClientImpl) ListThirdPartyFees(ctx context.Context, in *ListThirdPartyFeesRequest, opts ...http.CallOption) (*ListThirdPartyFeesResponse, error) {
	var out ListThirdPartyFeesResponse
	pattern := "/v1/backoffice/finance/third-party-fees/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeFinanceListThirdPartyFees))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeFinanceHTTPClientImpl) UpdateAdjustmentConfig(ctx context.Context, in *UpdateAdjustmentConfigRequest, opts ...http.CallOption) (*UpdateAdjustmentConfigResponse, error) {
	var out UpdateAdjustmentConfigResponse
	pattern := "/v1/backoffice/finance/adjustment-configs/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeFinanceUpdateAdjustmentConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
