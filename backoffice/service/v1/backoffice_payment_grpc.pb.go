// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_payment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackofficePayment_GetPaymentTransactionPage_FullMethodName = "/api.backoffice.service.v1.BackofficePayment/GetPaymentTransactionPage"
)

// BackofficePaymentClient is the client API for BackofficePayment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BackofficePayment service
// Provides methods for backoffice payment management
type BackofficePaymentClient interface {
	// Get payment transaction page
	// Retrieves a paginated list of payment transactions with optional filtering
	GetPaymentTransactionPage(ctx context.Context, in *GetPaymentTransactionPageRequest, opts ...grpc.CallOption) (*GetPaymentTransactionPageResponse, error)
}

type backofficePaymentClient struct {
	cc grpc.ClientConnInterface
}

func NewBackofficePaymentClient(cc grpc.ClientConnInterface) BackofficePaymentClient {
	return &backofficePaymentClient{cc}
}

func (c *backofficePaymentClient) GetPaymentTransactionPage(ctx context.Context, in *GetPaymentTransactionPageRequest, opts ...grpc.CallOption) (*GetPaymentTransactionPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentTransactionPageResponse)
	err := c.cc.Invoke(ctx, BackofficePayment_GetPaymentTransactionPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackofficePaymentServer is the server API for BackofficePayment service.
// All implementations must embed UnimplementedBackofficePaymentServer
// for forward compatibility.
//
// BackofficePayment service
// Provides methods for backoffice payment management
type BackofficePaymentServer interface {
	// Get payment transaction page
	// Retrieves a paginated list of payment transactions with optional filtering
	GetPaymentTransactionPage(context.Context, *GetPaymentTransactionPageRequest) (*GetPaymentTransactionPageResponse, error)
	mustEmbedUnimplementedBackofficePaymentServer()
}

// UnimplementedBackofficePaymentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackofficePaymentServer struct{}

func (UnimplementedBackofficePaymentServer) GetPaymentTransactionPage(context.Context, *GetPaymentTransactionPageRequest) (*GetPaymentTransactionPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentTransactionPage not implemented")
}
func (UnimplementedBackofficePaymentServer) mustEmbedUnimplementedBackofficePaymentServer() {}
func (UnimplementedBackofficePaymentServer) testEmbeddedByValue()                           {}

// UnsafeBackofficePaymentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackofficePaymentServer will
// result in compilation errors.
type UnsafeBackofficePaymentServer interface {
	mustEmbedUnimplementedBackofficePaymentServer()
}

func RegisterBackofficePaymentServer(s grpc.ServiceRegistrar, srv BackofficePaymentServer) {
	// If the following call pancis, it indicates UnimplementedBackofficePaymentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackofficePayment_ServiceDesc, srv)
}

func _BackofficePayment_GetPaymentTransactionPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentTransactionPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficePaymentServer).GetPaymentTransactionPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficePayment_GetPaymentTransactionPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficePaymentServer).GetPaymentTransactionPage(ctx, req.(*GetPaymentTransactionPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackofficePayment_ServiceDesc is the grpc.ServiceDesc for BackofficePayment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackofficePayment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.BackofficePayment",
	HandlerType: (*BackofficePaymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPaymentTransactionPage",
			Handler:    _BackofficePayment_GetPaymentTransactionPage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_payment.proto",
}
