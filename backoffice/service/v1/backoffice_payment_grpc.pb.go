// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_payment.proto

package v1

import (
	context "context"
	v1 "github.com/infigaming-com/meepo-api/payment/service/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackofficePayment_GetPaymentTransactionPage_FullMethodName     = "/api.backoffice.service.v1.BackofficePayment/GetPaymentTransactionPage"
	BackofficePayment_GetPaymentTransactionById_FullMethodName     = "/api.backoffice.service.v1.BackofficePayment/GetPaymentTransactionById"
	BackofficePayment_GetSupportedPaymentMethodList_FullMethodName = "/api.backoffice.service.v1.BackofficePayment/GetSupportedPaymentMethodList"
	BackofficePayment_GetPaymentMethodList_FullMethodName          = "/api.backoffice.service.v1.BackofficePayment/GetPaymentMethodList"
	BackofficePayment_CreatePaymentMethod_FullMethodName           = "/api.backoffice.service.v1.BackofficePayment/CreatePaymentMethod"
	BackofficePayment_UpdatePaymentChannel_FullMethodName          = "/api.backoffice.service.v1.BackofficePayment/UpdatePaymentChannel"
	BackofficePayment_CreatePaymentChannel_FullMethodName          = "/api.backoffice.service.v1.BackofficePayment/CreatePaymentChannel"
	BackofficePayment_GetOperatorAddress_FullMethodName            = "/api.backoffice.service.v1.BackofficePayment/GetOperatorAddress"
	BackofficePayment_GetPaymentChannelPage_FullMethodName         = "/api.backoffice.service.v1.BackofficePayment/GetPaymentChannelPage"
)

// BackofficePaymentClient is the client API for BackofficePayment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BackofficePayment service
// Provides methods for backoffice payment management
type BackofficePaymentClient interface {
	// Get payment transaction page
	// Retrieves a paginated list of payment transactions with optional filtering
	GetPaymentTransactionPage(ctx context.Context, in *v1.GetTransactionPageRequest, opts ...grpc.CallOption) (*v1.GetTransactionPageResponse, error)
	// Get transaction detail
	// Retrieves detailed information about a specific transaction
	// Error code: GET_TRANSACTION_DETAIL_FAILED(50009) - Failed to get transaction detail
	GetPaymentTransactionById(ctx context.Context, in *v1.GetTransactionDetailByIdRequest, opts ...grpc.CallOption) (*v1.GetPaymentChannelPageResponse, error)
	// Get list of payment methods
	// Retrieves all available payment methods supported by the system
	// Error code: GET_PAYMENT_METHOD_LIST_FAILED(50001) - Failed to get payment method list
	GetSupportedPaymentMethodList(ctx context.Context, in *v1.GetSupportedPaymentMethodListRequest, opts ...grpc.CallOption) (*v1.GetSupportedPaymentMethodListResponse, error)
	// Get list of payment methods
	// Retrieves all available payment methods supported by the system
	// Error code: GET_PAYMENT_METHOD_LIST_FAILED(50001) - Failed to get payment method list
	GetPaymentMethodList(ctx context.Context, in *v1.GetPaymentMethodListRequest, opts ...grpc.CallOption) (*v1.GetPaymentMethodListResponse, error)
	// Create payment channel
	// Creates a new payment channel with specified configuration
	// Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
	CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, opts ...grpc.CallOption) (*v1.CreatePaymentMethodResponse, error)
	// Create payment channel
	// Creates a new payment channel with specified configuration
	// Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
	UpdatePaymentChannel(ctx context.Context, in *v1.UpdatePaymentChannelRequest, opts ...grpc.CallOption) (*v1.UpdatePaymentChannelResponse, error)
	// Create payment channel
	// Creates a new payment channel with specified configuration
	// Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
	CreatePaymentChannel(ctx context.Context, in *CreatePaymentChannelRequest, opts ...grpc.CallOption) (*v1.CreatePaymentChannelResponse, error)
	GetOperatorAddress(ctx context.Context, in *GetOperatorAddressRequest, opts ...grpc.CallOption) (*v1.GetOperatorAddressResponse, error)
	// Get payment channel page with pagination and filters
	// Retrieves a paginated list of payment channels with optional filtering
	// Error code: GET_PAYMENT_CHANNEL_PAGE_FAILED(50003) - Failed to get payment channel page
	GetPaymentChannelPage(ctx context.Context, in *v1.GetPaymentChannelPageRequest, opts ...grpc.CallOption) (*v1.GetPaymentChannelPageResponse, error)
}

type backofficePaymentClient struct {
	cc grpc.ClientConnInterface
}

func NewBackofficePaymentClient(cc grpc.ClientConnInterface) BackofficePaymentClient {
	return &backofficePaymentClient{cc}
}

func (c *backofficePaymentClient) GetPaymentTransactionPage(ctx context.Context, in *v1.GetTransactionPageRequest, opts ...grpc.CallOption) (*v1.GetTransactionPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetTransactionPageResponse)
	err := c.cc.Invoke(ctx, BackofficePayment_GetPaymentTransactionPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficePaymentClient) GetPaymentTransactionById(ctx context.Context, in *v1.GetTransactionDetailByIdRequest, opts ...grpc.CallOption) (*v1.GetPaymentChannelPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetPaymentChannelPageResponse)
	err := c.cc.Invoke(ctx, BackofficePayment_GetPaymentTransactionById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficePaymentClient) GetSupportedPaymentMethodList(ctx context.Context, in *v1.GetSupportedPaymentMethodListRequest, opts ...grpc.CallOption) (*v1.GetSupportedPaymentMethodListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetSupportedPaymentMethodListResponse)
	err := c.cc.Invoke(ctx, BackofficePayment_GetSupportedPaymentMethodList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficePaymentClient) GetPaymentMethodList(ctx context.Context, in *v1.GetPaymentMethodListRequest, opts ...grpc.CallOption) (*v1.GetPaymentMethodListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetPaymentMethodListResponse)
	err := c.cc.Invoke(ctx, BackofficePayment_GetPaymentMethodList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficePaymentClient) CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, opts ...grpc.CallOption) (*v1.CreatePaymentMethodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.CreatePaymentMethodResponse)
	err := c.cc.Invoke(ctx, BackofficePayment_CreatePaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficePaymentClient) UpdatePaymentChannel(ctx context.Context, in *v1.UpdatePaymentChannelRequest, opts ...grpc.CallOption) (*v1.UpdatePaymentChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.UpdatePaymentChannelResponse)
	err := c.cc.Invoke(ctx, BackofficePayment_UpdatePaymentChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficePaymentClient) CreatePaymentChannel(ctx context.Context, in *CreatePaymentChannelRequest, opts ...grpc.CallOption) (*v1.CreatePaymentChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.CreatePaymentChannelResponse)
	err := c.cc.Invoke(ctx, BackofficePayment_CreatePaymentChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficePaymentClient) GetOperatorAddress(ctx context.Context, in *GetOperatorAddressRequest, opts ...grpc.CallOption) (*v1.GetOperatorAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetOperatorAddressResponse)
	err := c.cc.Invoke(ctx, BackofficePayment_GetOperatorAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficePaymentClient) GetPaymentChannelPage(ctx context.Context, in *v1.GetPaymentChannelPageRequest, opts ...grpc.CallOption) (*v1.GetPaymentChannelPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetPaymentChannelPageResponse)
	err := c.cc.Invoke(ctx, BackofficePayment_GetPaymentChannelPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackofficePaymentServer is the server API for BackofficePayment service.
// All implementations must embed UnimplementedBackofficePaymentServer
// for forward compatibility.
//
// BackofficePayment service
// Provides methods for backoffice payment management
type BackofficePaymentServer interface {
	// Get payment transaction page
	// Retrieves a paginated list of payment transactions with optional filtering
	GetPaymentTransactionPage(context.Context, *v1.GetTransactionPageRequest) (*v1.GetTransactionPageResponse, error)
	// Get transaction detail
	// Retrieves detailed information about a specific transaction
	// Error code: GET_TRANSACTION_DETAIL_FAILED(50009) - Failed to get transaction detail
	GetPaymentTransactionById(context.Context, *v1.GetTransactionDetailByIdRequest) (*v1.GetPaymentChannelPageResponse, error)
	// Get list of payment methods
	// Retrieves all available payment methods supported by the system
	// Error code: GET_PAYMENT_METHOD_LIST_FAILED(50001) - Failed to get payment method list
	GetSupportedPaymentMethodList(context.Context, *v1.GetSupportedPaymentMethodListRequest) (*v1.GetSupportedPaymentMethodListResponse, error)
	// Get list of payment methods
	// Retrieves all available payment methods supported by the system
	// Error code: GET_PAYMENT_METHOD_LIST_FAILED(50001) - Failed to get payment method list
	GetPaymentMethodList(context.Context, *v1.GetPaymentMethodListRequest) (*v1.GetPaymentMethodListResponse, error)
	// Create payment channel
	// Creates a new payment channel with specified configuration
	// Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
	CreatePaymentMethod(context.Context, *CreatePaymentMethodRequest) (*v1.CreatePaymentMethodResponse, error)
	// Create payment channel
	// Creates a new payment channel with specified configuration
	// Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
	UpdatePaymentChannel(context.Context, *v1.UpdatePaymentChannelRequest) (*v1.UpdatePaymentChannelResponse, error)
	// Create payment channel
	// Creates a new payment channel with specified configuration
	// Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
	CreatePaymentChannel(context.Context, *CreatePaymentChannelRequest) (*v1.CreatePaymentChannelResponse, error)
	GetOperatorAddress(context.Context, *GetOperatorAddressRequest) (*v1.GetOperatorAddressResponse, error)
	// Get payment channel page with pagination and filters
	// Retrieves a paginated list of payment channels with optional filtering
	// Error code: GET_PAYMENT_CHANNEL_PAGE_FAILED(50003) - Failed to get payment channel page
	GetPaymentChannelPage(context.Context, *v1.GetPaymentChannelPageRequest) (*v1.GetPaymentChannelPageResponse, error)
	mustEmbedUnimplementedBackofficePaymentServer()
}

// UnimplementedBackofficePaymentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackofficePaymentServer struct{}

func (UnimplementedBackofficePaymentServer) GetPaymentTransactionPage(context.Context, *v1.GetTransactionPageRequest) (*v1.GetTransactionPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentTransactionPage not implemented")
}
func (UnimplementedBackofficePaymentServer) GetPaymentTransactionById(context.Context, *v1.GetTransactionDetailByIdRequest) (*v1.GetPaymentChannelPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentTransactionById not implemented")
}
func (UnimplementedBackofficePaymentServer) GetSupportedPaymentMethodList(context.Context, *v1.GetSupportedPaymentMethodListRequest) (*v1.GetSupportedPaymentMethodListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedPaymentMethodList not implemented")
}
func (UnimplementedBackofficePaymentServer) GetPaymentMethodList(context.Context, *v1.GetPaymentMethodListRequest) (*v1.GetPaymentMethodListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentMethodList not implemented")
}
func (UnimplementedBackofficePaymentServer) CreatePaymentMethod(context.Context, *CreatePaymentMethodRequest) (*v1.CreatePaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentMethod not implemented")
}
func (UnimplementedBackofficePaymentServer) UpdatePaymentChannel(context.Context, *v1.UpdatePaymentChannelRequest) (*v1.UpdatePaymentChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentChannel not implemented")
}
func (UnimplementedBackofficePaymentServer) CreatePaymentChannel(context.Context, *CreatePaymentChannelRequest) (*v1.CreatePaymentChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentChannel not implemented")
}
func (UnimplementedBackofficePaymentServer) GetOperatorAddress(context.Context, *GetOperatorAddressRequest) (*v1.GetOperatorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorAddress not implemented")
}
func (UnimplementedBackofficePaymentServer) GetPaymentChannelPage(context.Context, *v1.GetPaymentChannelPageRequest) (*v1.GetPaymentChannelPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentChannelPage not implemented")
}
func (UnimplementedBackofficePaymentServer) mustEmbedUnimplementedBackofficePaymentServer() {}
func (UnimplementedBackofficePaymentServer) testEmbeddedByValue()                           {}

// UnsafeBackofficePaymentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackofficePaymentServer will
// result in compilation errors.
type UnsafeBackofficePaymentServer interface {
	mustEmbedUnimplementedBackofficePaymentServer()
}

func RegisterBackofficePaymentServer(s grpc.ServiceRegistrar, srv BackofficePaymentServer) {
	// If the following call pancis, it indicates UnimplementedBackofficePaymentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackofficePayment_ServiceDesc, srv)
}

func _BackofficePayment_GetPaymentTransactionPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetTransactionPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficePaymentServer).GetPaymentTransactionPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficePayment_GetPaymentTransactionPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficePaymentServer).GetPaymentTransactionPage(ctx, req.(*v1.GetTransactionPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficePayment_GetPaymentTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetTransactionDetailByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficePaymentServer).GetPaymentTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficePayment_GetPaymentTransactionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficePaymentServer).GetPaymentTransactionById(ctx, req.(*v1.GetTransactionDetailByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficePayment_GetSupportedPaymentMethodList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetSupportedPaymentMethodListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficePaymentServer).GetSupportedPaymentMethodList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficePayment_GetSupportedPaymentMethodList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficePaymentServer).GetSupportedPaymentMethodList(ctx, req.(*v1.GetSupportedPaymentMethodListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficePayment_GetPaymentMethodList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetPaymentMethodListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficePaymentServer).GetPaymentMethodList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficePayment_GetPaymentMethodList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficePaymentServer).GetPaymentMethodList(ctx, req.(*v1.GetPaymentMethodListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficePayment_CreatePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficePaymentServer).CreatePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficePayment_CreatePaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficePaymentServer).CreatePaymentMethod(ctx, req.(*CreatePaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficePayment_UpdatePaymentChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdatePaymentChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficePaymentServer).UpdatePaymentChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficePayment_UpdatePaymentChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficePaymentServer).UpdatePaymentChannel(ctx, req.(*v1.UpdatePaymentChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficePayment_CreatePaymentChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficePaymentServer).CreatePaymentChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficePayment_CreatePaymentChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficePaymentServer).CreatePaymentChannel(ctx, req.(*CreatePaymentChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficePayment_GetOperatorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficePaymentServer).GetOperatorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficePayment_GetOperatorAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficePaymentServer).GetOperatorAddress(ctx, req.(*GetOperatorAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficePayment_GetPaymentChannelPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetPaymentChannelPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficePaymentServer).GetPaymentChannelPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficePayment_GetPaymentChannelPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficePaymentServer).GetPaymentChannelPage(ctx, req.(*v1.GetPaymentChannelPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackofficePayment_ServiceDesc is the grpc.ServiceDesc for BackofficePayment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackofficePayment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.BackofficePayment",
	HandlerType: (*BackofficePaymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPaymentTransactionPage",
			Handler:    _BackofficePayment_GetPaymentTransactionPage_Handler,
		},
		{
			MethodName: "GetPaymentTransactionById",
			Handler:    _BackofficePayment_GetPaymentTransactionById_Handler,
		},
		{
			MethodName: "GetSupportedPaymentMethodList",
			Handler:    _BackofficePayment_GetSupportedPaymentMethodList_Handler,
		},
		{
			MethodName: "GetPaymentMethodList",
			Handler:    _BackofficePayment_GetPaymentMethodList_Handler,
		},
		{
			MethodName: "CreatePaymentMethod",
			Handler:    _BackofficePayment_CreatePaymentMethod_Handler,
		},
		{
			MethodName: "UpdatePaymentChannel",
			Handler:    _BackofficePayment_UpdatePaymentChannel_Handler,
		},
		{
			MethodName: "CreatePaymentChannel",
			Handler:    _BackofficePayment_CreatePaymentChannel_Handler,
		},
		{
			MethodName: "GetOperatorAddress",
			Handler:    _BackofficePayment_GetOperatorAddress_Handler,
		},
		{
			MethodName: "GetPaymentChannelPage",
			Handler:    _BackofficePayment_GetPaymentChannelPage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_payment.proto",
}
