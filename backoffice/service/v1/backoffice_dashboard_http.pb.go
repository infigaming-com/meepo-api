// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_dashboard.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackoffice_DashboardGetOverviewDashboard = "/api.backoffice.service.v1.Backoffice_Dashboard/GetOverviewDashboard"
const OperationBackoffice_DashboardGetTimeRangedDashboard = "/api.backoffice.service.v1.Backoffice_Dashboard/GetTimeRangedDashboard"
const OperationBackoffice_DashboardGetTopOperatorsDashboard = "/api.backoffice.service.v1.Backoffice_Dashboard/GetTopOperatorsDashboard"

type Backoffice_DashboardHTTPServer interface {
	GetOverviewDashboard(context.Context, *GetOverviewDashboardRequest) (*GetOverviewDashboardResponse, error)
	GetTimeRangedDashboard(context.Context, *GetTimeRangedDashboardRequest) (*GetTimeRangedDashboardResponse, error)
	GetTopOperatorsDashboard(context.Context, *GetTopOperatorsDashboardRequest) (*GetTopOperatorsDashboardResponse, error)
}

func RegisterBackoffice_DashboardHTTPServer(s *http.Server, srv Backoffice_DashboardHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/dashboard/get", _Backoffice_Dashboard_GetOverviewDashboard0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/dashboard/time-ranged/get", _Backoffice_Dashboard_GetTimeRangedDashboard0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/dashboard/top-operators/get", _Backoffice_Dashboard_GetTopOperatorsDashboard0_HTTP_Handler(srv))
}

func _Backoffice_Dashboard_GetOverviewDashboard0_HTTP_Handler(srv Backoffice_DashboardHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOverviewDashboardRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_DashboardGetOverviewDashboard)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOverviewDashboard(ctx, req.(*GetOverviewDashboardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOverviewDashboardResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Dashboard_GetTimeRangedDashboard0_HTTP_Handler(srv Backoffice_DashboardHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTimeRangedDashboardRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_DashboardGetTimeRangedDashboard)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTimeRangedDashboard(ctx, req.(*GetTimeRangedDashboardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTimeRangedDashboardResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Dashboard_GetTopOperatorsDashboard0_HTTP_Handler(srv Backoffice_DashboardHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTopOperatorsDashboardRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_DashboardGetTopOperatorsDashboard)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTopOperatorsDashboard(ctx, req.(*GetTopOperatorsDashboardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTopOperatorsDashboardResponse)
		return ctx.Result(200, reply)
	}
}

type Backoffice_DashboardHTTPClient interface {
	GetOverviewDashboard(ctx context.Context, req *GetOverviewDashboardRequest, opts ...http.CallOption) (rsp *GetOverviewDashboardResponse, err error)
	GetTimeRangedDashboard(ctx context.Context, req *GetTimeRangedDashboardRequest, opts ...http.CallOption) (rsp *GetTimeRangedDashboardResponse, err error)
	GetTopOperatorsDashboard(ctx context.Context, req *GetTopOperatorsDashboardRequest, opts ...http.CallOption) (rsp *GetTopOperatorsDashboardResponse, err error)
}

type Backoffice_DashboardHTTPClientImpl struct {
	cc *http.Client
}

func NewBackoffice_DashboardHTTPClient(client *http.Client) Backoffice_DashboardHTTPClient {
	return &Backoffice_DashboardHTTPClientImpl{client}
}

func (c *Backoffice_DashboardHTTPClientImpl) GetOverviewDashboard(ctx context.Context, in *GetOverviewDashboardRequest, opts ...http.CallOption) (*GetOverviewDashboardResponse, error) {
	var out GetOverviewDashboardResponse
	pattern := "/v1/backoffice/dashboard/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_DashboardGetOverviewDashboard))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_DashboardHTTPClientImpl) GetTimeRangedDashboard(ctx context.Context, in *GetTimeRangedDashboardRequest, opts ...http.CallOption) (*GetTimeRangedDashboardResponse, error) {
	var out GetTimeRangedDashboardResponse
	pattern := "/v1/backoffice/dashboard/time-ranged/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_DashboardGetTimeRangedDashboard))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_DashboardHTTPClientImpl) GetTopOperatorsDashboard(ctx context.Context, in *GetTopOperatorsDashboardRequest, opts ...http.CallOption) (*GetTopOperatorsDashboardResponse, error) {
	var out GetTopOperatorsDashboardResponse
	pattern := "/v1/backoffice/dashboard/top-operators/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_DashboardGetTopOperatorsDashboard))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
