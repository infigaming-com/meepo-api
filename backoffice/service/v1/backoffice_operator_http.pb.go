// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_operator.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/infigaming-com/meepo-api/user/service/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficeOperatorAddOperatorBackofficeSubdomain = "/api.backoffice.service.v1.BackofficeOperator/AddOperatorBackofficeSubdomain"
const OperationBackofficeOperatorAddOperatorByoSubdomain = "/api.backoffice.service.v1.BackofficeOperator/AddOperatorByoSubdomain"
const OperationBackofficeOperatorCreateOperator = "/api.backoffice.service.v1.BackofficeOperator/CreateOperator"
const OperationBackofficeOperatorDeleteOperatorBackofficeSubdomain = "/api.backoffice.service.v1.BackofficeOperator/DeleteOperatorBackofficeSubdomain"
const OperationBackofficeOperatorDeleteOperatorByoSubdomain = "/api.backoffice.service.v1.BackofficeOperator/DeleteOperatorByoSubdomain"
const OperationBackofficeOperatorGetCurrentOperatorDetails = "/api.backoffice.service.v1.BackofficeOperator/GetCurrentOperatorDetails"
const OperationBackofficeOperatorListAllOperators = "/api.backoffice.service.v1.BackofficeOperator/ListAllOperators"
const OperationBackofficeOperatorListBottomOperators = "/api.backoffice.service.v1.BackofficeOperator/ListBottomOperators"
const OperationBackofficeOperatorListCompanyOperators = "/api.backoffice.service.v1.BackofficeOperator/ListCompanyOperators"
const OperationBackofficeOperatorListOperatorsByAdminEmail = "/api.backoffice.service.v1.BackofficeOperator/ListOperatorsByAdminEmail"
const OperationBackofficeOperatorListOperatorsByParentOperatorId = "/api.backoffice.service.v1.BackofficeOperator/ListOperatorsByParentOperatorId"
const OperationBackofficeOperatorListRetailerOperators = "/api.backoffice.service.v1.BackofficeOperator/ListRetailerOperators"
const OperationBackofficeOperatorUpdateOperatorStatus = "/api.backoffice.service.v1.BackofficeOperator/UpdateOperatorStatus"

type BackofficeOperatorHTTPServer interface {
	// AddOperatorBackofficeSubdomain AddOperatorBackofficeSubdomain adds a backoffice subdomain for the given operator
	AddOperatorBackofficeSubdomain(context.Context, *AddOperatorBackofficeSubdomainRequest) (*AddOperatorBackofficeSubdomainResponse, error)
	// AddOperatorByoSubdomain AddOperatorByoSubdomain adds a byo subdomain for the given operator
	AddOperatorByoSubdomain(context.Context, *AddOperatorByoSubdomainRequest) (*AddOperatorByoSubdomainResponse, error)
	CreateOperator(context.Context, *CreateOperatorRequest) (*CreateOperatorResponse, error)
	// DeleteOperatorBackofficeSubdomain DeleteOperatorBackofficeSubdomain deletes a backoffice subdomain for the given operator
	DeleteOperatorBackofficeSubdomain(context.Context, *DeleteOperatorBackofficeSubdomainRequest) (*DeleteOperatorBackofficeSubdomainResponse, error)
	// DeleteOperatorByoSubdomain DeleteOperatorByoSubdomain deletes a byo subdomain for the given operator
	DeleteOperatorByoSubdomain(context.Context, *DeleteOperatorByoSubdomainRequest) (*DeleteOperatorByoSubdomainResponse, error)
	// GetCurrentOperatorDetails GetCurrentOperatorDetails returns the current operator details.
	GetCurrentOperatorDetails(context.Context, *GetCurrentOperatorDetailsRequest) (*GetCurrentOperatorDetailsResponse, error)
	ListAllOperators(context.Context, *ListAllOperatorsRequest) (*ListAllOperatorsResponse, error)
	// ListBottomOperators ListBottomOperators returns a list of bottom operators by operator context in the middleware
	ListBottomOperators(context.Context, *ListBottomOperatorsRequest) (*ListBottomOperatorsResponse, error)
	// ListCompanyOperators ListCompanies returns a list of companies by operator context in the middleware
	ListCompanyOperators(context.Context, *ListCompanyOperatorsRequest) (*ListCompanyOperatorsResponse, error)
	// ListOperatorsByAdminEmail List operators by admin email under specific operator
	ListOperatorsByAdminEmail(context.Context, *ListOperatorsByAdminEmailRequest) (*v1.ListOperatorsByAdminEmailResponse, error)
	// ListOperatorsByParentOperatorId ListOperatorsByParentOperatorId returns a list of operators by parent operator ID.
	ListOperatorsByParentOperatorId(context.Context, *ListOperatorsByParentOperatorIdRequest) (*ListOperatorsByParentOperatorIdResponse, error)
	// ListRetailerOperators ListRetailers returns a list of retailers by operator context in the middleware
	ListRetailerOperators(context.Context, *ListRetailerOperatorsRequest) (*ListRetailerOperatorsResponse, error)
	// UpdateOperatorStatus UpdateOperatorStatus updates the status of an operator
	UpdateOperatorStatus(context.Context, *UpdateOperatorStatusRequest) (*UpdateOperatorStatusResponse, error)
}

func RegisterBackofficeOperatorHTTPServer(s *http.Server, srv BackofficeOperatorHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/operator/list/all", _BackofficeOperator_ListAllOperators0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/create", _BackofficeOperator_CreateOperator0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/current", _BackofficeOperator_GetCurrentOperatorDetails0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/list/by-parent", _BackofficeOperator_ListOperatorsByParentOperatorId0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/list/retailer", _BackofficeOperator_ListRetailerOperators0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/list/company", _BackofficeOperator_ListCompanyOperators0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/list/bottom", _BackofficeOperator_ListBottomOperators0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/status/update", _BackofficeOperator_UpdateOperatorStatus0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/list-by-admin-email", _BackofficeOperator_ListOperatorsByAdminEmail0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/byo-subdomains/add", _BackofficeOperator_AddOperatorByoSubdomain0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/byo-subdomains/delete", _BackofficeOperator_DeleteOperatorByoSubdomain0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/backoffice-subdomains/add", _BackofficeOperator_AddOperatorBackofficeSubdomain0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/backoffice-subdomains/delete", _BackofficeOperator_DeleteOperatorBackofficeSubdomain0_HTTP_Handler(srv))
}

func _BackofficeOperator_ListAllOperators0_HTTP_Handler(srv BackofficeOperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAllOperatorsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeOperatorListAllOperators)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAllOperators(ctx, req.(*ListAllOperatorsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAllOperatorsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeOperator_CreateOperator0_HTTP_Handler(srv BackofficeOperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOperatorRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeOperatorCreateOperator)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOperator(ctx, req.(*CreateOperatorRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOperatorResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeOperator_GetCurrentOperatorDetails0_HTTP_Handler(srv BackofficeOperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCurrentOperatorDetailsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeOperatorGetCurrentOperatorDetails)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCurrentOperatorDetails(ctx, req.(*GetCurrentOperatorDetailsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCurrentOperatorDetailsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeOperator_ListOperatorsByParentOperatorId0_HTTP_Handler(srv BackofficeOperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOperatorsByParentOperatorIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeOperatorListOperatorsByParentOperatorId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOperatorsByParentOperatorId(ctx, req.(*ListOperatorsByParentOperatorIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOperatorsByParentOperatorIdResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeOperator_ListRetailerOperators0_HTTP_Handler(srv BackofficeOperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRetailerOperatorsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeOperatorListRetailerOperators)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRetailerOperators(ctx, req.(*ListRetailerOperatorsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRetailerOperatorsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeOperator_ListCompanyOperators0_HTTP_Handler(srv BackofficeOperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCompanyOperatorsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeOperatorListCompanyOperators)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCompanyOperators(ctx, req.(*ListCompanyOperatorsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCompanyOperatorsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeOperator_ListBottomOperators0_HTTP_Handler(srv BackofficeOperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBottomOperatorsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeOperatorListBottomOperators)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBottomOperators(ctx, req.(*ListBottomOperatorsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBottomOperatorsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeOperator_UpdateOperatorStatus0_HTTP_Handler(srv BackofficeOperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateOperatorStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeOperatorUpdateOperatorStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOperatorStatus(ctx, req.(*UpdateOperatorStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateOperatorStatusResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeOperator_ListOperatorsByAdminEmail0_HTTP_Handler(srv BackofficeOperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOperatorsByAdminEmailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeOperatorListOperatorsByAdminEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOperatorsByAdminEmail(ctx, req.(*ListOperatorsByAdminEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListOperatorsByAdminEmailResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeOperator_AddOperatorByoSubdomain0_HTTP_Handler(srv BackofficeOperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddOperatorByoSubdomainRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeOperatorAddOperatorByoSubdomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddOperatorByoSubdomain(ctx, req.(*AddOperatorByoSubdomainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddOperatorByoSubdomainResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeOperator_DeleteOperatorByoSubdomain0_HTTP_Handler(srv BackofficeOperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOperatorByoSubdomainRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeOperatorDeleteOperatorByoSubdomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOperatorByoSubdomain(ctx, req.(*DeleteOperatorByoSubdomainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteOperatorByoSubdomainResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeOperator_AddOperatorBackofficeSubdomain0_HTTP_Handler(srv BackofficeOperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddOperatorBackofficeSubdomainRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeOperatorAddOperatorBackofficeSubdomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddOperatorBackofficeSubdomain(ctx, req.(*AddOperatorBackofficeSubdomainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddOperatorBackofficeSubdomainResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeOperator_DeleteOperatorBackofficeSubdomain0_HTTP_Handler(srv BackofficeOperatorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOperatorBackofficeSubdomainRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeOperatorDeleteOperatorBackofficeSubdomain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOperatorBackofficeSubdomain(ctx, req.(*DeleteOperatorBackofficeSubdomainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteOperatorBackofficeSubdomainResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficeOperatorHTTPClient interface {
	AddOperatorBackofficeSubdomain(ctx context.Context, req *AddOperatorBackofficeSubdomainRequest, opts ...http.CallOption) (rsp *AddOperatorBackofficeSubdomainResponse, err error)
	AddOperatorByoSubdomain(ctx context.Context, req *AddOperatorByoSubdomainRequest, opts ...http.CallOption) (rsp *AddOperatorByoSubdomainResponse, err error)
	CreateOperator(ctx context.Context, req *CreateOperatorRequest, opts ...http.CallOption) (rsp *CreateOperatorResponse, err error)
	DeleteOperatorBackofficeSubdomain(ctx context.Context, req *DeleteOperatorBackofficeSubdomainRequest, opts ...http.CallOption) (rsp *DeleteOperatorBackofficeSubdomainResponse, err error)
	DeleteOperatorByoSubdomain(ctx context.Context, req *DeleteOperatorByoSubdomainRequest, opts ...http.CallOption) (rsp *DeleteOperatorByoSubdomainResponse, err error)
	GetCurrentOperatorDetails(ctx context.Context, req *GetCurrentOperatorDetailsRequest, opts ...http.CallOption) (rsp *GetCurrentOperatorDetailsResponse, err error)
	ListAllOperators(ctx context.Context, req *ListAllOperatorsRequest, opts ...http.CallOption) (rsp *ListAllOperatorsResponse, err error)
	ListBottomOperators(ctx context.Context, req *ListBottomOperatorsRequest, opts ...http.CallOption) (rsp *ListBottomOperatorsResponse, err error)
	ListCompanyOperators(ctx context.Context, req *ListCompanyOperatorsRequest, opts ...http.CallOption) (rsp *ListCompanyOperatorsResponse, err error)
	ListOperatorsByAdminEmail(ctx context.Context, req *ListOperatorsByAdminEmailRequest, opts ...http.CallOption) (rsp *v1.ListOperatorsByAdminEmailResponse, err error)
	ListOperatorsByParentOperatorId(ctx context.Context, req *ListOperatorsByParentOperatorIdRequest, opts ...http.CallOption) (rsp *ListOperatorsByParentOperatorIdResponse, err error)
	ListRetailerOperators(ctx context.Context, req *ListRetailerOperatorsRequest, opts ...http.CallOption) (rsp *ListRetailerOperatorsResponse, err error)
	UpdateOperatorStatus(ctx context.Context, req *UpdateOperatorStatusRequest, opts ...http.CallOption) (rsp *UpdateOperatorStatusResponse, err error)
}

type BackofficeOperatorHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficeOperatorHTTPClient(client *http.Client) BackofficeOperatorHTTPClient {
	return &BackofficeOperatorHTTPClientImpl{client}
}

func (c *BackofficeOperatorHTTPClientImpl) AddOperatorBackofficeSubdomain(ctx context.Context, in *AddOperatorBackofficeSubdomainRequest, opts ...http.CallOption) (*AddOperatorBackofficeSubdomainResponse, error) {
	var out AddOperatorBackofficeSubdomainResponse
	pattern := "/v1/backoffice/operator/backoffice-subdomains/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeOperatorAddOperatorBackofficeSubdomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeOperatorHTTPClientImpl) AddOperatorByoSubdomain(ctx context.Context, in *AddOperatorByoSubdomainRequest, opts ...http.CallOption) (*AddOperatorByoSubdomainResponse, error) {
	var out AddOperatorByoSubdomainResponse
	pattern := "/v1/backoffice/operator/byo-subdomains/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeOperatorAddOperatorByoSubdomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeOperatorHTTPClientImpl) CreateOperator(ctx context.Context, in *CreateOperatorRequest, opts ...http.CallOption) (*CreateOperatorResponse, error) {
	var out CreateOperatorResponse
	pattern := "/v1/backoffice/operator/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeOperatorCreateOperator))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeOperatorHTTPClientImpl) DeleteOperatorBackofficeSubdomain(ctx context.Context, in *DeleteOperatorBackofficeSubdomainRequest, opts ...http.CallOption) (*DeleteOperatorBackofficeSubdomainResponse, error) {
	var out DeleteOperatorBackofficeSubdomainResponse
	pattern := "/v1/backoffice/operator/backoffice-subdomains/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeOperatorDeleteOperatorBackofficeSubdomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeOperatorHTTPClientImpl) DeleteOperatorByoSubdomain(ctx context.Context, in *DeleteOperatorByoSubdomainRequest, opts ...http.CallOption) (*DeleteOperatorByoSubdomainResponse, error) {
	var out DeleteOperatorByoSubdomainResponse
	pattern := "/v1/backoffice/operator/byo-subdomains/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeOperatorDeleteOperatorByoSubdomain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeOperatorHTTPClientImpl) GetCurrentOperatorDetails(ctx context.Context, in *GetCurrentOperatorDetailsRequest, opts ...http.CallOption) (*GetCurrentOperatorDetailsResponse, error) {
	var out GetCurrentOperatorDetailsResponse
	pattern := "/v1/backoffice/operator/current"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeOperatorGetCurrentOperatorDetails))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeOperatorHTTPClientImpl) ListAllOperators(ctx context.Context, in *ListAllOperatorsRequest, opts ...http.CallOption) (*ListAllOperatorsResponse, error) {
	var out ListAllOperatorsResponse
	pattern := "/v1/backoffice/operator/list/all"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeOperatorListAllOperators))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeOperatorHTTPClientImpl) ListBottomOperators(ctx context.Context, in *ListBottomOperatorsRequest, opts ...http.CallOption) (*ListBottomOperatorsResponse, error) {
	var out ListBottomOperatorsResponse
	pattern := "/v1/backoffice/operator/list/bottom"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeOperatorListBottomOperators))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeOperatorHTTPClientImpl) ListCompanyOperators(ctx context.Context, in *ListCompanyOperatorsRequest, opts ...http.CallOption) (*ListCompanyOperatorsResponse, error) {
	var out ListCompanyOperatorsResponse
	pattern := "/v1/backoffice/operator/list/company"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeOperatorListCompanyOperators))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeOperatorHTTPClientImpl) ListOperatorsByAdminEmail(ctx context.Context, in *ListOperatorsByAdminEmailRequest, opts ...http.CallOption) (*v1.ListOperatorsByAdminEmailResponse, error) {
	var out v1.ListOperatorsByAdminEmailResponse
	pattern := "/v1/backoffice/operator/list-by-admin-email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeOperatorListOperatorsByAdminEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeOperatorHTTPClientImpl) ListOperatorsByParentOperatorId(ctx context.Context, in *ListOperatorsByParentOperatorIdRequest, opts ...http.CallOption) (*ListOperatorsByParentOperatorIdResponse, error) {
	var out ListOperatorsByParentOperatorIdResponse
	pattern := "/v1/backoffice/operator/list/by-parent"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeOperatorListOperatorsByParentOperatorId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeOperatorHTTPClientImpl) ListRetailerOperators(ctx context.Context, in *ListRetailerOperatorsRequest, opts ...http.CallOption) (*ListRetailerOperatorsResponse, error) {
	var out ListRetailerOperatorsResponse
	pattern := "/v1/backoffice/operator/list/retailer"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeOperatorListRetailerOperators))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeOperatorHTTPClientImpl) UpdateOperatorStatus(ctx context.Context, in *UpdateOperatorStatusRequest, opts ...http.CallOption) (*UpdateOperatorStatusResponse, error) {
	var out UpdateOperatorStatusResponse
	pattern := "/v1/backoffice/operator/status/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeOperatorUpdateOperatorStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
