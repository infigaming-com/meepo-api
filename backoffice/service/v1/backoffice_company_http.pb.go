// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_company.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/infigaming-com/meepo-api/user/service/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficeCompanyCreateCompany = "/api.backoffice.service.v1.BackofficeCompany/CreateCompany"
const OperationBackofficeCompanyListCompanyOperatorsByAdminEmail = "/api.backoffice.service.v1.BackofficeCompany/ListCompanyOperatorsByAdminEmail"

type BackofficeCompanyHTTPServer interface {
	// CreateCompany Create a company's owner account and related data
	CreateCompany(context.Context, *CreateCompanyRequest) (*CreateCompanyResponse, error)
	// ListCompanyOperatorsByAdminEmail List company operators by admin email under specific retailer operator
	ListCompanyOperatorsByAdminEmail(context.Context, *ListCompanyOperatorsByAdminEmailRequest) (*v1.ListCompanyOperatorsByAdminEmailResponse, error)
}

func RegisterBackofficeCompanyHTTPServer(s *http.Server, srv BackofficeCompanyHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/company/register", _BackofficeCompany_CreateCompany0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/company/list-by-admin-email", _BackofficeCompany_ListCompanyOperatorsByAdminEmail0_HTTP_Handler(srv))
}

func _BackofficeCompany_CreateCompany0_HTTP_Handler(srv BackofficeCompanyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCompanyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeCompanyCreateCompany)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCompany(ctx, req.(*CreateCompanyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCompanyResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeCompany_ListCompanyOperatorsByAdminEmail0_HTTP_Handler(srv BackofficeCompanyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCompanyOperatorsByAdminEmailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeCompanyListCompanyOperatorsByAdminEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCompanyOperatorsByAdminEmail(ctx, req.(*ListCompanyOperatorsByAdminEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListCompanyOperatorsByAdminEmailResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficeCompanyHTTPClient interface {
	CreateCompany(ctx context.Context, req *CreateCompanyRequest, opts ...http.CallOption) (rsp *CreateCompanyResponse, err error)
	ListCompanyOperatorsByAdminEmail(ctx context.Context, req *ListCompanyOperatorsByAdminEmailRequest, opts ...http.CallOption) (rsp *v1.ListCompanyOperatorsByAdminEmailResponse, err error)
}

type BackofficeCompanyHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficeCompanyHTTPClient(client *http.Client) BackofficeCompanyHTTPClient {
	return &BackofficeCompanyHTTPClientImpl{client}
}

func (c *BackofficeCompanyHTTPClientImpl) CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...http.CallOption) (*CreateCompanyResponse, error) {
	var out CreateCompanyResponse
	pattern := "/v1/backoffice/company/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeCompanyCreateCompany))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeCompanyHTTPClientImpl) ListCompanyOperatorsByAdminEmail(ctx context.Context, in *ListCompanyOperatorsByAdminEmailRequest, opts ...http.CallOption) (*v1.ListCompanyOperatorsByAdminEmailResponse, error) {
	var out v1.ListCompanyOperatorsByAdminEmailResponse
	pattern := "/v1/backoffice/company/list-by-admin-email"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeCompanyListCompanyOperatorsByAdminEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
