// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_vip.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackofficeVip_GetVipSetting_FullMethodName                = "/api.backoffice.service.v1.BackofficeVip/GetVipSetting"
	BackofficeVip_UpdateVipSetting_FullMethodName             = "/api.backoffice.service.v1.BackofficeVip/UpdateVipSetting"
	BackofficeVip_ListVipLevelConfigTemplates_FullMethodName  = "/api.backoffice.service.v1.BackofficeVip/ListVipLevelConfigTemplates"
	BackofficeVip_GetVipLevelConfigTemplate_FullMethodName    = "/api.backoffice.service.v1.BackofficeVip/GetVipLevelConfigTemplate"
	BackofficeVip_CreateVipLevelConfigTemplate_FullMethodName = "/api.backoffice.service.v1.BackofficeVip/CreateVipLevelConfigTemplate"
	BackofficeVip_UpdateVipLevelConfigTemplate_FullMethodName = "/api.backoffice.service.v1.BackofficeVip/UpdateVipLevelConfigTemplate"
	BackofficeVip_DeleteVipLevelConfigTemplate_FullMethodName = "/api.backoffice.service.v1.BackofficeVip/DeleteVipLevelConfigTemplate"
)

// BackofficeVipClient is the client API for BackofficeVip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VIP系统服务
type BackofficeVipClient interface {
	// VIP设置管理
	GetVipSetting(ctx context.Context, in *GetVipSettingRequest, opts ...grpc.CallOption) (*GetVipSettingResponse, error)
	UpdateVipSetting(ctx context.Context, in *UpdateVipSettingRequest, opts ...grpc.CallOption) (*UpdateVipSettingResponse, error)
	ListVipLevelConfigTemplates(ctx context.Context, in *ListVipLevelConfigTemplatesRequest, opts ...grpc.CallOption) (*ListVipLevelConfigTemplatesResponse, error)
	GetVipLevelConfigTemplate(ctx context.Context, in *GetVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*GetVipLevelConfigTemplateResponse, error)
	CreateVipLevelConfigTemplate(ctx context.Context, in *CreateVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*CreateVipLevelConfigTemplateResponse, error)
	UpdateVipLevelConfigTemplate(ctx context.Context, in *UpdateVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*UpdateVipLevelConfigTemplateResponse, error)
	DeleteVipLevelConfigTemplate(ctx context.Context, in *DeleteVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*DeleteVipLevelConfigTemplateResponse, error)
}

type backofficeVipClient struct {
	cc grpc.ClientConnInterface
}

func NewBackofficeVipClient(cc grpc.ClientConnInterface) BackofficeVipClient {
	return &backofficeVipClient{cc}
}

func (c *backofficeVipClient) GetVipSetting(ctx context.Context, in *GetVipSettingRequest, opts ...grpc.CallOption) (*GetVipSettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipSettingResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_GetVipSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) UpdateVipSetting(ctx context.Context, in *UpdateVipSettingRequest, opts ...grpc.CallOption) (*UpdateVipSettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVipSettingResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_UpdateVipSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) ListVipLevelConfigTemplates(ctx context.Context, in *ListVipLevelConfigTemplatesRequest, opts ...grpc.CallOption) (*ListVipLevelConfigTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVipLevelConfigTemplatesResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_ListVipLevelConfigTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) GetVipLevelConfigTemplate(ctx context.Context, in *GetVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*GetVipLevelConfigTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipLevelConfigTemplateResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_GetVipLevelConfigTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) CreateVipLevelConfigTemplate(ctx context.Context, in *CreateVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*CreateVipLevelConfigTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVipLevelConfigTemplateResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_CreateVipLevelConfigTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) UpdateVipLevelConfigTemplate(ctx context.Context, in *UpdateVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*UpdateVipLevelConfigTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVipLevelConfigTemplateResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_UpdateVipLevelConfigTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) DeleteVipLevelConfigTemplate(ctx context.Context, in *DeleteVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*DeleteVipLevelConfigTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVipLevelConfigTemplateResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_DeleteVipLevelConfigTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackofficeVipServer is the server API for BackofficeVip service.
// All implementations must embed UnimplementedBackofficeVipServer
// for forward compatibility.
//
// VIP系统服务
type BackofficeVipServer interface {
	// VIP设置管理
	GetVipSetting(context.Context, *GetVipSettingRequest) (*GetVipSettingResponse, error)
	UpdateVipSetting(context.Context, *UpdateVipSettingRequest) (*UpdateVipSettingResponse, error)
	ListVipLevelConfigTemplates(context.Context, *ListVipLevelConfigTemplatesRequest) (*ListVipLevelConfigTemplatesResponse, error)
	GetVipLevelConfigTemplate(context.Context, *GetVipLevelConfigTemplateRequest) (*GetVipLevelConfigTemplateResponse, error)
	CreateVipLevelConfigTemplate(context.Context, *CreateVipLevelConfigTemplateRequest) (*CreateVipLevelConfigTemplateResponse, error)
	UpdateVipLevelConfigTemplate(context.Context, *UpdateVipLevelConfigTemplateRequest) (*UpdateVipLevelConfigTemplateResponse, error)
	DeleteVipLevelConfigTemplate(context.Context, *DeleteVipLevelConfigTemplateRequest) (*DeleteVipLevelConfigTemplateResponse, error)
	mustEmbedUnimplementedBackofficeVipServer()
}

// UnimplementedBackofficeVipServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackofficeVipServer struct{}

func (UnimplementedBackofficeVipServer) GetVipSetting(context.Context, *GetVipSettingRequest) (*GetVipSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipSetting not implemented")
}
func (UnimplementedBackofficeVipServer) UpdateVipSetting(context.Context, *UpdateVipSettingRequest) (*UpdateVipSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVipSetting not implemented")
}
func (UnimplementedBackofficeVipServer) ListVipLevelConfigTemplates(context.Context, *ListVipLevelConfigTemplatesRequest) (*ListVipLevelConfigTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVipLevelConfigTemplates not implemented")
}
func (UnimplementedBackofficeVipServer) GetVipLevelConfigTemplate(context.Context, *GetVipLevelConfigTemplateRequest) (*GetVipLevelConfigTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipLevelConfigTemplate not implemented")
}
func (UnimplementedBackofficeVipServer) CreateVipLevelConfigTemplate(context.Context, *CreateVipLevelConfigTemplateRequest) (*CreateVipLevelConfigTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVipLevelConfigTemplate not implemented")
}
func (UnimplementedBackofficeVipServer) UpdateVipLevelConfigTemplate(context.Context, *UpdateVipLevelConfigTemplateRequest) (*UpdateVipLevelConfigTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVipLevelConfigTemplate not implemented")
}
func (UnimplementedBackofficeVipServer) DeleteVipLevelConfigTemplate(context.Context, *DeleteVipLevelConfigTemplateRequest) (*DeleteVipLevelConfigTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVipLevelConfigTemplate not implemented")
}
func (UnimplementedBackofficeVipServer) mustEmbedUnimplementedBackofficeVipServer() {}
func (UnimplementedBackofficeVipServer) testEmbeddedByValue()                       {}

// UnsafeBackofficeVipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackofficeVipServer will
// result in compilation errors.
type UnsafeBackofficeVipServer interface {
	mustEmbedUnimplementedBackofficeVipServer()
}

func RegisterBackofficeVipServer(s grpc.ServiceRegistrar, srv BackofficeVipServer) {
	// If the following call pancis, it indicates UnimplementedBackofficeVipServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackofficeVip_ServiceDesc, srv)
}

func _BackofficeVip_GetVipSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).GetVipSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_GetVipSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).GetVipSetting(ctx, req.(*GetVipSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_UpdateVipSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVipSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).UpdateVipSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_UpdateVipSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).UpdateVipSetting(ctx, req.(*UpdateVipSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_ListVipLevelConfigTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVipLevelConfigTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).ListVipLevelConfigTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_ListVipLevelConfigTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).ListVipLevelConfigTemplates(ctx, req.(*ListVipLevelConfigTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_GetVipLevelConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipLevelConfigTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).GetVipLevelConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_GetVipLevelConfigTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).GetVipLevelConfigTemplate(ctx, req.(*GetVipLevelConfigTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_CreateVipLevelConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVipLevelConfigTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).CreateVipLevelConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_CreateVipLevelConfigTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).CreateVipLevelConfigTemplate(ctx, req.(*CreateVipLevelConfigTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_UpdateVipLevelConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVipLevelConfigTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).UpdateVipLevelConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_UpdateVipLevelConfigTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).UpdateVipLevelConfigTemplate(ctx, req.(*UpdateVipLevelConfigTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_DeleteVipLevelConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVipLevelConfigTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).DeleteVipLevelConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_DeleteVipLevelConfigTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).DeleteVipLevelConfigTemplate(ctx, req.(*DeleteVipLevelConfigTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackofficeVip_ServiceDesc is the grpc.ServiceDesc for BackofficeVip service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackofficeVip_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.BackofficeVip",
	HandlerType: (*BackofficeVipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVipSetting",
			Handler:    _BackofficeVip_GetVipSetting_Handler,
		},
		{
			MethodName: "UpdateVipSetting",
			Handler:    _BackofficeVip_UpdateVipSetting_Handler,
		},
		{
			MethodName: "ListVipLevelConfigTemplates",
			Handler:    _BackofficeVip_ListVipLevelConfigTemplates_Handler,
		},
		{
			MethodName: "GetVipLevelConfigTemplate",
			Handler:    _BackofficeVip_GetVipLevelConfigTemplate_Handler,
		},
		{
			MethodName: "CreateVipLevelConfigTemplate",
			Handler:    _BackofficeVip_CreateVipLevelConfigTemplate_Handler,
		},
		{
			MethodName: "UpdateVipLevelConfigTemplate",
			Handler:    _BackofficeVip_UpdateVipLevelConfigTemplate_Handler,
		},
		{
			MethodName: "DeleteVipLevelConfigTemplate",
			Handler:    _BackofficeVip_DeleteVipLevelConfigTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_vip.proto",
}
