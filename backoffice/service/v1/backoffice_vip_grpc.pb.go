// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_vip.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackofficeVip_GetVipConfig_FullMethodName                 = "/api.backoffice.service.v1.BackofficeVip/GetVipConfig"
	BackofficeVip_UpdateVipConfig_FullMethodName              = "/api.backoffice.service.v1.BackofficeVip/UpdateVipConfig"
	BackofficeVip_GetVipSetting_FullMethodName                = "/api.backoffice.service.v1.BackofficeVip/GetVipSetting"
	BackofficeVip_UpdateVipSetting_FullMethodName             = "/api.backoffice.service.v1.BackofficeVip/UpdateVipSetting"
	BackofficeVip_ListVipLevelConfigTemplates_FullMethodName  = "/api.backoffice.service.v1.BackofficeVip/ListVipLevelConfigTemplates"
	BackofficeVip_GetVipLevelConfigTemplate_FullMethodName    = "/api.backoffice.service.v1.BackofficeVip/GetVipLevelConfigTemplate"
	BackofficeVip_CreateVipLevelConfigTemplate_FullMethodName = "/api.backoffice.service.v1.BackofficeVip/CreateVipLevelConfigTemplate"
	BackofficeVip_UpdateVipLevelConfigTemplate_FullMethodName = "/api.backoffice.service.v1.BackofficeVip/UpdateVipLevelConfigTemplate"
	BackofficeVip_DeleteVipLevelConfigTemplate_FullMethodName = "/api.backoffice.service.v1.BackofficeVip/DeleteVipLevelConfigTemplate"
	BackofficeVip_ListVipMembers_FullMethodName               = "/api.backoffice.service.v1.BackofficeVip/ListVipMembers"
	BackofficeVip_GetVipMember_FullMethodName                 = "/api.backoffice.service.v1.BackofficeVip/GetVipMember"
	BackofficeVip_UpdateVipMember_FullMethodName              = "/api.backoffice.service.v1.BackofficeVip/UpdateVipMember"
	BackofficeVip_ListVipXpLedger_FullMethodName              = "/api.backoffice.service.v1.BackofficeVip/ListVipXpLedger"
	BackofficeVip_GetVipXpLedger_FullMethodName               = "/api.backoffice.service.v1.BackofficeVip/GetVipXpLedger"
	BackofficeVip_AddVipXpLedger_FullMethodName               = "/api.backoffice.service.v1.BackofficeVip/AddVipXpLedger"
	BackofficeVip_ListVipRewardLedger_FullMethodName          = "/api.backoffice.service.v1.BackofficeVip/ListVipRewardLedger"
	BackofficeVip_GetVipRewardLedger_FullMethodName           = "/api.backoffice.service.v1.BackofficeVip/GetVipRewardLedger"
	BackofficeVip_IssueVipReward_FullMethodName               = "/api.backoffice.service.v1.BackofficeVip/IssueVipReward"
	BackofficeVip_UpdateVipRewardStatus_FullMethodName        = "/api.backoffice.service.v1.BackofficeVip/UpdateVipRewardStatus"
	BackofficeVip_GetVipSettlementState_FullMethodName        = "/api.backoffice.service.v1.BackofficeVip/GetVipSettlementState"
	BackofficeVip_UpdateVipSettlementState_FullMethodName     = "/api.backoffice.service.v1.BackofficeVip/UpdateVipSettlementState"
	BackofficeVip_GetVipStatistics_FullMethodName             = "/api.backoffice.service.v1.BackofficeVip/GetVipStatistics"
	BackofficeVip_GetVipUserProgress_FullMethodName           = "/api.backoffice.service.v1.BackofficeVip/GetVipUserProgress"
	BackofficeVip_BatchUpdateVipLevels_FullMethodName         = "/api.backoffice.service.v1.BackofficeVip/BatchUpdateVipLevels"
	BackofficeVip_RecalculateVipLevels_FullMethodName         = "/api.backoffice.service.v1.BackofficeVip/RecalculateVipLevels"
)

// BackofficeVipClient is the client API for BackofficeVip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VIP系统服务
type BackofficeVipClient interface {
	// VIP配置开关管理
	GetVipConfig(ctx context.Context, in *GetVipConfigRequest, opts ...grpc.CallOption) (*GetVipConfigResponse, error)
	UpdateVipConfig(ctx context.Context, in *UpdateVipConfigRequest, opts ...grpc.CallOption) (*UpdateVipConfigResponse, error)
	// VIP设置管理
	GetVipSetting(ctx context.Context, in *GetVipSettingRequest, opts ...grpc.CallOption) (*GetVipSettingResponse, error)
	UpdateVipSetting(ctx context.Context, in *UpdateVipSettingRequest, opts ...grpc.CallOption) (*UpdateVipSettingResponse, error)
	ListVipLevelConfigTemplates(ctx context.Context, in *ListVipLevelConfigTemplatesRequest, opts ...grpc.CallOption) (*ListVipLevelConfigTemplatesResponse, error)
	GetVipLevelConfigTemplate(ctx context.Context, in *GetVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*GetVipLevelConfigTemplateResponse, error)
	CreateVipLevelConfigTemplate(ctx context.Context, in *CreateVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*CreateVipLevelConfigTemplateResponse, error)
	UpdateVipLevelConfigTemplate(ctx context.Context, in *UpdateVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*UpdateVipLevelConfigTemplateResponse, error)
	DeleteVipLevelConfigTemplate(ctx context.Context, in *DeleteVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*DeleteVipLevelConfigTemplateResponse, error)
	ListVipMembers(ctx context.Context, in *ListVipMembersRequest, opts ...grpc.CallOption) (*ListVipMembersResponse, error)
	GetVipMember(ctx context.Context, in *GetVipMemberRequest, opts ...grpc.CallOption) (*GetVipMemberResponse, error)
	UpdateVipMember(ctx context.Context, in *UpdateVipMemberRequest, opts ...grpc.CallOption) (*UpdateVipMemberResponse, error)
	ListVipXpLedger(ctx context.Context, in *ListVipXpLedgerRequest, opts ...grpc.CallOption) (*ListVipXpLedgerResponse, error)
	GetVipXpLedger(ctx context.Context, in *GetVipXpLedgerRequest, opts ...grpc.CallOption) (*GetVipXpLedgerResponse, error)
	AddVipXpLedger(ctx context.Context, in *AddVipXpLedgerRequest, opts ...grpc.CallOption) (*AddVipXpLedgerResponse, error)
	ListVipRewardLedger(ctx context.Context, in *ListVipRewardLedgerRequest, opts ...grpc.CallOption) (*ListVipRewardLedgerResponse, error)
	GetVipRewardLedger(ctx context.Context, in *GetVipRewardLedgerRequest, opts ...grpc.CallOption) (*GetVipRewardLedgerResponse, error)
	IssueVipReward(ctx context.Context, in *IssueVipRewardRequest, opts ...grpc.CallOption) (*IssueVipRewardResponse, error)
	UpdateVipRewardStatus(ctx context.Context, in *UpdateVipRewardStatusRequest, opts ...grpc.CallOption) (*UpdateVipRewardStatusResponse, error)
	GetVipSettlementState(ctx context.Context, in *GetVipSettlementStateRequest, opts ...grpc.CallOption) (*GetVipSettlementStateResponse, error)
	UpdateVipSettlementState(ctx context.Context, in *UpdateVipSettlementStateRequest, opts ...grpc.CallOption) (*UpdateVipSettlementStateResponse, error)
	GetVipStatistics(ctx context.Context, in *GetVipStatisticsRequest, opts ...grpc.CallOption) (*GetVipStatisticsResponse, error)
	GetVipUserProgress(ctx context.Context, in *GetVipUserProgressRequest, opts ...grpc.CallOption) (*GetVipUserProgressResponse, error)
	BatchUpdateVipLevels(ctx context.Context, in *BatchUpdateVipLevelsRequest, opts ...grpc.CallOption) (*BatchUpdateVipLevelsResponse, error)
	RecalculateVipLevels(ctx context.Context, in *RecalculateVipLevelsRequest, opts ...grpc.CallOption) (*RecalculateVipLevelsResponse, error)
}

type backofficeVipClient struct {
	cc grpc.ClientConnInterface
}

func NewBackofficeVipClient(cc grpc.ClientConnInterface) BackofficeVipClient {
	return &backofficeVipClient{cc}
}

func (c *backofficeVipClient) GetVipConfig(ctx context.Context, in *GetVipConfigRequest, opts ...grpc.CallOption) (*GetVipConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipConfigResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_GetVipConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) UpdateVipConfig(ctx context.Context, in *UpdateVipConfigRequest, opts ...grpc.CallOption) (*UpdateVipConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVipConfigResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_UpdateVipConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) GetVipSetting(ctx context.Context, in *GetVipSettingRequest, opts ...grpc.CallOption) (*GetVipSettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipSettingResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_GetVipSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) UpdateVipSetting(ctx context.Context, in *UpdateVipSettingRequest, opts ...grpc.CallOption) (*UpdateVipSettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVipSettingResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_UpdateVipSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) ListVipLevelConfigTemplates(ctx context.Context, in *ListVipLevelConfigTemplatesRequest, opts ...grpc.CallOption) (*ListVipLevelConfigTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVipLevelConfigTemplatesResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_ListVipLevelConfigTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) GetVipLevelConfigTemplate(ctx context.Context, in *GetVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*GetVipLevelConfigTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipLevelConfigTemplateResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_GetVipLevelConfigTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) CreateVipLevelConfigTemplate(ctx context.Context, in *CreateVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*CreateVipLevelConfigTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVipLevelConfigTemplateResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_CreateVipLevelConfigTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) UpdateVipLevelConfigTemplate(ctx context.Context, in *UpdateVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*UpdateVipLevelConfigTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVipLevelConfigTemplateResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_UpdateVipLevelConfigTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) DeleteVipLevelConfigTemplate(ctx context.Context, in *DeleteVipLevelConfigTemplateRequest, opts ...grpc.CallOption) (*DeleteVipLevelConfigTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVipLevelConfigTemplateResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_DeleteVipLevelConfigTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) ListVipMembers(ctx context.Context, in *ListVipMembersRequest, opts ...grpc.CallOption) (*ListVipMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVipMembersResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_ListVipMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) GetVipMember(ctx context.Context, in *GetVipMemberRequest, opts ...grpc.CallOption) (*GetVipMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipMemberResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_GetVipMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) UpdateVipMember(ctx context.Context, in *UpdateVipMemberRequest, opts ...grpc.CallOption) (*UpdateVipMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVipMemberResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_UpdateVipMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) ListVipXpLedger(ctx context.Context, in *ListVipXpLedgerRequest, opts ...grpc.CallOption) (*ListVipXpLedgerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVipXpLedgerResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_ListVipXpLedger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) GetVipXpLedger(ctx context.Context, in *GetVipXpLedgerRequest, opts ...grpc.CallOption) (*GetVipXpLedgerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipXpLedgerResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_GetVipXpLedger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) AddVipXpLedger(ctx context.Context, in *AddVipXpLedgerRequest, opts ...grpc.CallOption) (*AddVipXpLedgerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddVipXpLedgerResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_AddVipXpLedger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) ListVipRewardLedger(ctx context.Context, in *ListVipRewardLedgerRequest, opts ...grpc.CallOption) (*ListVipRewardLedgerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVipRewardLedgerResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_ListVipRewardLedger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) GetVipRewardLedger(ctx context.Context, in *GetVipRewardLedgerRequest, opts ...grpc.CallOption) (*GetVipRewardLedgerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipRewardLedgerResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_GetVipRewardLedger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) IssueVipReward(ctx context.Context, in *IssueVipRewardRequest, opts ...grpc.CallOption) (*IssueVipRewardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IssueVipRewardResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_IssueVipReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) UpdateVipRewardStatus(ctx context.Context, in *UpdateVipRewardStatusRequest, opts ...grpc.CallOption) (*UpdateVipRewardStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVipRewardStatusResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_UpdateVipRewardStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) GetVipSettlementState(ctx context.Context, in *GetVipSettlementStateRequest, opts ...grpc.CallOption) (*GetVipSettlementStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipSettlementStateResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_GetVipSettlementState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) UpdateVipSettlementState(ctx context.Context, in *UpdateVipSettlementStateRequest, opts ...grpc.CallOption) (*UpdateVipSettlementStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVipSettlementStateResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_UpdateVipSettlementState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) GetVipStatistics(ctx context.Context, in *GetVipStatisticsRequest, opts ...grpc.CallOption) (*GetVipStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipStatisticsResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_GetVipStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) GetVipUserProgress(ctx context.Context, in *GetVipUserProgressRequest, opts ...grpc.CallOption) (*GetVipUserProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVipUserProgressResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_GetVipUserProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) BatchUpdateVipLevels(ctx context.Context, in *BatchUpdateVipLevelsRequest, opts ...grpc.CallOption) (*BatchUpdateVipLevelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchUpdateVipLevelsResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_BatchUpdateVipLevels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeVipClient) RecalculateVipLevels(ctx context.Context, in *RecalculateVipLevelsRequest, opts ...grpc.CallOption) (*RecalculateVipLevelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecalculateVipLevelsResponse)
	err := c.cc.Invoke(ctx, BackofficeVip_RecalculateVipLevels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackofficeVipServer is the server API for BackofficeVip service.
// All implementations must embed UnimplementedBackofficeVipServer
// for forward compatibility.
//
// VIP系统服务
type BackofficeVipServer interface {
	// VIP配置开关管理
	GetVipConfig(context.Context, *GetVipConfigRequest) (*GetVipConfigResponse, error)
	UpdateVipConfig(context.Context, *UpdateVipConfigRequest) (*UpdateVipConfigResponse, error)
	// VIP设置管理
	GetVipSetting(context.Context, *GetVipSettingRequest) (*GetVipSettingResponse, error)
	UpdateVipSetting(context.Context, *UpdateVipSettingRequest) (*UpdateVipSettingResponse, error)
	ListVipLevelConfigTemplates(context.Context, *ListVipLevelConfigTemplatesRequest) (*ListVipLevelConfigTemplatesResponse, error)
	GetVipLevelConfigTemplate(context.Context, *GetVipLevelConfigTemplateRequest) (*GetVipLevelConfigTemplateResponse, error)
	CreateVipLevelConfigTemplate(context.Context, *CreateVipLevelConfigTemplateRequest) (*CreateVipLevelConfigTemplateResponse, error)
	UpdateVipLevelConfigTemplate(context.Context, *UpdateVipLevelConfigTemplateRequest) (*UpdateVipLevelConfigTemplateResponse, error)
	DeleteVipLevelConfigTemplate(context.Context, *DeleteVipLevelConfigTemplateRequest) (*DeleteVipLevelConfigTemplateResponse, error)
	ListVipMembers(context.Context, *ListVipMembersRequest) (*ListVipMembersResponse, error)
	GetVipMember(context.Context, *GetVipMemberRequest) (*GetVipMemberResponse, error)
	UpdateVipMember(context.Context, *UpdateVipMemberRequest) (*UpdateVipMemberResponse, error)
	ListVipXpLedger(context.Context, *ListVipXpLedgerRequest) (*ListVipXpLedgerResponse, error)
	GetVipXpLedger(context.Context, *GetVipXpLedgerRequest) (*GetVipXpLedgerResponse, error)
	AddVipXpLedger(context.Context, *AddVipXpLedgerRequest) (*AddVipXpLedgerResponse, error)
	ListVipRewardLedger(context.Context, *ListVipRewardLedgerRequest) (*ListVipRewardLedgerResponse, error)
	GetVipRewardLedger(context.Context, *GetVipRewardLedgerRequest) (*GetVipRewardLedgerResponse, error)
	IssueVipReward(context.Context, *IssueVipRewardRequest) (*IssueVipRewardResponse, error)
	UpdateVipRewardStatus(context.Context, *UpdateVipRewardStatusRequest) (*UpdateVipRewardStatusResponse, error)
	GetVipSettlementState(context.Context, *GetVipSettlementStateRequest) (*GetVipSettlementStateResponse, error)
	UpdateVipSettlementState(context.Context, *UpdateVipSettlementStateRequest) (*UpdateVipSettlementStateResponse, error)
	GetVipStatistics(context.Context, *GetVipStatisticsRequest) (*GetVipStatisticsResponse, error)
	GetVipUserProgress(context.Context, *GetVipUserProgressRequest) (*GetVipUserProgressResponse, error)
	BatchUpdateVipLevels(context.Context, *BatchUpdateVipLevelsRequest) (*BatchUpdateVipLevelsResponse, error)
	RecalculateVipLevels(context.Context, *RecalculateVipLevelsRequest) (*RecalculateVipLevelsResponse, error)
	mustEmbedUnimplementedBackofficeVipServer()
}

// UnimplementedBackofficeVipServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackofficeVipServer struct{}

func (UnimplementedBackofficeVipServer) GetVipConfig(context.Context, *GetVipConfigRequest) (*GetVipConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipConfig not implemented")
}
func (UnimplementedBackofficeVipServer) UpdateVipConfig(context.Context, *UpdateVipConfigRequest) (*UpdateVipConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVipConfig not implemented")
}
func (UnimplementedBackofficeVipServer) GetVipSetting(context.Context, *GetVipSettingRequest) (*GetVipSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipSetting not implemented")
}
func (UnimplementedBackofficeVipServer) UpdateVipSetting(context.Context, *UpdateVipSettingRequest) (*UpdateVipSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVipSetting not implemented")
}
func (UnimplementedBackofficeVipServer) ListVipLevelConfigTemplates(context.Context, *ListVipLevelConfigTemplatesRequest) (*ListVipLevelConfigTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVipLevelConfigTemplates not implemented")
}
func (UnimplementedBackofficeVipServer) GetVipLevelConfigTemplate(context.Context, *GetVipLevelConfigTemplateRequest) (*GetVipLevelConfigTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipLevelConfigTemplate not implemented")
}
func (UnimplementedBackofficeVipServer) CreateVipLevelConfigTemplate(context.Context, *CreateVipLevelConfigTemplateRequest) (*CreateVipLevelConfigTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVipLevelConfigTemplate not implemented")
}
func (UnimplementedBackofficeVipServer) UpdateVipLevelConfigTemplate(context.Context, *UpdateVipLevelConfigTemplateRequest) (*UpdateVipLevelConfigTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVipLevelConfigTemplate not implemented")
}
func (UnimplementedBackofficeVipServer) DeleteVipLevelConfigTemplate(context.Context, *DeleteVipLevelConfigTemplateRequest) (*DeleteVipLevelConfigTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVipLevelConfigTemplate not implemented")
}
func (UnimplementedBackofficeVipServer) ListVipMembers(context.Context, *ListVipMembersRequest) (*ListVipMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVipMembers not implemented")
}
func (UnimplementedBackofficeVipServer) GetVipMember(context.Context, *GetVipMemberRequest) (*GetVipMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipMember not implemented")
}
func (UnimplementedBackofficeVipServer) UpdateVipMember(context.Context, *UpdateVipMemberRequest) (*UpdateVipMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVipMember not implemented")
}
func (UnimplementedBackofficeVipServer) ListVipXpLedger(context.Context, *ListVipXpLedgerRequest) (*ListVipXpLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVipXpLedger not implemented")
}
func (UnimplementedBackofficeVipServer) GetVipXpLedger(context.Context, *GetVipXpLedgerRequest) (*GetVipXpLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipXpLedger not implemented")
}
func (UnimplementedBackofficeVipServer) AddVipXpLedger(context.Context, *AddVipXpLedgerRequest) (*AddVipXpLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVipXpLedger not implemented")
}
func (UnimplementedBackofficeVipServer) ListVipRewardLedger(context.Context, *ListVipRewardLedgerRequest) (*ListVipRewardLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVipRewardLedger not implemented")
}
func (UnimplementedBackofficeVipServer) GetVipRewardLedger(context.Context, *GetVipRewardLedgerRequest) (*GetVipRewardLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipRewardLedger not implemented")
}
func (UnimplementedBackofficeVipServer) IssueVipReward(context.Context, *IssueVipRewardRequest) (*IssueVipRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueVipReward not implemented")
}
func (UnimplementedBackofficeVipServer) UpdateVipRewardStatus(context.Context, *UpdateVipRewardStatusRequest) (*UpdateVipRewardStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVipRewardStatus not implemented")
}
func (UnimplementedBackofficeVipServer) GetVipSettlementState(context.Context, *GetVipSettlementStateRequest) (*GetVipSettlementStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipSettlementState not implemented")
}
func (UnimplementedBackofficeVipServer) UpdateVipSettlementState(context.Context, *UpdateVipSettlementStateRequest) (*UpdateVipSettlementStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVipSettlementState not implemented")
}
func (UnimplementedBackofficeVipServer) GetVipStatistics(context.Context, *GetVipStatisticsRequest) (*GetVipStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipStatistics not implemented")
}
func (UnimplementedBackofficeVipServer) GetVipUserProgress(context.Context, *GetVipUserProgressRequest) (*GetVipUserProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVipUserProgress not implemented")
}
func (UnimplementedBackofficeVipServer) BatchUpdateVipLevels(context.Context, *BatchUpdateVipLevelsRequest) (*BatchUpdateVipLevelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateVipLevels not implemented")
}
func (UnimplementedBackofficeVipServer) RecalculateVipLevels(context.Context, *RecalculateVipLevelsRequest) (*RecalculateVipLevelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecalculateVipLevels not implemented")
}
func (UnimplementedBackofficeVipServer) mustEmbedUnimplementedBackofficeVipServer() {}
func (UnimplementedBackofficeVipServer) testEmbeddedByValue()                       {}

// UnsafeBackofficeVipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackofficeVipServer will
// result in compilation errors.
type UnsafeBackofficeVipServer interface {
	mustEmbedUnimplementedBackofficeVipServer()
}

func RegisterBackofficeVipServer(s grpc.ServiceRegistrar, srv BackofficeVipServer) {
	// If the following call pancis, it indicates UnimplementedBackofficeVipServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackofficeVip_ServiceDesc, srv)
}

func _BackofficeVip_GetVipConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).GetVipConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_GetVipConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).GetVipConfig(ctx, req.(*GetVipConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_UpdateVipConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVipConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).UpdateVipConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_UpdateVipConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).UpdateVipConfig(ctx, req.(*UpdateVipConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_GetVipSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).GetVipSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_GetVipSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).GetVipSetting(ctx, req.(*GetVipSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_UpdateVipSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVipSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).UpdateVipSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_UpdateVipSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).UpdateVipSetting(ctx, req.(*UpdateVipSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_ListVipLevelConfigTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVipLevelConfigTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).ListVipLevelConfigTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_ListVipLevelConfigTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).ListVipLevelConfigTemplates(ctx, req.(*ListVipLevelConfigTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_GetVipLevelConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipLevelConfigTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).GetVipLevelConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_GetVipLevelConfigTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).GetVipLevelConfigTemplate(ctx, req.(*GetVipLevelConfigTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_CreateVipLevelConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVipLevelConfigTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).CreateVipLevelConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_CreateVipLevelConfigTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).CreateVipLevelConfigTemplate(ctx, req.(*CreateVipLevelConfigTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_UpdateVipLevelConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVipLevelConfigTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).UpdateVipLevelConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_UpdateVipLevelConfigTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).UpdateVipLevelConfigTemplate(ctx, req.(*UpdateVipLevelConfigTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_DeleteVipLevelConfigTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVipLevelConfigTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).DeleteVipLevelConfigTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_DeleteVipLevelConfigTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).DeleteVipLevelConfigTemplate(ctx, req.(*DeleteVipLevelConfigTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_ListVipMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVipMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).ListVipMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_ListVipMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).ListVipMembers(ctx, req.(*ListVipMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_GetVipMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).GetVipMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_GetVipMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).GetVipMember(ctx, req.(*GetVipMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_UpdateVipMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVipMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).UpdateVipMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_UpdateVipMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).UpdateVipMember(ctx, req.(*UpdateVipMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_ListVipXpLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVipXpLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).ListVipXpLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_ListVipXpLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).ListVipXpLedger(ctx, req.(*ListVipXpLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_GetVipXpLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipXpLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).GetVipXpLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_GetVipXpLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).GetVipXpLedger(ctx, req.(*GetVipXpLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_AddVipXpLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVipXpLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).AddVipXpLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_AddVipXpLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).AddVipXpLedger(ctx, req.(*AddVipXpLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_ListVipRewardLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVipRewardLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).ListVipRewardLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_ListVipRewardLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).ListVipRewardLedger(ctx, req.(*ListVipRewardLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_GetVipRewardLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipRewardLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).GetVipRewardLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_GetVipRewardLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).GetVipRewardLedger(ctx, req.(*GetVipRewardLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_IssueVipReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueVipRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).IssueVipReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_IssueVipReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).IssueVipReward(ctx, req.(*IssueVipRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_UpdateVipRewardStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVipRewardStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).UpdateVipRewardStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_UpdateVipRewardStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).UpdateVipRewardStatus(ctx, req.(*UpdateVipRewardStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_GetVipSettlementState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipSettlementStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).GetVipSettlementState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_GetVipSettlementState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).GetVipSettlementState(ctx, req.(*GetVipSettlementStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_UpdateVipSettlementState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVipSettlementStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).UpdateVipSettlementState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_UpdateVipSettlementState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).UpdateVipSettlementState(ctx, req.(*UpdateVipSettlementStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_GetVipStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).GetVipStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_GetVipStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).GetVipStatistics(ctx, req.(*GetVipStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_GetVipUserProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVipUserProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).GetVipUserProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_GetVipUserProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).GetVipUserProgress(ctx, req.(*GetVipUserProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_BatchUpdateVipLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateVipLevelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).BatchUpdateVipLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_BatchUpdateVipLevels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).BatchUpdateVipLevels(ctx, req.(*BatchUpdateVipLevelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeVip_RecalculateVipLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecalculateVipLevelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeVipServer).RecalculateVipLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeVip_RecalculateVipLevels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeVipServer).RecalculateVipLevels(ctx, req.(*RecalculateVipLevelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackofficeVip_ServiceDesc is the grpc.ServiceDesc for BackofficeVip service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackofficeVip_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.BackofficeVip",
	HandlerType: (*BackofficeVipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVipConfig",
			Handler:    _BackofficeVip_GetVipConfig_Handler,
		},
		{
			MethodName: "UpdateVipConfig",
			Handler:    _BackofficeVip_UpdateVipConfig_Handler,
		},
		{
			MethodName: "GetVipSetting",
			Handler:    _BackofficeVip_GetVipSetting_Handler,
		},
		{
			MethodName: "UpdateVipSetting",
			Handler:    _BackofficeVip_UpdateVipSetting_Handler,
		},
		{
			MethodName: "ListVipLevelConfigTemplates",
			Handler:    _BackofficeVip_ListVipLevelConfigTemplates_Handler,
		},
		{
			MethodName: "GetVipLevelConfigTemplate",
			Handler:    _BackofficeVip_GetVipLevelConfigTemplate_Handler,
		},
		{
			MethodName: "CreateVipLevelConfigTemplate",
			Handler:    _BackofficeVip_CreateVipLevelConfigTemplate_Handler,
		},
		{
			MethodName: "UpdateVipLevelConfigTemplate",
			Handler:    _BackofficeVip_UpdateVipLevelConfigTemplate_Handler,
		},
		{
			MethodName: "DeleteVipLevelConfigTemplate",
			Handler:    _BackofficeVip_DeleteVipLevelConfigTemplate_Handler,
		},
		{
			MethodName: "ListVipMembers",
			Handler:    _BackofficeVip_ListVipMembers_Handler,
		},
		{
			MethodName: "GetVipMember",
			Handler:    _BackofficeVip_GetVipMember_Handler,
		},
		{
			MethodName: "UpdateVipMember",
			Handler:    _BackofficeVip_UpdateVipMember_Handler,
		},
		{
			MethodName: "ListVipXpLedger",
			Handler:    _BackofficeVip_ListVipXpLedger_Handler,
		},
		{
			MethodName: "GetVipXpLedger",
			Handler:    _BackofficeVip_GetVipXpLedger_Handler,
		},
		{
			MethodName: "AddVipXpLedger",
			Handler:    _BackofficeVip_AddVipXpLedger_Handler,
		},
		{
			MethodName: "ListVipRewardLedger",
			Handler:    _BackofficeVip_ListVipRewardLedger_Handler,
		},
		{
			MethodName: "GetVipRewardLedger",
			Handler:    _BackofficeVip_GetVipRewardLedger_Handler,
		},
		{
			MethodName: "IssueVipReward",
			Handler:    _BackofficeVip_IssueVipReward_Handler,
		},
		{
			MethodName: "UpdateVipRewardStatus",
			Handler:    _BackofficeVip_UpdateVipRewardStatus_Handler,
		},
		{
			MethodName: "GetVipSettlementState",
			Handler:    _BackofficeVip_GetVipSettlementState_Handler,
		},
		{
			MethodName: "UpdateVipSettlementState",
			Handler:    _BackofficeVip_UpdateVipSettlementState_Handler,
		},
		{
			MethodName: "GetVipStatistics",
			Handler:    _BackofficeVip_GetVipStatistics_Handler,
		},
		{
			MethodName: "GetVipUserProgress",
			Handler:    _BackofficeVip_GetVipUserProgress_Handler,
		},
		{
			MethodName: "BatchUpdateVipLevels",
			Handler:    _BackofficeVip_BatchUpdateVipLevels_Handler,
		},
		{
			MethodName: "RecalculateVipLevels",
			Handler:    _BackofficeVip_RecalculateVipLevels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_vip.proto",
}
