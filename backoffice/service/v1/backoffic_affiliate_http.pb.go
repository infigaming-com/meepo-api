// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffic_affiliate.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/infigaming-com/meepo-api/affiliate/service/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficeAffiliateCreateCommissionPlan = "/api.backoffice.service.v1.BackofficeAffiliate/CreateCommissionPlan"
const OperationBackofficeAffiliateDeleteCommissionPlan = "/api.backoffice.service.v1.BackofficeAffiliate/DeleteCommissionPlan"
const OperationBackofficeAffiliateGetCommissionPlan = "/api.backoffice.service.v1.BackofficeAffiliate/GetCommissionPlan"
const OperationBackofficeAffiliateListCommissionPlans = "/api.backoffice.service.v1.BackofficeAffiliate/ListCommissionPlans"
const OperationBackofficeAffiliateUpdateCommissionPlan = "/api.backoffice.service.v1.BackofficeAffiliate/UpdateCommissionPlan"

type BackofficeAffiliateHTTPServer interface {
	CreateCommissionPlan(context.Context, *CreateCommissionPlanRequest) (*v1.CreateCommissionPlanResponse, error)
	DeleteCommissionPlan(context.Context, *DeleteCommissionPlanRequest) (*v1.DeleteCommissionPlanResponse, error)
	GetCommissionPlan(context.Context, *GetCommissionPlanRequest) (*v1.GetCommissionPlanResponse, error)
	ListCommissionPlans(context.Context, *ListCommissionPlansRequest) (*v1.ListCommissionPlansResponse, error)
	UpdateCommissionPlan(context.Context, *UpdateCommissionPlanRequest) (*v1.UpdateCommissionPlanResponse, error)
}

func RegisterBackofficeAffiliateHTTPServer(s *http.Server, srv BackofficeAffiliateHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/affiliate/commission/plan/create", _BackofficeAffiliate_CreateCommissionPlan0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/affiliate/commission/plan/update", _BackofficeAffiliate_UpdateCommissionPlan0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/affiliate/commission/plan/get", _BackofficeAffiliate_GetCommissionPlan0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/affiliate/commission/plan/list", _BackofficeAffiliate_ListCommissionPlans0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/affiliate/commission/plan/delete", _BackofficeAffiliate_DeleteCommissionPlan0_HTTP_Handler(srv))
}

func _BackofficeAffiliate_CreateCommissionPlan0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCommissionPlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateCreateCommissionPlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCommissionPlan(ctx, req.(*CreateCommissionPlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.CreateCommissionPlanResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAffiliate_UpdateCommissionPlan0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCommissionPlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateUpdateCommissionPlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCommissionPlan(ctx, req.(*UpdateCommissionPlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UpdateCommissionPlanResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAffiliate_GetCommissionPlan0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCommissionPlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateGetCommissionPlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCommissionPlan(ctx, req.(*GetCommissionPlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetCommissionPlanResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAffiliate_ListCommissionPlans0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCommissionPlansRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateListCommissionPlans)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCommissionPlans(ctx, req.(*ListCommissionPlansRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListCommissionPlansResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAffiliate_DeleteCommissionPlan0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCommissionPlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateDeleteCommissionPlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCommissionPlan(ctx, req.(*DeleteCommissionPlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DeleteCommissionPlanResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficeAffiliateHTTPClient interface {
	CreateCommissionPlan(ctx context.Context, req *CreateCommissionPlanRequest, opts ...http.CallOption) (rsp *v1.CreateCommissionPlanResponse, err error)
	DeleteCommissionPlan(ctx context.Context, req *DeleteCommissionPlanRequest, opts ...http.CallOption) (rsp *v1.DeleteCommissionPlanResponse, err error)
	GetCommissionPlan(ctx context.Context, req *GetCommissionPlanRequest, opts ...http.CallOption) (rsp *v1.GetCommissionPlanResponse, err error)
	ListCommissionPlans(ctx context.Context, req *ListCommissionPlansRequest, opts ...http.CallOption) (rsp *v1.ListCommissionPlansResponse, err error)
	UpdateCommissionPlan(ctx context.Context, req *UpdateCommissionPlanRequest, opts ...http.CallOption) (rsp *v1.UpdateCommissionPlanResponse, err error)
}

type BackofficeAffiliateHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficeAffiliateHTTPClient(client *http.Client) BackofficeAffiliateHTTPClient {
	return &BackofficeAffiliateHTTPClientImpl{client}
}

func (c *BackofficeAffiliateHTTPClientImpl) CreateCommissionPlan(ctx context.Context, in *CreateCommissionPlanRequest, opts ...http.CallOption) (*v1.CreateCommissionPlanResponse, error) {
	var out v1.CreateCommissionPlanResponse
	pattern := "/v1/backoffice/affiliate/commission/plan/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateCreateCommissionPlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAffiliateHTTPClientImpl) DeleteCommissionPlan(ctx context.Context, in *DeleteCommissionPlanRequest, opts ...http.CallOption) (*v1.DeleteCommissionPlanResponse, error) {
	var out v1.DeleteCommissionPlanResponse
	pattern := "/v1/backoffice/affiliate/commission/plan/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateDeleteCommissionPlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAffiliateHTTPClientImpl) GetCommissionPlan(ctx context.Context, in *GetCommissionPlanRequest, opts ...http.CallOption) (*v1.GetCommissionPlanResponse, error) {
	var out v1.GetCommissionPlanResponse
	pattern := "/v1/backoffice/affiliate/commission/plan/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateGetCommissionPlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAffiliateHTTPClientImpl) ListCommissionPlans(ctx context.Context, in *ListCommissionPlansRequest, opts ...http.CallOption) (*v1.ListCommissionPlansResponse, error) {
	var out v1.ListCommissionPlansResponse
	pattern := "/v1/backoffice/affiliate/commission/plan/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateListCommissionPlans))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAffiliateHTTPClientImpl) UpdateCommissionPlan(ctx context.Context, in *UpdateCommissionPlanRequest, opts ...http.CallOption) (*v1.UpdateCommissionPlanResponse, error) {
	var out v1.UpdateCommissionPlanResponse
	pattern := "/v1/backoffice/affiliate/commission/plan/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateUpdateCommissionPlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
