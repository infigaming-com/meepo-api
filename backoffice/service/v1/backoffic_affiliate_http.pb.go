// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffic_affiliate.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/infigaming-com/meepo-api/affiliate/service/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficeAffiliateCreateAffiliate = "/api.backoffice.service.v1.BackofficeAffiliate/CreateAffiliate"
const OperationBackofficeAffiliateCreateCampaign = "/api.backoffice.service.v1.BackofficeAffiliate/CreateCampaign"
const OperationBackofficeAffiliateCreateCommissionPlan = "/api.backoffice.service.v1.BackofficeAffiliate/CreateCommissionPlan"
const OperationBackofficeAffiliateDeleteAffiliate = "/api.backoffice.service.v1.BackofficeAffiliate/DeleteAffiliate"
const OperationBackofficeAffiliateDeleteCampaign = "/api.backoffice.service.v1.BackofficeAffiliate/DeleteCampaign"
const OperationBackofficeAffiliateDeleteCommissionPlan = "/api.backoffice.service.v1.BackofficeAffiliate/DeleteCommissionPlan"
const OperationBackofficeAffiliateGetAffiliate = "/api.backoffice.service.v1.BackofficeAffiliate/GetAffiliate"
const OperationBackofficeAffiliateGetCommissionPlan = "/api.backoffice.service.v1.BackofficeAffiliate/GetCommissionPlan"
const OperationBackofficeAffiliateListAffiliateCampaigns = "/api.backoffice.service.v1.BackofficeAffiliate/ListAffiliateCampaigns"
const OperationBackofficeAffiliateListAffiliates = "/api.backoffice.service.v1.BackofficeAffiliate/ListAffiliates"
const OperationBackofficeAffiliateListAllCommissionPlans = "/api.backoffice.service.v1.BackofficeAffiliate/ListAllCommissionPlans"
const OperationBackofficeAffiliateListCampaigns = "/api.backoffice.service.v1.BackofficeAffiliate/ListCampaigns"
const OperationBackofficeAffiliateListCommissionPlans = "/api.backoffice.service.v1.BackofficeAffiliate/ListCommissionPlans"
const OperationBackofficeAffiliateUpdateAffiliate = "/api.backoffice.service.v1.BackofficeAffiliate/UpdateAffiliate"
const OperationBackofficeAffiliateUpdateCampaign = "/api.backoffice.service.v1.BackofficeAffiliate/UpdateCampaign"
const OperationBackofficeAffiliateUpdateCommissionPlan = "/api.backoffice.service.v1.BackofficeAffiliate/UpdateCommissionPlan"

type BackofficeAffiliateHTTPServer interface {
	CreateAffiliate(context.Context, *CreateAffiliateRequest) (*v1.CreateAffiliateResponse, error)
	CreateCampaign(context.Context, *CreateCampaignRequest) (*v1.CreateCampaignResponse, error)
	CreateCommissionPlan(context.Context, *CreateCommissionPlanRequest) (*v1.CreateCommissionPlanResponse, error)
	DeleteAffiliate(context.Context, *DeleteAffiliateRequest) (*v1.DeleteAffiliateResponse, error)
	DeleteCampaign(context.Context, *DeleteCampaignRequest) (*v1.DeleteCampaignResponse, error)
	DeleteCommissionPlan(context.Context, *DeleteCommissionPlanRequest) (*v1.DeleteCommissionPlanResponse, error)
	GetAffiliate(context.Context, *GetAffiliateRequest) (*v1.GetAffiliateResponse, error)
	GetCommissionPlan(context.Context, *GetCommissionPlanRequest) (*v1.GetCommissionPlanResponse, error)
	ListAffiliateCampaigns(context.Context, *ListAffiliateCampaignsRequest) (*v1.ListCampaignsResponse, error)
	ListAffiliates(context.Context, *ListAffiliatesRequest) (*v1.ListAffiliatesResponse, error)
	ListAllCommissionPlans(context.Context, *ListAllCommissionPlansRequest) (*v1.ListAllCommissionPlansResponse, error)
	ListCampaigns(context.Context, *ListCampaignsRequest) (*v1.ListCampaignsResponse, error)
	ListCommissionPlans(context.Context, *ListCommissionPlansRequest) (*v1.ListCommissionPlansResponse, error)
	UpdateAffiliate(context.Context, *UpdateAffiliateRequest) (*v1.UpdateAffiliateResponse, error)
	UpdateCampaign(context.Context, *UpdateCampaignRequest) (*v1.UpdateCampaignResponse, error)
	UpdateCommissionPlan(context.Context, *UpdateCommissionPlanRequest) (*v1.UpdateCommissionPlanResponse, error)
}

func RegisterBackofficeAffiliateHTTPServer(s *http.Server, srv BackofficeAffiliateHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/affiliate/commission/plan/create", _BackofficeAffiliate_CreateCommissionPlan0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/affiliate/commission/plan/update", _BackofficeAffiliate_UpdateCommissionPlan0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/affiliate/commission/plan/get", _BackofficeAffiliate_GetCommissionPlan0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/affiliate/commission/plan/list", _BackofficeAffiliate_ListCommissionPlans0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/affiliate/commission/plan/delete", _BackofficeAffiliate_DeleteCommissionPlan0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/affiliate/commission/plan/list/all", _BackofficeAffiliate_ListAllCommissionPlans0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/affiliate/create", _BackofficeAffiliate_CreateAffiliate0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/affiliate/update", _BackofficeAffiliate_UpdateAffiliate0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/affiliate/get", _BackofficeAffiliate_GetAffiliate0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/affiliate/list", _BackofficeAffiliate_ListAffiliates0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/affiliate/delete", _BackofficeAffiliate_DeleteAffiliate0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/affiliate/campaign/create", _BackofficeAffiliate_CreateCampaign0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/affiliate/campaign/update", _BackofficeAffiliate_UpdateCampaign0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/affiliate/campaign/list", _BackofficeAffiliate_ListCampaigns0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/affiliate/campaign/list/by_affiliate", _BackofficeAffiliate_ListAffiliateCampaigns0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/affiliate/campaign/delete", _BackofficeAffiliate_DeleteCampaign0_HTTP_Handler(srv))
}

func _BackofficeAffiliate_CreateCommissionPlan0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCommissionPlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateCreateCommissionPlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCommissionPlan(ctx, req.(*CreateCommissionPlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.CreateCommissionPlanResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAffiliate_UpdateCommissionPlan0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCommissionPlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateUpdateCommissionPlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCommissionPlan(ctx, req.(*UpdateCommissionPlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UpdateCommissionPlanResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAffiliate_GetCommissionPlan0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCommissionPlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateGetCommissionPlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCommissionPlan(ctx, req.(*GetCommissionPlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetCommissionPlanResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAffiliate_ListCommissionPlans0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCommissionPlansRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateListCommissionPlans)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCommissionPlans(ctx, req.(*ListCommissionPlansRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListCommissionPlansResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAffiliate_DeleteCommissionPlan0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCommissionPlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateDeleteCommissionPlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCommissionPlan(ctx, req.(*DeleteCommissionPlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DeleteCommissionPlanResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAffiliate_ListAllCommissionPlans0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAllCommissionPlansRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateListAllCommissionPlans)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAllCommissionPlans(ctx, req.(*ListAllCommissionPlansRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListAllCommissionPlansResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAffiliate_CreateAffiliate0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAffiliateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateCreateAffiliate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAffiliate(ctx, req.(*CreateAffiliateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.CreateAffiliateResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAffiliate_UpdateAffiliate0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAffiliateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateUpdateAffiliate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAffiliate(ctx, req.(*UpdateAffiliateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UpdateAffiliateResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAffiliate_GetAffiliate0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAffiliateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateGetAffiliate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAffiliate(ctx, req.(*GetAffiliateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetAffiliateResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAffiliate_ListAffiliates0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAffiliatesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateListAffiliates)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAffiliates(ctx, req.(*ListAffiliatesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListAffiliatesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAffiliate_DeleteAffiliate0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAffiliateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateDeleteAffiliate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAffiliate(ctx, req.(*DeleteAffiliateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DeleteAffiliateResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAffiliate_CreateCampaign0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCampaignRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateCreateCampaign)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCampaign(ctx, req.(*CreateCampaignRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.CreateCampaignResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAffiliate_UpdateCampaign0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCampaignRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateUpdateCampaign)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCampaign(ctx, req.(*UpdateCampaignRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UpdateCampaignResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAffiliate_ListCampaigns0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCampaignsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateListCampaigns)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCampaigns(ctx, req.(*ListCampaignsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListCampaignsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAffiliate_ListAffiliateCampaigns0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAffiliateCampaignsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateListAffiliateCampaigns)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAffiliateCampaigns(ctx, req.(*ListAffiliateCampaignsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListCampaignsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAffiliate_DeleteCampaign0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCampaignRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateDeleteCampaign)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCampaign(ctx, req.(*DeleteCampaignRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DeleteCampaignResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficeAffiliateHTTPClient interface {
	CreateAffiliate(ctx context.Context, req *CreateAffiliateRequest, opts ...http.CallOption) (rsp *v1.CreateAffiliateResponse, err error)
	CreateCampaign(ctx context.Context, req *CreateCampaignRequest, opts ...http.CallOption) (rsp *v1.CreateCampaignResponse, err error)
	CreateCommissionPlan(ctx context.Context, req *CreateCommissionPlanRequest, opts ...http.CallOption) (rsp *v1.CreateCommissionPlanResponse, err error)
	DeleteAffiliate(ctx context.Context, req *DeleteAffiliateRequest, opts ...http.CallOption) (rsp *v1.DeleteAffiliateResponse, err error)
	DeleteCampaign(ctx context.Context, req *DeleteCampaignRequest, opts ...http.CallOption) (rsp *v1.DeleteCampaignResponse, err error)
	DeleteCommissionPlan(ctx context.Context, req *DeleteCommissionPlanRequest, opts ...http.CallOption) (rsp *v1.DeleteCommissionPlanResponse, err error)
	GetAffiliate(ctx context.Context, req *GetAffiliateRequest, opts ...http.CallOption) (rsp *v1.GetAffiliateResponse, err error)
	GetCommissionPlan(ctx context.Context, req *GetCommissionPlanRequest, opts ...http.CallOption) (rsp *v1.GetCommissionPlanResponse, err error)
	ListAffiliateCampaigns(ctx context.Context, req *ListAffiliateCampaignsRequest, opts ...http.CallOption) (rsp *v1.ListCampaignsResponse, err error)
	ListAffiliates(ctx context.Context, req *ListAffiliatesRequest, opts ...http.CallOption) (rsp *v1.ListAffiliatesResponse, err error)
	ListAllCommissionPlans(ctx context.Context, req *ListAllCommissionPlansRequest, opts ...http.CallOption) (rsp *v1.ListAllCommissionPlansResponse, err error)
	ListCampaigns(ctx context.Context, req *ListCampaignsRequest, opts ...http.CallOption) (rsp *v1.ListCampaignsResponse, err error)
	ListCommissionPlans(ctx context.Context, req *ListCommissionPlansRequest, opts ...http.CallOption) (rsp *v1.ListCommissionPlansResponse, err error)
	UpdateAffiliate(ctx context.Context, req *UpdateAffiliateRequest, opts ...http.CallOption) (rsp *v1.UpdateAffiliateResponse, err error)
	UpdateCampaign(ctx context.Context, req *UpdateCampaignRequest, opts ...http.CallOption) (rsp *v1.UpdateCampaignResponse, err error)
	UpdateCommissionPlan(ctx context.Context, req *UpdateCommissionPlanRequest, opts ...http.CallOption) (rsp *v1.UpdateCommissionPlanResponse, err error)
}

type BackofficeAffiliateHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficeAffiliateHTTPClient(client *http.Client) BackofficeAffiliateHTTPClient {
	return &BackofficeAffiliateHTTPClientImpl{client}
}

func (c *BackofficeAffiliateHTTPClientImpl) CreateAffiliate(ctx context.Context, in *CreateAffiliateRequest, opts ...http.CallOption) (*v1.CreateAffiliateResponse, error) {
	var out v1.CreateAffiliateResponse
	pattern := "/v1/backoffice/affiliate/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateCreateAffiliate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAffiliateHTTPClientImpl) CreateCampaign(ctx context.Context, in *CreateCampaignRequest, opts ...http.CallOption) (*v1.CreateCampaignResponse, error) {
	var out v1.CreateCampaignResponse
	pattern := "/v1/backoffice/affiliate/campaign/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateCreateCampaign))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAffiliateHTTPClientImpl) CreateCommissionPlan(ctx context.Context, in *CreateCommissionPlanRequest, opts ...http.CallOption) (*v1.CreateCommissionPlanResponse, error) {
	var out v1.CreateCommissionPlanResponse
	pattern := "/v1/backoffice/affiliate/commission/plan/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateCreateCommissionPlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAffiliateHTTPClientImpl) DeleteAffiliate(ctx context.Context, in *DeleteAffiliateRequest, opts ...http.CallOption) (*v1.DeleteAffiliateResponse, error) {
	var out v1.DeleteAffiliateResponse
	pattern := "/v1/backoffice/affiliate/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateDeleteAffiliate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAffiliateHTTPClientImpl) DeleteCampaign(ctx context.Context, in *DeleteCampaignRequest, opts ...http.CallOption) (*v1.DeleteCampaignResponse, error) {
	var out v1.DeleteCampaignResponse
	pattern := "/v1/backoffice/affiliate/campaign/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateDeleteCampaign))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAffiliateHTTPClientImpl) DeleteCommissionPlan(ctx context.Context, in *DeleteCommissionPlanRequest, opts ...http.CallOption) (*v1.DeleteCommissionPlanResponse, error) {
	var out v1.DeleteCommissionPlanResponse
	pattern := "/v1/backoffice/affiliate/commission/plan/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateDeleteCommissionPlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAffiliateHTTPClientImpl) GetAffiliate(ctx context.Context, in *GetAffiliateRequest, opts ...http.CallOption) (*v1.GetAffiliateResponse, error) {
	var out v1.GetAffiliateResponse
	pattern := "/v1/backoffice/affiliate/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateGetAffiliate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAffiliateHTTPClientImpl) GetCommissionPlan(ctx context.Context, in *GetCommissionPlanRequest, opts ...http.CallOption) (*v1.GetCommissionPlanResponse, error) {
	var out v1.GetCommissionPlanResponse
	pattern := "/v1/backoffice/affiliate/commission/plan/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateGetCommissionPlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAffiliateHTTPClientImpl) ListAffiliateCampaigns(ctx context.Context, in *ListAffiliateCampaignsRequest, opts ...http.CallOption) (*v1.ListCampaignsResponse, error) {
	var out v1.ListCampaignsResponse
	pattern := "/v1/backoffice/affiliate/campaign/list/by_affiliate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateListAffiliateCampaigns))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAffiliateHTTPClientImpl) ListAffiliates(ctx context.Context, in *ListAffiliatesRequest, opts ...http.CallOption) (*v1.ListAffiliatesResponse, error) {
	var out v1.ListAffiliatesResponse
	pattern := "/v1/backoffice/affiliate/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateListAffiliates))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAffiliateHTTPClientImpl) ListAllCommissionPlans(ctx context.Context, in *ListAllCommissionPlansRequest, opts ...http.CallOption) (*v1.ListAllCommissionPlansResponse, error) {
	var out v1.ListAllCommissionPlansResponse
	pattern := "/v1/backoffice/affiliate/commission/plan/list/all"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateListAllCommissionPlans))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAffiliateHTTPClientImpl) ListCampaigns(ctx context.Context, in *ListCampaignsRequest, opts ...http.CallOption) (*v1.ListCampaignsResponse, error) {
	var out v1.ListCampaignsResponse
	pattern := "/v1/backoffice/affiliate/campaign/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateListCampaigns))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAffiliateHTTPClientImpl) ListCommissionPlans(ctx context.Context, in *ListCommissionPlansRequest, opts ...http.CallOption) (*v1.ListCommissionPlansResponse, error) {
	var out v1.ListCommissionPlansResponse
	pattern := "/v1/backoffice/affiliate/commission/plan/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateListCommissionPlans))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAffiliateHTTPClientImpl) UpdateAffiliate(ctx context.Context, in *UpdateAffiliateRequest, opts ...http.CallOption) (*v1.UpdateAffiliateResponse, error) {
	var out v1.UpdateAffiliateResponse
	pattern := "/v1/backoffice/affiliate/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateUpdateAffiliate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAffiliateHTTPClientImpl) UpdateCampaign(ctx context.Context, in *UpdateCampaignRequest, opts ...http.CallOption) (*v1.UpdateCampaignResponse, error) {
	var out v1.UpdateCampaignResponse
	pattern := "/v1/backoffice/affiliate/campaign/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateUpdateCampaign))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAffiliateHTTPClientImpl) UpdateCommissionPlan(ctx context.Context, in *UpdateCommissionPlanRequest, opts ...http.CallOption) (*v1.UpdateCommissionPlanResponse, error) {
	var out v1.UpdateCommissionPlanResponse
	pattern := "/v1/backoffice/affiliate/commission/plan/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateUpdateCommissionPlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
