// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffic_affiliate.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/infigaming-com/meepo-api/affiliate/service/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficeAffiliateCreateCommissionPlan = "/api.backoffice.service.v1.BackofficeAffiliate/CreateCommissionPlan"
const OperationBackofficeAffiliateUpdateCommissionPlan = "/api.backoffice.service.v1.BackofficeAffiliate/UpdateCommissionPlan"

type BackofficeAffiliateHTTPServer interface {
	CreateCommissionPlan(context.Context, *CreateCommissionPlanRequest) (*v1.CreateCommissionPlanResponse, error)
	UpdateCommissionPlan(context.Context, *UpdateCommissionPlanRequest) (*v1.UpdateCommissionPlanResponse, error)
}

func RegisterBackofficeAffiliateHTTPServer(s *http.Server, srv BackofficeAffiliateHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/affiliate/commission/plan/create", _BackofficeAffiliate_CreateCommissionPlan0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/affiliate/commission/plan/update", _BackofficeAffiliate_UpdateCommissionPlan0_HTTP_Handler(srv))
}

func _BackofficeAffiliate_CreateCommissionPlan0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCommissionPlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateCreateCommissionPlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCommissionPlan(ctx, req.(*CreateCommissionPlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.CreateCommissionPlanResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeAffiliate_UpdateCommissionPlan0_HTTP_Handler(srv BackofficeAffiliateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCommissionPlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAffiliateUpdateCommissionPlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCommissionPlan(ctx, req.(*UpdateCommissionPlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UpdateCommissionPlanResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficeAffiliateHTTPClient interface {
	CreateCommissionPlan(ctx context.Context, req *CreateCommissionPlanRequest, opts ...http.CallOption) (rsp *v1.CreateCommissionPlanResponse, err error)
	UpdateCommissionPlan(ctx context.Context, req *UpdateCommissionPlanRequest, opts ...http.CallOption) (rsp *v1.UpdateCommissionPlanResponse, err error)
}

type BackofficeAffiliateHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficeAffiliateHTTPClient(client *http.Client) BackofficeAffiliateHTTPClient {
	return &BackofficeAffiliateHTTPClientImpl{client}
}

func (c *BackofficeAffiliateHTTPClientImpl) CreateCommissionPlan(ctx context.Context, in *CreateCommissionPlanRequest, opts ...http.CallOption) (*v1.CreateCommissionPlanResponse, error) {
	var out v1.CreateCommissionPlanResponse
	pattern := "/v1/backoffice/affiliate/commission/plan/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateCreateCommissionPlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeAffiliateHTTPClientImpl) UpdateCommissionPlan(ctx context.Context, in *UpdateCommissionPlanRequest, opts ...http.CallOption) (*v1.UpdateCommissionPlanResponse, error) {
	var out v1.UpdateCommissionPlanResponse
	pattern := "/v1/backoffice/affiliate/commission/plan/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAffiliateUpdateCommissionPlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
