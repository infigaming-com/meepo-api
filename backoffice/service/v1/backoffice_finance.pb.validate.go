// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_finance.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListInvoicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInvoicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInvoicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInvoicesRequestMultiError, or nil if none found.
func (m *ListInvoicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInvoicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListInvoicesRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListInvoicesRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInvoicesRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Month != nil {
		// no validation rules for Month
	}

	if m.InvoiceId != nil {
		// no validation rules for InvoiceId
	}

	if m.PaymentStatus != nil {
		// no validation rules for PaymentStatus
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListInvoicesRequestMultiError(errors)
	}

	return nil
}

// ListInvoicesRequestMultiError is an error wrapping multiple validation
// errors returned by ListInvoicesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListInvoicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInvoicesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInvoicesRequestMultiError) AllErrors() []error { return m }

// ListInvoicesRequestValidationError is the validation error returned by
// ListInvoicesRequest.Validate if the designated constraints aren't met.
type ListInvoicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInvoicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInvoicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInvoicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInvoicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInvoicesRequestValidationError) ErrorName() string {
	return "ListInvoicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInvoicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInvoicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInvoicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInvoicesRequestValidationError{}

// Validate checks the field values on ListInvoicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInvoicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInvoicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInvoicesResponseMultiError, or nil if none found.
func (m *ListInvoicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInvoicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInvoices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInvoicesResponseValidationError{
						field:  fmt.Sprintf("Invoices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInvoicesResponseValidationError{
						field:  fmt.Sprintf("Invoices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInvoicesResponseValidationError{
					field:  fmt.Sprintf("Invoices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for TotalPaidCount

	// no validation rules for TotalNotPaidCount

	if len(errors) > 0 {
		return ListInvoicesResponseMultiError(errors)
	}

	return nil
}

// ListInvoicesResponseMultiError is an error wrapping multiple validation
// errors returned by ListInvoicesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListInvoicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInvoicesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInvoicesResponseMultiError) AllErrors() []error { return m }

// ListInvoicesResponseValidationError is the validation error returned by
// ListInvoicesResponse.Validate if the designated constraints aren't met.
type ListInvoicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInvoicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInvoicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInvoicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInvoicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInvoicesResponseValidationError) ErrorName() string {
	return "ListInvoicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInvoicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInvoicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInvoicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInvoicesResponseValidationError{}

// Validate checks the field values on GetInvoiceDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInvoiceDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInvoiceDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInvoiceDetailRequestMultiError, or nil if none found.
func (m *GetInvoiceDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInvoiceDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InvoiceId

	if len(errors) > 0 {
		return GetInvoiceDetailRequestMultiError(errors)
	}

	return nil
}

// GetInvoiceDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetInvoiceDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetInvoiceDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInvoiceDetailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInvoiceDetailRequestMultiError) AllErrors() []error { return m }

// GetInvoiceDetailRequestValidationError is the validation error returned by
// GetInvoiceDetailRequest.Validate if the designated constraints aren't met.
type GetInvoiceDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInvoiceDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInvoiceDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInvoiceDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInvoiceDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInvoiceDetailRequestValidationError) ErrorName() string {
	return "GetInvoiceDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInvoiceDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInvoiceDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInvoiceDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInvoiceDetailRequestValidationError{}

// Validate checks the field values on GetInvoiceDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInvoiceDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInvoiceDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInvoiceDetailResponseMultiError, or nil if none found.
func (m *GetInvoiceDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInvoiceDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInvoice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetInvoiceDetailResponseValidationError{
					field:  "Invoice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetInvoiceDetailResponseValidationError{
					field:  "Invoice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInvoice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetInvoiceDetailResponseValidationError{
				field:  "Invoice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetInvoiceDetailResponseMultiError(errors)
	}

	return nil
}

// GetInvoiceDetailResponseMultiError is an error wrapping multiple validation
// errors returned by GetInvoiceDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type GetInvoiceDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInvoiceDetailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInvoiceDetailResponseMultiError) AllErrors() []error { return m }

// GetInvoiceDetailResponseValidationError is the validation error returned by
// GetInvoiceDetailResponse.Validate if the designated constraints aren't met.
type GetInvoiceDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInvoiceDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInvoiceDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInvoiceDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInvoiceDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInvoiceDetailResponseValidationError) ErrorName() string {
	return "GetInvoiceDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetInvoiceDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInvoiceDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInvoiceDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInvoiceDetailResponseValidationError{}

// Validate checks the field values on ListOperatorRevenueShareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOperatorRevenueShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOperatorRevenueShareRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOperatorRevenueShareRequestMultiError, or nil if none found.
func (m *ListOperatorRevenueShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOperatorRevenueShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListOperatorRevenueShareRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListOperatorRevenueShareRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOperatorRevenueShareRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.InvoiceId != nil {
		// no validation rules for InvoiceId
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PeriodKey != nil {
		// no validation rules for PeriodKey
	}

	if len(errors) > 0 {
		return ListOperatorRevenueShareRequestMultiError(errors)
	}

	return nil
}

// ListOperatorRevenueShareRequestMultiError is an error wrapping multiple
// validation errors returned by ListOperatorRevenueShareRequest.ValidateAll()
// if the designated constraints aren't met.
type ListOperatorRevenueShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOperatorRevenueShareRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOperatorRevenueShareRequestMultiError) AllErrors() []error { return m }

// ListOperatorRevenueShareRequestValidationError is the validation error
// returned by ListOperatorRevenueShareRequest.Validate if the designated
// constraints aren't met.
type ListOperatorRevenueShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperatorRevenueShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperatorRevenueShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperatorRevenueShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperatorRevenueShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperatorRevenueShareRequestValidationError) ErrorName() string {
	return "ListOperatorRevenueShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperatorRevenueShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperatorRevenueShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperatorRevenueShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperatorRevenueShareRequestValidationError{}

// Validate checks the field values on ListOperatorRevenueShareResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOperatorRevenueShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOperatorRevenueShareResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOperatorRevenueShareResponseMultiError, or nil if none found.
func (m *ListOperatorRevenueShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOperatorRevenueShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOperatorRevenueShareResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOperatorRevenueShareResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOperatorRevenueShareResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Subtotal

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for TotalPages

	if len(errors) > 0 {
		return ListOperatorRevenueShareResponseMultiError(errors)
	}

	return nil
}

// ListOperatorRevenueShareResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListOperatorRevenueShareResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOperatorRevenueShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOperatorRevenueShareResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOperatorRevenueShareResponseMultiError) AllErrors() []error { return m }

// ListOperatorRevenueShareResponseValidationError is the validation error
// returned by ListOperatorRevenueShareResponse.Validate if the designated
// constraints aren't met.
type ListOperatorRevenueShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperatorRevenueShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperatorRevenueShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperatorRevenueShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperatorRevenueShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperatorRevenueShareResponseValidationError) ErrorName() string {
	return "ListOperatorRevenueShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperatorRevenueShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperatorRevenueShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperatorRevenueShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperatorRevenueShareResponseValidationError{}

// Validate checks the field values on ListThirdPartyFeesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListThirdPartyFeesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListThirdPartyFeesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListThirdPartyFeesRequestMultiError, or nil if none found.
func (m *ListThirdPartyFeesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThirdPartyFeesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListThirdPartyFeesRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListThirdPartyFeesRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListThirdPartyFeesRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.InvoiceId != nil {
		// no validation rules for InvoiceId
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PeriodKey != nil {
		// no validation rules for PeriodKey
	}

	if len(errors) > 0 {
		return ListThirdPartyFeesRequestMultiError(errors)
	}

	return nil
}

// ListThirdPartyFeesRequestMultiError is an error wrapping multiple validation
// errors returned by ListThirdPartyFeesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListThirdPartyFeesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThirdPartyFeesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThirdPartyFeesRequestMultiError) AllErrors() []error { return m }

// ListThirdPartyFeesRequestValidationError is the validation error returned by
// ListThirdPartyFeesRequest.Validate if the designated constraints aren't met.
type ListThirdPartyFeesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThirdPartyFeesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThirdPartyFeesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThirdPartyFeesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThirdPartyFeesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThirdPartyFeesRequestValidationError) ErrorName() string {
	return "ListThirdPartyFeesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListThirdPartyFeesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThirdPartyFeesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThirdPartyFeesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThirdPartyFeesRequestValidationError{}

// Validate checks the field values on ListThirdPartyFeesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListThirdPartyFeesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListThirdPartyFeesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListThirdPartyFeesResponseMultiError, or nil if none found.
func (m *ListThirdPartyFeesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThirdPartyFeesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListThirdPartyFeesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListThirdPartyFeesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListThirdPartyFeesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Subtotal

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListThirdPartyFeesResponseMultiError(errors)
	}

	return nil
}

// ListThirdPartyFeesResponseMultiError is an error wrapping multiple
// validation errors returned by ListThirdPartyFeesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListThirdPartyFeesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThirdPartyFeesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThirdPartyFeesResponseMultiError) AllErrors() []error { return m }

// ListThirdPartyFeesResponseValidationError is the validation error returned
// by ListThirdPartyFeesResponse.Validate if the designated constraints aren't met.
type ListThirdPartyFeesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThirdPartyFeesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThirdPartyFeesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThirdPartyFeesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThirdPartyFeesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThirdPartyFeesResponseValidationError) ErrorName() string {
	return "ListThirdPartyFeesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListThirdPartyFeesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThirdPartyFeesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThirdPartyFeesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThirdPartyFeesResponseValidationError{}

// Validate checks the field values on ListMonthlyRevenueShareRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMonthlyRevenueShareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMonthlyRevenueShareRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListMonthlyRevenueShareRequestMultiError, or nil if none found.
func (m *ListMonthlyRevenueShareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMonthlyRevenueShareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListMonthlyRevenueShareRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListMonthlyRevenueShareRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMonthlyRevenueShareRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.InvoiceId != nil {
		// no validation rules for InvoiceId
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PeriodKey != nil {
		// no validation rules for PeriodKey
	}

	if len(errors) > 0 {
		return ListMonthlyRevenueShareRequestMultiError(errors)
	}

	return nil
}

// ListMonthlyRevenueShareRequestMultiError is an error wrapping multiple
// validation errors returned by ListMonthlyRevenueShareRequest.ValidateAll()
// if the designated constraints aren't met.
type ListMonthlyRevenueShareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMonthlyRevenueShareRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMonthlyRevenueShareRequestMultiError) AllErrors() []error { return m }

// ListMonthlyRevenueShareRequestValidationError is the validation error
// returned by ListMonthlyRevenueShareRequest.Validate if the designated
// constraints aren't met.
type ListMonthlyRevenueShareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMonthlyRevenueShareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMonthlyRevenueShareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMonthlyRevenueShareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMonthlyRevenueShareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMonthlyRevenueShareRequestValidationError) ErrorName() string {
	return "ListMonthlyRevenueShareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMonthlyRevenueShareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMonthlyRevenueShareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMonthlyRevenueShareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMonthlyRevenueShareRequestValidationError{}

// Validate checks the field values on ListMonthlyRevenueShareResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMonthlyRevenueShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMonthlyRevenueShareResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListMonthlyRevenueShareResponseMultiError, or nil if none found.
func (m *ListMonthlyRevenueShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMonthlyRevenueShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMonthlyRevenueShareResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMonthlyRevenueShareResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMonthlyRevenueShareResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListMonthlyRevenueShareResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListMonthlyRevenueShareResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMonthlyRevenueShareResponseValidationError{
				field:  "Summary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListMonthlyRevenueShareResponseMultiError(errors)
	}

	return nil
}

// ListMonthlyRevenueShareResponseMultiError is an error wrapping multiple
// validation errors returned by ListMonthlyRevenueShareResponse.ValidateAll()
// if the designated constraints aren't met.
type ListMonthlyRevenueShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMonthlyRevenueShareResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMonthlyRevenueShareResponseMultiError) AllErrors() []error { return m }

// ListMonthlyRevenueShareResponseValidationError is the validation error
// returned by ListMonthlyRevenueShareResponse.Validate if the designated
// constraints aren't met.
type ListMonthlyRevenueShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMonthlyRevenueShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMonthlyRevenueShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMonthlyRevenueShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMonthlyRevenueShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMonthlyRevenueShareResponseValidationError) ErrorName() string {
	return "ListMonthlyRevenueShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMonthlyRevenueShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMonthlyRevenueShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMonthlyRevenueShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMonthlyRevenueShareResponseValidationError{}

// Validate checks the field values on AddAdjustmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAdjustmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAdjustmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAdjustmentRequestMultiError, or nil if none found.
func (m *AddAdjustmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAdjustmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Item

	// no validation rules for RetailerOperatorId

	// no validation rules for CompanyOperatorId

	// no validation rules for OperatorId

	// no validation rules for AppliedDate

	// no validation rules for Currency

	// no validation rules for Amount

	// no validation rules for Description

	// no validation rules for PeriodKey

	if len(errors) > 0 {
		return AddAdjustmentRequestMultiError(errors)
	}

	return nil
}

// AddAdjustmentRequestMultiError is an error wrapping multiple validation
// errors returned by AddAdjustmentRequest.ValidateAll() if the designated
// constraints aren't met.
type AddAdjustmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAdjustmentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAdjustmentRequestMultiError) AllErrors() []error { return m }

// AddAdjustmentRequestValidationError is the validation error returned by
// AddAdjustmentRequest.Validate if the designated constraints aren't met.
type AddAdjustmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAdjustmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAdjustmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAdjustmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAdjustmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAdjustmentRequestValidationError) ErrorName() string {
	return "AddAdjustmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddAdjustmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAdjustmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAdjustmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAdjustmentRequestValidationError{}

// Validate checks the field values on AddAdjustmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAdjustmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAdjustmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAdjustmentResponseMultiError, or nil if none found.
func (m *AddAdjustmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAdjustmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddAdjustmentResponseMultiError(errors)
	}

	return nil
}

// AddAdjustmentResponseMultiError is an error wrapping multiple validation
// errors returned by AddAdjustmentResponse.ValidateAll() if the designated
// constraints aren't met.
type AddAdjustmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAdjustmentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAdjustmentResponseMultiError) AllErrors() []error { return m }

// AddAdjustmentResponseValidationError is the validation error returned by
// AddAdjustmentResponse.Validate if the designated constraints aren't met.
type AddAdjustmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAdjustmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAdjustmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAdjustmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAdjustmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAdjustmentResponseValidationError) ErrorName() string {
	return "AddAdjustmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddAdjustmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAdjustmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAdjustmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAdjustmentResponseValidationError{}

// Validate checks the field values on ListAdjustmentConfigsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdjustmentConfigsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdjustmentConfigsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdjustmentConfigsRequestMultiError, or nil if none found.
func (m *ListAdjustmentConfigsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdjustmentConfigsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListAdjustmentConfigsRequestMultiError(errors)
	}

	return nil
}

// ListAdjustmentConfigsRequestMultiError is an error wrapping multiple
// validation errors returned by ListAdjustmentConfigsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListAdjustmentConfigsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdjustmentConfigsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdjustmentConfigsRequestMultiError) AllErrors() []error { return m }

// ListAdjustmentConfigsRequestValidationError is the validation error returned
// by ListAdjustmentConfigsRequest.Validate if the designated constraints
// aren't met.
type ListAdjustmentConfigsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdjustmentConfigsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdjustmentConfigsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdjustmentConfigsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdjustmentConfigsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdjustmentConfigsRequestValidationError) ErrorName() string {
	return "ListAdjustmentConfigsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdjustmentConfigsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdjustmentConfigsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdjustmentConfigsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdjustmentConfigsRequestValidationError{}

// Validate checks the field values on ListAdjustmentConfigsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdjustmentConfigsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdjustmentConfigsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListAdjustmentConfigsResponseMultiError, or nil if none found.
func (m *ListAdjustmentConfigsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdjustmentConfigsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConfigs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAdjustmentConfigsResponseValidationError{
						field:  fmt.Sprintf("Configs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAdjustmentConfigsResponseValidationError{
						field:  fmt.Sprintf("Configs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAdjustmentConfigsResponseValidationError{
					field:  fmt.Sprintf("Configs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListAdjustmentConfigsResponseMultiError(errors)
	}

	return nil
}

// ListAdjustmentConfigsResponseMultiError is an error wrapping multiple
// validation errors returned by ListAdjustmentConfigsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListAdjustmentConfigsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdjustmentConfigsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdjustmentConfigsResponseMultiError) AllErrors() []error { return m }

// ListAdjustmentConfigsResponseValidationError is the validation error
// returned by ListAdjustmentConfigsResponse.Validate if the designated
// constraints aren't met.
type ListAdjustmentConfigsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdjustmentConfigsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdjustmentConfigsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdjustmentConfigsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdjustmentConfigsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdjustmentConfigsResponseValidationError) ErrorName() string {
	return "ListAdjustmentConfigsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdjustmentConfigsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdjustmentConfigsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdjustmentConfigsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdjustmentConfigsResponseValidationError{}

// Validate checks the field values on UpdateAdjustmentConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAdjustmentConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAdjustmentConfigRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAdjustmentConfigRequestMultiError, or nil if none found.
func (m *UpdateAdjustmentConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAdjustmentConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Item

	// no validation rules for Description

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if len(errors) > 0 {
		return UpdateAdjustmentConfigRequestMultiError(errors)
	}

	return nil
}

// UpdateAdjustmentConfigRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAdjustmentConfigRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateAdjustmentConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAdjustmentConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAdjustmentConfigRequestMultiError) AllErrors() []error { return m }

// UpdateAdjustmentConfigRequestValidationError is the validation error
// returned by UpdateAdjustmentConfigRequest.Validate if the designated
// constraints aren't met.
type UpdateAdjustmentConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAdjustmentConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAdjustmentConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAdjustmentConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAdjustmentConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAdjustmentConfigRequestValidationError) ErrorName() string {
	return "UpdateAdjustmentConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAdjustmentConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAdjustmentConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAdjustmentConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAdjustmentConfigRequestValidationError{}

// Validate checks the field values on UpdateAdjustmentConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAdjustmentConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAdjustmentConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAdjustmentConfigResponseMultiError, or nil if none found.
func (m *UpdateAdjustmentConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAdjustmentConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAdjustmentConfigResponseMultiError(errors)
	}

	return nil
}

// UpdateAdjustmentConfigResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateAdjustmentConfigResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateAdjustmentConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAdjustmentConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAdjustmentConfigResponseMultiError) AllErrors() []error { return m }

// UpdateAdjustmentConfigResponseValidationError is the validation error
// returned by UpdateAdjustmentConfigResponse.Validate if the designated
// constraints aren't met.
type UpdateAdjustmentConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAdjustmentConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAdjustmentConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAdjustmentConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAdjustmentConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAdjustmentConfigResponseValidationError) ErrorName() string {
	return "UpdateAdjustmentConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAdjustmentConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAdjustmentConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAdjustmentConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAdjustmentConfigResponseValidationError{}

// Validate checks the field values on DeleteAdjustmentConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAdjustmentConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAdjustmentConfigRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteAdjustmentConfigRequestMultiError, or nil if none found.
func (m *DeleteAdjustmentConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAdjustmentConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAdjustmentConfigRequestMultiError(errors)
	}

	return nil
}

// DeleteAdjustmentConfigRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteAdjustmentConfigRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteAdjustmentConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAdjustmentConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAdjustmentConfigRequestMultiError) AllErrors() []error { return m }

// DeleteAdjustmentConfigRequestValidationError is the validation error
// returned by DeleteAdjustmentConfigRequest.Validate if the designated
// constraints aren't met.
type DeleteAdjustmentConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAdjustmentConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAdjustmentConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAdjustmentConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAdjustmentConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAdjustmentConfigRequestValidationError) ErrorName() string {
	return "DeleteAdjustmentConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAdjustmentConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAdjustmentConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAdjustmentConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAdjustmentConfigRequestValidationError{}

// Validate checks the field values on DeleteAdjustmentConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAdjustmentConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAdjustmentConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteAdjustmentConfigResponseMultiError, or nil if none found.
func (m *DeleteAdjustmentConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAdjustmentConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAdjustmentConfigResponseMultiError(errors)
	}

	return nil
}

// DeleteAdjustmentConfigResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteAdjustmentConfigResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteAdjustmentConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAdjustmentConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAdjustmentConfigResponseMultiError) AllErrors() []error { return m }

// DeleteAdjustmentConfigResponseValidationError is the validation error
// returned by DeleteAdjustmentConfigResponse.Validate if the designated
// constraints aren't met.
type DeleteAdjustmentConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAdjustmentConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAdjustmentConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAdjustmentConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAdjustmentConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAdjustmentConfigResponseValidationError) ErrorName() string {
	return "DeleteAdjustmentConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAdjustmentConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAdjustmentConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAdjustmentConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAdjustmentConfigResponseValidationError{}

// Validate checks the field values on ListAdjustmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdjustmentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdjustmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdjustmentsRequestMultiError, or nil if none found.
func (m *ListAdjustmentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdjustmentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAdjustmentsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAdjustmentsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAdjustmentsRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.InvoiceId != nil {
		// no validation rules for InvoiceId
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PeriodKey != nil {
		// no validation rules for PeriodKey
	}

	if len(errors) > 0 {
		return ListAdjustmentsRequestMultiError(errors)
	}

	return nil
}

// ListAdjustmentsRequestMultiError is an error wrapping multiple validation
// errors returned by ListAdjustmentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAdjustmentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdjustmentsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdjustmentsRequestMultiError) AllErrors() []error { return m }

// ListAdjustmentsRequestValidationError is the validation error returned by
// ListAdjustmentsRequest.Validate if the designated constraints aren't met.
type ListAdjustmentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdjustmentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdjustmentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdjustmentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdjustmentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdjustmentsRequestValidationError) ErrorName() string {
	return "ListAdjustmentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdjustmentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdjustmentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdjustmentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdjustmentsRequestValidationError{}

// Validate checks the field values on ListAdjustmentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdjustmentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdjustmentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdjustmentsResponseMultiError, or nil if none found.
func (m *ListAdjustmentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdjustmentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAdjustmentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAdjustmentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAdjustmentsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Subtotal

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListAdjustmentsResponseMultiError(errors)
	}

	return nil
}

// ListAdjustmentsResponseMultiError is an error wrapping multiple validation
// errors returned by ListAdjustmentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAdjustmentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdjustmentsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdjustmentsResponseMultiError) AllErrors() []error { return m }

// ListAdjustmentsResponseValidationError is the validation error returned by
// ListAdjustmentsResponse.Validate if the designated constraints aren't met.
type ListAdjustmentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdjustmentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdjustmentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdjustmentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdjustmentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdjustmentsResponseValidationError) ErrorName() string {
	return "ListAdjustmentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdjustmentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdjustmentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdjustmentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdjustmentsResponseValidationError{}

// Validate checks the field values on CreateAdjustmentConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAdjustmentConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAdjustmentConfigRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateAdjustmentConfigRequestMultiError, or nil if none found.
func (m *CreateAdjustmentConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAdjustmentConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Item

	// no validation rules for Description

	if len(errors) > 0 {
		return CreateAdjustmentConfigRequestMultiError(errors)
	}

	return nil
}

// CreateAdjustmentConfigRequestMultiError is an error wrapping multiple
// validation errors returned by CreateAdjustmentConfigRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateAdjustmentConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAdjustmentConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAdjustmentConfigRequestMultiError) AllErrors() []error { return m }

// CreateAdjustmentConfigRequestValidationError is the validation error
// returned by CreateAdjustmentConfigRequest.Validate if the designated
// constraints aren't met.
type CreateAdjustmentConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAdjustmentConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAdjustmentConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAdjustmentConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAdjustmentConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAdjustmentConfigRequestValidationError) ErrorName() string {
	return "CreateAdjustmentConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAdjustmentConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAdjustmentConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAdjustmentConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAdjustmentConfigRequestValidationError{}

// Validate checks the field values on CreateAdjustmentConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAdjustmentConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAdjustmentConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateAdjustmentConfigResponseMultiError, or nil if none found.
func (m *CreateAdjustmentConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAdjustmentConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateAdjustmentConfigResponseMultiError(errors)
	}

	return nil
}

// CreateAdjustmentConfigResponseMultiError is an error wrapping multiple
// validation errors returned by CreateAdjustmentConfigResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateAdjustmentConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAdjustmentConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAdjustmentConfigResponseMultiError) AllErrors() []error { return m }

// CreateAdjustmentConfigResponseValidationError is the validation error
// returned by CreateAdjustmentConfigResponse.Validate if the designated
// constraints aren't met.
type CreateAdjustmentConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAdjustmentConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAdjustmentConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAdjustmentConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAdjustmentConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAdjustmentConfigResponseValidationError) ErrorName() string {
	return "CreateAdjustmentConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAdjustmentConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAdjustmentConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAdjustmentConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAdjustmentConfigResponseValidationError{}

// Validate checks the field values on SendInvoicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendInvoicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendInvoicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendInvoicesRequestMultiError, or nil if none found.
func (m *SendInvoicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendInvoicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PeriodKey

	if len(errors) > 0 {
		return SendInvoicesRequestMultiError(errors)
	}

	return nil
}

// SendInvoicesRequestMultiError is an error wrapping multiple validation
// errors returned by SendInvoicesRequest.ValidateAll() if the designated
// constraints aren't met.
type SendInvoicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendInvoicesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendInvoicesRequestMultiError) AllErrors() []error { return m }

// SendInvoicesRequestValidationError is the validation error returned by
// SendInvoicesRequest.Validate if the designated constraints aren't met.
type SendInvoicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendInvoicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendInvoicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendInvoicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendInvoicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendInvoicesRequestValidationError) ErrorName() string {
	return "SendInvoicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendInvoicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendInvoicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendInvoicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendInvoicesRequestValidationError{}

// Validate checks the field values on SendInvoicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendInvoicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendInvoicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendInvoicesResponseMultiError, or nil if none found.
func (m *SendInvoicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendInvoicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendInvoicesResponseMultiError(errors)
	}

	return nil
}

// SendInvoicesResponseMultiError is an error wrapping multiple validation
// errors returned by SendInvoicesResponse.ValidateAll() if the designated
// constraints aren't met.
type SendInvoicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendInvoicesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendInvoicesResponseMultiError) AllErrors() []error { return m }

// SendInvoicesResponseValidationError is the validation error returned by
// SendInvoicesResponse.Validate if the designated constraints aren't met.
type SendInvoicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendInvoicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendInvoicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendInvoicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendInvoicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendInvoicesResponseValidationError) ErrorName() string {
	return "SendInvoicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendInvoicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendInvoicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendInvoicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendInvoicesResponseValidationError{}

// Validate checks the field values on GetInvoiceSummaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInvoiceSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInvoiceSummaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInvoiceSummaryRequestMultiError, or nil if none found.
func (m *GetInvoiceSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInvoiceSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetInvoiceSummaryRequestMultiError(errors)
	}

	return nil
}

// GetInvoiceSummaryRequestMultiError is an error wrapping multiple validation
// errors returned by GetInvoiceSummaryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetInvoiceSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInvoiceSummaryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInvoiceSummaryRequestMultiError) AllErrors() []error { return m }

// GetInvoiceSummaryRequestValidationError is the validation error returned by
// GetInvoiceSummaryRequest.Validate if the designated constraints aren't met.
type GetInvoiceSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInvoiceSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInvoiceSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInvoiceSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInvoiceSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInvoiceSummaryRequestValidationError) ErrorName() string {
	return "GetInvoiceSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInvoiceSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInvoiceSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInvoiceSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInvoiceSummaryRequestValidationError{}

// Validate checks the field values on GetInvoiceSummaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInvoiceSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInvoiceSummaryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInvoiceSummaryResponseMultiError, or nil if none found.
func (m *GetInvoiceSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInvoiceSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalIncome

	// no validation rules for TotalOutcome

	// no validation rules for BillingPeriod

	if len(errors) > 0 {
		return GetInvoiceSummaryResponseMultiError(errors)
	}

	return nil
}

// GetInvoiceSummaryResponseMultiError is an error wrapping multiple validation
// errors returned by GetInvoiceSummaryResponse.ValidateAll() if the
// designated constraints aren't met.
type GetInvoiceSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInvoiceSummaryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInvoiceSummaryResponseMultiError) AllErrors() []error { return m }

// GetInvoiceSummaryResponseValidationError is the validation error returned by
// GetInvoiceSummaryResponse.Validate if the designated constraints aren't met.
type GetInvoiceSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInvoiceSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInvoiceSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInvoiceSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInvoiceSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInvoiceSummaryResponseValidationError) ErrorName() string {
	return "GetInvoiceSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetInvoiceSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInvoiceSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInvoiceSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInvoiceSummaryResponseValidationError{}

// Validate checks the field values on GetBalanceSummaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBalanceSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBalanceSummaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBalanceSummaryRequestMultiError, or nil if none found.
func (m *GetBalanceSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBalanceSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBalanceSummaryRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBalanceSummaryRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBalanceSummaryRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBalanceSummaryRequestMultiError(errors)
	}

	return nil
}

// GetBalanceSummaryRequestMultiError is an error wrapping multiple validation
// errors returned by GetBalanceSummaryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBalanceSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBalanceSummaryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBalanceSummaryRequestMultiError) AllErrors() []error { return m }

// GetBalanceSummaryRequestValidationError is the validation error returned by
// GetBalanceSummaryRequest.Validate if the designated constraints aren't met.
type GetBalanceSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBalanceSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBalanceSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBalanceSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBalanceSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBalanceSummaryRequestValidationError) ErrorName() string {
	return "GetBalanceSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBalanceSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBalanceSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBalanceSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBalanceSummaryRequestValidationError{}

// Validate checks the field values on GetBalanceSummaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBalanceSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBalanceSummaryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBalanceSummaryResponseMultiError, or nil if none found.
func (m *GetBalanceSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBalanceSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Balance

	// no validation rules for EstNetShare

	// no validation rules for EstNetCost

	if len(errors) > 0 {
		return GetBalanceSummaryResponseMultiError(errors)
	}

	return nil
}

// GetBalanceSummaryResponseMultiError is an error wrapping multiple validation
// errors returned by GetBalanceSummaryResponse.ValidateAll() if the
// designated constraints aren't met.
type GetBalanceSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBalanceSummaryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBalanceSummaryResponseMultiError) AllErrors() []error { return m }

// GetBalanceSummaryResponseValidationError is the validation error returned by
// GetBalanceSummaryResponse.Validate if the designated constraints aren't met.
type GetBalanceSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBalanceSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBalanceSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBalanceSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBalanceSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBalanceSummaryResponseValidationError) ErrorName() string {
	return "GetBalanceSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBalanceSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBalanceSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBalanceSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBalanceSummaryResponseValidationError{}

// Validate checks the field values on GetBalancesSummaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBalancesSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBalancesSummaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBalancesSummaryRequestMultiError, or nil if none found.
func (m *GetBalancesSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBalancesSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBalancesSummaryRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBalancesSummaryRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBalancesSummaryRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBalancesSummaryRequestMultiError(errors)
	}

	return nil
}

// GetBalancesSummaryRequestMultiError is an error wrapping multiple validation
// errors returned by GetBalancesSummaryRequest.ValidateAll() if the
// designated constraints aren't met.
type GetBalancesSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBalancesSummaryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBalancesSummaryRequestMultiError) AllErrors() []error { return m }

// GetBalancesSummaryRequestValidationError is the validation error returned by
// GetBalancesSummaryRequest.Validate if the designated constraints aren't met.
type GetBalancesSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBalancesSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBalancesSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBalancesSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBalancesSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBalancesSummaryRequestValidationError) ErrorName() string {
	return "GetBalancesSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBalancesSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBalancesSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBalancesSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBalancesSummaryRequestValidationError{}

// Validate checks the field values on GetBalancesSummaryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBalancesSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBalancesSummaryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBalancesSummaryResponseMultiError, or nil if none found.
func (m *GetBalancesSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBalancesSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Deposits

	// no validation rules for Withdrawals

	// no validation rules for Balance

	// no validation rules for Ngr

	// no validation rules for GameProviderRs

	// no validation rules for ThirdPartyFees

	// no validation rules for Adjustments

	// no validation rules for EstNetProfit

	// no validation rules for RevenueShareSystem

	// no validation rules for RevenueShareOperator

	// no validation rules for EstNetCosts

	if len(errors) > 0 {
		return GetBalancesSummaryResponseMultiError(errors)
	}

	return nil
}

// GetBalancesSummaryResponseMultiError is an error wrapping multiple
// validation errors returned by GetBalancesSummaryResponse.ValidateAll() if
// the designated constraints aren't met.
type GetBalancesSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBalancesSummaryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBalancesSummaryResponseMultiError) AllErrors() []error { return m }

// GetBalancesSummaryResponseValidationError is the validation error returned
// by GetBalancesSummaryResponse.Validate if the designated constraints aren't met.
type GetBalancesSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBalancesSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBalancesSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBalancesSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBalancesSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBalancesSummaryResponseValidationError) ErrorName() string {
	return "GetBalancesSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBalancesSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBalancesSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBalancesSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBalancesSummaryResponseValidationError{}

// Validate checks the field values on ListBillingPeriodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBillingPeriodsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBillingPeriodsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBillingPeriodsRequestMultiError, or nil if none found.
func (m *ListBillingPeriodsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBillingPeriodsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListBillingPeriodsRequestMultiError(errors)
	}

	return nil
}

// ListBillingPeriodsRequestMultiError is an error wrapping multiple validation
// errors returned by ListBillingPeriodsRequest.ValidateAll() if the
// designated constraints aren't met.
type ListBillingPeriodsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBillingPeriodsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBillingPeriodsRequestMultiError) AllErrors() []error { return m }

// ListBillingPeriodsRequestValidationError is the validation error returned by
// ListBillingPeriodsRequest.Validate if the designated constraints aren't met.
type ListBillingPeriodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBillingPeriodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBillingPeriodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBillingPeriodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBillingPeriodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBillingPeriodsRequestValidationError) ErrorName() string {
	return "ListBillingPeriodsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBillingPeriodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBillingPeriodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBillingPeriodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBillingPeriodsRequestValidationError{}

// Validate checks the field values on ListBillingPeriodsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBillingPeriodsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBillingPeriodsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBillingPeriodsResponseMultiError, or nil if none found.
func (m *ListBillingPeriodsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBillingPeriodsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBillingPeriods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBillingPeriodsResponseValidationError{
						field:  fmt.Sprintf("BillingPeriods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBillingPeriodsResponseValidationError{
						field:  fmt.Sprintf("BillingPeriods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBillingPeriodsResponseValidationError{
					field:  fmt.Sprintf("BillingPeriods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListBillingPeriodsResponseMultiError(errors)
	}

	return nil
}

// ListBillingPeriodsResponseMultiError is an error wrapping multiple
// validation errors returned by ListBillingPeriodsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListBillingPeriodsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBillingPeriodsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBillingPeriodsResponseMultiError) AllErrors() []error { return m }

// ListBillingPeriodsResponseValidationError is the validation error returned
// by ListBillingPeriodsResponse.Validate if the designated constraints aren't met.
type ListBillingPeriodsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBillingPeriodsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBillingPeriodsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBillingPeriodsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBillingPeriodsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBillingPeriodsResponseValidationError) ErrorName() string {
	return "ListBillingPeriodsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBillingPeriodsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBillingPeriodsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBillingPeriodsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBillingPeriodsResponseValidationError{}

// Validate checks the field values on ListBalanceMonthlyRevenueSharesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBalanceMonthlyRevenueSharesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBalanceMonthlyRevenueSharesRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListBalanceMonthlyRevenueSharesRequestMultiError, or nil if none found.
func (m *ListBalanceMonthlyRevenueSharesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBalanceMonthlyRevenueSharesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListBalanceMonthlyRevenueSharesRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListBalanceMonthlyRevenueSharesRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListBalanceMonthlyRevenueSharesRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Type

	if len(errors) > 0 {
		return ListBalanceMonthlyRevenueSharesRequestMultiError(errors)
	}

	return nil
}

// ListBalanceMonthlyRevenueSharesRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListBalanceMonthlyRevenueSharesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBalanceMonthlyRevenueSharesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBalanceMonthlyRevenueSharesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBalanceMonthlyRevenueSharesRequestMultiError) AllErrors() []error { return m }

// ListBalanceMonthlyRevenueSharesRequestValidationError is the validation
// error returned by ListBalanceMonthlyRevenueSharesRequest.Validate if the
// designated constraints aren't met.
type ListBalanceMonthlyRevenueSharesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBalanceMonthlyRevenueSharesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBalanceMonthlyRevenueSharesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBalanceMonthlyRevenueSharesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBalanceMonthlyRevenueSharesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBalanceMonthlyRevenueSharesRequestValidationError) ErrorName() string {
	return "ListBalanceMonthlyRevenueSharesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBalanceMonthlyRevenueSharesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBalanceMonthlyRevenueSharesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBalanceMonthlyRevenueSharesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBalanceMonthlyRevenueSharesRequestValidationError{}

// Validate checks the field values on ListBalanceMonthlyRevenueSharesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBalanceMonthlyRevenueSharesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBalanceMonthlyRevenueSharesResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListBalanceMonthlyRevenueSharesResponseMultiError, or nil if none found.
func (m *ListBalanceMonthlyRevenueSharesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBalanceMonthlyRevenueSharesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBalanceMonthlyRevenueSharesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBalanceMonthlyRevenueSharesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBalanceMonthlyRevenueSharesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListBalanceMonthlyRevenueSharesResponseMultiError(errors)
	}

	return nil
}

// ListBalanceMonthlyRevenueSharesResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListBalanceMonthlyRevenueSharesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBalanceMonthlyRevenueSharesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBalanceMonthlyRevenueSharesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBalanceMonthlyRevenueSharesResponseMultiError) AllErrors() []error { return m }

// ListBalanceMonthlyRevenueSharesResponseValidationError is the validation
// error returned by ListBalanceMonthlyRevenueSharesResponse.Validate if the
// designated constraints aren't met.
type ListBalanceMonthlyRevenueSharesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBalanceMonthlyRevenueSharesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBalanceMonthlyRevenueSharesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBalanceMonthlyRevenueSharesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBalanceMonthlyRevenueSharesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBalanceMonthlyRevenueSharesResponseValidationError) ErrorName() string {
	return "ListBalanceMonthlyRevenueSharesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBalanceMonthlyRevenueSharesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBalanceMonthlyRevenueSharesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBalanceMonthlyRevenueSharesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBalanceMonthlyRevenueSharesResponseValidationError{}

// Validate checks the field values on ListBalancesSummaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBalancesSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBalancesSummaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBalancesSummaryRequestMultiError, or nil if none found.
func (m *ListBalancesSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBalancesSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListBalancesSummaryRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListBalancesSummaryRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListBalancesSummaryRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListBalancesSummaryRequestMultiError(errors)
	}

	return nil
}

// ListBalancesSummaryRequestMultiError is an error wrapping multiple
// validation errors returned by ListBalancesSummaryRequest.ValidateAll() if
// the designated constraints aren't met.
type ListBalancesSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBalancesSummaryRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBalancesSummaryRequestMultiError) AllErrors() []error { return m }

// ListBalancesSummaryRequestValidationError is the validation error returned
// by ListBalancesSummaryRequest.Validate if the designated constraints aren't met.
type ListBalancesSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBalancesSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBalancesSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBalancesSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBalancesSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBalancesSummaryRequestValidationError) ErrorName() string {
	return "ListBalancesSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBalancesSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBalancesSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBalancesSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBalancesSummaryRequestValidationError{}

// Validate checks the field values on ListBalancesSummaryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBalancesSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBalancesSummaryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBalancesSummaryResponseMultiError, or nil if none found.
func (m *ListBalancesSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBalancesSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBalances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBalancesSummaryResponseValidationError{
						field:  fmt.Sprintf("Balances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBalancesSummaryResponseValidationError{
						field:  fmt.Sprintf("Balances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBalancesSummaryResponseValidationError{
					field:  fmt.Sprintf("Balances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListBalancesSummaryResponseMultiError(errors)
	}

	return nil
}

// ListBalancesSummaryResponseMultiError is an error wrapping multiple
// validation errors returned by ListBalancesSummaryResponse.ValidateAll() if
// the designated constraints aren't met.
type ListBalancesSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBalancesSummaryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBalancesSummaryResponseMultiError) AllErrors() []error { return m }

// ListBalancesSummaryResponseValidationError is the validation error returned
// by ListBalancesSummaryResponse.Validate if the designated constraints
// aren't met.
type ListBalancesSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBalancesSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBalancesSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBalancesSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBalancesSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBalancesSummaryResponseValidationError) ErrorName() string {
	return "ListBalancesSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBalancesSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBalancesSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBalancesSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBalancesSummaryResponseValidationError{}

// Validate checks the field values on GetTaxReportConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTaxReportConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaxReportConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTaxReportConfigRequestMultiError, or nil if none found.
func (m *GetTaxReportConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaxReportConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return GetTaxReportConfigRequestMultiError(errors)
	}

	return nil
}

// GetTaxReportConfigRequestMultiError is an error wrapping multiple validation
// errors returned by GetTaxReportConfigRequest.ValidateAll() if the
// designated constraints aren't met.
type GetTaxReportConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaxReportConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaxReportConfigRequestMultiError) AllErrors() []error { return m }

// GetTaxReportConfigRequestValidationError is the validation error returned by
// GetTaxReportConfigRequest.Validate if the designated constraints aren't met.
type GetTaxReportConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaxReportConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaxReportConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaxReportConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaxReportConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaxReportConfigRequestValidationError) ErrorName() string {
	return "GetTaxReportConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTaxReportConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaxReportConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaxReportConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaxReportConfigRequestValidationError{}

// Validate checks the field values on GetTaxReportConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTaxReportConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaxReportConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTaxReportConfigResponseMultiError, or nil if none found.
func (m *GetTaxReportConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaxReportConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Config

	if len(errors) > 0 {
		return GetTaxReportConfigResponseMultiError(errors)
	}

	return nil
}

// GetTaxReportConfigResponseMultiError is an error wrapping multiple
// validation errors returned by GetTaxReportConfigResponse.ValidateAll() if
// the designated constraints aren't met.
type GetTaxReportConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaxReportConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaxReportConfigResponseMultiError) AllErrors() []error { return m }

// GetTaxReportConfigResponseValidationError is the validation error returned
// by GetTaxReportConfigResponse.Validate if the designated constraints aren't met.
type GetTaxReportConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaxReportConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaxReportConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaxReportConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaxReportConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaxReportConfigResponseValidationError) ErrorName() string {
	return "GetTaxReportConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTaxReportConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaxReportConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaxReportConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaxReportConfigResponseValidationError{}

// Validate checks the field values on UpdateTaxReportConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTaxReportConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTaxReportConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTaxReportConfigRequestMultiError, or nil if none found.
func (m *UpdateTaxReportConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTaxReportConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Config

	if len(errors) > 0 {
		return UpdateTaxReportConfigRequestMultiError(errors)
	}

	return nil
}

// UpdateTaxReportConfigRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateTaxReportConfigRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateTaxReportConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTaxReportConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTaxReportConfigRequestMultiError) AllErrors() []error { return m }

// UpdateTaxReportConfigRequestValidationError is the validation error returned
// by UpdateTaxReportConfigRequest.Validate if the designated constraints
// aren't met.
type UpdateTaxReportConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTaxReportConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTaxReportConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTaxReportConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTaxReportConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTaxReportConfigRequestValidationError) ErrorName() string {
	return "UpdateTaxReportConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTaxReportConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTaxReportConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTaxReportConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTaxReportConfigRequestValidationError{}

// Validate checks the field values on UpdateTaxReportConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTaxReportConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTaxReportConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateTaxReportConfigResponseMultiError, or nil if none found.
func (m *UpdateTaxReportConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTaxReportConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateTaxReportConfigResponseMultiError(errors)
	}

	return nil
}

// UpdateTaxReportConfigResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateTaxReportConfigResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateTaxReportConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTaxReportConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTaxReportConfigResponseMultiError) AllErrors() []error { return m }

// UpdateTaxReportConfigResponseValidationError is the validation error
// returned by UpdateTaxReportConfigResponse.Validate if the designated
// constraints aren't met.
type UpdateTaxReportConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTaxReportConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTaxReportConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTaxReportConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTaxReportConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTaxReportConfigResponseValidationError) ErrorName() string {
	return "UpdateTaxReportConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTaxReportConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTaxReportConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTaxReportConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTaxReportConfigResponseValidationError{}

// Validate checks the field values on ListTaxReportsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTaxReportsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTaxReportsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTaxReportsRequestMultiError, or nil if none found.
func (m *ListTaxReportsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTaxReportsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaxPeriod

	// no validation rules for LicenseProvider

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListTaxReportsRequestMultiError(errors)
	}

	return nil
}

// ListTaxReportsRequestMultiError is an error wrapping multiple validation
// errors returned by ListTaxReportsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTaxReportsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTaxReportsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTaxReportsRequestMultiError) AllErrors() []error { return m }

// ListTaxReportsRequestValidationError is the validation error returned by
// ListTaxReportsRequest.Validate if the designated constraints aren't met.
type ListTaxReportsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaxReportsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaxReportsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaxReportsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaxReportsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaxReportsRequestValidationError) ErrorName() string {
	return "ListTaxReportsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTaxReportsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaxReportsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaxReportsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaxReportsRequestValidationError{}

// Validate checks the field values on ListTaxReportsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTaxReportsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTaxReportsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTaxReportsResponseMultiError, or nil if none found.
func (m *ListTaxReportsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTaxReportsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTaxReports() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTaxReportsResponseValidationError{
						field:  fmt.Sprintf("TaxReports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTaxReportsResponseValidationError{
						field:  fmt.Sprintf("TaxReports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTaxReportsResponseValidationError{
					field:  fmt.Sprintf("TaxReports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListTaxReportsResponseMultiError(errors)
	}

	return nil
}

// ListTaxReportsResponseMultiError is an error wrapping multiple validation
// errors returned by ListTaxReportsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTaxReportsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTaxReportsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTaxReportsResponseMultiError) AllErrors() []error { return m }

// ListTaxReportsResponseValidationError is the validation error returned by
// ListTaxReportsResponse.Validate if the designated constraints aren't met.
type ListTaxReportsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaxReportsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaxReportsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaxReportsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaxReportsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaxReportsResponseValidationError) ErrorName() string {
	return "ListTaxReportsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTaxReportsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaxReportsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaxReportsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaxReportsResponseValidationError{}

// Validate checks the field values on UpdateTaxReportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTaxReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTaxReportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTaxReportRequestMultiError, or nil if none found.
func (m *UpdateTaxReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTaxReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DepositDate

	// no validation rules for DepositSlipNo

	// no validation rules for RefCode

	if len(errors) > 0 {
		return UpdateTaxReportRequestMultiError(errors)
	}

	return nil
}

// UpdateTaxReportRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTaxReportRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTaxReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTaxReportRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTaxReportRequestMultiError) AllErrors() []error { return m }

// UpdateTaxReportRequestValidationError is the validation error returned by
// UpdateTaxReportRequest.Validate if the designated constraints aren't met.
type UpdateTaxReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTaxReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTaxReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTaxReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTaxReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTaxReportRequestValidationError) ErrorName() string {
	return "UpdateTaxReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTaxReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTaxReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTaxReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTaxReportRequestValidationError{}

// Validate checks the field values on UpdateTaxReportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTaxReportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTaxReportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTaxReportResponseMultiError, or nil if none found.
func (m *UpdateTaxReportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTaxReportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateTaxReportResponseMultiError(errors)
	}

	return nil
}

// UpdateTaxReportResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateTaxReportResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateTaxReportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTaxReportResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTaxReportResponseMultiError) AllErrors() []error { return m }

// UpdateTaxReportResponseValidationError is the validation error returned by
// UpdateTaxReportResponse.Validate if the designated constraints aren't met.
type UpdateTaxReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTaxReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTaxReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTaxReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTaxReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTaxReportResponseValidationError) ErrorName() string {
	return "UpdateTaxReportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTaxReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTaxReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTaxReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTaxReportResponseValidationError{}

// Validate checks the field values on ListInvoicesResponse_Invoice with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInvoicesResponse_Invoice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInvoicesResponse_Invoice with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInvoicesResponse_InvoiceMultiError, or nil if none found.
func (m *ListInvoicesResponse_Invoice) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInvoicesResponse_Invoice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InvoiceId

	// no validation rules for OperatorId

	// no validation rules for OperatorName

	// no validation rules for RetailerOperatorId

	// no validation rules for RetailerOperatorName

	// no validation rules for CompanyOperatorId

	// no validation rules for CompanyOperatorName

	// no validation rules for Month

	// no validation rules for DueAmount

	// no validation rules for TotalAmount

	// no validation rules for AmountPaid

	// no validation rules for PaymentStatus

	// no validation rules for InvoiceDate

	// no validation rules for DueDate

	if len(errors) > 0 {
		return ListInvoicesResponse_InvoiceMultiError(errors)
	}

	return nil
}

// ListInvoicesResponse_InvoiceMultiError is an error wrapping multiple
// validation errors returned by ListInvoicesResponse_Invoice.ValidateAll() if
// the designated constraints aren't met.
type ListInvoicesResponse_InvoiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInvoicesResponse_InvoiceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInvoicesResponse_InvoiceMultiError) AllErrors() []error { return m }

// ListInvoicesResponse_InvoiceValidationError is the validation error returned
// by ListInvoicesResponse_Invoice.Validate if the designated constraints
// aren't met.
type ListInvoicesResponse_InvoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInvoicesResponse_InvoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInvoicesResponse_InvoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInvoicesResponse_InvoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInvoicesResponse_InvoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInvoicesResponse_InvoiceValidationError) ErrorName() string {
	return "ListInvoicesResponse_InvoiceValidationError"
}

// Error satisfies the builtin error interface
func (e ListInvoicesResponse_InvoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInvoicesResponse_Invoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInvoicesResponse_InvoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInvoicesResponse_InvoiceValidationError{}

// Validate checks the field values on GetInvoiceDetailResponse_InvoiceDetail
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetInvoiceDetailResponse_InvoiceDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetInvoiceDetailResponse_InvoiceDetail with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetInvoiceDetailResponse_InvoiceDetailMultiError, or nil if none found.
func (m *GetInvoiceDetailResponse_InvoiceDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInvoiceDetailResponse_InvoiceDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InvoiceId

	// no validation rules for PaymentStatus

	// no validation rules for InvoiceDate

	// no validation rules for DueDate

	// no validation rules for Month

	// no validation rules for GameProviderRevenueShare

	// no validation rules for ThirdPartyCost

	// no validation rules for FeatureSubscription

	// no validation rules for RevenueShareSystem

	// no validation rules for RevenueShareOperator

	// no validation rules for Adjustments

	// no validation rules for TotalAmount

	// no validation rules for AmountPaid

	// no validation rules for DueAmount

	// no validation rules for RetailerOperatorId

	// no validation rules for RetailerOperatorName

	// no validation rules for CompanyOperatorId

	// no validation rules for CompanyOperatorName

	// no validation rules for OperatorId

	// no validation rules for OperatorName

	if len(errors) > 0 {
		return GetInvoiceDetailResponse_InvoiceDetailMultiError(errors)
	}

	return nil
}

// GetInvoiceDetailResponse_InvoiceDetailMultiError is an error wrapping
// multiple validation errors returned by
// GetInvoiceDetailResponse_InvoiceDetail.ValidateAll() if the designated
// constraints aren't met.
type GetInvoiceDetailResponse_InvoiceDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInvoiceDetailResponse_InvoiceDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInvoiceDetailResponse_InvoiceDetailMultiError) AllErrors() []error { return m }

// GetInvoiceDetailResponse_InvoiceDetailValidationError is the validation
// error returned by GetInvoiceDetailResponse_InvoiceDetail.Validate if the
// designated constraints aren't met.
type GetInvoiceDetailResponse_InvoiceDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInvoiceDetailResponse_InvoiceDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInvoiceDetailResponse_InvoiceDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInvoiceDetailResponse_InvoiceDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInvoiceDetailResponse_InvoiceDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInvoiceDetailResponse_InvoiceDetailValidationError) ErrorName() string {
	return "GetInvoiceDetailResponse_InvoiceDetailValidationError"
}

// Error satisfies the builtin error interface
func (e GetInvoiceDetailResponse_InvoiceDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInvoiceDetailResponse_InvoiceDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInvoiceDetailResponse_InvoiceDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInvoiceDetailResponse_InvoiceDetailValidationError{}

// Validate checks the field values on
// ListOperatorRevenueShareResponse_RevenueShareItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOperatorRevenueShareResponse_RevenueShareItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOperatorRevenueShareResponse_RevenueShareItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListOperatorRevenueShareResponse_RevenueShareItemMultiError, or nil if none found.
func (m *ListOperatorRevenueShareResponse_RevenueShareItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOperatorRevenueShareResponse_RevenueShareItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for OperatorName

	// no validation rules for GameProviderId

	// no validation rules for GameProviderName

	// no validation rules for FeeGroup

	// no validation rules for Currency

	// no validation rules for TotalBet

	// no validation rules for TotalPayout

	// no validation rules for BetsCount

	// no validation rules for Ngr

	// no validation rules for Ggr

	// no validation rules for Rate

	// no validation rules for Amount

	// no validation rules for FxRate

	// no validation rules for AmountUsd

	if len(errors) > 0 {
		return ListOperatorRevenueShareResponse_RevenueShareItemMultiError(errors)
	}

	return nil
}

// ListOperatorRevenueShareResponse_RevenueShareItemMultiError is an error
// wrapping multiple validation errors returned by
// ListOperatorRevenueShareResponse_RevenueShareItem.ValidateAll() if the
// designated constraints aren't met.
type ListOperatorRevenueShareResponse_RevenueShareItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOperatorRevenueShareResponse_RevenueShareItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOperatorRevenueShareResponse_RevenueShareItemMultiError) AllErrors() []error { return m }

// ListOperatorRevenueShareResponse_RevenueShareItemValidationError is the
// validation error returned by
// ListOperatorRevenueShareResponse_RevenueShareItem.Validate if the
// designated constraints aren't met.
type ListOperatorRevenueShareResponse_RevenueShareItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperatorRevenueShareResponse_RevenueShareItemValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListOperatorRevenueShareResponse_RevenueShareItemValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListOperatorRevenueShareResponse_RevenueShareItemValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListOperatorRevenueShareResponse_RevenueShareItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperatorRevenueShareResponse_RevenueShareItemValidationError) ErrorName() string {
	return "ListOperatorRevenueShareResponse_RevenueShareItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperatorRevenueShareResponse_RevenueShareItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperatorRevenueShareResponse_RevenueShareItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperatorRevenueShareResponse_RevenueShareItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperatorRevenueShareResponse_RevenueShareItemValidationError{}

// Validate checks the field values on
// ListThirdPartyFeesResponse_ThirdPartyFeeItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListThirdPartyFeesResponse_ThirdPartyFeeItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListThirdPartyFeesResponse_ThirdPartyFeeItem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListThirdPartyFeesResponse_ThirdPartyFeeItemMultiError, or nil if none found.
func (m *ListThirdPartyFeesResponse_ThirdPartyFeeItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThirdPartyFeesResponse_ThirdPartyFeeItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for OperatorName

	// no validation rules for Service

	// no validation rules for Quantity

	// no validation rules for Amount

	// no validation rules for Description

	if len(errors) > 0 {
		return ListThirdPartyFeesResponse_ThirdPartyFeeItemMultiError(errors)
	}

	return nil
}

// ListThirdPartyFeesResponse_ThirdPartyFeeItemMultiError is an error wrapping
// multiple validation errors returned by
// ListThirdPartyFeesResponse_ThirdPartyFeeItem.ValidateAll() if the
// designated constraints aren't met.
type ListThirdPartyFeesResponse_ThirdPartyFeeItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThirdPartyFeesResponse_ThirdPartyFeeItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThirdPartyFeesResponse_ThirdPartyFeeItemMultiError) AllErrors() []error { return m }

// ListThirdPartyFeesResponse_ThirdPartyFeeItemValidationError is the
// validation error returned by
// ListThirdPartyFeesResponse_ThirdPartyFeeItem.Validate if the designated
// constraints aren't met.
type ListThirdPartyFeesResponse_ThirdPartyFeeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThirdPartyFeesResponse_ThirdPartyFeeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThirdPartyFeesResponse_ThirdPartyFeeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThirdPartyFeesResponse_ThirdPartyFeeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThirdPartyFeesResponse_ThirdPartyFeeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThirdPartyFeesResponse_ThirdPartyFeeItemValidationError) ErrorName() string {
	return "ListThirdPartyFeesResponse_ThirdPartyFeeItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListThirdPartyFeesResponse_ThirdPartyFeeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThirdPartyFeesResponse_ThirdPartyFeeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThirdPartyFeesResponse_ThirdPartyFeeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThirdPartyFeesResponse_ThirdPartyFeeItemValidationError{}

// Validate checks the field values on
// ListMonthlyRevenueShareResponse_RevenueShareItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListMonthlyRevenueShareResponse_RevenueShareItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListMonthlyRevenueShareResponse_RevenueShareItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListMonthlyRevenueShareResponse_RevenueShareItemMultiError, or nil if none found.
func (m *ListMonthlyRevenueShareResponse_RevenueShareItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMonthlyRevenueShareResponse_RevenueShareItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for OperatorName

	// no validation rules for OperatorMode

	// no validation rules for RetailerOperatorId

	// no validation rules for RetailerOperatorName

	// no validation rules for CompanyOperatorId

	// no validation rules for CompanyOperatorName

	// no validation rules for Deposits

	// no validation rules for Withdrawals

	// no validation rules for Balance

	// no validation rules for Ngr

	// no validation rules for Ggr

	// no validation rules for GameProviderRs

	// no validation rules for ThirdPartyFees

	// no validation rules for Adjustments

	// no validation rules for NetProfit

	// no validation rules for RsRate

	// no validation rules for RevenueShareSystem

	// no validation rules for RevenueShareOperator

	// no validation rules for EstCosts

	if len(errors) > 0 {
		return ListMonthlyRevenueShareResponse_RevenueShareItemMultiError(errors)
	}

	return nil
}

// ListMonthlyRevenueShareResponse_RevenueShareItemMultiError is an error
// wrapping multiple validation errors returned by
// ListMonthlyRevenueShareResponse_RevenueShareItem.ValidateAll() if the
// designated constraints aren't met.
type ListMonthlyRevenueShareResponse_RevenueShareItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMonthlyRevenueShareResponse_RevenueShareItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMonthlyRevenueShareResponse_RevenueShareItemMultiError) AllErrors() []error { return m }

// ListMonthlyRevenueShareResponse_RevenueShareItemValidationError is the
// validation error returned by
// ListMonthlyRevenueShareResponse_RevenueShareItem.Validate if the designated
// constraints aren't met.
type ListMonthlyRevenueShareResponse_RevenueShareItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMonthlyRevenueShareResponse_RevenueShareItemValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListMonthlyRevenueShareResponse_RevenueShareItemValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListMonthlyRevenueShareResponse_RevenueShareItemValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListMonthlyRevenueShareResponse_RevenueShareItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMonthlyRevenueShareResponse_RevenueShareItemValidationError) ErrorName() string {
	return "ListMonthlyRevenueShareResponse_RevenueShareItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListMonthlyRevenueShareResponse_RevenueShareItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMonthlyRevenueShareResponse_RevenueShareItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMonthlyRevenueShareResponse_RevenueShareItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMonthlyRevenueShareResponse_RevenueShareItemValidationError{}

// Validate checks the field values on ListMonthlyRevenueShareResponse_Summary
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListMonthlyRevenueShareResponse_Summary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListMonthlyRevenueShareResponse_Summary with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListMonthlyRevenueShareResponse_SummaryMultiError, or nil if none found.
func (m *ListMonthlyRevenueShareResponse_Summary) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMonthlyRevenueShareResponse_Summary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subtotal

	// no validation rules for RevenueShareSystemTotal

	// no validation rules for RevenueShareOperatorTotal

	// no validation rules for EstCostsTotal

	if len(errors) > 0 {
		return ListMonthlyRevenueShareResponse_SummaryMultiError(errors)
	}

	return nil
}

// ListMonthlyRevenueShareResponse_SummaryMultiError is an error wrapping
// multiple validation errors returned by
// ListMonthlyRevenueShareResponse_Summary.ValidateAll() if the designated
// constraints aren't met.
type ListMonthlyRevenueShareResponse_SummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMonthlyRevenueShareResponse_SummaryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMonthlyRevenueShareResponse_SummaryMultiError) AllErrors() []error { return m }

// ListMonthlyRevenueShareResponse_SummaryValidationError is the validation
// error returned by ListMonthlyRevenueShareResponse_Summary.Validate if the
// designated constraints aren't met.
type ListMonthlyRevenueShareResponse_SummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMonthlyRevenueShareResponse_SummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMonthlyRevenueShareResponse_SummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMonthlyRevenueShareResponse_SummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMonthlyRevenueShareResponse_SummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMonthlyRevenueShareResponse_SummaryValidationError) ErrorName() string {
	return "ListMonthlyRevenueShareResponse_SummaryValidationError"
}

// Error satisfies the builtin error interface
func (e ListMonthlyRevenueShareResponse_SummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMonthlyRevenueShareResponse_Summary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMonthlyRevenueShareResponse_SummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMonthlyRevenueShareResponse_SummaryValidationError{}

// Validate checks the field values on
// ListAdjustmentConfigsResponse_AdjustmentConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAdjustmentConfigsResponse_AdjustmentConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListAdjustmentConfigsResponse_AdjustmentConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListAdjustmentConfigsResponse_AdjustmentConfigMultiError, or nil if none found.
func (m *ListAdjustmentConfigsResponse_AdjustmentConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdjustmentConfigsResponse_AdjustmentConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Item

	// no validation rules for Description

	if len(errors) > 0 {
		return ListAdjustmentConfigsResponse_AdjustmentConfigMultiError(errors)
	}

	return nil
}

// ListAdjustmentConfigsResponse_AdjustmentConfigMultiError is an error
// wrapping multiple validation errors returned by
// ListAdjustmentConfigsResponse_AdjustmentConfig.ValidateAll() if the
// designated constraints aren't met.
type ListAdjustmentConfigsResponse_AdjustmentConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdjustmentConfigsResponse_AdjustmentConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdjustmentConfigsResponse_AdjustmentConfigMultiError) AllErrors() []error { return m }

// ListAdjustmentConfigsResponse_AdjustmentConfigValidationError is the
// validation error returned by
// ListAdjustmentConfigsResponse_AdjustmentConfig.Validate if the designated
// constraints aren't met.
type ListAdjustmentConfigsResponse_AdjustmentConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdjustmentConfigsResponse_AdjustmentConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdjustmentConfigsResponse_AdjustmentConfigValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListAdjustmentConfigsResponse_AdjustmentConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdjustmentConfigsResponse_AdjustmentConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdjustmentConfigsResponse_AdjustmentConfigValidationError) ErrorName() string {
	return "ListAdjustmentConfigsResponse_AdjustmentConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdjustmentConfigsResponse_AdjustmentConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdjustmentConfigsResponse_AdjustmentConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdjustmentConfigsResponse_AdjustmentConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdjustmentConfigsResponse_AdjustmentConfigValidationError{}

// Validate checks the field values on ListAdjustmentsResponse_AdjustmentItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListAdjustmentsResponse_AdjustmentItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListAdjustmentsResponse_AdjustmentItem with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListAdjustmentsResponse_AdjustmentItemMultiError, or nil if none found.
func (m *ListAdjustmentsResponse_AdjustmentItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdjustmentsResponse_AdjustmentItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Item

	// no validation rules for OperatorId

	// no validation rules for OperatorName

	// no validation rules for Currency

	// no validation rules for Amount

	// no validation rules for Description

	if len(errors) > 0 {
		return ListAdjustmentsResponse_AdjustmentItemMultiError(errors)
	}

	return nil
}

// ListAdjustmentsResponse_AdjustmentItemMultiError is an error wrapping
// multiple validation errors returned by
// ListAdjustmentsResponse_AdjustmentItem.ValidateAll() if the designated
// constraints aren't met.
type ListAdjustmentsResponse_AdjustmentItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdjustmentsResponse_AdjustmentItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdjustmentsResponse_AdjustmentItemMultiError) AllErrors() []error { return m }

// ListAdjustmentsResponse_AdjustmentItemValidationError is the validation
// error returned by ListAdjustmentsResponse_AdjustmentItem.Validate if the
// designated constraints aren't met.
type ListAdjustmentsResponse_AdjustmentItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdjustmentsResponse_AdjustmentItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdjustmentsResponse_AdjustmentItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdjustmentsResponse_AdjustmentItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdjustmentsResponse_AdjustmentItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdjustmentsResponse_AdjustmentItemValidationError) ErrorName() string {
	return "ListAdjustmentsResponse_AdjustmentItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdjustmentsResponse_AdjustmentItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdjustmentsResponse_AdjustmentItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdjustmentsResponse_AdjustmentItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdjustmentsResponse_AdjustmentItemValidationError{}

// Validate checks the field values on ListBillingPeriodsResponse_BillingPeriod
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBillingPeriodsResponse_BillingPeriod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBillingPeriodsResponse_BillingPeriod with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListBillingPeriodsResponse_BillingPeriodMultiError, or nil if none found.
func (m *ListBillingPeriodsResponse_BillingPeriod) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBillingPeriodsResponse_BillingPeriod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for PeriodKey

	if len(errors) > 0 {
		return ListBillingPeriodsResponse_BillingPeriodMultiError(errors)
	}

	return nil
}

// ListBillingPeriodsResponse_BillingPeriodMultiError is an error wrapping
// multiple validation errors returned by
// ListBillingPeriodsResponse_BillingPeriod.ValidateAll() if the designated
// constraints aren't met.
type ListBillingPeriodsResponse_BillingPeriodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBillingPeriodsResponse_BillingPeriodMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBillingPeriodsResponse_BillingPeriodMultiError) AllErrors() []error { return m }

// ListBillingPeriodsResponse_BillingPeriodValidationError is the validation
// error returned by ListBillingPeriodsResponse_BillingPeriod.Validate if the
// designated constraints aren't met.
type ListBillingPeriodsResponse_BillingPeriodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBillingPeriodsResponse_BillingPeriodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBillingPeriodsResponse_BillingPeriodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBillingPeriodsResponse_BillingPeriodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBillingPeriodsResponse_BillingPeriodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBillingPeriodsResponse_BillingPeriodValidationError) ErrorName() string {
	return "ListBillingPeriodsResponse_BillingPeriodValidationError"
}

// Error satisfies the builtin error interface
func (e ListBillingPeriodsResponse_BillingPeriodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBillingPeriodsResponse_BillingPeriod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBillingPeriodsResponse_BillingPeriodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBillingPeriodsResponse_BillingPeriodValidationError{}

// Validate checks the field values on
// ListBalanceMonthlyRevenueSharesResponse_RevenueShareItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBalanceMonthlyRevenueSharesResponse_RevenueShareItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBalanceMonthlyRevenueSharesResponse_RevenueShareItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBalanceMonthlyRevenueSharesResponse_RevenueShareItemMultiError, or nil
// if none found.
func (m *ListBalanceMonthlyRevenueSharesResponse_RevenueShareItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBalanceMonthlyRevenueSharesResponse_RevenueShareItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for OperatorName

	// no validation rules for OperatorMode

	// no validation rules for RetailerOperatorId

	// no validation rules for RetailerOperatorName

	// no validation rules for CompanyOperatorId

	// no validation rules for CompanyOperatorName

	// no validation rules for Deposits

	// no validation rules for Withdrawals

	// no validation rules for Balance

	// no validation rules for Ngr

	// no validation rules for Ggr

	// no validation rules for GameProviderRs

	// no validation rules for ThirdPartyFees

	// no validation rules for Adjustments

	// no validation rules for NetProfit

	// no validation rules for RsRate

	// no validation rules for RevenueShareSystem

	// no validation rules for RevenueShareOperator

	// no validation rules for EstCosts

	// no validation rules for Id

	if len(errors) > 0 {
		return ListBalanceMonthlyRevenueSharesResponse_RevenueShareItemMultiError(errors)
	}

	return nil
}

// ListBalanceMonthlyRevenueSharesResponse_RevenueShareItemMultiError is an
// error wrapping multiple validation errors returned by
// ListBalanceMonthlyRevenueSharesResponse_RevenueShareItem.ValidateAll() if
// the designated constraints aren't met.
type ListBalanceMonthlyRevenueSharesResponse_RevenueShareItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBalanceMonthlyRevenueSharesResponse_RevenueShareItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBalanceMonthlyRevenueSharesResponse_RevenueShareItemMultiError) AllErrors() []error {
	return m
}

// ListBalanceMonthlyRevenueSharesResponse_RevenueShareItemValidationError is
// the validation error returned by
// ListBalanceMonthlyRevenueSharesResponse_RevenueShareItem.Validate if the
// designated constraints aren't met.
type ListBalanceMonthlyRevenueSharesResponse_RevenueShareItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBalanceMonthlyRevenueSharesResponse_RevenueShareItemValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListBalanceMonthlyRevenueSharesResponse_RevenueShareItemValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListBalanceMonthlyRevenueSharesResponse_RevenueShareItemValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListBalanceMonthlyRevenueSharesResponse_RevenueShareItemValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ListBalanceMonthlyRevenueSharesResponse_RevenueShareItemValidationError) ErrorName() string {
	return "ListBalanceMonthlyRevenueSharesResponse_RevenueShareItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListBalanceMonthlyRevenueSharesResponse_RevenueShareItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBalanceMonthlyRevenueSharesResponse_RevenueShareItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBalanceMonthlyRevenueSharesResponse_RevenueShareItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBalanceMonthlyRevenueSharesResponse_RevenueShareItemValidationError{}

// Validate checks the field values on
// ListBalancesSummaryResponse_BalanceSummary with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListBalancesSummaryResponse_BalanceSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBalancesSummaryResponse_BalanceSummary with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListBalancesSummaryResponse_BalanceSummaryMultiError, or nil if none found.
func (m *ListBalancesSummaryResponse_BalanceSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBalancesSummaryResponse_BalanceSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RetailerOperatorId

	// no validation rules for RetailerOperatorName

	// no validation rules for CompanyOperatorId

	// no validation rules for CompanyOperatorName

	// no validation rules for Deposits

	// no validation rules for Withdrawals

	// no validation rules for Balance

	// no validation rules for Ngr

	// no validation rules for GameProviderRs

	// no validation rules for ThirdPartyFees

	// no validation rules for Adjustments

	// no validation rules for EstNetProfit

	// no validation rules for RevenueShareSystem

	// no validation rules for RevenueShareOperator

	// no validation rules for EstNetCosts

	if len(errors) > 0 {
		return ListBalancesSummaryResponse_BalanceSummaryMultiError(errors)
	}

	return nil
}

// ListBalancesSummaryResponse_BalanceSummaryMultiError is an error wrapping
// multiple validation errors returned by
// ListBalancesSummaryResponse_BalanceSummary.ValidateAll() if the designated
// constraints aren't met.
type ListBalancesSummaryResponse_BalanceSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBalancesSummaryResponse_BalanceSummaryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBalancesSummaryResponse_BalanceSummaryMultiError) AllErrors() []error { return m }

// ListBalancesSummaryResponse_BalanceSummaryValidationError is the validation
// error returned by ListBalancesSummaryResponse_BalanceSummary.Validate if
// the designated constraints aren't met.
type ListBalancesSummaryResponse_BalanceSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBalancesSummaryResponse_BalanceSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBalancesSummaryResponse_BalanceSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBalancesSummaryResponse_BalanceSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBalancesSummaryResponse_BalanceSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBalancesSummaryResponse_BalanceSummaryValidationError) ErrorName() string {
	return "ListBalancesSummaryResponse_BalanceSummaryValidationError"
}

// Error satisfies the builtin error interface
func (e ListBalancesSummaryResponse_BalanceSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBalancesSummaryResponse_BalanceSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBalancesSummaryResponse_BalanceSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBalancesSummaryResponse_BalanceSummaryValidationError{}

// Validate checks the field values on ListTaxReportsResponse_TaxReport with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListTaxReportsResponse_TaxReport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTaxReportsResponse_TaxReport with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListTaxReportsResponse_TaxReportMultiError, or nil if none found.
func (m *ListTaxReportsResponse_TaxReport) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTaxReportsResponse_TaxReport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LicensedProvider

	// no validation rules for LicensedOperator

	// no validation rules for TaxPeriod

	// no validation rules for DepositDate

	// no validation rules for DepositSlipNo

	// no validation rules for RefCode

	// no validation rules for HoldTotalStake

	// no validation rules for WinningStakes

	// no validation rules for PunterWinningsLoss

	// no validation rules for ProfitLoss

	// no validation rules for TotalTaxLevy

	// no validation rules for VatPayableReceivable

	// no validation rules for EventCalculations

	// no validation rules for DeclarationStatus

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Id

	if len(errors) > 0 {
		return ListTaxReportsResponse_TaxReportMultiError(errors)
	}

	return nil
}

// ListTaxReportsResponse_TaxReportMultiError is an error wrapping multiple
// validation errors returned by
// ListTaxReportsResponse_TaxReport.ValidateAll() if the designated
// constraints aren't met.
type ListTaxReportsResponse_TaxReportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTaxReportsResponse_TaxReportMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTaxReportsResponse_TaxReportMultiError) AllErrors() []error { return m }

// ListTaxReportsResponse_TaxReportValidationError is the validation error
// returned by ListTaxReportsResponse_TaxReport.Validate if the designated
// constraints aren't met.
type ListTaxReportsResponse_TaxReportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaxReportsResponse_TaxReportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaxReportsResponse_TaxReportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaxReportsResponse_TaxReportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaxReportsResponse_TaxReportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaxReportsResponse_TaxReportValidationError) ErrorName() string {
	return "ListTaxReportsResponse_TaxReportValidationError"
}

// Error satisfies the builtin error interface
func (e ListTaxReportsResponse_TaxReportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaxReportsResponse_TaxReport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaxReportsResponse_TaxReportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaxReportsResponse_TaxReportValidationError{}
