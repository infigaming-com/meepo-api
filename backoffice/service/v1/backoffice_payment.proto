syntax = "proto3";

package api.backoffice.service.v1;

import "google/api/annotations.proto";
import "payment/service/v1/payment.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "common/common.proto";

option go_package = "github.com/infigaming-com/meepo-api/backoffice/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.backoffice.service.v1";

// BackofficePayment service
// Provides methods for backoffice payment management
service BackofficePayment {
	// Get payment transaction page
	// Retrieves a paginated list of payment transactions with optional filtering
	rpc GetPaymentTransactionPage(GetTransactionPageRequest) returns (payment.service.v1.GetTransactionPageResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/payment/transaction/page"
			body: "*"
		};
	}

	// Get transaction detail
	// Retrieves detailed information about a specific transaction
	// Error code: GET_TRANSACTION_DETAIL_FAILED(50009) - Failed to get transaction detail
	rpc GetPaymentTransactionById(payment.service.v1.GetTransactionDetailByIdRequest) returns (payment.service.v1.GetTransactionDetailByIdResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/payment/transaction/detail"
			body: "*"
		};
	}

	rpc GetPaymentOperatorTransactionPage(GetTransactionPageRequest) returns (payment.service.v1.GetTransactionPageResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/payment/operator/transaction/page"
			body: "*"
		};
	}

	// Get transaction detail
	// Retrieves detailed information about a specific transaction
	// Error code: GET_TRANSACTION_DETAIL_FAILED(50009) - Failed to get transaction detail
	rpc GetPaymentOperatorTransactionById(payment.service.v1.GetTransactionDetailByIdRequest) returns (payment.service.v1.GetTransactionDetailByIdResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/payment/operator/transaction/detail"
			body: "*"
		};
	}

  // Get list of payment methods
  // Retrieves all available payment methods supported by the system
  // Error code: GET_PAYMENT_METHOD_LIST_FAILED(50001) - Failed to get payment method list
  rpc GetSupportedPaymentMethodList(payment.service.v1.GetSupportedPaymentMethodListRequest) returns (payment.service.v1.GetSupportedPaymentMethodListResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/payment/supportedmethod/list"
      body: "*"
    };
  }

  // Get list of payment methods
  // Retrieves all available payment methods supported by the system
  // Error code: GET_PAYMENT_METHOD_LIST_FAILED(50001) - Failed to get payment method list
  rpc GetPaymentMethodList(GetPaymentMethodListRequest) returns (payment.service.v1.GetPaymentMethodListResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/payment/method/list"
      body: "*"
    };
  }

  // Create payment channel
  // Creates a new payment channel with specified configuration
  // Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
  rpc CreatePaymentMethod(CreatePaymentMethodRequest) returns (payment.service.v1.CreatePaymentMethodResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/payment/method/create"
      body: "*"
    };
  }

  // Create payment channel
  // Creates a new payment channel with specified configuration
  // Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
  rpc UpdatePaymentChannel(payment.service.v1.UpdatePaymentChannelRequest) returns (payment.service.v1.UpdatePaymentChannelResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/payment/channel/update"
      body: "*"
    };
  }

  // Create payment channel
  // Creates a new payment channel with specified configuration
  // Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
  rpc CreatePaymentChannel(CreatePaymentChannelRequest) returns (payment.service.v1.CreatePaymentChannelResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/payment/channel/create"
      body: "*"
    };
  }

  rpc GetOperatorAddress(GetOperatorAddressRequest) returns (payment.service.v1.GetOperatorAddressResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/payment/operator/address/get"
      body: "*"
    };
  }

  // Get payment channel page with pagination and filters
  // Retrieves a paginated list of payment channels with optional filtering
  // Error code: GET_PAYMENT_CHANNEL_PAGE_FAILED(50003) - Failed to get payment channel page
  rpc GetOperatorPaymentChannelPage(GetOperatorPaymentChannelPageRequest) returns (payment.service.v1.GetPaymentChannelPageResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/payment/channel/page"
      body: "*"
    };
  }

  // Update payment channel
	rpc UpdatePaymentMethod(payment.service.v1.UpdatePaymentMethodRequest) returns (payment.service.v1.CreatePaymentMethodResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/payment/method/update"
      body: "*"
    };
	}
}

// Request to get address
// Used to get DC address
message GetOperatorAddressRequest {
  // ID of the channel to use for this deposit
  string channel_id = 1;
  api.common.OperatorContext target_operator_context = 2;
  // Additional information needed for the deposit
  // May include clientOrderId, productId, userInfo, etc.
  google.protobuf.Struct extra = 3;

}

// Request to create a payment channel
// Used to create a new payment channel with specified merchant and method
message CreatePaymentMethodRequest {
  // ID of the payment method to be used
  string payment_method_id = 1;
  // Contact Info email
  string contact = 2;
  // Fixed Fee on the Amount
  string sys_fixed_fee = 3;
  // Rate Fee 
  string sys_fee_rate = 4;
  // Min Amount
  string sys_min_amount = 5;
  // Max Amount
  string sys_max_amount = 6;
  // Minmum Fee
  string sys_min_fee = 7;
}

// Request to create a payment channel
// Used to create a new payment channel with specified merchant and method
message CreatePaymentChannelRequest {
  // ID of the merchant creating this channel
  string merchant_id = 1;
  // ID of the payment method to be used
  string payment_method_id = 2;
  // Contact Info email
  string contact = 3;
  // PSP Fixed Fee on the Amount
  string fixed_fee = 4;
  // PSP Rate Fee 
  string fee_rate = 5;
  // Minimum Fee 
  string min_fee = 6;
  // User Fixed Fee on the Amount
  string user_fixed_fee = 7;
  // User Rate Fee 
  string user_fee_rate = 8;
  // Minimum Fee 
  string user_min_fee = 9;
  // Min Amount
  string min_amount = 10;
  // Max Amount
  string max_amount = 11;
  // Configuration fields for the payment channel in JSON format
  google.protobuf.Struct key = 12;
}

message GetPaymentMethodListRequest {
  // Currency like USD, VND
  string currency = 1;
  string psp = 2;
  string search = 3;
}

message GetTransactionPageRequest {
  // Page number to retrieve (1-based)
  int32 page = 1;
  // Number of items per page
  int32 page_size = 2 [json_name="pageSize"];
  
  // Optional transaction ID filter
  int64 transaction_id = 3 [json_name="transactionId"];
  // Optional currency filter
  string currency = 4;
  // Optional payment method filter
  string payment_method = 5 [json_name="paymentMethod"];
  // Optional payment channel filter
  string payment_channel = 6 [json_name="paymentChannel"];
  // Optional crypto protocol filter
  string protocol = 7;
  // Optional crypto network filter
  string network = 8;
  // Optional transaction type filter
  payment.service.v1.TransactionType type = 9;
  // Optional status filter
  payment.service.v1.TransactionStatus status = 10;
  // Optional agent filter
  string agent = 11;
  // Optional start time for date range filter
  google.protobuf.Timestamp start_time = 12 [json_name="startTime"];
  // Optional end time for date range filter
  google.protobuf.Timestamp end_time = 13 [json_name="endTime"];
  // Optional sort direction
  payment.service.v1.Sort sort = 14 [json_name="sort"];
  // Source of the request (frontend or admin)
  payment.service.v1.RequestSource source = 15 [json_name="source"];
  // Optional user ID filter
  int64 user_id = 16 [json_name="userId"];
  // Optional minimum amount filter
  string min_amount = 17 [json_name="minAmount"];
  // Optional maximum amount filter
  string max_amount = 18 [json_name="maxAmount"];
  api.common.OperatorContextFilters operator_context_filters = 19;
}

// Used to retrieve a paginated list of payment channels with optional filters
message GetOperatorPaymentChannelPageRequest {
  // Page number to retrieve (1-based)
  int32 page = 1;
  // Number of items per page
  int32 page_size = 2;
  // Optional channel type filter
  payment.service.v1.ChannelType type = 3;
  // Optional category filter
  string category = 4;
  // Optional payment method filter
  string payment_method = 5;
  // Optional currency filter
  string currency = 6;
  // Optional crypto protocol
  string protocol = 7;
  // Optional crypto network filter
  string network = 8;
  // Optional country filter
  string country = 9;
  // Source of operator type
  string source = 10;
  // Optional sort direction
  payment.service.v1.Sort sort = 11;
  // ID of the Operator connect with this channel
  api.common.OperatorContextFilters operator_context_filters = 12;
}
