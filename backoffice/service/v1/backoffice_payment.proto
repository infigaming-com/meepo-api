syntax = "proto3";

package api.backoffice.service.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/infigaming-com/meepo-api/backoffice/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.backoffice.service.v1";

service BackofficePayment {
	rpc GetPaymentTransactionPage(GetPaymentTransactionPageRequest) returns (GetPaymentTransactionPageResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/payment/transaction/page"
            body: "*"
        };
    }
}

// 定义枚举类型，与payment模块保持一致
enum TransactionType {
  // Money incoming to platform
  TRANSACTION_TYPE_DEPOSIT = 0;
  // Money outgoing from platform
  TRANSACTION_TYPE_WITHDRAW = 1;
}

// Transaction status enum
// Defines possible states of a transaction
enum TransactionStatus {
  // Default unspecified value
  TRANSACTION_STATUS_UNSPECIFIED = 0;
  // Transaction is in progress
  TRANSACTION_STATUS_PROCESSING = 1;
  // Transaction completed successfully
  TRANSACTION_STATUS_SUCCESSFUL = 2;
  // Transaction failed to complete
  TRANSACTION_STATUS_FAILED = 3;
}

// Sort enum
// Defines sort direction for queries
enum Sort {
  // Sort in descending order (newest first)
  DESC = 0;
  // Sort in ascending order (oldest first)
  ASC = 1;
}

// 与payment.service.v1.GetTransactionPageRequest保持一致的请求参数
message GetPaymentTransactionPageRequest {
  // Page number to retrieve (1-based)
  int32 page = 1;
  // Number of items per page
  int32 page_size = 2 [json_name="pageSize"];
  
  // Optional transaction ID filter
  int64 transaction_id = 3 [json_name="transactionId"];
  // Optional operator ID filter
  string operator_id = 4 [json_name="operatorId"];
  // Optional user ID filter
  int64 user_id = 5 [json_name="userId"];
  // Optional currency filter
  string currency = 6;
  // Optional payment method filter
  string payment_method = 7 [json_name="paymentMethod"];
  // Optional payment channel filter
  string payment_channel = 8 [json_name="paymentChannel"];
  // Optional protocol filter
  string protocol = 9;
  // Optional transaction type filter
  TransactionType type = 10;
  // Optional status filter
  TransactionStatus status = 11;
  // Optional agent filter
  string agent = 12;
  // Optional start time for date range filter
  google.protobuf.Timestamp start_time = 13 [json_name="startTime"];
  // Optional end time for date range filter
  google.protobuf.Timestamp end_time = 14 [json_name="endTime"];
  // Optional sort direction
  Sort sort = 15 [json_name="sort"];
}

message GetPaymentTransactionPageResponse {
	message PaymentTransaction {
		string operator = 1;
		google.protobuf.Timestamp created_at = 2;
		google.protobuf.Timestamp updated_at = 3;
		string type = 4;	// deposit or withdraw
		int64 user_id = 5;
		int32 vip_level = 6;
		string amount = 7;
		string before_balance = 8;	// from wallet
		string after_balance = 9;	// from wallet
		string currency = 10;
		string payment_channel = 11;
		string protocol = 12;
		string status = 13;
		int64 transaction_id = 14;
		string payment_gateway_transaction_id = 15;
	}
	repeated PaymentTransaction payment_transactions = 1;
	int32 total_count = 2 [json_name="totalCount"];
	int32 page = 3;
	int32 page_size = 4 [json_name="pageSize"];
	int32 total_pages = 5 [json_name="totalPages"];
	int32 total_successful = 6 [json_name="totalSuccessful"];
	int32 total_processing = 7 [json_name="totalProcessing"];
	int32 total_failed = 8 [json_name="totalFailed"];
}
