syntax = "proto3";

package api.backoffice.service.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "payment/service/v1/payment.proto";

option go_package = "github.com/infigaming-com/meepo-api/backoffice/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.backoffice.service.v1";

// BackofficePayment service
// Provides methods for backoffice payment management
service BackofficePayment {
	// Get payment transaction page
	// Retrieves a paginated list of payment transactions with optional filtering
	rpc GetPaymentTransactionPage(GetPaymentTransactionPageRequest) returns (GetPaymentTransactionPageResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/payment/transaction/page"
            body: "*"
        };
    }
}

// 定义枚举类型，与payment模块保持一致
// Transaction type enum
// Defines the direction of money flow
enum TransactionType {
  // Money incoming to platform
  TRANSACTION_TYPE_DEPOSIT = 0;
  // Money outgoing from platform
  TRANSACTION_TYPE_WITHDRAW = 1;
}

// Transaction status enum
// Defines possible states of a transaction
enum TransactionStatus {
  // Default unspecified value
  TRANSACTION_STATUS_UNSPECIFIED = 0;
  // Transaction is in progress
  TRANSACTION_STATUS_PROCESSING = 1;
  // Transaction completed successfully
  TRANSACTION_STATUS_SUCCESSFUL = 2;
  // Transaction failed to complete
  TRANSACTION_STATUS_FAILED = 3;
}

// Sort enum
// Defines sort direction for queries
enum Sort {
  // Sort in descending order (newest first)
  DESC = 0;
  // Sort in ascending order (oldest first)
  ASC = 1;
}

// Request to get payment transaction page
// Used to retrieve a paginated list of payment transactions with optional filters
message GetPaymentTransactionPageRequest {
  // Page number to retrieve (1-based)
  int32 page = 1;
  // Number of items per page
  int32 page_size = 2 [json_name="pageSize"];
  
  // Optional transaction ID filter
  int64 transaction_id = 3 [json_name="transactionId"];
  // Optional operator ID filter
  string operator_id = 4 [json_name="operatorId"];
  // Optional user ID filter
  int64 user_id = 5 [json_name="userId"];
  // Optional currency filter
  string currency = 6;
  // Optional payment method filter
  string payment_method = 7 [json_name="paymentMethod"];
  // Optional payment channel filter
  string payment_channel = 8 [json_name="paymentChannel"];
  // Optional protocol filter
  string protocol = 9;
  // Optional transaction type filter
  TransactionType type = 10;
  // Optional status filter
  TransactionStatus status = 11;
  // Optional agent filter
  string agent = 12;
  // Optional start time for date range filter
  google.protobuf.Timestamp start_time = 13 [json_name="startTime"];
  // Optional end time for date range filter
  google.protobuf.Timestamp end_time = 14 [json_name="endTime"];
  // Optional sort direction
  Sort sort = 15 [json_name="sort"];
}

// Response for payment transaction page
// Contains paginated list of payment transactions and pagination metadata
message GetPaymentTransactionPageResponse {
	// Payment transaction information
	// Detailed information about a specific payment transaction
	message PaymentTransaction {
		// Operator ID associated with the transaction
		string operator = 1;
		// Timestamp when the transaction was created
		google.protobuf.Timestamp created_at = 2 [json_name="createdAt"];
		// Timestamp when the transaction was last updated
		google.protobuf.Timestamp updated_at = 3 [json_name="updatedAt"];
		// ID of the user who initiated the transaction
		int64 user_id = 4 [json_name="userId"];
		// VIP level of the user
		int32 vip_level = 5 [json_name="vipLevel"];
		// Transaction amount with currency unit
		string amount = 6;
		// Currency code for the transaction
		string currency = 7;
		// Payment channel used for the transaction
		string payment_channel = 8 [json_name="paymentChannel"];
		// Protocol used for the transaction
		string protocol = 9;
		// Current status of the transaction
		TransactionStatus status = 10;
		// Unique identifier for the transaction
		int64 transaction_id = 11 [json_name="transactionId"];
		// Transaction ID from the payment gateway
		string pa_transaction_id = 12 [json_name="paTransactionId"];
	}
	// List of payment transactions matching the filter criteria
	repeated PaymentTransaction payment_transactions = 1;
	// Total number of transactions matching the filter criteria
	int32 total_count = 2 [json_name="totalCount"];
	// Current page number
	int32 page = 3;
	// Number of items per page
	int32 page_size = 4 [json_name="pageSize"];
	// Total number of pages available
	int32 total_pages = 5 [json_name="totalPages"];
	// Total number of successful transactions
	int32 total_successful = 6 [json_name="totalSuccessful"];
	// Total number of processing transactions
	int32 total_processing = 7 [json_name="totalProcessing"];
	// Total number of failed transactions
	int32 total_failed = 8 [json_name="totalFailed"];
}
