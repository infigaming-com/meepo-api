syntax = "proto3";

package api.backoffice.service.v1;

import "google/api/annotations.proto";
import "payment/service/v1/payment.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
// import "common/common.proto";

option go_package = "github.com/infigaming-com/meepo-api/backoffice/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.backoffice.service.v1";

// BackofficePayment service
// Provides methods for backoffice payment management
service BackofficePayment {
	// Get payment transaction page
	// Retrieves a paginated list of payment transactions with optional filtering
	rpc GetPaymentTransactionPage(payment.service.v1.GetTransactionPageRequest) returns (payment.service.v1.GetTransactionPageResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/payment/transaction/page"
			body: "*"
		};
	}

	// Get transaction detail
	// Retrieves detailed information about a specific transaction
	// Error code: GET_TRANSACTION_DETAIL_FAILED(50009) - Failed to get transaction detail
	rpc GetPaymentTransactionById(GetPaymentTransactionByIdRequest) returns (GetPaymentTransactionByIdResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/payment/transaction/detail"
			body: "*"
		};
	}

  // Get list of payment methods
  // Retrieves all available payment methods supported by the system
  // Error code: GET_PAYMENT_METHOD_LIST_FAILED(50001) - Failed to get payment method list
  rpc GetSupportedPaymentMethodList(GetSupportedPaymentMethodListRequest) returns (GetSupportedPaymentMethodListResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/payment/supportedmethod/list"
      body: "*"
    };
  }

  // Get list of payment methods
  // Retrieves all available payment methods supported by the system
  // Error code: GET_PAYMENT_METHOD_LIST_FAILED(50001) - Failed to get payment method list
  rpc GetPaymentMethodList(GetPaymentMethodListRequest) returns (GetPaymentMethodListResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/payment/method/list"
      body: "*"
    };
  }

  // Create payment channel
  // Creates a new payment channel with specified configuration
  // Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
  rpc CreatePaymentMethod(CreatePaymentMethodRequest) returns (CreatePaymentMethodResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/payment/method/create"
      body: "*"
    };
  }

  // Create payment channel
  // Creates a new payment channel with specified configuration
  // Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
  rpc DisablePaymentChannel(DisablePaymentChannelRequest) returns (DisablePaymentChannelResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/payment/channel/update"
      body: "*"
    };
  }

  // Create payment channel
  // Creates a new payment channel with specified configuration
  // Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
  rpc CreatePaymentChannel(CreatePaymentChannelRequest) returns (CreatePaymentChannelResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/payment/channel/create"
      body: "*"
    };
  }

  rpc GetOperatorAddress(GetOperatorAddressRequest) returns (GetOperatorAddressResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/payment/operator/address/get"
      body: "*"
    };
  }

  // Get payment channel page with pagination and filters
  // Retrieves a paginated list of payment channels with optional filtering
  // Error code: GET_PAYMENT_CHANNEL_PAGE_FAILED(50003) - Failed to get payment channel page
  rpc GetPaymentChannelPage(GetPaymentChannelPageRequest) returns (GetPaymentChannelPageResponse) {
    option (google.api.http) = {
      post: "/v1/payment/channel/page"
      body: "*"
    };
  }
}

// Request source enum
// Defines the source of the request
enum RequestSource {
	// Request from frontend user
	REQUEST_SOURCE_FRONTEND = 0;
	// Request from admin backend
	REQUEST_SOURCE_ADMIN = 1;
}

// Transaction type enum
// Defines possible types of financial transactions
enum TransactionType {
	// Default unspecified value
	TRANSACTION_TYPE_UNSPECIFIED = 0;
	// Money incoming to platform
	TRANSACTION_TYPE_DEPOSIT = 1;
	// Money outgoing from platform
	TRANSACTION_TYPE_WITHDRAW = 2;
}

// Transaction status enum
// Defines possible states of a transaction
enum TransactionStatus {
	// Default unspecified value
	TRANSACTION_STATUS_UNSPECIFIED = 0;
	// Transaction is in progress
	TRANSACTION_STATUS_PROCESSING = 1;
	// Transaction completed successfully
	TRANSACTION_STATUS_SUCCESSFUL = 2;
	// Transaction failed to complete
	TRANSACTION_STATUS_FAILED = 3;
}

// Channel type enum
// Defines the purpose of a payment channel
enum ChannelType {
  // Channel for depositing funds
  CHANNEL_TYPE_DEPOSIT = 0;
  // Channel for withdrawing funds
  CHANNEL_TYPE_WITHDRAW = 1;
}

// Sort enum
// Defines sort direction for queries
enum Sort {
  // Sort in descending order (newest first)
  DESC = 0;
  // Sort in ascending order (oldest first)
  ASC = 1;
}

// Transaction information
// Detailed information about a specific transaction
message TransactionInfo {
	// Unique identifier for the transaction
	int64 transaction_id = 1 [json_name="transactionId"];
	// Transaction ID from the operator's system
	string pa_transaction_id = 2 [json_name="paTransactionId"];
	// Transaction ID from the payment gateway
	string gateway_transaction_id = 3 [json_name="gatewayTransactionId"];
	// Operator ID associated with the transaction
	string operator_id = 4 [json_name="operatorId"];
	// ID of the user who initiated the transaction
	int64 user_id = 5 [json_name="userId"];
	// VIP level of the user
	int32 vip = 6;
	// Real amount of the transaction
	string amount = 7;
	// Currency code for the transaction
	string currency = 8;
	// Transaction fee in smallest currency unit
	string fee = 9;
	// Payment method used for the transaction
	string payment_method = 10 [json_name="paymentMethod"];
	// Payment channel used for the transaction
	string payment_channel = 11 [json_name="paymentChannel"];
	// Protocol used for the transaction
	string protocol = 12;
	// Type of transaction (deposit or withdrawal)
	TransactionType type = 13;
	// Current status of the transaction
	TransactionStatus status = 14;
	// Timestamp when the transaction was created
	google.protobuf.Timestamp created_at = 15 [json_name="createdAt"];
	// Timestamp when the transaction was last updated
	google.protobuf.Timestamp updated_at = 16 [json_name="updatedAt"];
}

// Payment channel information
// Detailed information about a specific payment channel
message PaymentChannelInfo {
  // Unique identifier for the channel
  string channel_id = 1 [json_name="channelId"];
  // Type of the channel (e.g., online, offline)
  string type = 2;
  // Category of the channel (e.g., bank, e-wallet)
  string category = 3;
  // ID of the operator who owns this channel
  string operator_id = 4 [json_name="operatorId"];
  // Payment method used in this channel
  string payment_method = 5 [json_name="paymentMethod"];
  // Tag for categorization or filtering
  string tag = 6;
  // Display name of the channel
  string name = 7;
  // ID of the payment method used
  string payment_method_id = 8 [json_name="paymentMethodId"];
  // Currency supported by this channel
  string currency = 9;
  // Crypto protocol supported by this channel
  string protocol = 10;
  // Crypto chian supported by this channel
  string network = 11;
  // Country where this channel is available
  string country = 12;
  // Specific method used (might be more detailed than payment_method)
  string method = 13;
  // URL to the logo image for this payment channel
  string logo = 14;
  // Minimum amount allowed for deposit transactions
  string min_deposit_amount = 15 [json_name="minDepositAmount"];
  // Maximum amount allowed for deposit transactions
  string max_deposit_amount = 16 [json_name="maxDepositAmount"];
  // Minimum amount allowed for withdrawal transactions
  string min_withdraw_amount = 17 [json_name="minWithdrawAmount"];
  // Maximum amount allowed for withdrawal transactions
  string max_withdraw_amount = 18 [json_name="maxWithdrawAmount"];
  // Estimated arrival time in minutes
  int32 eat = 19;
  // Fee
  string fix_fee = 20;
  string rate_fee = 21;
  // JSON schema defining deposit form fields required by this channel
  google.protobuf.Struct deposit_schema = 22 [json_name="depositSchema"];
  // JSON schema defining withdrawal form fields required by this channel
  google.protobuf.Struct withdraw_schema = 23 [json_name="withdrawSchema"];
  string source_type = 24;
  bool enable = 25;
}


message TransactionDetail {
	// Transaction information
	TransactionInfo transaction = 1;
	// Channel information
	PaymentChannelInfo channel = 2;
}

// Request to get transaction detail by ID
// Used to retrieve detailed information about a specific transaction
message GetPaymentTransactionByIdRequest {
	// Unique identifier for the transaction
	int64 transaction_id = 1 [json_name="transactionId"];
	// Source of the request (frontend or admin)
	RequestSource source = 2 [json_name="source"];
}

// Response for transaction detail
// Contains detailed information about the requested transaction
message GetPaymentTransactionByIdResponse {
	// Detailed transaction information including channel data
	TransactionDetail detail = 1;
}

message GetTransactionPageRequest {
	int32 page = 1;
	int32 page_size = 2;
	optional string currency = 3;
	optional TransactionType type = 4;
	optional TransactionStatus status = 5;
	optional google.protobuf.Timestamp start_time = 6;
	optional google.protobuf.Timestamp end_time = 7;
}

message GetTransactionPageResponse {
	repeated TransactionInfo transactions = 1;
	int32 total_count = 2;
	int32 page = 3;
	int32 page_size = 4;
}

// Details of a single payment method
// Contains information about a specific payment method including its ID, currency, and required fields schema
message PaymentMethodInfo {
  // Unique identifier for the payment method
  string id = 1;
  // Currency code supported by this payment method (e.g., USD, EUR, CNY)
  string psp = 2;
  string type = 3;
  string currency = 4;
  // Country code where this payment method is available
  string country = 5;
  // Name of the payment method (e.g., CreditCard, AliPay, WeChatPay)
  string payment_method = 6 [json_name="paymentMethod"];
  // Fixed Fee on the Amount
  string fixed_fee = 7;
  // Rate Fee 
  string fee_rate = 8;
  // Min Amount
  string min_amount = 9;
  // Max Amount
  string max_amount = 10;
  // JSON schema defining the required fields for this payment method
  google.protobuf.Struct key_schema = 11 [json_name="keySchema"]; 
}

message GetSupportedPaymentMethodListRequest {
  // Currency code supported by this payment method (e.g., USD, EUR, CNY)
  repeated string currency = 1;
}

// Response for payment method list
// Contains a list of all available payment methods
message GetSupportedPaymentMethodListResponse {
  // List of payment methods available
  repeated PaymentMethodInfo payment_methods = 1 [json_name="paymentMethods"];
	int32 total_count = 2;
	int32 page = 3;
	int32 page_size = 4;
}

// Request to create a payment channel
// Used to create a new payment channel with specified merchant and method
message CreatePaymentMethodRequest {
  // ID of the Operator connect with this channel
  string operator_id = 1;
  // ID of the payment method to be used
  string payment_method_id = 2 [json_name="paymentMethodId"];
  // Currency Type
  string currency_type = 3;
  // Contact Info email
  string contact = 4;
  // Fixed Fee on the Amount
  string fixed_fee = 5;
  // Rate Fee 
  string fee_rate = 6;
  // Min Amount
  string min_amount = 7;
  // Max Amount
  string max_amount = 8;
  // PSP Fixed Fee on the Amount
  string psp_fixed_fee = 9;
  // PSP Rate Fee 
  string psp_fee_rate = 10;
  // PSP Min Amount
  string psp_min_amount = 11;
  // PSP Max Amount
  string psp_max_amount = 12;
  // JSON schema defining the required fields for this payment method
  google.protobuf.Struct key = 13;
}

message CreatePaymentMethodResponse {
  PaymentMethodInfo payment_method = 1;
}

message GetPaymentMethodListRequest {
}

// Response for payment method list
// Contains a list of all available payment methods
message GetPaymentMethodListResponse {
  // List of payment methods available
  repeated PaymentMethodInfo payment_methods = 1 [json_name="paymentMethods"];
	int32 total_count = 2;
	int32 page = 3;
	int32 page_size = 4;
}

// Request to create a payment channel
// Used to create a new payment channel with specified merchant and method
message DisablePaymentChannelRequest {
  // ID of the merchant creating this channel
  string id = 1 [json_name="merchantId"];
}

message DisablePaymentChannelResponse {
  PaymentMethodInfo payment_methods = 1;
}

// Request to create a payment channel
// Used to create a new payment channel with specified merchant and method
message CreatePaymentChannelRequest {
  // ID of the merchant creating this channel
  string merchant_id = 1 [json_name="merchantId"];
  // ID of the Operator connect with this channel
  string operator_id = 2;
  // ID of the payment method to be used
  string payment_method_id = 3 [json_name="paymentMethodId"];
  // Type of channel (e.g., deposit, withdrawal)
  string type = 4;
  // Contact Info email
  string contact = 5;
  // PSP Fixed Fee on the Amount
  string psp_fixed_fee = 6;
  // PSP Rate Fee 
  string psp_fee_rate = 7;
  // User Fixed Fee on the Amount
  string user_fixed_fee = 8;
  // User Rate Fee 
  string user_fee_rate = 9;
  // Min Amount
  string min_amount = 10;
  // Max Amount
  string max_amount = 11;
  // Configuration fields for the payment channel in JSON format
  google.protobuf.Struct key = 12;
}

// Response for channel creation
// Returns the ID of the newly created payment channel
message CreatePaymentChannelResponse {
  // Unique identifier for the created channel
  string channel_id = 1 [json_name="channelId"];
}

// Request to get address
// Used to get DC address
message GetOperatorAddressRequest {
  // ID of the channel to use for this deposit
  string channel_id = 1 [json_name="channelId"];

  string target_currency = 2;
  // Additional information needed for the deposit
  // May include clientOrderId, productId, userInfo, etc.
  google.protobuf.Struct extra = 3;

}

// Response for deposit initiation
// Contains details about the initiated deposit transaction
message GetOperatorAddressResponse {
  message Data {
    // Crypto like btc, eth...
    string currency = 1;
    string target_currency = 2;
    // Crypto protocol
    string protocol = 3;
    // Crypto chain
    string network = 4;
    // Digital Currency address
    string address = 5;
  }
  Data data = 1;
}

// Request to get payment channel page
// Used to retrieve a paginated list of payment channels with optional filters
message GetPaymentChannelPageRequest {
  // Page number to retrieve (1-based)
  int32 page = 1;
  // Number of items per page
  int32 page_size = 2 [json_name="pageSize"];
  
  // Optional operator ID filter
  string operator_id = 3 [json_name="operatorId"];
  // Optional channel type filter
  ChannelType type = 4;
  // Optional category filter
  string category = 5;
  // Optional payment method filter
  string payment_method = 6 [json_name="paymentMethod"];
  // Optional currency filter
  string currency = 7;
  // Optional crypto protocol
  string protocol = 8;
  // Optional crypto network filter
  string network = 9;
  // Optional country filter
  string country = 10;
  // Optional sort direction
  Sort sort = 11 [json_name="sort"];
}

// Response for payment channel page
// Contains paginated list of payment channels and pagination metadata
message GetPaymentChannelPageResponse {
  // List of payment channels matching the filter criteria
  repeated PaymentChannelInfo payment_channels = 1 [json_name="paymentChannels"];
  // Total number of channels matching the filter criteria
  int32 total_count = 2 [json_name="totalCount"];
  // Current page number
  int32 page = 3;
  // Number of items per page
  int32 page_size = 4 [json_name="pageSize"];
  // Total number of pages available
  int32 total_pages = 5 [json_name="totalPages"];
}
