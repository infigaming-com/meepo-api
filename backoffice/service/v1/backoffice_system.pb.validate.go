// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_system.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SystemCurrency with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SystemCurrency) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemCurrency with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SystemCurrencyMultiError,
// or nil if none found.
func (m *SystemCurrency) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemCurrency) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	// no validation rules for Enabled

	// no validation rules for Hidden

	// no validation rules for Type

	// no validation rules for Symbol

	// no validation rules for Icon

	// no validation rules for DecimalPlaces

	// no validation rules for CurrencyDecimalPlaces

	if len(errors) > 0 {
		return SystemCurrencyMultiError(errors)
	}

	return nil
}

// SystemCurrencyMultiError is an error wrapping multiple validation errors
// returned by SystemCurrency.ValidateAll() if the designated constraints
// aren't met.
type SystemCurrencyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemCurrencyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemCurrencyMultiError) AllErrors() []error { return m }

// SystemCurrencyValidationError is the validation error returned by
// SystemCurrency.Validate if the designated constraints aren't met.
type SystemCurrencyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemCurrencyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemCurrencyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemCurrencyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemCurrencyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemCurrencyValidationError) ErrorName() string { return "SystemCurrencyValidationError" }

// Error satisfies the builtin error interface
func (e SystemCurrencyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemCurrency.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemCurrencyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemCurrencyValidationError{}

// Validate checks the field values on AddSystemCurrencyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddSystemCurrencyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSystemCurrencyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddSystemCurrencyRequestMultiError, or nil if none found.
func (m *AddSystemCurrencyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSystemCurrencyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	// no validation rules for Enabled

	// no validation rules for Hidden

	// no validation rules for Type

	// no validation rules for Symbol

	// no validation rules for Icon

	// no validation rules for DecimalPlaces

	// no validation rules for CurrencyDecimalPlaces

	if len(errors) > 0 {
		return AddSystemCurrencyRequestMultiError(errors)
	}

	return nil
}

// AddSystemCurrencyRequestMultiError is an error wrapping multiple validation
// errors returned by AddSystemCurrencyRequest.ValidateAll() if the designated
// constraints aren't met.
type AddSystemCurrencyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSystemCurrencyRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSystemCurrencyRequestMultiError) AllErrors() []error { return m }

// AddSystemCurrencyRequestValidationError is the validation error returned by
// AddSystemCurrencyRequest.Validate if the designated constraints aren't met.
type AddSystemCurrencyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSystemCurrencyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSystemCurrencyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSystemCurrencyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSystemCurrencyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSystemCurrencyRequestValidationError) ErrorName() string {
	return "AddSystemCurrencyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddSystemCurrencyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSystemCurrencyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSystemCurrencyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSystemCurrencyRequestValidationError{}

// Validate checks the field values on AddSystemCurrencyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddSystemCurrencyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSystemCurrencyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddSystemCurrencyResponseMultiError, or nil if none found.
func (m *AddSystemCurrencyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSystemCurrencyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddSystemCurrencyResponseMultiError(errors)
	}

	return nil
}

// AddSystemCurrencyResponseMultiError is an error wrapping multiple validation
// errors returned by AddSystemCurrencyResponse.ValidateAll() if the
// designated constraints aren't met.
type AddSystemCurrencyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSystemCurrencyResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSystemCurrencyResponseMultiError) AllErrors() []error { return m }

// AddSystemCurrencyResponseValidationError is the validation error returned by
// AddSystemCurrencyResponse.Validate if the designated constraints aren't met.
type AddSystemCurrencyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSystemCurrencyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSystemCurrencyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSystemCurrencyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSystemCurrencyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSystemCurrencyResponseValidationError) ErrorName() string {
	return "AddSystemCurrencyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddSystemCurrencyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSystemCurrencyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSystemCurrencyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSystemCurrencyResponseValidationError{}

// Validate checks the field values on ListSystemCurrenciesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSystemCurrenciesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSystemCurrenciesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSystemCurrenciesRequestMultiError, or nil if none found.
func (m *ListSystemCurrenciesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSystemCurrenciesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.Hidden != nil {
		// no validation rules for Hidden
	}

	if len(errors) > 0 {
		return ListSystemCurrenciesRequestMultiError(errors)
	}

	return nil
}

// ListSystemCurrenciesRequestMultiError is an error wrapping multiple
// validation errors returned by ListSystemCurrenciesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListSystemCurrenciesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSystemCurrenciesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSystemCurrenciesRequestMultiError) AllErrors() []error { return m }

// ListSystemCurrenciesRequestValidationError is the validation error returned
// by ListSystemCurrenciesRequest.Validate if the designated constraints
// aren't met.
type ListSystemCurrenciesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSystemCurrenciesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSystemCurrenciesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSystemCurrenciesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSystemCurrenciesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSystemCurrenciesRequestValidationError) ErrorName() string {
	return "ListSystemCurrenciesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSystemCurrenciesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSystemCurrenciesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSystemCurrenciesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSystemCurrenciesRequestValidationError{}

// Validate checks the field values on ListSystemCurrenciesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSystemCurrenciesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSystemCurrenciesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSystemCurrenciesResponseMultiError, or nil if none found.
func (m *ListSystemCurrenciesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSystemCurrenciesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCurrencies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSystemCurrenciesResponseValidationError{
						field:  fmt.Sprintf("Currencies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSystemCurrenciesResponseValidationError{
						field:  fmt.Sprintf("Currencies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSystemCurrenciesResponseValidationError{
					field:  fmt.Sprintf("Currencies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for TotalEnabled

	// no validation rules for TotalHidden

	if len(errors) > 0 {
		return ListSystemCurrenciesResponseMultiError(errors)
	}

	return nil
}

// ListSystemCurrenciesResponseMultiError is an error wrapping multiple
// validation errors returned by ListSystemCurrenciesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListSystemCurrenciesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSystemCurrenciesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSystemCurrenciesResponseMultiError) AllErrors() []error { return m }

// ListSystemCurrenciesResponseValidationError is the validation error returned
// by ListSystemCurrenciesResponse.Validate if the designated constraints
// aren't met.
type ListSystemCurrenciesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSystemCurrenciesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSystemCurrenciesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSystemCurrenciesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSystemCurrenciesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSystemCurrenciesResponseValidationError) ErrorName() string {
	return "ListSystemCurrenciesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSystemCurrenciesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSystemCurrenciesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSystemCurrenciesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSystemCurrenciesResponseValidationError{}

// Validate checks the field values on UpdateSystemCurrencyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSystemCurrencyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSystemCurrencyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSystemCurrencyRequestMultiError, or nil if none found.
func (m *UpdateSystemCurrencyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSystemCurrencyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.Hidden != nil {
		// no validation rules for Hidden
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Symbol != nil {
		// no validation rules for Symbol
	}

	if m.Icon != nil {
		// no validation rules for Icon
	}

	if m.DecimalPlaces != nil {
		// no validation rules for DecimalPlaces
	}

	if m.CurrencyDecimalPlaces != nil {
		// no validation rules for CurrencyDecimalPlaces
	}

	if len(errors) > 0 {
		return UpdateSystemCurrencyRequestMultiError(errors)
	}

	return nil
}

// UpdateSystemCurrencyRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateSystemCurrencyRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateSystemCurrencyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSystemCurrencyRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSystemCurrencyRequestMultiError) AllErrors() []error { return m }

// UpdateSystemCurrencyRequestValidationError is the validation error returned
// by UpdateSystemCurrencyRequest.Validate if the designated constraints
// aren't met.
type UpdateSystemCurrencyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSystemCurrencyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSystemCurrencyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSystemCurrencyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSystemCurrencyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSystemCurrencyRequestValidationError) ErrorName() string {
	return "UpdateSystemCurrencyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSystemCurrencyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSystemCurrencyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSystemCurrencyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSystemCurrencyRequestValidationError{}

// Validate checks the field values on UpdateSystemCurrencyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSystemCurrencyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSystemCurrencyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSystemCurrencyResponseMultiError, or nil if none found.
func (m *UpdateSystemCurrencyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSystemCurrencyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCurrency()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSystemCurrencyResponseValidationError{
					field:  "Currency",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSystemCurrencyResponseValidationError{
					field:  "Currency",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCurrency()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSystemCurrencyResponseValidationError{
				field:  "Currency",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSystemCurrencyResponseMultiError(errors)
	}

	return nil
}

// UpdateSystemCurrencyResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateSystemCurrencyResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateSystemCurrencyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSystemCurrencyResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSystemCurrencyResponseMultiError) AllErrors() []error { return m }

// UpdateSystemCurrencyResponseValidationError is the validation error returned
// by UpdateSystemCurrencyResponse.Validate if the designated constraints
// aren't met.
type UpdateSystemCurrencyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSystemCurrencyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSystemCurrencyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSystemCurrencyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSystemCurrencyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSystemCurrencyResponseValidationError) ErrorName() string {
	return "UpdateSystemCurrencyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSystemCurrencyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSystemCurrencyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSystemCurrencyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSystemCurrencyResponseValidationError{}
