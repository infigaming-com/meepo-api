// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_filestore.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackofficeFileStore_UploadOperatorStaticFile_FullMethodName     = "/api.backoffice.service.v1.BackofficeFileStore/UploadOperatorStaticFile"
	BackofficeFileStore_UploadRegisterLoginBlacklist_FullMethodName = "/api.backoffice.service.v1.BackofficeFileStore/UploadRegisterLoginBlacklist"
)

// BackofficeFileStoreClient is the client API for BackofficeFileStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackofficeFileStoreClient interface {
	UploadOperatorStaticFile(ctx context.Context, in *UploadOperatorStaticFileRequest, opts ...grpc.CallOption) (*UploadOperatorStaticFileResponse, error)
	UploadRegisterLoginBlacklist(ctx context.Context, in *UploadRegisterLoginBlacklistRequest, opts ...grpc.CallOption) (*UploadRegisterLoginBlacklistResponse, error)
}

type backofficeFileStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewBackofficeFileStoreClient(cc grpc.ClientConnInterface) BackofficeFileStoreClient {
	return &backofficeFileStoreClient{cc}
}

func (c *backofficeFileStoreClient) UploadOperatorStaticFile(ctx context.Context, in *UploadOperatorStaticFileRequest, opts ...grpc.CallOption) (*UploadOperatorStaticFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadOperatorStaticFileResponse)
	err := c.cc.Invoke(ctx, BackofficeFileStore_UploadOperatorStaticFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeFileStoreClient) UploadRegisterLoginBlacklist(ctx context.Context, in *UploadRegisterLoginBlacklistRequest, opts ...grpc.CallOption) (*UploadRegisterLoginBlacklistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadRegisterLoginBlacklistResponse)
	err := c.cc.Invoke(ctx, BackofficeFileStore_UploadRegisterLoginBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackofficeFileStoreServer is the server API for BackofficeFileStore service.
// All implementations must embed UnimplementedBackofficeFileStoreServer
// for forward compatibility.
type BackofficeFileStoreServer interface {
	UploadOperatorStaticFile(context.Context, *UploadOperatorStaticFileRequest) (*UploadOperatorStaticFileResponse, error)
	UploadRegisterLoginBlacklist(context.Context, *UploadRegisterLoginBlacklistRequest) (*UploadRegisterLoginBlacklistResponse, error)
	mustEmbedUnimplementedBackofficeFileStoreServer()
}

// UnimplementedBackofficeFileStoreServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackofficeFileStoreServer struct{}

func (UnimplementedBackofficeFileStoreServer) UploadOperatorStaticFile(context.Context, *UploadOperatorStaticFileRequest) (*UploadOperatorStaticFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadOperatorStaticFile not implemented")
}
func (UnimplementedBackofficeFileStoreServer) UploadRegisterLoginBlacklist(context.Context, *UploadRegisterLoginBlacklistRequest) (*UploadRegisterLoginBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadRegisterLoginBlacklist not implemented")
}
func (UnimplementedBackofficeFileStoreServer) mustEmbedUnimplementedBackofficeFileStoreServer() {}
func (UnimplementedBackofficeFileStoreServer) testEmbeddedByValue()                             {}

// UnsafeBackofficeFileStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackofficeFileStoreServer will
// result in compilation errors.
type UnsafeBackofficeFileStoreServer interface {
	mustEmbedUnimplementedBackofficeFileStoreServer()
}

func RegisterBackofficeFileStoreServer(s grpc.ServiceRegistrar, srv BackofficeFileStoreServer) {
	// If the following call pancis, it indicates UnimplementedBackofficeFileStoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackofficeFileStore_ServiceDesc, srv)
}

func _BackofficeFileStore_UploadOperatorStaticFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadOperatorStaticFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeFileStoreServer).UploadOperatorStaticFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeFileStore_UploadOperatorStaticFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeFileStoreServer).UploadOperatorStaticFile(ctx, req.(*UploadOperatorStaticFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeFileStore_UploadRegisterLoginBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRegisterLoginBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeFileStoreServer).UploadRegisterLoginBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeFileStore_UploadRegisterLoginBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeFileStoreServer).UploadRegisterLoginBlacklist(ctx, req.(*UploadRegisterLoginBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackofficeFileStore_ServiceDesc is the grpc.ServiceDesc for BackofficeFileStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackofficeFileStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.BackofficeFileStore",
	HandlerType: (*BackofficeFileStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadOperatorStaticFile",
			Handler:    _BackofficeFileStore_UploadOperatorStaticFile_Handler,
		},
		{
			MethodName: "UploadRegisterLoginBlacklist",
			Handler:    _BackofficeFileStore_UploadRegisterLoginBlacklist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_filestore.proto",
}
