// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_game.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProvidersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProvidersRequestMultiError, or nil if none found.
func (m *ListProvidersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProvidersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if len(errors) > 0 {
		return ListProvidersRequestMultiError(errors)
	}

	return nil
}

// ListProvidersRequestMultiError is an error wrapping multiple validation
// errors returned by ListProvidersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProvidersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProvidersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProvidersRequestMultiError) AllErrors() []error { return m }

// ListProvidersRequestValidationError is the validation error returned by
// ListProvidersRequest.Validate if the designated constraints aren't met.
type ListProvidersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersRequestValidationError) ErrorName() string {
	return "ListProvidersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersRequestValidationError{}

// Validate checks the field values on ListProvidersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProvidersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProvidersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProvidersResponseMultiError, or nil if none found.
func (m *ListProvidersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProvidersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProvidersResponseValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProvidersResponseMultiError(errors)
	}

	return nil
}

// ListProvidersResponseMultiError is an error wrapping multiple validation
// errors returned by ListProvidersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProvidersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProvidersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProvidersResponseMultiError) AllErrors() []error { return m }

// ListProvidersResponseValidationError is the validation error returned by
// ListProvidersResponse.Validate if the designated constraints aren't met.
type ListProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersResponseValidationError) ErrorName() string {
	return "ListProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersResponseValidationError{}

// Validate checks the field values on ListProvidersWithDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProvidersWithDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProvidersWithDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProvidersWithDetailRequestMultiError, or nil if none found.
func (m *ListProvidersWithDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProvidersWithDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.ProviderId != nil {
		// no validation rules for ProviderId
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListProvidersWithDetailRequestMultiError(errors)
	}

	return nil
}

// ListProvidersWithDetailRequestMultiError is an error wrapping multiple
// validation errors returned by ListProvidersWithDetailRequest.ValidateAll()
// if the designated constraints aren't met.
type ListProvidersWithDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProvidersWithDetailRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProvidersWithDetailRequestMultiError) AllErrors() []error { return m }

// ListProvidersWithDetailRequestValidationError is the validation error
// returned by ListProvidersWithDetailRequest.Validate if the designated
// constraints aren't met.
type ListProvidersWithDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersWithDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersWithDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersWithDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersWithDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersWithDetailRequestValidationError) ErrorName() string {
	return "ListProvidersWithDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersWithDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersWithDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersWithDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersWithDetailRequestValidationError{}

// Validate checks the field values on ListProvidersWithDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProvidersWithDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProvidersWithDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProvidersWithDetailResponseMultiError, or nil if none found.
func (m *ListProvidersWithDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProvidersWithDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProvidersWithDetailResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProvidersWithDetailResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProvidersWithDetailResponseValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for TotalEnabled

	// no validation rules for TotalDisabled

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListProvidersWithDetailResponseMultiError(errors)
	}

	return nil
}

// ListProvidersWithDetailResponseMultiError is an error wrapping multiple
// validation errors returned by ListProvidersWithDetailResponse.ValidateAll()
// if the designated constraints aren't met.
type ListProvidersWithDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProvidersWithDetailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProvidersWithDetailResponseMultiError) AllErrors() []error { return m }

// ListProvidersWithDetailResponseValidationError is the validation error
// returned by ListProvidersWithDetailResponse.Validate if the designated
// constraints aren't met.
type ListProvidersWithDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersWithDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersWithDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersWithDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersWithDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersWithDetailResponseValidationError) ErrorName() string {
	return "ListProvidersWithDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersWithDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersWithDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersWithDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersWithDetailResponseValidationError{}

// Validate checks the field values on ListCategoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCategoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCategoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCategoriesRequestMultiError, or nil if none found.
func (m *ListCategoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCategoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.ProviderId != nil {
		// no validation rules for ProviderId
	}

	if len(errors) > 0 {
		return ListCategoriesRequestMultiError(errors)
	}

	return nil
}

// ListCategoriesRequestMultiError is an error wrapping multiple validation
// errors returned by ListCategoriesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCategoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCategoriesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCategoriesRequestMultiError) AllErrors() []error { return m }

// ListCategoriesRequestValidationError is the validation error returned by
// ListCategoriesRequest.Validate if the designated constraints aren't met.
type ListCategoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoriesRequestValidationError) ErrorName() string {
	return "ListCategoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCategoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoriesRequestValidationError{}

// Validate checks the field values on ListCategoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCategoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCategoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCategoriesResponseMultiError, or nil if none found.
func (m *ListCategoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCategoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCategoriesResponseMultiError(errors)
	}

	return nil
}

// ListCategoriesResponseMultiError is an error wrapping multiple validation
// errors returned by ListCategoriesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCategoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCategoriesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCategoriesResponseMultiError) AllErrors() []error { return m }

// ListCategoriesResponseValidationError is the validation error returned by
// ListCategoriesResponse.Validate if the designated constraints aren't met.
type ListCategoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoriesResponseValidationError) ErrorName() string {
	return "ListCategoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCategoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoriesResponseValidationError{}

// Validate checks the field values on ListFeeGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFeeGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFeeGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFeeGroupsRequestMultiError, or nil if none found.
func (m *ListFeeGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFeeGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.ProviderId != nil {
		// no validation rules for ProviderId
	}

	if m.Category != nil {
		// no validation rules for Category
	}

	if len(errors) > 0 {
		return ListFeeGroupsRequestMultiError(errors)
	}

	return nil
}

// ListFeeGroupsRequestMultiError is an error wrapping multiple validation
// errors returned by ListFeeGroupsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListFeeGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFeeGroupsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFeeGroupsRequestMultiError) AllErrors() []error { return m }

// ListFeeGroupsRequestValidationError is the validation error returned by
// ListFeeGroupsRequest.Validate if the designated constraints aren't met.
type ListFeeGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFeeGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFeeGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFeeGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFeeGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFeeGroupsRequestValidationError) ErrorName() string {
	return "ListFeeGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFeeGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFeeGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFeeGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFeeGroupsRequestValidationError{}

// Validate checks the field values on ListFeeGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFeeGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFeeGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFeeGroupsResponseMultiError, or nil if none found.
func (m *ListFeeGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFeeGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListFeeGroupsResponseMultiError(errors)
	}

	return nil
}

// ListFeeGroupsResponseMultiError is an error wrapping multiple validation
// errors returned by ListFeeGroupsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListFeeGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFeeGroupsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFeeGroupsResponseMultiError) AllErrors() []error { return m }

// ListFeeGroupsResponseValidationError is the validation error returned by
// ListFeeGroupsResponse.Validate if the designated constraints aren't met.
type ListFeeGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFeeGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFeeGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFeeGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFeeGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFeeGroupsResponseValidationError) ErrorName() string {
	return "ListFeeGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFeeGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFeeGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFeeGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFeeGroupsResponseValidationError{}

// Validate checks the field values on ListTagsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTagsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTagsRequestMultiError, or nil if none found.
func (m *ListTagsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTagsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTagsRequestMultiError(errors)
	}

	return nil
}

// ListTagsRequestMultiError is an error wrapping multiple validation errors
// returned by ListTagsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTagsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTagsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTagsRequestMultiError) AllErrors() []error { return m }

// ListTagsRequestValidationError is the validation error returned by
// ListTagsRequest.Validate if the designated constraints aren't met.
type ListTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTagsRequestValidationError) ErrorName() string { return "ListTagsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTagsRequestValidationError{}

// Validate checks the field values on ListTagsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTagsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTagsResponseMultiError, or nil if none found.
func (m *ListTagsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTagsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTagsResponseMultiError(errors)
	}

	return nil
}

// ListTagsResponseMultiError is an error wrapping multiple validation errors
// returned by ListTagsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListTagsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTagsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTagsResponseMultiError) AllErrors() []error { return m }

// ListTagsResponseValidationError is the validation error returned by
// ListTagsResponse.Validate if the designated constraints aren't met.
type ListTagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTagsResponseValidationError) ErrorName() string { return "ListTagsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListTagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTagsResponseValidationError{}

// Validate checks the field values on ListThemesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListThemesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListThemesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListThemesRequestMultiError, or nil if none found.
func (m *ListThemesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThemesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListThemesRequestMultiError(errors)
	}

	return nil
}

// ListThemesRequestMultiError is an error wrapping multiple validation errors
// returned by ListThemesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListThemesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThemesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThemesRequestMultiError) AllErrors() []error { return m }

// ListThemesRequestValidationError is the validation error returned by
// ListThemesRequest.Validate if the designated constraints aren't met.
type ListThemesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThemesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThemesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThemesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThemesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThemesRequestValidationError) ErrorName() string {
	return "ListThemesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListThemesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThemesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThemesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThemesRequestValidationError{}

// Validate checks the field values on ListThemesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListThemesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListThemesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListThemesResponseMultiError, or nil if none found.
func (m *ListThemesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThemesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListThemesResponseMultiError(errors)
	}

	return nil
}

// ListThemesResponseMultiError is an error wrapping multiple validation errors
// returned by ListThemesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListThemesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThemesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThemesResponseMultiError) AllErrors() []error { return m }

// ListThemesResponseValidationError is the validation error returned by
// ListThemesResponse.Validate if the designated constraints aren't met.
type ListThemesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThemesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThemesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThemesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThemesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThemesResponseValidationError) ErrorName() string {
	return "ListThemesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListThemesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThemesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThemesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThemesResponseValidationError{}

// Validate checks the field values on ListCurrenciesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCurrenciesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCurrenciesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCurrenciesRequestMultiError, or nil if none found.
func (m *ListCurrenciesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCurrenciesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.ProviderId != nil {
		// no validation rules for ProviderId
	}

	if len(errors) > 0 {
		return ListCurrenciesRequestMultiError(errors)
	}

	return nil
}

// ListCurrenciesRequestMultiError is an error wrapping multiple validation
// errors returned by ListCurrenciesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCurrenciesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCurrenciesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCurrenciesRequestMultiError) AllErrors() []error { return m }

// ListCurrenciesRequestValidationError is the validation error returned by
// ListCurrenciesRequest.Validate if the designated constraints aren't met.
type ListCurrenciesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCurrenciesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCurrenciesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCurrenciesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCurrenciesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCurrenciesRequestValidationError) ErrorName() string {
	return "ListCurrenciesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCurrenciesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCurrenciesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCurrenciesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCurrenciesRequestValidationError{}

// Validate checks the field values on ListCurrenciesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCurrenciesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCurrenciesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCurrenciesResponseMultiError, or nil if none found.
func (m *ListCurrenciesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCurrenciesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCurrenciesResponseMultiError(errors)
	}

	return nil
}

// ListCurrenciesResponseMultiError is an error wrapping multiple validation
// errors returned by ListCurrenciesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCurrenciesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCurrenciesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCurrenciesResponseMultiError) AllErrors() []error { return m }

// ListCurrenciesResponseValidationError is the validation error returned by
// ListCurrenciesResponse.Validate if the designated constraints aren't met.
type ListCurrenciesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCurrenciesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCurrenciesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCurrenciesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCurrenciesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCurrenciesResponseValidationError) ErrorName() string {
	return "ListCurrenciesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCurrenciesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCurrenciesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCurrenciesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCurrenciesResponseValidationError{}

// Validate checks the field values on ListBetsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListBetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBetsRequestMultiError, or nil if none found.
func (m *ListBetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListBetsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListBetsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListBetsRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.SettlementCurrencyOption.(type) {
	case *ListBetsRequest_SettlementCurrencyWithRanges:
		if v == nil {
			err := ListBetsRequestValidationError{
				field:  "SettlementCurrencyOption",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSettlementCurrencyWithRanges()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBetsRequestValidationError{
						field:  "SettlementCurrencyWithRanges",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBetsRequestValidationError{
						field:  "SettlementCurrencyWithRanges",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSettlementCurrencyWithRanges()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBetsRequestValidationError{
					field:  "SettlementCurrencyWithRanges",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListBetsRequest_SettlementCurrencies:
		if v == nil {
			err := ListBetsRequestValidationError{
				field:  "SettlementCurrencyOption",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSettlementCurrencies()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBetsRequestValidationError{
						field:  "SettlementCurrencies",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBetsRequestValidationError{
						field:  "SettlementCurrencies",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSettlementCurrencies()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBetsRequestValidationError{
					field:  "SettlementCurrencies",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if m.GameName != nil {
		// no validation rules for GameName
	}

	if m.GameId != nil {
		// no validation rules for GameId
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.OperatorBetId != nil {
		// no validation rules for OperatorBetId
	}

	if m.ProviderBetId != nil {
		// no validation rules for ProviderBetId
	}

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBetsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBetsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBetsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBetsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBetsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBetsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CurrencyWithRanges != nil {

		if all {
			switch v := interface{}(m.GetCurrencyWithRanges()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBetsRequestValidationError{
						field:  "CurrencyWithRanges",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBetsRequestValidationError{
						field:  "CurrencyWithRanges",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCurrencyWithRanges()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBetsRequestValidationError{
					field:  "CurrencyWithRanges",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListBetsRequestMultiError(errors)
	}

	return nil
}

// ListBetsRequestMultiError is an error wrapping multiple validation errors
// returned by ListBetsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListBetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBetsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBetsRequestMultiError) AllErrors() []error { return m }

// ListBetsRequestValidationError is the validation error returned by
// ListBetsRequest.Validate if the designated constraints aren't met.
type ListBetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBetsRequestValidationError) ErrorName() string { return "ListBetsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListBetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBetsRequestValidationError{}

// Validate checks the field values on Bet with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Bet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bet with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BetMultiError, or nil if none found.
func (m *Bet) ValidateAll() error {
	return m.validate(true)
}

func (m *Bet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProviderBetId

	// no validation rules for RoundId

	// no validation rules for ProviderRoundId

	// no validation rules for ProviderId

	// no validation rules for ProviderName

	// no validation rules for OperatorId

	// no validation rules for OperatorName

	// no validation rules for CompanyOperatorId

	// no validation rules for CompanyOperatorName

	// no validation rules for RetailerOperatorId

	// no validation rules for RetailerOperatorName

	// no validation rules for SystemOperatorId

	// no validation rules for SystemOperatorName

	// no validation rules for Currency

	// no validation rules for SettlementCurrency

	// no validation rules for Status

	// no validation rules for UserId

	// no validation rules for GameId

	// no validation rules for GameName

	// no validation rules for GameCategory

	// no validation rules for WinCount

	// no validation rules for BetAmount

	// no validation rules for ValidBetAmount

	// no validation rules for SettlementBetAmount

	// no validation rules for WinAmount

	// no validation rules for SettlementWinAmount

	// no validation rules for Turnover

	// no validation rules for Odds

	// no validation rules for RollbackBetAmount

	// no validation rules for RollbackWinAmount

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BetValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BetValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BetValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BetValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BetValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BetValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BetMultiError(errors)
	}

	return nil
}

// BetMultiError is an error wrapping multiple validation errors returned by
// Bet.ValidateAll() if the designated constraints aren't met.
type BetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BetMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BetMultiError) AllErrors() []error { return m }

// BetValidationError is the validation error returned by Bet.Validate if the
// designated constraints aren't met.
type BetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BetValidationError) ErrorName() string { return "BetValidationError" }

// Error satisfies the builtin error interface
func (e BetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BetValidationError{}

// Validate checks the field values on ListBetsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListBetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBetsResponseMultiError, or nil if none found.
func (m *ListBetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBetsResponseValidationError{
						field:  fmt.Sprintf("Bets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBetsResponseValidationError{
						field:  fmt.Sprintf("Bets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBetsResponseValidationError{
					field:  fmt.Sprintf("Bets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Turnover

	// no validation rules for WinAmount

	// no validation rules for BetCount

	// no validation rules for RtpPercentage

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return ListBetsResponseMultiError(errors)
	}

	return nil
}

// ListBetsResponseMultiError is an error wrapping multiple validation errors
// returned by ListBetsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListBetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBetsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBetsResponseMultiError) AllErrors() []error { return m }

// ListBetsResponseValidationError is the validation error returned by
// ListBetsResponse.Validate if the designated constraints aren't met.
type ListBetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBetsResponseValidationError) ErrorName() string { return "ListBetsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListBetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBetsResponseValidationError{}

// Validate checks the field values on GetBetByIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBetByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBetByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBetByIdRequestMultiError, or nil if none found.
func (m *GetBetByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBetByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BetId

	if m.IncludeActions != nil {
		// no validation rules for IncludeActions
	}

	if len(errors) > 0 {
		return GetBetByIdRequestMultiError(errors)
	}

	return nil
}

// GetBetByIdRequestMultiError is an error wrapping multiple validation errors
// returned by GetBetByIdRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBetByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBetByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBetByIdRequestMultiError) AllErrors() []error { return m }

// GetBetByIdRequestValidationError is the validation error returned by
// GetBetByIdRequest.Validate if the designated constraints aren't met.
type GetBetByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBetByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBetByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBetByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBetByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBetByIdRequestValidationError) ErrorName() string {
	return "GetBetByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBetByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBetByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBetByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBetByIdRequestValidationError{}

// Validate checks the field values on GetBetByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBetByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBetByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBetByIdResponseMultiError, or nil if none found.
func (m *GetBetByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBetByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBetByIdResponseValidationError{
					field:  "Bet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBetByIdResponseValidationError{
					field:  "Bet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBetByIdResponseValidationError{
				field:  "Bet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBetByIdResponseMultiError(errors)
	}

	return nil
}

// GetBetByIdResponseMultiError is an error wrapping multiple validation errors
// returned by GetBetByIdResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBetByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBetByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBetByIdResponseMultiError) AllErrors() []error { return m }

// GetBetByIdResponseValidationError is the validation error returned by
// GetBetByIdResponse.Validate if the designated constraints aren't met.
type GetBetByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBetByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBetByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBetByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBetByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBetByIdResponseValidationError) ErrorName() string {
	return "GetBetByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBetByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBetByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBetByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBetByIdResponseValidationError{}

// Validate checks the field values on GetUserBetsOverviewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserBetsOverviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserBetsOverviewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserBetsOverviewRequestMultiError, or nil if none found.
func (m *GetUserBetsOverviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserBetsOverviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.GameId != nil {
		// no validation rules for GameId
	}

	if m.BetAmountMin != nil {
		// no validation rules for BetAmountMin
	}

	if m.BetAmountMax != nil {
		// no validation rules for BetAmountMax
	}

	if m.WinAmountMin != nil {
		// no validation rules for WinAmountMin
	}

	if m.WinAmountMax != nil {
		// no validation rules for WinAmountMax
	}

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserBetsOverviewRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserBetsOverviewRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserBetsOverviewRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserBetsOverviewRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserBetsOverviewRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserBetsOverviewRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return GetUserBetsOverviewRequestMultiError(errors)
	}

	return nil
}

// GetUserBetsOverviewRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserBetsOverviewRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserBetsOverviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserBetsOverviewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserBetsOverviewRequestMultiError) AllErrors() []error { return m }

// GetUserBetsOverviewRequestValidationError is the validation error returned
// by GetUserBetsOverviewRequest.Validate if the designated constraints aren't met.
type GetUserBetsOverviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserBetsOverviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserBetsOverviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserBetsOverviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserBetsOverviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserBetsOverviewRequestValidationError) ErrorName() string {
	return "GetUserBetsOverviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserBetsOverviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserBetsOverviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserBetsOverviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserBetsOverviewRequestValidationError{}

// Validate checks the field values on GetUserBetsOverviewResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserBetsOverviewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserBetsOverviewResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserBetsOverviewResponseMultiError, or nil if none found.
func (m *GetUserBetsOverviewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserBetsOverviewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rounds

	// no validation rules for BetCount

	// no validation rules for Turnover

	// no validation rules for BetAmount

	// no validation rules for WinAmount

	// no validation rules for Ggr

	// no validation rules for Ngr

	if len(errors) > 0 {
		return GetUserBetsOverviewResponseMultiError(errors)
	}

	return nil
}

// GetUserBetsOverviewResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserBetsOverviewResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUserBetsOverviewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserBetsOverviewResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserBetsOverviewResponseMultiError) AllErrors() []error { return m }

// GetUserBetsOverviewResponseValidationError is the validation error returned
// by GetUserBetsOverviewResponse.Validate if the designated constraints
// aren't met.
type GetUserBetsOverviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserBetsOverviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserBetsOverviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserBetsOverviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserBetsOverviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserBetsOverviewResponseValidationError) ErrorName() string {
	return "GetUserBetsOverviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserBetsOverviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserBetsOverviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserBetsOverviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserBetsOverviewResponseValidationError{}

// Validate checks the field values on GetGameTransactionsForBetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetGameTransactionsForBetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameTransactionsForBetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetGameTransactionsForBetRequestMultiError, or nil if none found.
func (m *GetGameTransactionsForBetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameTransactionsForBetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoundId

	// no validation rules for BetId

	if len(errors) > 0 {
		return GetGameTransactionsForBetRequestMultiError(errors)
	}

	return nil
}

// GetGameTransactionsForBetRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetGameTransactionsForBetRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGameTransactionsForBetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameTransactionsForBetRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameTransactionsForBetRequestMultiError) AllErrors() []error { return m }

// GetGameTransactionsForBetRequestValidationError is the validation error
// returned by GetGameTransactionsForBetRequest.Validate if the designated
// constraints aren't met.
type GetGameTransactionsForBetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameTransactionsForBetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameTransactionsForBetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameTransactionsForBetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameTransactionsForBetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameTransactionsForBetRequestValidationError) ErrorName() string {
	return "GetGameTransactionsForBetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameTransactionsForBetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameTransactionsForBetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameTransactionsForBetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameTransactionsForBetRequestValidationError{}

// Validate checks the field values on GetGameTransactionsForBetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetGameTransactionsForBetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameTransactionsForBetResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetGameTransactionsForBetResponseMultiError, or nil if none found.
func (m *GetGameTransactionsForBetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameTransactionsForBetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGameTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGameTransactionsForBetResponseValidationError{
						field:  fmt.Sprintf("GameTransactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGameTransactionsForBetResponseValidationError{
						field:  fmt.Sprintf("GameTransactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGameTransactionsForBetResponseValidationError{
					field:  fmt.Sprintf("GameTransactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGameTransactionsForBetResponseMultiError(errors)
	}

	return nil
}

// GetGameTransactionsForBetResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetGameTransactionsForBetResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGameTransactionsForBetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameTransactionsForBetResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameTransactionsForBetResponseMultiError) AllErrors() []error { return m }

// GetGameTransactionsForBetResponseValidationError is the validation error
// returned by GetGameTransactionsForBetResponse.Validate if the designated
// constraints aren't met.
type GetGameTransactionsForBetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameTransactionsForBetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameTransactionsForBetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameTransactionsForBetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameTransactionsForBetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameTransactionsForBetResponseValidationError) ErrorName() string {
	return "GetGameTransactionsForBetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameTransactionsForBetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameTransactionsForBetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameTransactionsForBetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameTransactionsForBetResponseValidationError{}

// Validate checks the field values on ListGamesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGamesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGamesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGamesRequestMultiError, or nil if none found.
func (m *ListGamesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGamesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GameId != nil {
		// no validation rules for GameId
	}

	if m.SupportBonusBuy != nil {
		// no validation rules for SupportBonusBuy
	}

	if m.HasFreespins != nil {
		// no validation rules for HasFreespins
	}

	if m.RtpMin != nil {
		// no validation rules for RtpMin
	}

	if m.RtpMax != nil {
		// no validation rules for RtpMax
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListGamesRequestMultiError(errors)
	}

	return nil
}

// ListGamesRequestMultiError is an error wrapping multiple validation errors
// returned by ListGamesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListGamesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGamesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGamesRequestMultiError) AllErrors() []error { return m }

// ListGamesRequestValidationError is the validation error returned by
// ListGamesRequest.Validate if the designated constraints aren't met.
type ListGamesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGamesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGamesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGamesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGamesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGamesRequestValidationError) ErrorName() string { return "ListGamesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListGamesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGamesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGamesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGamesRequestValidationError{}

// Validate checks the field values on ListGamesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGamesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGamesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGamesResponseMultiError, or nil if none found.
func (m *ListGamesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGamesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGames() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGamesResponseValidationError{
						field:  fmt.Sprintf("Games[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGamesResponseValidationError{
						field:  fmt.Sprintf("Games[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGamesResponseValidationError{
					field:  fmt.Sprintf("Games[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageSize

	// no validation rules for Total

	// no validation rules for TotalEnabled

	// no validation rules for TotalDisabled

	if len(errors) > 0 {
		return ListGamesResponseMultiError(errors)
	}

	return nil
}

// ListGamesResponseMultiError is an error wrapping multiple validation errors
// returned by ListGamesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListGamesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGamesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGamesResponseMultiError) AllErrors() []error { return m }

// ListGamesResponseValidationError is the validation error returned by
// ListGamesResponse.Validate if the designated constraints aren't met.
type ListGamesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGamesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGamesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGamesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGamesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGamesResponseValidationError) ErrorName() string {
	return "ListGamesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGamesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGamesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGamesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGamesResponseValidationError{}

// Validate checks the field values on UpdateGameRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateGameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGameRequestMultiError, or nil if none found.
func (m *UpdateGameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if len(errors) > 0 {
		return UpdateGameRequestMultiError(errors)
	}

	return nil
}

// UpdateGameRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateGameRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateGameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGameRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGameRequestMultiError) AllErrors() []error { return m }

// UpdateGameRequestValidationError is the validation error returned by
// UpdateGameRequest.Validate if the designated constraints aren't met.
type UpdateGameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGameRequestValidationError) ErrorName() string {
	return "UpdateGameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGameRequestValidationError{}

// Validate checks the field values on UpdateGameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGameResponseMultiError, or nil if none found.
func (m *UpdateGameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateGameResponseMultiError(errors)
	}

	return nil
}

// UpdateGameResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateGameResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateGameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGameResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGameResponseMultiError) AllErrors() []error { return m }

// UpdateGameResponseValidationError is the validation error returned by
// UpdateGameResponse.Validate if the designated constraints aren't met.
type UpdateGameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGameResponseValidationError) ErrorName() string {
	return "UpdateGameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGameResponseValidationError{}

// Validate checks the field values on UpdateProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProviderRequestMultiError, or nil if none found.
func (m *UpdateProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProviderId

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if len(errors) > 0 {
		return UpdateProviderRequestMultiError(errors)
	}

	return nil
}

// UpdateProviderRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProviderRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProviderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProviderRequestMultiError) AllErrors() []error { return m }

// UpdateProviderRequestValidationError is the validation error returned by
// UpdateProviderRequest.Validate if the designated constraints aren't met.
type UpdateProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProviderRequestValidationError) ErrorName() string {
	return "UpdateProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProviderRequestValidationError{}

// Validate checks the field values on UpdateProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProviderResponseMultiError, or nil if none found.
func (m *UpdateProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProviderResponseMultiError(errors)
	}

	return nil
}

// UpdateProviderResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProviderResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProviderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProviderResponseMultiError) AllErrors() []error { return m }

// UpdateProviderResponseValidationError is the validation error returned by
// UpdateProviderResponse.Validate if the designated constraints aren't met.
type UpdateProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProviderResponseValidationError) ErrorName() string {
	return "UpdateProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProviderResponseValidationError{}

// Validate checks the field values on ListProviderRatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProviderRatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProviderRatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProviderRatesRequestMultiError, or nil if none found.
func (m *ListProviderRatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProviderRatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if m.FeeGroup != nil {
		// no validation rules for FeeGroup
	}

	if m.Currency != nil {
		// no validation rules for Currency
	}

	if m.ProviderId != nil {
		// no validation rules for ProviderId
	}

	if len(errors) > 0 {
		return ListProviderRatesRequestMultiError(errors)
	}

	return nil
}

// ListProviderRatesRequestMultiError is an error wrapping multiple validation
// errors returned by ListProviderRatesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProviderRatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProviderRatesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProviderRatesRequestMultiError) AllErrors() []error { return m }

// ListProviderRatesRequestValidationError is the validation error returned by
// ListProviderRatesRequest.Validate if the designated constraints aren't met.
type ListProviderRatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProviderRatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProviderRatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProviderRatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProviderRatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProviderRatesRequestValidationError) ErrorName() string {
	return "ListProviderRatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProviderRatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProviderRatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProviderRatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProviderRatesRequestValidationError{}

// Validate checks the field values on ListProviderRatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProviderRatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProviderRatesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProviderRatesResponseMultiError, or nil if none found.
func (m *ListProviderRatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProviderRatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProviderRates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProviderRatesResponseValidationError{
						field:  fmt.Sprintf("ProviderRates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProviderRatesResponseValidationError{
						field:  fmt.Sprintf("ProviderRates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProviderRatesResponseValidationError{
					field:  fmt.Sprintf("ProviderRates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	if len(errors) > 0 {
		return ListProviderRatesResponseMultiError(errors)
	}

	return nil
}

// ListProviderRatesResponseMultiError is an error wrapping multiple validation
// errors returned by ListProviderRatesResponse.ValidateAll() if the
// designated constraints aren't met.
type ListProviderRatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProviderRatesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProviderRatesResponseMultiError) AllErrors() []error { return m }

// ListProviderRatesResponseValidationError is the validation error returned by
// ListProviderRatesResponse.Validate if the designated constraints aren't met.
type ListProviderRatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProviderRatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProviderRatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProviderRatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProviderRatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProviderRatesResponseValidationError) ErrorName() string {
	return "ListProviderRatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProviderRatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProviderRatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProviderRatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProviderRatesResponseValidationError{}

// Validate checks the field values on GetGameTransactionByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameTransactionByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameTransactionByIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetGameTransactionByIdRequestMultiError, or nil if none found.
func (m *GetGameTransactionByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameTransactionByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	if len(errors) > 0 {
		return GetGameTransactionByIdRequestMultiError(errors)
	}

	return nil
}

// GetGameTransactionByIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetGameTransactionByIdRequest.ValidateAll()
// if the designated constraints aren't met.
type GetGameTransactionByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameTransactionByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameTransactionByIdRequestMultiError) AllErrors() []error { return m }

// GetGameTransactionByIdRequestValidationError is the validation error
// returned by GetGameTransactionByIdRequest.Validate if the designated
// constraints aren't met.
type GetGameTransactionByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameTransactionByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameTransactionByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameTransactionByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameTransactionByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameTransactionByIdRequestValidationError) ErrorName() string {
	return "GetGameTransactionByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameTransactionByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameTransactionByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameTransactionByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameTransactionByIdRequestValidationError{}

// Validate checks the field values on GetGameTransactionByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameTransactionByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameTransactionByIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetGameTransactionByIdResponseMultiError, or nil if none found.
func (m *GetGameTransactionByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameTransactionByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RoundId

	// no validation rules for Action

	// no validation rules for BetId

	// no validation rules for ProviderBetId

	// no validation rules for ProviderTransactionId

	// no validation rules for ProviderExternalTransactionId

	// no validation rules for ProviderId

	// no validation rules for ProviderName

	// no validation rules for OperatorId

	// no validation rules for OperatorName

	// no validation rules for UpdateBalance

	// no validation rules for TakeAll

	// no validation rules for IsRefund

	// no validation rules for Amount

	// no validation rules for AmountUsd

	// no validation rules for SettlementAmount

	// no validation rules for SettlementAmountUsd

	// no validation rules for Turnover

	// no validation rules for TurnoverUsd

	// no validation rules for UserId

	// no validation rules for Currency

	// no validation rules for SettlementCurrency

	// no validation rules for GameId

	// no validation rules for GameName

	// no validation rules for GameCategory

	// no validation rules for JackpotContribution

	// no validation rules for JackpotContributionUsd

	// no validation rules for JackpotWin

	// no validation rules for JackpotWinUsd

	if all {
		switch v := interface{}(m.GetBetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGameTransactionByIdResponseValidationError{
					field:  "BetTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGameTransactionByIdResponseValidationError{
					field:  "BetTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGameTransactionByIdResponseValidationError{
				field:  "BetTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSettleTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGameTransactionByIdResponseValidationError{
					field:  "SettleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGameTransactionByIdResponseValidationError{
					field:  "SettleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettleTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGameTransactionByIdResponseValidationError{
				field:  "SettleTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProviderTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGameTransactionByIdResponseValidationError{
					field:  "ProviderTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGameTransactionByIdResponseValidationError{
					field:  "ProviderTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProviderTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGameTransactionByIdResponseValidationError{
				field:  "ProviderTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BonusAmount

	// no validation rules for BonusAmountUsd

	if all {
		switch v := interface{}(m.GetOperatorTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGameTransactionByIdResponseValidationError{
					field:  "OperatorTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGameTransactionByIdResponseValidationError{
					field:  "OperatorTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGameTransactionByIdResponseValidationError{
				field:  "OperatorTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProcessedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGameTransactionByIdResponseValidationError{
					field:  "ProcessedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGameTransactionByIdResponseValidationError{
					field:  "ProcessedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcessedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGameTransactionByIdResponseValidationError{
				field:  "ProcessedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGameTransactionByIdResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGameTransactionByIdResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGameTransactionByIdResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGameTransactionByIdResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGameTransactionByIdResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGameTransactionByIdResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGameTransactionByIdResponseMultiError(errors)
	}

	return nil
}

// GetGameTransactionByIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetGameTransactionByIdResponse.ValidateAll()
// if the designated constraints aren't met.
type GetGameTransactionByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameTransactionByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameTransactionByIdResponseMultiError) AllErrors() []error { return m }

// GetGameTransactionByIdResponseValidationError is the validation error
// returned by GetGameTransactionByIdResponse.Validate if the designated
// constraints aren't met.
type GetGameTransactionByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameTransactionByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameTransactionByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameTransactionByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameTransactionByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameTransactionByIdResponseValidationError) ErrorName() string {
	return "GetGameTransactionByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameTransactionByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameTransactionByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameTransactionByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameTransactionByIdResponseValidationError{}

// Validate checks the field values on ListProvidersResponse_Provider with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProvidersResponse_Provider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProvidersResponse_Provider with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProvidersResponse_ProviderMultiError, or nil if none found.
func (m *ListProvidersResponse_Provider) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProvidersResponse_Provider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProviderId

	// no validation rules for ProviderName

	if len(errors) > 0 {
		return ListProvidersResponse_ProviderMultiError(errors)
	}

	return nil
}

// ListProvidersResponse_ProviderMultiError is an error wrapping multiple
// validation errors returned by ListProvidersResponse_Provider.ValidateAll()
// if the designated constraints aren't met.
type ListProvidersResponse_ProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProvidersResponse_ProviderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProvidersResponse_ProviderMultiError) AllErrors() []error { return m }

// ListProvidersResponse_ProviderValidationError is the validation error
// returned by ListProvidersResponse_Provider.Validate if the designated
// constraints aren't met.
type ListProvidersResponse_ProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersResponse_ProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersResponse_ProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersResponse_ProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersResponse_ProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersResponse_ProviderValidationError) ErrorName() string {
	return "ListProvidersResponse_ProviderValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersResponse_ProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersResponse_Provider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersResponse_ProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersResponse_ProviderValidationError{}

// Validate checks the field values on ListProvidersWithDetailResponse_Provider
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListProvidersWithDetailResponse_Provider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListProvidersWithDetailResponse_Provider with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListProvidersWithDetailResponse_ProviderMultiError, or nil if none found.
func (m *ListProvidersWithDetailResponse_Provider) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProvidersWithDetailResponse_Provider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProviderId

	// no validation rules for ProviderName

	// no validation rules for GameCount

	// no validation rules for Enabled

	if len(errors) > 0 {
		return ListProvidersWithDetailResponse_ProviderMultiError(errors)
	}

	return nil
}

// ListProvidersWithDetailResponse_ProviderMultiError is an error wrapping
// multiple validation errors returned by
// ListProvidersWithDetailResponse_Provider.ValidateAll() if the designated
// constraints aren't met.
type ListProvidersWithDetailResponse_ProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProvidersWithDetailResponse_ProviderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProvidersWithDetailResponse_ProviderMultiError) AllErrors() []error { return m }

// ListProvidersWithDetailResponse_ProviderValidationError is the validation
// error returned by ListProvidersWithDetailResponse_Provider.Validate if the
// designated constraints aren't met.
type ListProvidersWithDetailResponse_ProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersWithDetailResponse_ProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersWithDetailResponse_ProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersWithDetailResponse_ProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersWithDetailResponse_ProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersWithDetailResponse_ProviderValidationError) ErrorName() string {
	return "ListProvidersWithDetailResponse_ProviderValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersWithDetailResponse_ProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersWithDetailResponse_Provider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersWithDetailResponse_ProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersWithDetailResponse_ProviderValidationError{}

// Validate checks the field values on ListBetsRequest_CurrencyWithRange with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBetsRequest_CurrencyWithRange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBetsRequest_CurrencyWithRange
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBetsRequest_CurrencyWithRangeMultiError, or nil if none found.
func (m *ListBetsRequest_CurrencyWithRange) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBetsRequest_CurrencyWithRange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	if m.MinBetAmount != nil {
		// no validation rules for MinBetAmount
	}

	if m.MaxBetAmount != nil {
		// no validation rules for MaxBetAmount
	}

	if m.MinWinAmount != nil {
		// no validation rules for MinWinAmount
	}

	if m.MaxWinAmount != nil {
		// no validation rules for MaxWinAmount
	}

	if len(errors) > 0 {
		return ListBetsRequest_CurrencyWithRangeMultiError(errors)
	}

	return nil
}

// ListBetsRequest_CurrencyWithRangeMultiError is an error wrapping multiple
// validation errors returned by
// ListBetsRequest_CurrencyWithRange.ValidateAll() if the designated
// constraints aren't met.
type ListBetsRequest_CurrencyWithRangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBetsRequest_CurrencyWithRangeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBetsRequest_CurrencyWithRangeMultiError) AllErrors() []error { return m }

// ListBetsRequest_CurrencyWithRangeValidationError is the validation error
// returned by ListBetsRequest_CurrencyWithRange.Validate if the designated
// constraints aren't met.
type ListBetsRequest_CurrencyWithRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBetsRequest_CurrencyWithRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBetsRequest_CurrencyWithRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBetsRequest_CurrencyWithRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBetsRequest_CurrencyWithRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBetsRequest_CurrencyWithRangeValidationError) ErrorName() string {
	return "ListBetsRequest_CurrencyWithRangeValidationError"
}

// Error satisfies the builtin error interface
func (e ListBetsRequest_CurrencyWithRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBetsRequest_CurrencyWithRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBetsRequest_CurrencyWithRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBetsRequest_CurrencyWithRangeValidationError{}

// Validate checks the field values on ListBetsRequest_Currencies with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBetsRequest_Currencies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBetsRequest_Currencies with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBetsRequest_CurrenciesMultiError, or nil if none found.
func (m *ListBetsRequest_Currencies) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBetsRequest_Currencies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBetsRequest_CurrenciesMultiError(errors)
	}

	return nil
}

// ListBetsRequest_CurrenciesMultiError is an error wrapping multiple
// validation errors returned by ListBetsRequest_Currencies.ValidateAll() if
// the designated constraints aren't met.
type ListBetsRequest_CurrenciesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBetsRequest_CurrenciesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBetsRequest_CurrenciesMultiError) AllErrors() []error { return m }

// ListBetsRequest_CurrenciesValidationError is the validation error returned
// by ListBetsRequest_Currencies.Validate if the designated constraints aren't met.
type ListBetsRequest_CurrenciesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBetsRequest_CurrenciesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBetsRequest_CurrenciesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBetsRequest_CurrenciesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBetsRequest_CurrenciesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBetsRequest_CurrenciesValidationError) ErrorName() string {
	return "ListBetsRequest_CurrenciesValidationError"
}

// Error satisfies the builtin error interface
func (e ListBetsRequest_CurrenciesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBetsRequest_Currencies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBetsRequest_CurrenciesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBetsRequest_CurrenciesValidationError{}

// Validate checks the field values on GetBetByIdResponse_Action with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBetByIdResponse_Action) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBetByIdResponse_Action with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBetByIdResponse_ActionMultiError, or nil if none found.
func (m *GetBetByIdResponse_Action) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBetByIdResponse_Action) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RoundId

	// no validation rules for Action

	// no validation rules for BetId

	// no validation rules for ProviderBetId

	// no validation rules for ProviderTransactionId

	// no validation rules for ProviderExternalTransactionId

	// no validation rules for ProviderId

	// no validation rules for ProviderName

	// no validation rules for OperatorId

	// no validation rules for OperatorName

	// no validation rules for UpdateBalance

	// no validation rules for TakeAll

	// no validation rules for IsRefund

	// no validation rules for Amount

	// no validation rules for AmountUsd

	// no validation rules for SettlementAmount

	// no validation rules for SettlementAmountUsd

	// no validation rules for Turnover

	// no validation rules for TurnoverUsd

	// no validation rules for UserId

	// no validation rules for Currency

	// no validation rules for SettlementCurrency

	// no validation rules for GameId

	// no validation rules for GameName

	// no validation rules for GameCategory

	// no validation rules for JackpotContribution

	// no validation rules for JackpotContributionUsd

	// no validation rules for JackpotWin

	// no validation rules for JackpotWinUsd

	if all {
		switch v := interface{}(m.GetBetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBetByIdResponse_ActionValidationError{
					field:  "BetTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBetByIdResponse_ActionValidationError{
					field:  "BetTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBetByIdResponse_ActionValidationError{
				field:  "BetTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSettleTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBetByIdResponse_ActionValidationError{
					field:  "SettleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBetByIdResponse_ActionValidationError{
					field:  "SettleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettleTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBetByIdResponse_ActionValidationError{
				field:  "SettleTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProviderTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBetByIdResponse_ActionValidationError{
					field:  "ProviderTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBetByIdResponse_ActionValidationError{
					field:  "ProviderTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProviderTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBetByIdResponse_ActionValidationError{
				field:  "ProviderTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BonusAmount

	// no validation rules for BonusAmountUsd

	if all {
		switch v := interface{}(m.GetOperatorTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBetByIdResponse_ActionValidationError{
					field:  "OperatorTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBetByIdResponse_ActionValidationError{
					field:  "OperatorTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBetByIdResponse_ActionValidationError{
				field:  "OperatorTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProcessedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBetByIdResponse_ActionValidationError{
					field:  "ProcessedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBetByIdResponse_ActionValidationError{
					field:  "ProcessedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcessedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBetByIdResponse_ActionValidationError{
				field:  "ProcessedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBetByIdResponse_ActionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBetByIdResponse_ActionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBetByIdResponse_ActionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBetByIdResponse_ActionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBetByIdResponse_ActionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBetByIdResponse_ActionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBetByIdResponse_ActionMultiError(errors)
	}

	return nil
}

// GetBetByIdResponse_ActionMultiError is an error wrapping multiple validation
// errors returned by GetBetByIdResponse_Action.ValidateAll() if the
// designated constraints aren't met.
type GetBetByIdResponse_ActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBetByIdResponse_ActionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBetByIdResponse_ActionMultiError) AllErrors() []error { return m }

// GetBetByIdResponse_ActionValidationError is the validation error returned by
// GetBetByIdResponse_Action.Validate if the designated constraints aren't met.
type GetBetByIdResponse_ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBetByIdResponse_ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBetByIdResponse_ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBetByIdResponse_ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBetByIdResponse_ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBetByIdResponse_ActionValidationError) ErrorName() string {
	return "GetBetByIdResponse_ActionValidationError"
}

// Error satisfies the builtin error interface
func (e GetBetByIdResponse_ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBetByIdResponse_Action.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBetByIdResponse_ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBetByIdResponse_ActionValidationError{}

// Validate checks the field values on GetBetByIdResponse_Bet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBetByIdResponse_Bet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBetByIdResponse_Bet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBetByIdResponse_BetMultiError, or nil if none found.
func (m *GetBetByIdResponse_Bet) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBetByIdResponse_Bet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProviderBetId

	// no validation rules for RoundId

	// no validation rules for ProviderRoundId

	// no validation rules for ProviderId

	// no validation rules for ProviderName

	// no validation rules for OperatorId

	// no validation rules for OperatorName

	// no validation rules for Currency

	// no validation rules for SettlementCurrency

	// no validation rules for Status

	// no validation rules for UserId

	// no validation rules for GameId

	// no validation rules for GameName

	// no validation rules for GameCategory

	// no validation rules for WinCount

	// no validation rules for BetAmount

	// no validation rules for BetAmountUsd

	// no validation rules for SettlementBetAmount

	// no validation rules for SettlementBetAmountUsd

	// no validation rules for WinAmount

	// no validation rules for WinAmountUsd

	// no validation rules for SettlementWinAmount

	// no validation rules for SettlementWinAmountUsd

	// no validation rules for Turnover

	// no validation rules for TurnoverUsd

	// no validation rules for RollbackBetAmount

	// no validation rules for RollbackBetAmountUsd

	// no validation rules for RollbackWinAmount

	// no validation rules for RollbackWinAmountUsd

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBetByIdResponse_BetValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBetByIdResponse_BetValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBetByIdResponse_BetValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBetByIdResponse_BetValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBetByIdResponse_BetValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBetByIdResponse_BetValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBetByIdResponse_BetValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBetByIdResponse_BetValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBetByIdResponse_BetValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBetByIdResponse_BetMultiError(errors)
	}

	return nil
}

// GetBetByIdResponse_BetMultiError is an error wrapping multiple validation
// errors returned by GetBetByIdResponse_Bet.ValidateAll() if the designated
// constraints aren't met.
type GetBetByIdResponse_BetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBetByIdResponse_BetMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBetByIdResponse_BetMultiError) AllErrors() []error { return m }

// GetBetByIdResponse_BetValidationError is the validation error returned by
// GetBetByIdResponse_Bet.Validate if the designated constraints aren't met.
type GetBetByIdResponse_BetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBetByIdResponse_BetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBetByIdResponse_BetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBetByIdResponse_BetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBetByIdResponse_BetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBetByIdResponse_BetValidationError) ErrorName() string {
	return "GetBetByIdResponse_BetValidationError"
}

// Error satisfies the builtin error interface
func (e GetBetByIdResponse_BetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBetByIdResponse_Bet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBetByIdResponse_BetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBetByIdResponse_BetValidationError{}

// Validate checks the field values on
// GetGameTransactionsForBetResponse_GameTransaction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetGameTransactionsForBetResponse_GameTransaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetGameTransactionsForBetResponse_GameTransaction with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetGameTransactionsForBetResponse_GameTransactionMultiError, or nil if none found.
func (m *GetGameTransactionsForBetResponse_GameTransaction) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameTransactionsForBetResponse_GameTransaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Action

	// no validation rules for OperatorName

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGameTransactionsForBetResponse_GameTransactionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGameTransactionsForBetResponse_GameTransactionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGameTransactionsForBetResponse_GameTransactionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGameTransactionsForBetResponse_GameTransactionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGameTransactionsForBetResponse_GameTransactionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGameTransactionsForBetResponse_GameTransactionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GameCategory

	// no validation rules for GameId

	// no validation rules for ProviderName

	// no validation rules for OperatorTransactionId

	// no validation rules for ProviderTransactionId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGameTransactionsForBetResponse_GameTransactionValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGameTransactionsForBetResponse_GameTransactionValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGameTransactionsForBetResponse_GameTransactionValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ValidBetAmount

	if len(errors) > 0 {
		return GetGameTransactionsForBetResponse_GameTransactionMultiError(errors)
	}

	return nil
}

// GetGameTransactionsForBetResponse_GameTransactionMultiError is an error
// wrapping multiple validation errors returned by
// GetGameTransactionsForBetResponse_GameTransaction.ValidateAll() if the
// designated constraints aren't met.
type GetGameTransactionsForBetResponse_GameTransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameTransactionsForBetResponse_GameTransactionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameTransactionsForBetResponse_GameTransactionMultiError) AllErrors() []error { return m }

// GetGameTransactionsForBetResponse_GameTransactionValidationError is the
// validation error returned by
// GetGameTransactionsForBetResponse_GameTransaction.Validate if the
// designated constraints aren't met.
type GetGameTransactionsForBetResponse_GameTransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameTransactionsForBetResponse_GameTransactionValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetGameTransactionsForBetResponse_GameTransactionValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetGameTransactionsForBetResponse_GameTransactionValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetGameTransactionsForBetResponse_GameTransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameTransactionsForBetResponse_GameTransactionValidationError) ErrorName() string {
	return "GetGameTransactionsForBetResponse_GameTransactionValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameTransactionsForBetResponse_GameTransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameTransactionsForBetResponse_GameTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameTransactionsForBetResponse_GameTransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameTransactionsForBetResponse_GameTransactionValidationError{}

// Validate checks the field values on
// GetGameTransactionsForBetResponse_GameTransaction_Amount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameTransactionsForBetResponse_GameTransaction_Amount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetGameTransactionsForBetResponse_GameTransaction_Amount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameTransactionsForBetResponse_GameTransaction_AmountMultiError, or nil
// if none found.
func (m *GetGameTransactionsForBetResponse_GameTransaction_Amount) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameTransactionsForBetResponse_GameTransaction_Amount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AmountInCurrency

	// no validation rules for AmountInSettlementCurrency

	if len(errors) > 0 {
		return GetGameTransactionsForBetResponse_GameTransaction_AmountMultiError(errors)
	}

	return nil
}

// GetGameTransactionsForBetResponse_GameTransaction_AmountMultiError is an
// error wrapping multiple validation errors returned by
// GetGameTransactionsForBetResponse_GameTransaction_Amount.ValidateAll() if
// the designated constraints aren't met.
type GetGameTransactionsForBetResponse_GameTransaction_AmountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameTransactionsForBetResponse_GameTransaction_AmountMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameTransactionsForBetResponse_GameTransaction_AmountMultiError) AllErrors() []error {
	return m
}

// GetGameTransactionsForBetResponse_GameTransaction_AmountValidationError is
// the validation error returned by
// GetGameTransactionsForBetResponse_GameTransaction_Amount.Validate if the
// designated constraints aren't met.
type GetGameTransactionsForBetResponse_GameTransaction_AmountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameTransactionsForBetResponse_GameTransaction_AmountValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetGameTransactionsForBetResponse_GameTransaction_AmountValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetGameTransactionsForBetResponse_GameTransaction_AmountValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetGameTransactionsForBetResponse_GameTransaction_AmountValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetGameTransactionsForBetResponse_GameTransaction_AmountValidationError) ErrorName() string {
	return "GetGameTransactionsForBetResponse_GameTransaction_AmountValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameTransactionsForBetResponse_GameTransaction_AmountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameTransactionsForBetResponse_GameTransaction_Amount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameTransactionsForBetResponse_GameTransaction_AmountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameTransactionsForBetResponse_GameTransaction_AmountValidationError{}

// Validate checks the field values on ListGamesResponse_Game with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGamesResponse_Game) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGamesResponse_Game with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGamesResponse_GameMultiError, or nil if none found.
func (m *ListGamesResponse_Game) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGamesResponse_Game) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Provider

	// no validation rules for Id

	// no validation rules for Category

	// no validation rules for Theme

	// no validation rules for SupportBonusBuy

	// no validation rules for HasFreespins

	// no validation rules for FeeGroup

	// no validation rules for Rate

	// no validation rules for Rtp

	// no validation rules for ValidBetRate

	// no validation rules for Enabled

	if len(errors) > 0 {
		return ListGamesResponse_GameMultiError(errors)
	}

	return nil
}

// ListGamesResponse_GameMultiError is an error wrapping multiple validation
// errors returned by ListGamesResponse_Game.ValidateAll() if the designated
// constraints aren't met.
type ListGamesResponse_GameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGamesResponse_GameMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGamesResponse_GameMultiError) AllErrors() []error { return m }

// ListGamesResponse_GameValidationError is the validation error returned by
// ListGamesResponse_Game.Validate if the designated constraints aren't met.
type ListGamesResponse_GameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGamesResponse_GameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGamesResponse_GameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGamesResponse_GameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGamesResponse_GameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGamesResponse_GameValidationError) ErrorName() string {
	return "ListGamesResponse_GameValidationError"
}

// Error satisfies the builtin error interface
func (e ListGamesResponse_GameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGamesResponse_Game.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGamesResponse_GameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGamesResponse_GameValidationError{}

// Validate checks the field values on ListProviderRatesResponse_ProviderRate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListProviderRatesResponse_ProviderRate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListProviderRatesResponse_ProviderRate with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListProviderRatesResponse_ProviderRateMultiError, or nil if none found.
func (m *ListProviderRatesResponse_ProviderRate) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProviderRatesResponse_ProviderRate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProviderId

	// no validation rules for ProviderName

	// no validation rules for FeeGroup

	// no validation rules for Currency

	// no validation rules for Rate

	if len(errors) > 0 {
		return ListProviderRatesResponse_ProviderRateMultiError(errors)
	}

	return nil
}

// ListProviderRatesResponse_ProviderRateMultiError is an error wrapping
// multiple validation errors returned by
// ListProviderRatesResponse_ProviderRate.ValidateAll() if the designated
// constraints aren't met.
type ListProviderRatesResponse_ProviderRateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProviderRatesResponse_ProviderRateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProviderRatesResponse_ProviderRateMultiError) AllErrors() []error { return m }

// ListProviderRatesResponse_ProviderRateValidationError is the validation
// error returned by ListProviderRatesResponse_ProviderRate.Validate if the
// designated constraints aren't met.
type ListProviderRatesResponse_ProviderRateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProviderRatesResponse_ProviderRateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProviderRatesResponse_ProviderRateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProviderRatesResponse_ProviderRateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProviderRatesResponse_ProviderRateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProviderRatesResponse_ProviderRateValidationError) ErrorName() string {
	return "ListProviderRatesResponse_ProviderRateValidationError"
}

// Error satisfies the builtin error interface
func (e ListProviderRatesResponse_ProviderRateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProviderRatesResponse_ProviderRate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProviderRatesResponse_ProviderRateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProviderRatesResponse_ProviderRateValidationError{}
