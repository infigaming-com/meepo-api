// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffic_affiliate.proto

package v1

import (
	context "context"
	v1 "github.com/infigaming-com/meepo-api/affiliate/service/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackofficeAffiliate_CreateCommissionPlan_FullMethodName = "/api.backoffice.service.v1.BackofficeAffiliate/CreateCommissionPlan"
	BackofficeAffiliate_UpdateCommissionPlan_FullMethodName = "/api.backoffice.service.v1.BackofficeAffiliate/UpdateCommissionPlan"
	BackofficeAffiliate_GetCommissionPlan_FullMethodName    = "/api.backoffice.service.v1.BackofficeAffiliate/GetCommissionPlan"
	BackofficeAffiliate_ListCommissionPlans_FullMethodName  = "/api.backoffice.service.v1.BackofficeAffiliate/ListCommissionPlans"
	BackofficeAffiliate_DeleteCommissionPlan_FullMethodName = "/api.backoffice.service.v1.BackofficeAffiliate/DeleteCommissionPlan"
)

// BackofficeAffiliateClient is the client API for BackofficeAffiliate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackofficeAffiliateClient interface {
	CreateCommissionPlan(ctx context.Context, in *CreateCommissionPlanRequest, opts ...grpc.CallOption) (*v1.CreateCommissionPlanResponse, error)
	UpdateCommissionPlan(ctx context.Context, in *UpdateCommissionPlanRequest, opts ...grpc.CallOption) (*v1.UpdateCommissionPlanResponse, error)
	GetCommissionPlan(ctx context.Context, in *GetCommissionPlanRequest, opts ...grpc.CallOption) (*v1.GetCommissionPlanResponse, error)
	ListCommissionPlans(ctx context.Context, in *ListCommissionPlansRequest, opts ...grpc.CallOption) (*v1.ListCommissionPlansResponse, error)
	DeleteCommissionPlan(ctx context.Context, in *DeleteCommissionPlanRequest, opts ...grpc.CallOption) (*v1.DeleteCommissionPlanResponse, error)
}

type backofficeAffiliateClient struct {
	cc grpc.ClientConnInterface
}

func NewBackofficeAffiliateClient(cc grpc.ClientConnInterface) BackofficeAffiliateClient {
	return &backofficeAffiliateClient{cc}
}

func (c *backofficeAffiliateClient) CreateCommissionPlan(ctx context.Context, in *CreateCommissionPlanRequest, opts ...grpc.CallOption) (*v1.CreateCommissionPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.CreateCommissionPlanResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_CreateCommissionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) UpdateCommissionPlan(ctx context.Context, in *UpdateCommissionPlanRequest, opts ...grpc.CallOption) (*v1.UpdateCommissionPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.UpdateCommissionPlanResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_UpdateCommissionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) GetCommissionPlan(ctx context.Context, in *GetCommissionPlanRequest, opts ...grpc.CallOption) (*v1.GetCommissionPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetCommissionPlanResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_GetCommissionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) ListCommissionPlans(ctx context.Context, in *ListCommissionPlansRequest, opts ...grpc.CallOption) (*v1.ListCommissionPlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListCommissionPlansResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_ListCommissionPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) DeleteCommissionPlan(ctx context.Context, in *DeleteCommissionPlanRequest, opts ...grpc.CallOption) (*v1.DeleteCommissionPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DeleteCommissionPlanResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_DeleteCommissionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackofficeAffiliateServer is the server API for BackofficeAffiliate service.
// All implementations must embed UnimplementedBackofficeAffiliateServer
// for forward compatibility.
type BackofficeAffiliateServer interface {
	CreateCommissionPlan(context.Context, *CreateCommissionPlanRequest) (*v1.CreateCommissionPlanResponse, error)
	UpdateCommissionPlan(context.Context, *UpdateCommissionPlanRequest) (*v1.UpdateCommissionPlanResponse, error)
	GetCommissionPlan(context.Context, *GetCommissionPlanRequest) (*v1.GetCommissionPlanResponse, error)
	ListCommissionPlans(context.Context, *ListCommissionPlansRequest) (*v1.ListCommissionPlansResponse, error)
	DeleteCommissionPlan(context.Context, *DeleteCommissionPlanRequest) (*v1.DeleteCommissionPlanResponse, error)
	mustEmbedUnimplementedBackofficeAffiliateServer()
}

// UnimplementedBackofficeAffiliateServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackofficeAffiliateServer struct{}

func (UnimplementedBackofficeAffiliateServer) CreateCommissionPlan(context.Context, *CreateCommissionPlanRequest) (*v1.CreateCommissionPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommissionPlan not implemented")
}
func (UnimplementedBackofficeAffiliateServer) UpdateCommissionPlan(context.Context, *UpdateCommissionPlanRequest) (*v1.UpdateCommissionPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommissionPlan not implemented")
}
func (UnimplementedBackofficeAffiliateServer) GetCommissionPlan(context.Context, *GetCommissionPlanRequest) (*v1.GetCommissionPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommissionPlan not implemented")
}
func (UnimplementedBackofficeAffiliateServer) ListCommissionPlans(context.Context, *ListCommissionPlansRequest) (*v1.ListCommissionPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommissionPlans not implemented")
}
func (UnimplementedBackofficeAffiliateServer) DeleteCommissionPlan(context.Context, *DeleteCommissionPlanRequest) (*v1.DeleteCommissionPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommissionPlan not implemented")
}
func (UnimplementedBackofficeAffiliateServer) mustEmbedUnimplementedBackofficeAffiliateServer() {}
func (UnimplementedBackofficeAffiliateServer) testEmbeddedByValue()                             {}

// UnsafeBackofficeAffiliateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackofficeAffiliateServer will
// result in compilation errors.
type UnsafeBackofficeAffiliateServer interface {
	mustEmbedUnimplementedBackofficeAffiliateServer()
}

func RegisterBackofficeAffiliateServer(s grpc.ServiceRegistrar, srv BackofficeAffiliateServer) {
	// If the following call pancis, it indicates UnimplementedBackofficeAffiliateServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackofficeAffiliate_ServiceDesc, srv)
}

func _BackofficeAffiliate_CreateCommissionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommissionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).CreateCommissionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_CreateCommissionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).CreateCommissionPlan(ctx, req.(*CreateCommissionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_UpdateCommissionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommissionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).UpdateCommissionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_UpdateCommissionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).UpdateCommissionPlan(ctx, req.(*UpdateCommissionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_GetCommissionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommissionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).GetCommissionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_GetCommissionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).GetCommissionPlan(ctx, req.(*GetCommissionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_ListCommissionPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommissionPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).ListCommissionPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_ListCommissionPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).ListCommissionPlans(ctx, req.(*ListCommissionPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_DeleteCommissionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommissionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).DeleteCommissionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_DeleteCommissionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).DeleteCommissionPlan(ctx, req.(*DeleteCommissionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackofficeAffiliate_ServiceDesc is the grpc.ServiceDesc for BackofficeAffiliate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackofficeAffiliate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.BackofficeAffiliate",
	HandlerType: (*BackofficeAffiliateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCommissionPlan",
			Handler:    _BackofficeAffiliate_CreateCommissionPlan_Handler,
		},
		{
			MethodName: "UpdateCommissionPlan",
			Handler:    _BackofficeAffiliate_UpdateCommissionPlan_Handler,
		},
		{
			MethodName: "GetCommissionPlan",
			Handler:    _BackofficeAffiliate_GetCommissionPlan_Handler,
		},
		{
			MethodName: "ListCommissionPlans",
			Handler:    _BackofficeAffiliate_ListCommissionPlans_Handler,
		},
		{
			MethodName: "DeleteCommissionPlan",
			Handler:    _BackofficeAffiliate_DeleteCommissionPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffic_affiliate.proto",
}
