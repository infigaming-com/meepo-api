// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffic_affiliate.proto

package v1

import (
	context "context"
	v1 "github.com/infigaming-com/meepo-api/affiliate/service/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackofficeAffiliate_CreateCommissionPlan_FullMethodName   = "/api.backoffice.service.v1.BackofficeAffiliate/CreateCommissionPlan"
	BackofficeAffiliate_UpdateCommissionPlan_FullMethodName   = "/api.backoffice.service.v1.BackofficeAffiliate/UpdateCommissionPlan"
	BackofficeAffiliate_GetCommissionPlan_FullMethodName      = "/api.backoffice.service.v1.BackofficeAffiliate/GetCommissionPlan"
	BackofficeAffiliate_ListCommissionPlans_FullMethodName    = "/api.backoffice.service.v1.BackofficeAffiliate/ListCommissionPlans"
	BackofficeAffiliate_DeleteCommissionPlan_FullMethodName   = "/api.backoffice.service.v1.BackofficeAffiliate/DeleteCommissionPlan"
	BackofficeAffiliate_ListAllCommissionPlans_FullMethodName = "/api.backoffice.service.v1.BackofficeAffiliate/ListAllCommissionPlans"
	BackofficeAffiliate_CreateAffiliate_FullMethodName        = "/api.backoffice.service.v1.BackofficeAffiliate/CreateAffiliate"
	BackofficeAffiliate_UpdateAffiliate_FullMethodName        = "/api.backoffice.service.v1.BackofficeAffiliate/UpdateAffiliate"
	BackofficeAffiliate_GetAffiliate_FullMethodName           = "/api.backoffice.service.v1.BackofficeAffiliate/GetAffiliate"
	BackofficeAffiliate_ListAffiliates_FullMethodName         = "/api.backoffice.service.v1.BackofficeAffiliate/ListAffiliates"
	BackofficeAffiliate_DeleteAffiliate_FullMethodName        = "/api.backoffice.service.v1.BackofficeAffiliate/DeleteAffiliate"
	BackofficeAffiliate_CreateCampaign_FullMethodName         = "/api.backoffice.service.v1.BackofficeAffiliate/CreateCampaign"
	BackofficeAffiliate_UpdateCampaign_FullMethodName         = "/api.backoffice.service.v1.BackofficeAffiliate/UpdateCampaign"
	BackofficeAffiliate_ListCampaigns_FullMethodName          = "/api.backoffice.service.v1.BackofficeAffiliate/ListCampaigns"
	BackofficeAffiliate_ListAffiliateCampaigns_FullMethodName = "/api.backoffice.service.v1.BackofficeAffiliate/ListAffiliateCampaigns"
	BackofficeAffiliate_DeleteCampaign_FullMethodName         = "/api.backoffice.service.v1.BackofficeAffiliate/DeleteCampaign"
	BackofficeAffiliate_ListEvents_FullMethodName             = "/api.backoffice.service.v1.BackofficeAffiliate/ListEvents"
	BackofficeAffiliate_ListCommissions_FullMethodName        = "/api.backoffice.service.v1.BackofficeAffiliate/ListCommissions"
)

// BackofficeAffiliateClient is the client API for BackofficeAffiliate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackofficeAffiliateClient interface {
	CreateCommissionPlan(ctx context.Context, in *CreateCommissionPlanRequest, opts ...grpc.CallOption) (*v1.CreateCommissionPlanResponse, error)
	UpdateCommissionPlan(ctx context.Context, in *UpdateCommissionPlanRequest, opts ...grpc.CallOption) (*v1.UpdateCommissionPlanResponse, error)
	GetCommissionPlan(ctx context.Context, in *GetCommissionPlanRequest, opts ...grpc.CallOption) (*v1.GetCommissionPlanResponse, error)
	ListCommissionPlans(ctx context.Context, in *ListCommissionPlansRequest, opts ...grpc.CallOption) (*v1.ListCommissionPlansResponse, error)
	DeleteCommissionPlan(ctx context.Context, in *DeleteCommissionPlanRequest, opts ...grpc.CallOption) (*v1.DeleteCommissionPlanResponse, error)
	ListAllCommissionPlans(ctx context.Context, in *ListAllCommissionPlansRequest, opts ...grpc.CallOption) (*v1.ListAllCommissionPlansResponse, error)
	CreateAffiliate(ctx context.Context, in *CreateAffiliateRequest, opts ...grpc.CallOption) (*v1.CreateAffiliateResponse, error)
	UpdateAffiliate(ctx context.Context, in *UpdateAffiliateRequest, opts ...grpc.CallOption) (*v1.UpdateAffiliateResponse, error)
	GetAffiliate(ctx context.Context, in *GetAffiliateRequest, opts ...grpc.CallOption) (*v1.GetAffiliateResponse, error)
	ListAffiliates(ctx context.Context, in *ListAffiliatesRequest, opts ...grpc.CallOption) (*v1.ListAffiliatesResponse, error)
	DeleteAffiliate(ctx context.Context, in *DeleteAffiliateRequest, opts ...grpc.CallOption) (*v1.DeleteAffiliateResponse, error)
	CreateCampaign(ctx context.Context, in *CreateCampaignRequest, opts ...grpc.CallOption) (*v1.CreateCampaignResponse, error)
	UpdateCampaign(ctx context.Context, in *UpdateCampaignRequest, opts ...grpc.CallOption) (*v1.UpdateCampaignResponse, error)
	ListCampaigns(ctx context.Context, in *ListCampaignsRequest, opts ...grpc.CallOption) (*v1.ListCampaignsResponse, error)
	ListAffiliateCampaigns(ctx context.Context, in *ListAffiliateCampaignsRequest, opts ...grpc.CallOption) (*v1.ListCampaignsResponse, error)
	DeleteCampaign(ctx context.Context, in *DeleteCampaignRequest, opts ...grpc.CallOption) (*v1.DeleteCampaignResponse, error)
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*v1.ListEventsResponse, error)
	ListCommissions(ctx context.Context, in *ListCommissionsRequest, opts ...grpc.CallOption) (*v1.ListCommissionsResponse, error)
}

type backofficeAffiliateClient struct {
	cc grpc.ClientConnInterface
}

func NewBackofficeAffiliateClient(cc grpc.ClientConnInterface) BackofficeAffiliateClient {
	return &backofficeAffiliateClient{cc}
}

func (c *backofficeAffiliateClient) CreateCommissionPlan(ctx context.Context, in *CreateCommissionPlanRequest, opts ...grpc.CallOption) (*v1.CreateCommissionPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.CreateCommissionPlanResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_CreateCommissionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) UpdateCommissionPlan(ctx context.Context, in *UpdateCommissionPlanRequest, opts ...grpc.CallOption) (*v1.UpdateCommissionPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.UpdateCommissionPlanResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_UpdateCommissionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) GetCommissionPlan(ctx context.Context, in *GetCommissionPlanRequest, opts ...grpc.CallOption) (*v1.GetCommissionPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetCommissionPlanResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_GetCommissionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) ListCommissionPlans(ctx context.Context, in *ListCommissionPlansRequest, opts ...grpc.CallOption) (*v1.ListCommissionPlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListCommissionPlansResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_ListCommissionPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) DeleteCommissionPlan(ctx context.Context, in *DeleteCommissionPlanRequest, opts ...grpc.CallOption) (*v1.DeleteCommissionPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DeleteCommissionPlanResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_DeleteCommissionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) ListAllCommissionPlans(ctx context.Context, in *ListAllCommissionPlansRequest, opts ...grpc.CallOption) (*v1.ListAllCommissionPlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListAllCommissionPlansResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_ListAllCommissionPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) CreateAffiliate(ctx context.Context, in *CreateAffiliateRequest, opts ...grpc.CallOption) (*v1.CreateAffiliateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.CreateAffiliateResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_CreateAffiliate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) UpdateAffiliate(ctx context.Context, in *UpdateAffiliateRequest, opts ...grpc.CallOption) (*v1.UpdateAffiliateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.UpdateAffiliateResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_UpdateAffiliate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) GetAffiliate(ctx context.Context, in *GetAffiliateRequest, opts ...grpc.CallOption) (*v1.GetAffiliateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetAffiliateResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_GetAffiliate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) ListAffiliates(ctx context.Context, in *ListAffiliatesRequest, opts ...grpc.CallOption) (*v1.ListAffiliatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListAffiliatesResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_ListAffiliates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) DeleteAffiliate(ctx context.Context, in *DeleteAffiliateRequest, opts ...grpc.CallOption) (*v1.DeleteAffiliateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DeleteAffiliateResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_DeleteAffiliate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) CreateCampaign(ctx context.Context, in *CreateCampaignRequest, opts ...grpc.CallOption) (*v1.CreateCampaignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.CreateCampaignResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_CreateCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) UpdateCampaign(ctx context.Context, in *UpdateCampaignRequest, opts ...grpc.CallOption) (*v1.UpdateCampaignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.UpdateCampaignResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_UpdateCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) ListCampaigns(ctx context.Context, in *ListCampaignsRequest, opts ...grpc.CallOption) (*v1.ListCampaignsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListCampaignsResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_ListCampaigns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) ListAffiliateCampaigns(ctx context.Context, in *ListAffiliateCampaignsRequest, opts ...grpc.CallOption) (*v1.ListCampaignsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListCampaignsResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_ListAffiliateCampaigns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) DeleteCampaign(ctx context.Context, in *DeleteCampaignRequest, opts ...grpc.CallOption) (*v1.DeleteCampaignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DeleteCampaignResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_DeleteCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*v1.ListEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListEventsResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_ListEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAffiliateClient) ListCommissions(ctx context.Context, in *ListCommissionsRequest, opts ...grpc.CallOption) (*v1.ListCommissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListCommissionsResponse)
	err := c.cc.Invoke(ctx, BackofficeAffiliate_ListCommissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackofficeAffiliateServer is the server API for BackofficeAffiliate service.
// All implementations must embed UnimplementedBackofficeAffiliateServer
// for forward compatibility.
type BackofficeAffiliateServer interface {
	CreateCommissionPlan(context.Context, *CreateCommissionPlanRequest) (*v1.CreateCommissionPlanResponse, error)
	UpdateCommissionPlan(context.Context, *UpdateCommissionPlanRequest) (*v1.UpdateCommissionPlanResponse, error)
	GetCommissionPlan(context.Context, *GetCommissionPlanRequest) (*v1.GetCommissionPlanResponse, error)
	ListCommissionPlans(context.Context, *ListCommissionPlansRequest) (*v1.ListCommissionPlansResponse, error)
	DeleteCommissionPlan(context.Context, *DeleteCommissionPlanRequest) (*v1.DeleteCommissionPlanResponse, error)
	ListAllCommissionPlans(context.Context, *ListAllCommissionPlansRequest) (*v1.ListAllCommissionPlansResponse, error)
	CreateAffiliate(context.Context, *CreateAffiliateRequest) (*v1.CreateAffiliateResponse, error)
	UpdateAffiliate(context.Context, *UpdateAffiliateRequest) (*v1.UpdateAffiliateResponse, error)
	GetAffiliate(context.Context, *GetAffiliateRequest) (*v1.GetAffiliateResponse, error)
	ListAffiliates(context.Context, *ListAffiliatesRequest) (*v1.ListAffiliatesResponse, error)
	DeleteAffiliate(context.Context, *DeleteAffiliateRequest) (*v1.DeleteAffiliateResponse, error)
	CreateCampaign(context.Context, *CreateCampaignRequest) (*v1.CreateCampaignResponse, error)
	UpdateCampaign(context.Context, *UpdateCampaignRequest) (*v1.UpdateCampaignResponse, error)
	ListCampaigns(context.Context, *ListCampaignsRequest) (*v1.ListCampaignsResponse, error)
	ListAffiliateCampaigns(context.Context, *ListAffiliateCampaignsRequest) (*v1.ListCampaignsResponse, error)
	DeleteCampaign(context.Context, *DeleteCampaignRequest) (*v1.DeleteCampaignResponse, error)
	ListEvents(context.Context, *ListEventsRequest) (*v1.ListEventsResponse, error)
	ListCommissions(context.Context, *ListCommissionsRequest) (*v1.ListCommissionsResponse, error)
	mustEmbedUnimplementedBackofficeAffiliateServer()
}

// UnimplementedBackofficeAffiliateServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackofficeAffiliateServer struct{}

func (UnimplementedBackofficeAffiliateServer) CreateCommissionPlan(context.Context, *CreateCommissionPlanRequest) (*v1.CreateCommissionPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommissionPlan not implemented")
}
func (UnimplementedBackofficeAffiliateServer) UpdateCommissionPlan(context.Context, *UpdateCommissionPlanRequest) (*v1.UpdateCommissionPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommissionPlan not implemented")
}
func (UnimplementedBackofficeAffiliateServer) GetCommissionPlan(context.Context, *GetCommissionPlanRequest) (*v1.GetCommissionPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommissionPlan not implemented")
}
func (UnimplementedBackofficeAffiliateServer) ListCommissionPlans(context.Context, *ListCommissionPlansRequest) (*v1.ListCommissionPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommissionPlans not implemented")
}
func (UnimplementedBackofficeAffiliateServer) DeleteCommissionPlan(context.Context, *DeleteCommissionPlanRequest) (*v1.DeleteCommissionPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommissionPlan not implemented")
}
func (UnimplementedBackofficeAffiliateServer) ListAllCommissionPlans(context.Context, *ListAllCommissionPlansRequest) (*v1.ListAllCommissionPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllCommissionPlans not implemented")
}
func (UnimplementedBackofficeAffiliateServer) CreateAffiliate(context.Context, *CreateAffiliateRequest) (*v1.CreateAffiliateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAffiliate not implemented")
}
func (UnimplementedBackofficeAffiliateServer) UpdateAffiliate(context.Context, *UpdateAffiliateRequest) (*v1.UpdateAffiliateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAffiliate not implemented")
}
func (UnimplementedBackofficeAffiliateServer) GetAffiliate(context.Context, *GetAffiliateRequest) (*v1.GetAffiliateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAffiliate not implemented")
}
func (UnimplementedBackofficeAffiliateServer) ListAffiliates(context.Context, *ListAffiliatesRequest) (*v1.ListAffiliatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAffiliates not implemented")
}
func (UnimplementedBackofficeAffiliateServer) DeleteAffiliate(context.Context, *DeleteAffiliateRequest) (*v1.DeleteAffiliateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAffiliate not implemented")
}
func (UnimplementedBackofficeAffiliateServer) CreateCampaign(context.Context, *CreateCampaignRequest) (*v1.CreateCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCampaign not implemented")
}
func (UnimplementedBackofficeAffiliateServer) UpdateCampaign(context.Context, *UpdateCampaignRequest) (*v1.UpdateCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCampaign not implemented")
}
func (UnimplementedBackofficeAffiliateServer) ListCampaigns(context.Context, *ListCampaignsRequest) (*v1.ListCampaignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCampaigns not implemented")
}
func (UnimplementedBackofficeAffiliateServer) ListAffiliateCampaigns(context.Context, *ListAffiliateCampaignsRequest) (*v1.ListCampaignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAffiliateCampaigns not implemented")
}
func (UnimplementedBackofficeAffiliateServer) DeleteCampaign(context.Context, *DeleteCampaignRequest) (*v1.DeleteCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCampaign not implemented")
}
func (UnimplementedBackofficeAffiliateServer) ListEvents(context.Context, *ListEventsRequest) (*v1.ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedBackofficeAffiliateServer) ListCommissions(context.Context, *ListCommissionsRequest) (*v1.ListCommissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommissions not implemented")
}
func (UnimplementedBackofficeAffiliateServer) mustEmbedUnimplementedBackofficeAffiliateServer() {}
func (UnimplementedBackofficeAffiliateServer) testEmbeddedByValue()                             {}

// UnsafeBackofficeAffiliateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackofficeAffiliateServer will
// result in compilation errors.
type UnsafeBackofficeAffiliateServer interface {
	mustEmbedUnimplementedBackofficeAffiliateServer()
}

func RegisterBackofficeAffiliateServer(s grpc.ServiceRegistrar, srv BackofficeAffiliateServer) {
	// If the following call pancis, it indicates UnimplementedBackofficeAffiliateServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackofficeAffiliate_ServiceDesc, srv)
}

func _BackofficeAffiliate_CreateCommissionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommissionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).CreateCommissionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_CreateCommissionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).CreateCommissionPlan(ctx, req.(*CreateCommissionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_UpdateCommissionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommissionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).UpdateCommissionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_UpdateCommissionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).UpdateCommissionPlan(ctx, req.(*UpdateCommissionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_GetCommissionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommissionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).GetCommissionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_GetCommissionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).GetCommissionPlan(ctx, req.(*GetCommissionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_ListCommissionPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommissionPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).ListCommissionPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_ListCommissionPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).ListCommissionPlans(ctx, req.(*ListCommissionPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_DeleteCommissionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommissionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).DeleteCommissionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_DeleteCommissionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).DeleteCommissionPlan(ctx, req.(*DeleteCommissionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_ListAllCommissionPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllCommissionPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).ListAllCommissionPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_ListAllCommissionPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).ListAllCommissionPlans(ctx, req.(*ListAllCommissionPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_CreateAffiliate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAffiliateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).CreateAffiliate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_CreateAffiliate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).CreateAffiliate(ctx, req.(*CreateAffiliateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_UpdateAffiliate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAffiliateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).UpdateAffiliate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_UpdateAffiliate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).UpdateAffiliate(ctx, req.(*UpdateAffiliateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_GetAffiliate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAffiliateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).GetAffiliate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_GetAffiliate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).GetAffiliate(ctx, req.(*GetAffiliateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_ListAffiliates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAffiliatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).ListAffiliates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_ListAffiliates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).ListAffiliates(ctx, req.(*ListAffiliatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_DeleteAffiliate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAffiliateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).DeleteAffiliate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_DeleteAffiliate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).DeleteAffiliate(ctx, req.(*DeleteAffiliateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_CreateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).CreateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_CreateCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).CreateCampaign(ctx, req.(*CreateCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_UpdateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).UpdateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_UpdateCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).UpdateCampaign(ctx, req.(*UpdateCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_ListCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCampaignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).ListCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_ListCampaigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).ListCampaigns(ctx, req.(*ListCampaignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_ListAffiliateCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAffiliateCampaignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).ListAffiliateCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_ListAffiliateCampaigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).ListAffiliateCampaigns(ctx, req.(*ListAffiliateCampaignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_DeleteCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).DeleteCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_DeleteCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).DeleteCampaign(ctx, req.(*DeleteCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_ListEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAffiliate_ListCommissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAffiliateServer).ListCommissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAffiliate_ListCommissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAffiliateServer).ListCommissions(ctx, req.(*ListCommissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackofficeAffiliate_ServiceDesc is the grpc.ServiceDesc for BackofficeAffiliate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackofficeAffiliate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.BackofficeAffiliate",
	HandlerType: (*BackofficeAffiliateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCommissionPlan",
			Handler:    _BackofficeAffiliate_CreateCommissionPlan_Handler,
		},
		{
			MethodName: "UpdateCommissionPlan",
			Handler:    _BackofficeAffiliate_UpdateCommissionPlan_Handler,
		},
		{
			MethodName: "GetCommissionPlan",
			Handler:    _BackofficeAffiliate_GetCommissionPlan_Handler,
		},
		{
			MethodName: "ListCommissionPlans",
			Handler:    _BackofficeAffiliate_ListCommissionPlans_Handler,
		},
		{
			MethodName: "DeleteCommissionPlan",
			Handler:    _BackofficeAffiliate_DeleteCommissionPlan_Handler,
		},
		{
			MethodName: "ListAllCommissionPlans",
			Handler:    _BackofficeAffiliate_ListAllCommissionPlans_Handler,
		},
		{
			MethodName: "CreateAffiliate",
			Handler:    _BackofficeAffiliate_CreateAffiliate_Handler,
		},
		{
			MethodName: "UpdateAffiliate",
			Handler:    _BackofficeAffiliate_UpdateAffiliate_Handler,
		},
		{
			MethodName: "GetAffiliate",
			Handler:    _BackofficeAffiliate_GetAffiliate_Handler,
		},
		{
			MethodName: "ListAffiliates",
			Handler:    _BackofficeAffiliate_ListAffiliates_Handler,
		},
		{
			MethodName: "DeleteAffiliate",
			Handler:    _BackofficeAffiliate_DeleteAffiliate_Handler,
		},
		{
			MethodName: "CreateCampaign",
			Handler:    _BackofficeAffiliate_CreateCampaign_Handler,
		},
		{
			MethodName: "UpdateCampaign",
			Handler:    _BackofficeAffiliate_UpdateCampaign_Handler,
		},
		{
			MethodName: "ListCampaigns",
			Handler:    _BackofficeAffiliate_ListCampaigns_Handler,
		},
		{
			MethodName: "ListAffiliateCampaigns",
			Handler:    _BackofficeAffiliate_ListAffiliateCampaigns_Handler,
		},
		{
			MethodName: "DeleteCampaign",
			Handler:    _BackofficeAffiliate_DeleteCampaign_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _BackofficeAffiliate_ListEvents_Handler,
		},
		{
			MethodName: "ListCommissions",
			Handler:    _BackofficeAffiliate_ListCommissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffic_affiliate.proto",
}
