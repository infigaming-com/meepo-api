// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_company.proto

package v1

import (
	context "context"
	v1 "github.com/infigaming-com/meepo-api/user/service/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackofficeCompany_CreateCompany_FullMethodName                    = "/api.backoffice.service.v1.BackofficeCompany/CreateCompany"
	BackofficeCompany_ListCompanyOperatorsByAdminEmail_FullMethodName = "/api.backoffice.service.v1.BackofficeCompany/ListCompanyOperatorsByAdminEmail"
)

// BackofficeCompanyClient is the client API for BackofficeCompany service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackofficeCompanyClient interface {
	// Create a company's owner account and related data
	CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*CreateCompanyResponse, error)
	// List company operators by admin email under specific retailer operator
	ListCompanyOperatorsByAdminEmail(ctx context.Context, in *ListCompanyOperatorsByAdminEmailRequest, opts ...grpc.CallOption) (*v1.ListCompanyOperatorsByAdminEmailResponse, error)
}

type backofficeCompanyClient struct {
	cc grpc.ClientConnInterface
}

func NewBackofficeCompanyClient(cc grpc.ClientConnInterface) BackofficeCompanyClient {
	return &backofficeCompanyClient{cc}
}

func (c *backofficeCompanyClient) CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*CreateCompanyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCompanyResponse)
	err := c.cc.Invoke(ctx, BackofficeCompany_CreateCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeCompanyClient) ListCompanyOperatorsByAdminEmail(ctx context.Context, in *ListCompanyOperatorsByAdminEmailRequest, opts ...grpc.CallOption) (*v1.ListCompanyOperatorsByAdminEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListCompanyOperatorsByAdminEmailResponse)
	err := c.cc.Invoke(ctx, BackofficeCompany_ListCompanyOperatorsByAdminEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackofficeCompanyServer is the server API for BackofficeCompany service.
// All implementations must embed UnimplementedBackofficeCompanyServer
// for forward compatibility.
type BackofficeCompanyServer interface {
	// Create a company's owner account and related data
	CreateCompany(context.Context, *CreateCompanyRequest) (*CreateCompanyResponse, error)
	// List company operators by admin email under specific retailer operator
	ListCompanyOperatorsByAdminEmail(context.Context, *ListCompanyOperatorsByAdminEmailRequest) (*v1.ListCompanyOperatorsByAdminEmailResponse, error)
	mustEmbedUnimplementedBackofficeCompanyServer()
}

// UnimplementedBackofficeCompanyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackofficeCompanyServer struct{}

func (UnimplementedBackofficeCompanyServer) CreateCompany(context.Context, *CreateCompanyRequest) (*CreateCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompany not implemented")
}
func (UnimplementedBackofficeCompanyServer) ListCompanyOperatorsByAdminEmail(context.Context, *ListCompanyOperatorsByAdminEmailRequest) (*v1.ListCompanyOperatorsByAdminEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanyOperatorsByAdminEmail not implemented")
}
func (UnimplementedBackofficeCompanyServer) mustEmbedUnimplementedBackofficeCompanyServer() {}
func (UnimplementedBackofficeCompanyServer) testEmbeddedByValue()                           {}

// UnsafeBackofficeCompanyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackofficeCompanyServer will
// result in compilation errors.
type UnsafeBackofficeCompanyServer interface {
	mustEmbedUnimplementedBackofficeCompanyServer()
}

func RegisterBackofficeCompanyServer(s grpc.ServiceRegistrar, srv BackofficeCompanyServer) {
	// If the following call pancis, it indicates UnimplementedBackofficeCompanyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackofficeCompany_ServiceDesc, srv)
}

func _BackofficeCompany_CreateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeCompanyServer).CreateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeCompany_CreateCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeCompanyServer).CreateCompany(ctx, req.(*CreateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeCompany_ListCompanyOperatorsByAdminEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompanyOperatorsByAdminEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeCompanyServer).ListCompanyOperatorsByAdminEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeCompany_ListCompanyOperatorsByAdminEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeCompanyServer).ListCompanyOperatorsByAdminEmail(ctx, req.(*ListCompanyOperatorsByAdminEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackofficeCompany_ServiceDesc is the grpc.ServiceDesc for BackofficeCompany service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackofficeCompany_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.BackofficeCompany",
	HandlerType: (*BackofficeCompanyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCompany",
			Handler:    _BackofficeCompany_CreateCompany_Handler,
		},
		{
			MethodName: "ListCompanyOperatorsByAdminEmail",
			Handler:    _BackofficeCompany_ListCompanyOperatorsByAdminEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_company.proto",
}
