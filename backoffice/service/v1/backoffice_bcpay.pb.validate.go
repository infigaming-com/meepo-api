// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_bcpay.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetMerchantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMerchantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMerchantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMerchantRequestMultiError, or nil if none found.
func (m *GetMerchantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMerchantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMerchantRequestMultiError(errors)
	}

	return nil
}

// GetMerchantRequestMultiError is an error wrapping multiple validation errors
// returned by GetMerchantRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMerchantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMerchantRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMerchantRequestMultiError) AllErrors() []error { return m }

// GetMerchantRequestValidationError is the validation error returned by
// GetMerchantRequest.Validate if the designated constraints aren't met.
type GetMerchantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMerchantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMerchantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMerchantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMerchantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMerchantRequestValidationError) ErrorName() string {
	return "GetMerchantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMerchantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMerchantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMerchantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMerchantRequestValidationError{}

// Validate checks the field values on CreateMerchantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMerchantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMerchantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMerchantRequestMultiError, or nil if none found.
func (m *CreateMerchantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMerchantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateMerchantRequestMultiError(errors)
	}

	return nil
}

// CreateMerchantRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMerchantRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMerchantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMerchantRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMerchantRequestMultiError) AllErrors() []error { return m }

// CreateMerchantRequestValidationError is the validation error returned by
// CreateMerchantRequest.Validate if the designated constraints aren't met.
type CreateMerchantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMerchantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMerchantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMerchantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMerchantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMerchantRequestValidationError) ErrorName() string {
	return "CreateMerchantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMerchantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMerchantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMerchantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMerchantRequestValidationError{}

// Validate checks the field values on BankAccountListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BankAccountListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BankAccountListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BankAccountListRequestMultiError, or nil if none found.
func (m *BankAccountListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BankAccountListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	// no validation rules for BankAccount

	// no validation rules for BankAccountFirstname

	// no validation rules for BankAccountLastname

	// no validation rules for CardId

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BankAccountListRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BankAccountListRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BankAccountListRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BankAccountListRequestMultiError(errors)
	}

	return nil
}

// BankAccountListRequestMultiError is an error wrapping multiple validation
// errors returned by BankAccountListRequest.ValidateAll() if the designated
// constraints aren't met.
type BankAccountListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BankAccountListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BankAccountListRequestMultiError) AllErrors() []error { return m }

// BankAccountListRequestValidationError is the validation error returned by
// BankAccountListRequest.Validate if the designated constraints aren't met.
type BankAccountListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BankAccountListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BankAccountListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BankAccountListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BankAccountListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BankAccountListRequestValidationError) ErrorName() string {
	return "BankAccountListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BankAccountListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBankAccountListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BankAccountListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BankAccountListRequestValidationError{}

// Validate checks the field values on AddBankAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddBankAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBankAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddBankAccountRequestMultiError, or nil if none found.
func (m *AddBankAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBankAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBankAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddBankAccountRequestValidationError{
					field:  "BankAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddBankAccountRequestValidationError{
					field:  "BankAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBankAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddBankAccountRequestValidationError{
				field:  "BankAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddBankAccountRequestMultiError(errors)
	}

	return nil
}

// AddBankAccountRequestMultiError is an error wrapping multiple validation
// errors returned by AddBankAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type AddBankAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBankAccountRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBankAccountRequestMultiError) AllErrors() []error { return m }

// AddBankAccountRequestValidationError is the validation error returned by
// AddBankAccountRequest.Validate if the designated constraints aren't met.
type AddBankAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBankAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBankAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBankAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBankAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBankAccountRequestValidationError) ErrorName() string {
	return "AddBankAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddBankAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBankAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBankAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBankAccountRequestValidationError{}

// Validate checks the field values on UpdateBankAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBankAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBankAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBankAccountRequestMultiError, or nil if none found.
func (m *UpdateBankAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBankAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBankAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBankAccountRequestValidationError{
					field:  "BankAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBankAccountRequestValidationError{
					field:  "BankAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBankAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBankAccountRequestValidationError{
				field:  "BankAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBankAccountRequestMultiError(errors)
	}

	return nil
}

// UpdateBankAccountRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBankAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBankAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBankAccountRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBankAccountRequestMultiError) AllErrors() []error { return m }

// UpdateBankAccountRequestValidationError is the validation error returned by
// UpdateBankAccountRequest.Validate if the designated constraints aren't met.
type UpdateBankAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBankAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBankAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBankAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBankAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBankAccountRequestValidationError) ErrorName() string {
	return "UpdateBankAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBankAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBankAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBankAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBankAccountRequestValidationError{}

// Validate checks the field values on TransactionListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransactionListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionListRequestMultiError, or nil if none found.
func (m *TransactionListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for TransactionId

	// no validation rules for DepositBankAccountFirstname

	// no validation rules for DepositBankAccountLastname

	// no validation rules for UserId

	// no validation rules for UserName

	// no validation rules for PayerBankAccountFirstname

	// no validation rules for PayerBankAccountLastname

	if len(errors) > 0 {
		return TransactionListRequestMultiError(errors)
	}

	return nil
}

// TransactionListRequestMultiError is an error wrapping multiple validation
// errors returned by TransactionListRequest.ValidateAll() if the designated
// constraints aren't met.
type TransactionListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionListRequestMultiError) AllErrors() []error { return m }

// TransactionListRequestValidationError is the validation error returned by
// TransactionListRequest.Validate if the designated constraints aren't met.
type TransactionListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionListRequestValidationError) ErrorName() string {
	return "TransactionListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionListRequestValidationError{}

// Validate checks the field values on AuditTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuditTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuditTransactionRequestMultiError, or nil if none found.
func (m *AuditTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	// no validation rules for Audit

	if len(errors) > 0 {
		return AuditTransactionRequestMultiError(errors)
	}

	return nil
}

// AuditTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by AuditTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type AuditTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditTransactionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditTransactionRequestMultiError) AllErrors() []error { return m }

// AuditTransactionRequestValidationError is the validation error returned by
// AuditTransactionRequest.Validate if the designated constraints aren't met.
type AuditTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditTransactionRequestValidationError) ErrorName() string {
	return "AuditTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuditTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditTransactionRequestValidationError{}
