// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_report.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackoffice_ReportGetGameDataSummary = "/api.backoffice.service.v1.Backoffice_Report/GetGameDataSummary"
const OperationBackoffice_ReportGetPlayerGameDataSummary = "/api.backoffice.service.v1.Backoffice_Report/GetPlayerGameDataSummary"
const OperationBackoffice_ReportGetSummary = "/api.backoffice.service.v1.Backoffice_Report/GetSummary"
const OperationBackoffice_ReportListDailySummaries = "/api.backoffice.service.v1.Backoffice_Report/ListDailySummaries"
const OperationBackoffice_ReportListDepositDailyDetails = "/api.backoffice.service.v1.Backoffice_Report/ListDepositDailyDetails"
const OperationBackoffice_ReportListDepositDailySummaries = "/api.backoffice.service.v1.Backoffice_Report/ListDepositDailySummaries"
const OperationBackoffice_ReportListGameDataDailySummaries = "/api.backoffice.service.v1.Backoffice_Report/ListGameDataDailySummaries"
const OperationBackoffice_ReportListWithdrawDailyDetails = "/api.backoffice.service.v1.Backoffice_Report/ListWithdrawDailyDetails"
const OperationBackoffice_ReportListWithdrawDailySummaries = "/api.backoffice.service.v1.Backoffice_Report/ListWithdrawDailySummaries"

type Backoffice_ReportHTTPServer interface {
	GetGameDataSummary(context.Context, *GetGameDataSummaryRequest) (*GetGameDataSummaryResponse, error)
	GetPlayerGameDataSummary(context.Context, *GetPlayerGameDataSummaryRequest) (*GetPlayerGameDataSummaryResponse, error)
	GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error)
	ListDailySummaries(context.Context, *ListDailySummariesRequest) (*ListDailySummariesResponse, error)
	ListDepositDailyDetails(context.Context, *ListDepositDailyDetailsRequest) (*ListDepositDailyDetailsResponse, error)
	ListDepositDailySummaries(context.Context, *ListDepositDailySummariesRequest) (*ListDepositDailySummariesResponse, error)
	ListGameDataDailySummaries(context.Context, *ListGameDataDailySummariesRequest) (*ListGameDataDailySummariesResponse, error)
	ListWithdrawDailyDetails(context.Context, *ListWithdrawDailyDetailsRequest) (*ListWithdrawDailyDetailsResponse, error)
	ListWithdrawDailySummaries(context.Context, *ListWithdrawDailySummariesRequest) (*ListWithdrawDailySummariesResponse, error)
}

func RegisterBackoffice_ReportHTTPServer(s *http.Server, srv Backoffice_ReportHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/report/summary/get", _Backoffice_Report_GetSummary0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/daily-summaries/list", _Backoffice_Report_ListDailySummaries0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/game-data-summary/get", _Backoffice_Report_GetGameDataSummary0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/game-data-daily-summaries/list", _Backoffice_Report_ListGameDataDailySummaries0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/player-game-data-summary/get", _Backoffice_Report_GetPlayerGameDataSummary0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/deposit-daily-summaries/list", _Backoffice_Report_ListDepositDailySummaries0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/deposit-daily-details/list", _Backoffice_Report_ListDepositDailyDetails0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/withdraw-daily-summaries/list", _Backoffice_Report_ListWithdrawDailySummaries0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/withdraw-daily-details/list", _Backoffice_Report_ListWithdrawDailyDetails0_HTTP_Handler(srv))
}

func _Backoffice_Report_GetSummary0_HTTP_Handler(srv Backoffice_ReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSummaryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_ReportGetSummary)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSummary(ctx, req.(*GetSummaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSummaryResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Report_ListDailySummaries0_HTTP_Handler(srv Backoffice_ReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDailySummariesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_ReportListDailySummaries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDailySummaries(ctx, req.(*ListDailySummariesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDailySummariesResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Report_GetGameDataSummary0_HTTP_Handler(srv Backoffice_ReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGameDataSummaryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_ReportGetGameDataSummary)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGameDataSummary(ctx, req.(*GetGameDataSummaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGameDataSummaryResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Report_ListGameDataDailySummaries0_HTTP_Handler(srv Backoffice_ReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGameDataDailySummariesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_ReportListGameDataDailySummaries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGameDataDailySummaries(ctx, req.(*ListGameDataDailySummariesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGameDataDailySummariesResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Report_GetPlayerGameDataSummary0_HTTP_Handler(srv Backoffice_ReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPlayerGameDataSummaryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_ReportGetPlayerGameDataSummary)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPlayerGameDataSummary(ctx, req.(*GetPlayerGameDataSummaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPlayerGameDataSummaryResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Report_ListDepositDailySummaries0_HTTP_Handler(srv Backoffice_ReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDepositDailySummariesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_ReportListDepositDailySummaries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDepositDailySummaries(ctx, req.(*ListDepositDailySummariesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDepositDailySummariesResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Report_ListDepositDailyDetails0_HTTP_Handler(srv Backoffice_ReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDepositDailyDetailsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_ReportListDepositDailyDetails)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDepositDailyDetails(ctx, req.(*ListDepositDailyDetailsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDepositDailyDetailsResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Report_ListWithdrawDailySummaries0_HTTP_Handler(srv Backoffice_ReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWithdrawDailySummariesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_ReportListWithdrawDailySummaries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWithdrawDailySummaries(ctx, req.(*ListWithdrawDailySummariesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWithdrawDailySummariesResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Report_ListWithdrawDailyDetails0_HTTP_Handler(srv Backoffice_ReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWithdrawDailyDetailsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackoffice_ReportListWithdrawDailyDetails)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWithdrawDailyDetails(ctx, req.(*ListWithdrawDailyDetailsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWithdrawDailyDetailsResponse)
		return ctx.Result(200, reply)
	}
}

type Backoffice_ReportHTTPClient interface {
	GetGameDataSummary(ctx context.Context, req *GetGameDataSummaryRequest, opts ...http.CallOption) (rsp *GetGameDataSummaryResponse, err error)
	GetPlayerGameDataSummary(ctx context.Context, req *GetPlayerGameDataSummaryRequest, opts ...http.CallOption) (rsp *GetPlayerGameDataSummaryResponse, err error)
	GetSummary(ctx context.Context, req *GetSummaryRequest, opts ...http.CallOption) (rsp *GetSummaryResponse, err error)
	ListDailySummaries(ctx context.Context, req *ListDailySummariesRequest, opts ...http.CallOption) (rsp *ListDailySummariesResponse, err error)
	ListDepositDailyDetails(ctx context.Context, req *ListDepositDailyDetailsRequest, opts ...http.CallOption) (rsp *ListDepositDailyDetailsResponse, err error)
	ListDepositDailySummaries(ctx context.Context, req *ListDepositDailySummariesRequest, opts ...http.CallOption) (rsp *ListDepositDailySummariesResponse, err error)
	ListGameDataDailySummaries(ctx context.Context, req *ListGameDataDailySummariesRequest, opts ...http.CallOption) (rsp *ListGameDataDailySummariesResponse, err error)
	ListWithdrawDailyDetails(ctx context.Context, req *ListWithdrawDailyDetailsRequest, opts ...http.CallOption) (rsp *ListWithdrawDailyDetailsResponse, err error)
	ListWithdrawDailySummaries(ctx context.Context, req *ListWithdrawDailySummariesRequest, opts ...http.CallOption) (rsp *ListWithdrawDailySummariesResponse, err error)
}

type Backoffice_ReportHTTPClientImpl struct {
	cc *http.Client
}

func NewBackoffice_ReportHTTPClient(client *http.Client) Backoffice_ReportHTTPClient {
	return &Backoffice_ReportHTTPClientImpl{client}
}

func (c *Backoffice_ReportHTTPClientImpl) GetGameDataSummary(ctx context.Context, in *GetGameDataSummaryRequest, opts ...http.CallOption) (*GetGameDataSummaryResponse, error) {
	var out GetGameDataSummaryResponse
	pattern := "/v1/backoffice/report/game-data-summary/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_ReportGetGameDataSummary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_ReportHTTPClientImpl) GetPlayerGameDataSummary(ctx context.Context, in *GetPlayerGameDataSummaryRequest, opts ...http.CallOption) (*GetPlayerGameDataSummaryResponse, error) {
	var out GetPlayerGameDataSummaryResponse
	pattern := "/v1/backoffice/report/player-game-data-summary/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_ReportGetPlayerGameDataSummary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_ReportHTTPClientImpl) GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...http.CallOption) (*GetSummaryResponse, error) {
	var out GetSummaryResponse
	pattern := "/v1/backoffice/report/summary/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_ReportGetSummary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_ReportHTTPClientImpl) ListDailySummaries(ctx context.Context, in *ListDailySummariesRequest, opts ...http.CallOption) (*ListDailySummariesResponse, error) {
	var out ListDailySummariesResponse
	pattern := "/v1/backoffice/report/daily-summaries/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_ReportListDailySummaries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_ReportHTTPClientImpl) ListDepositDailyDetails(ctx context.Context, in *ListDepositDailyDetailsRequest, opts ...http.CallOption) (*ListDepositDailyDetailsResponse, error) {
	var out ListDepositDailyDetailsResponse
	pattern := "/v1/backoffice/report/deposit-daily-details/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_ReportListDepositDailyDetails))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_ReportHTTPClientImpl) ListDepositDailySummaries(ctx context.Context, in *ListDepositDailySummariesRequest, opts ...http.CallOption) (*ListDepositDailySummariesResponse, error) {
	var out ListDepositDailySummariesResponse
	pattern := "/v1/backoffice/report/deposit-daily-summaries/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_ReportListDepositDailySummaries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_ReportHTTPClientImpl) ListGameDataDailySummaries(ctx context.Context, in *ListGameDataDailySummariesRequest, opts ...http.CallOption) (*ListGameDataDailySummariesResponse, error) {
	var out ListGameDataDailySummariesResponse
	pattern := "/v1/backoffice/report/game-data-daily-summaries/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_ReportListGameDataDailySummaries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_ReportHTTPClientImpl) ListWithdrawDailyDetails(ctx context.Context, in *ListWithdrawDailyDetailsRequest, opts ...http.CallOption) (*ListWithdrawDailyDetailsResponse, error) {
	var out ListWithdrawDailyDetailsResponse
	pattern := "/v1/backoffice/report/withdraw-daily-details/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_ReportListWithdrawDailyDetails))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *Backoffice_ReportHTTPClientImpl) ListWithdrawDailySummaries(ctx context.Context, in *ListWithdrawDailySummariesRequest, opts ...http.CallOption) (*ListWithdrawDailySummariesResponse, error) {
	var out ListWithdrawDailySummariesResponse
	pattern := "/v1/backoffice/report/withdraw-daily-summaries/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackoffice_ReportListWithdrawDailySummaries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
