// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_report.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficeReportGetDepositSummaries = "/api.backoffice.service.v1.BackofficeReport/GetDepositSummaries"
const OperationBackofficeReportGetGameDataSummary = "/api.backoffice.service.v1.BackofficeReport/GetGameDataSummary"
const OperationBackofficeReportGetPlayerGameDataSummary = "/api.backoffice.service.v1.BackofficeReport/GetPlayerGameDataSummary"
const OperationBackofficeReportGetSummary = "/api.backoffice.service.v1.BackofficeReport/GetSummary"
const OperationBackofficeReportGetWithdrawSummaries = "/api.backoffice.service.v1.BackofficeReport/GetWithdrawSummaries"
const OperationBackofficeReportListDepositDetails = "/api.backoffice.service.v1.BackofficeReport/ListDepositDetails"
const OperationBackofficeReportListDepositVtgDetails = "/api.backoffice.service.v1.BackofficeReport/ListDepositVtgDetails"
const OperationBackofficeReportListGameData = "/api.backoffice.service.v1.BackofficeReport/ListGameData"
const OperationBackofficeReportListPlayerGameData = "/api.backoffice.service.v1.BackofficeReport/ListPlayerGameData"
const OperationBackofficeReportListRegisterRetention = "/api.backoffice.service.v1.BackofficeReport/ListRegisterRetention"
const OperationBackofficeReportListSportEvents = "/api.backoffice.service.v1.BackofficeReport/ListSportEvents"
const OperationBackofficeReportListSummaries = "/api.backoffice.service.v1.BackofficeReport/ListSummaries"
const OperationBackofficeReportListWithdrawDetails = "/api.backoffice.service.v1.BackofficeReport/ListWithdrawDetails"
const OperationBackofficeReportListWithdrawVtgDetails = "/api.backoffice.service.v1.BackofficeReport/ListWithdrawVtgDetails"

type BackofficeReportHTTPServer interface {
	GetDepositSummaries(context.Context, *GetDepositSummariesRequest) (*GetDepositSummariesResponse, error)
	GetGameDataSummary(context.Context, *GetGameSummaryRequest) (*GetGameSummaryResponse, error)
	GetPlayerGameDataSummary(context.Context, *GetPlayerGameSummaryRequest) (*GetPlayerGameSummaryResponse, error)
	GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error)
	GetWithdrawSummaries(context.Context, *GetWithdrawSummariesRequest) (*GetWithdrawSummariesResponse, error)
	ListDepositDetails(context.Context, *ListDepositDetailsRequest) (*ListDepositDetailsResponse, error)
	ListDepositVtgDetails(context.Context, *ListDepositVtgDetailsRequest) (*ListDepositVtgDetailsResponse, error)
	ListGameData(context.Context, *ListGameDataRequest) (*ListGameDataResponse, error)
	ListPlayerGameData(context.Context, *ListPlayerGameDataRequest) (*ListPlayerGameDataResponse, error)
	ListRegisterRetention(context.Context, *ListRegisterRetentionRequest) (*ListRegisterRetentionResponse, error)
	ListSportEvents(context.Context, *ListSportEventsRequest) (*ListSportEventsResponse, error)
	ListSummaries(context.Context, *ListSummariesRequest) (*ListSummariesResponse, error)
	ListWithdrawDetails(context.Context, *ListWithdrawDetailsRequest) (*ListWithdrawDetailsResponse, error)
	ListWithdrawVtgDetails(context.Context, *ListWithdrawVtgDetailsRequest) (*ListWithdrawVtgDetailsResponse, error)
}

func RegisterBackofficeReportHTTPServer(s *http.Server, srv BackofficeReportHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/report/summary/get", _BackofficeReport_GetSummary0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/summary/list", _BackofficeReport_ListSummaries0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/game-data/get", _BackofficeReport_GetGameDataSummary0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/game-data/list", _BackofficeReport_ListGameData0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/player-game-data/get", _BackofficeReport_GetPlayerGameDataSummary0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/player-game-data/list", _BackofficeReport_ListPlayerGameData0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/deposit-summaries/get", _BackofficeReport_GetDepositSummaries0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/deposit-details/list", _BackofficeReport_ListDepositDetails0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/withdraw-summaries/get", _BackofficeReport_GetWithdrawSummaries0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/withdraw-details/list", _BackofficeReport_ListWithdrawDetails0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/register-retention/list", _BackofficeReport_ListRegisterRetention0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/deposit-vtg-details/list", _BackofficeReport_ListDepositVtgDetails0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/withdraw-vtg-details/list", _BackofficeReport_ListWithdrawVtgDetails0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/sport-events/list", _BackofficeReport_ListSportEvents1_HTTP_Handler(srv))
}

func _BackofficeReport_GetSummary0_HTTP_Handler(srv BackofficeReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSummaryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeReportGetSummary)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSummary(ctx, req.(*GetSummaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSummaryResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeReport_ListSummaries0_HTTP_Handler(srv BackofficeReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSummariesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeReportListSummaries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSummaries(ctx, req.(*ListSummariesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSummariesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeReport_GetGameDataSummary0_HTTP_Handler(srv BackofficeReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGameSummaryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeReportGetGameDataSummary)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGameDataSummary(ctx, req.(*GetGameSummaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGameSummaryResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeReport_ListGameData0_HTTP_Handler(srv BackofficeReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGameDataRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeReportListGameData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGameData(ctx, req.(*ListGameDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGameDataResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeReport_GetPlayerGameDataSummary0_HTTP_Handler(srv BackofficeReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPlayerGameSummaryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeReportGetPlayerGameDataSummary)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPlayerGameDataSummary(ctx, req.(*GetPlayerGameSummaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPlayerGameSummaryResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeReport_ListPlayerGameData0_HTTP_Handler(srv BackofficeReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPlayerGameDataRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeReportListPlayerGameData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPlayerGameData(ctx, req.(*ListPlayerGameDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPlayerGameDataResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeReport_GetDepositSummaries0_HTTP_Handler(srv BackofficeReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDepositSummariesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeReportGetDepositSummaries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDepositSummaries(ctx, req.(*GetDepositSummariesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDepositSummariesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeReport_ListDepositDetails0_HTTP_Handler(srv BackofficeReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDepositDetailsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeReportListDepositDetails)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDepositDetails(ctx, req.(*ListDepositDetailsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDepositDetailsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeReport_GetWithdrawSummaries0_HTTP_Handler(srv BackofficeReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWithdrawSummariesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeReportGetWithdrawSummaries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWithdrawSummaries(ctx, req.(*GetWithdrawSummariesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWithdrawSummariesResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeReport_ListWithdrawDetails0_HTTP_Handler(srv BackofficeReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWithdrawDetailsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeReportListWithdrawDetails)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWithdrawDetails(ctx, req.(*ListWithdrawDetailsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWithdrawDetailsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeReport_ListRegisterRetention0_HTTP_Handler(srv BackofficeReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRegisterRetentionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeReportListRegisterRetention)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRegisterRetention(ctx, req.(*ListRegisterRetentionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRegisterRetentionResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeReport_ListDepositVtgDetails0_HTTP_Handler(srv BackofficeReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDepositVtgDetailsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeReportListDepositVtgDetails)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDepositVtgDetails(ctx, req.(*ListDepositVtgDetailsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDepositVtgDetailsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeReport_ListWithdrawVtgDetails0_HTTP_Handler(srv BackofficeReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWithdrawVtgDetailsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeReportListWithdrawVtgDetails)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWithdrawVtgDetails(ctx, req.(*ListWithdrawVtgDetailsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWithdrawVtgDetailsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeReport_ListSportEvents1_HTTP_Handler(srv BackofficeReportHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSportEventsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeReportListSportEvents)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSportEvents(ctx, req.(*ListSportEventsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSportEventsResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficeReportHTTPClient interface {
	GetDepositSummaries(ctx context.Context, req *GetDepositSummariesRequest, opts ...http.CallOption) (rsp *GetDepositSummariesResponse, err error)
	GetGameDataSummary(ctx context.Context, req *GetGameSummaryRequest, opts ...http.CallOption) (rsp *GetGameSummaryResponse, err error)
	GetPlayerGameDataSummary(ctx context.Context, req *GetPlayerGameSummaryRequest, opts ...http.CallOption) (rsp *GetPlayerGameSummaryResponse, err error)
	GetSummary(ctx context.Context, req *GetSummaryRequest, opts ...http.CallOption) (rsp *GetSummaryResponse, err error)
	GetWithdrawSummaries(ctx context.Context, req *GetWithdrawSummariesRequest, opts ...http.CallOption) (rsp *GetWithdrawSummariesResponse, err error)
	ListDepositDetails(ctx context.Context, req *ListDepositDetailsRequest, opts ...http.CallOption) (rsp *ListDepositDetailsResponse, err error)
	ListDepositVtgDetails(ctx context.Context, req *ListDepositVtgDetailsRequest, opts ...http.CallOption) (rsp *ListDepositVtgDetailsResponse, err error)
	ListGameData(ctx context.Context, req *ListGameDataRequest, opts ...http.CallOption) (rsp *ListGameDataResponse, err error)
	ListPlayerGameData(ctx context.Context, req *ListPlayerGameDataRequest, opts ...http.CallOption) (rsp *ListPlayerGameDataResponse, err error)
	ListRegisterRetention(ctx context.Context, req *ListRegisterRetentionRequest, opts ...http.CallOption) (rsp *ListRegisterRetentionResponse, err error)
	ListSportEvents(ctx context.Context, req *ListSportEventsRequest, opts ...http.CallOption) (rsp *ListSportEventsResponse, err error)
	ListSummaries(ctx context.Context, req *ListSummariesRequest, opts ...http.CallOption) (rsp *ListSummariesResponse, err error)
	ListWithdrawDetails(ctx context.Context, req *ListWithdrawDetailsRequest, opts ...http.CallOption) (rsp *ListWithdrawDetailsResponse, err error)
	ListWithdrawVtgDetails(ctx context.Context, req *ListWithdrawVtgDetailsRequest, opts ...http.CallOption) (rsp *ListWithdrawVtgDetailsResponse, err error)
}

type BackofficeReportHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficeReportHTTPClient(client *http.Client) BackofficeReportHTTPClient {
	return &BackofficeReportHTTPClientImpl{client}
}

func (c *BackofficeReportHTTPClientImpl) GetDepositSummaries(ctx context.Context, in *GetDepositSummariesRequest, opts ...http.CallOption) (*GetDepositSummariesResponse, error) {
	var out GetDepositSummariesResponse
	pattern := "/v1/backoffice/report/deposit-summaries/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeReportGetDepositSummaries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeReportHTTPClientImpl) GetGameDataSummary(ctx context.Context, in *GetGameSummaryRequest, opts ...http.CallOption) (*GetGameSummaryResponse, error) {
	var out GetGameSummaryResponse
	pattern := "/v1/backoffice/report/game-data/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeReportGetGameDataSummary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeReportHTTPClientImpl) GetPlayerGameDataSummary(ctx context.Context, in *GetPlayerGameSummaryRequest, opts ...http.CallOption) (*GetPlayerGameSummaryResponse, error) {
	var out GetPlayerGameSummaryResponse
	pattern := "/v1/backoffice/report/player-game-data/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeReportGetPlayerGameDataSummary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeReportHTTPClientImpl) GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...http.CallOption) (*GetSummaryResponse, error) {
	var out GetSummaryResponse
	pattern := "/v1/backoffice/report/summary/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeReportGetSummary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeReportHTTPClientImpl) GetWithdrawSummaries(ctx context.Context, in *GetWithdrawSummariesRequest, opts ...http.CallOption) (*GetWithdrawSummariesResponse, error) {
	var out GetWithdrawSummariesResponse
	pattern := "/v1/backoffice/report/withdraw-summaries/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeReportGetWithdrawSummaries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeReportHTTPClientImpl) ListDepositDetails(ctx context.Context, in *ListDepositDetailsRequest, opts ...http.CallOption) (*ListDepositDetailsResponse, error) {
	var out ListDepositDetailsResponse
	pattern := "/v1/backoffice/report/deposit-details/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeReportListDepositDetails))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeReportHTTPClientImpl) ListDepositVtgDetails(ctx context.Context, in *ListDepositVtgDetailsRequest, opts ...http.CallOption) (*ListDepositVtgDetailsResponse, error) {
	var out ListDepositVtgDetailsResponse
	pattern := "/v1/backoffice/report/deposit-vtg-details/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeReportListDepositVtgDetails))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeReportHTTPClientImpl) ListGameData(ctx context.Context, in *ListGameDataRequest, opts ...http.CallOption) (*ListGameDataResponse, error) {
	var out ListGameDataResponse
	pattern := "/v1/backoffice/report/game-data/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeReportListGameData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeReportHTTPClientImpl) ListPlayerGameData(ctx context.Context, in *ListPlayerGameDataRequest, opts ...http.CallOption) (*ListPlayerGameDataResponse, error) {
	var out ListPlayerGameDataResponse
	pattern := "/v1/backoffice/report/player-game-data/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeReportListPlayerGameData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeReportHTTPClientImpl) ListRegisterRetention(ctx context.Context, in *ListRegisterRetentionRequest, opts ...http.CallOption) (*ListRegisterRetentionResponse, error) {
	var out ListRegisterRetentionResponse
	pattern := "/v1/backoffice/report/register-retention/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeReportListRegisterRetention))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeReportHTTPClientImpl) ListSportEvents(ctx context.Context, in *ListSportEventsRequest, opts ...http.CallOption) (*ListSportEventsResponse, error) {
	var out ListSportEventsResponse
	pattern := "/v1/backoffice/report/sport-events/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeReportListSportEvents))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeReportHTTPClientImpl) ListSummaries(ctx context.Context, in *ListSummariesRequest, opts ...http.CallOption) (*ListSummariesResponse, error) {
	var out ListSummariesResponse
	pattern := "/v1/backoffice/report/summary/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeReportListSummaries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeReportHTTPClientImpl) ListWithdrawDetails(ctx context.Context, in *ListWithdrawDetailsRequest, opts ...http.CallOption) (*ListWithdrawDetailsResponse, error) {
	var out ListWithdrawDetailsResponse
	pattern := "/v1/backoffice/report/withdraw-details/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeReportListWithdrawDetails))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeReportHTTPClientImpl) ListWithdrawVtgDetails(ctx context.Context, in *ListWithdrawVtgDetailsRequest, opts ...http.CallOption) (*ListWithdrawVtgDetailsResponse, error) {
	var out ListWithdrawVtgDetailsResponse
	pattern := "/v1/backoffice/report/withdraw-vtg-details/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeReportListWithdrawVtgDetails))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
