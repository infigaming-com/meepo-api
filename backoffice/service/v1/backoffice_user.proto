syntax = "proto3";

package api.backoffice.service.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/infigaming-com/meepo-api/backoffice/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.backoffice.service.v1";

service BackofficeUser {
	rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/user/list"
            body: "*"
        };
    }
    rpc GetUserOverview(GetUserOverviewRequest) returns (GetUserOverviewResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/user/overview/get"
            body: "*"
        };
    }
    rpc GetUserProfile(GetUserProfileRequest) returns (GetUserProfileResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/user/profile/get"
            body: "*"
        };
    }
    rpc AddOperatorUserTag(AddOperatorUserTagRequest) returns (AddOperatorUserTagResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/operator/user-tags/add"
            body: "*"
        };
    }
    rpc DeleteOperatorUserTag(DeleteOperatorUserTagRequest) returns (DeleteOperatorUserTagResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/operator/user-tags/delete"
            body: "*"
        };
    }
    rpc GetOperatorUserTags(GetOperatorUserTagsRequest) returns (GetOperatorUserTagsResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/operator/user-tags/get"
            body: "*"
        };
    }
    rpc AddUserTag(AddUserTagRequest) returns (AddUserTagResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/user/tags/add"
            body: "*"
        };
    }
    rpc DeleteUserTag(DeleteUserTagRequest) returns (DeleteUserTagResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/user/tags/delete"
            body: "*"
        };
    }
    rpc AddUserComment(AddUserCommentRequest) returns (AddUserCommentResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/user/comments/add"
            body: "*"
        };
    }
		rpc ListUserComments(ListUserCommentsRequest) returns (ListUserCommentsResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/user/comments/list"
            body: "*"
        };
    }
		rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/user/create"
            body: "*"
        };
    }

	rpc SendEmailVerificationCode(SendEmailVerificationCodeRequest) returns (SendEmailVerificationCodeResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/user/send-email-verification-code"
						body: "*"
				};
		}

	rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/user/update"
            body: "*"
        };
    }

	// SetOperatorTagConfig sets or updates the follow_parent flag for an operator.
	// It will reverse the follow_parent flag if the record exists.
	// If the record doesn't exist, it will create a new one with follow_parent set to false.
	rpc SetOperatorTagsConfig(SetOperatorTagsConfigRequest) returns (SetOperatorTagsConfigResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/user/operator-tags/config/set"
			body: "*"
		};
	}

	// SetOperatorTags sets or updates the tags for an operator.
	rpc SetOperatorTags(SetOperatorTagsRequest) returns (SetOperatorTagsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/user/operator-tags/set"
			body: "*"
		};
	}

	// GetOperatorTagConfig returns follow-parent flag for the given operator ID.
	rpc GetOperatorTagsConfig(GetOperatorTagsConfigRequest) returns (GetOperatorTagsConfigResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/user/operator-tags/config/get"
			body: "*"
		};
	}

	// GetOperatorTags retrieves all tags of an operator or parent operator if follow_parent is true.
	rpc GetOperatorTags(GetOperatorTagsRequest) returns (GetOperatorTagsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/user/operator-tags/get"
			body: "*"
		};
	}

	// GetUserTags retrieves all active tags associated with a user and also exists in the related operator's tag list.
	rpc GetUserTags (GetUserTagsRequest) returns (GetUserTagsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/user/tags/get"
			body: "*"
		};
	}

	rpc SetUserTags(SetUserTagsRequest) returns (SetUserTagsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/user/tags/set"
			body: "*"
		};
	}
}

message ListUsersRequest {
	optional int64 user_id = 1;
	repeated string tags = 2; // not available for now
	optional google.protobuf.Timestamp registration_start_time = 3;
	optional google.protobuf.Timestamp registration_end_time = 4;
	optional int32 vip_level = 5;
	optional int64 retailer_operator_id = 6;
	optional int64 group_operator_id = 7;
	optional int64 operator_id = 8;
	optional string country = 9;
	// optional int32 risk_level_min = 10;
	// optional int32 risk_level_max = 11;
	optional int32 kyc_level = 12;
	// optional bool has_made_deposit = 13;
	optional string deposit_min = 14;
	optional string deposit_max = 15;
	optional string withdrawal_min = 16;
	optional string withdrawal_max = 17;
	optional bool ban_withdraw = 18;
	optional bool ban_game = 19;
	optional bool ban_login = 20;
	// optional bool online = 21;
	optional int32 page = 22;
	optional int32 page_size = 23;
}

message ListUsersResponse {
	message User {
		string retailer = 1;
		string group = 2;
		string operator_name = 3;
		int64 user_id = 4;
		string username = 5;
		string email = 6;
		string mobile = 7;
		int32 vip_level = 8;
		int32 kyc_level = 9;
		string deposit = 10;
		string withdraw = 11;
		repeated string tags = 12;
		bool ban_withdraw = 13;
		bool ban_game = 14;
		bool ban_login = 15;
		// bool online = 16;
		google.protobuf.Timestamp last_login_at = 17;
		google.protobuf.Timestamp registered_at = 18;
		// int32 risk_level = 19;
		// string referral_code = 20;
		// string affiliate_code = 21;
		string country = 22;
		// string device = 23;
		// string source = 24;
		string registration_ip = 25;
	}
	repeated User users = 1;
	int32 page = 2;
	int32 page_size = 3;
	int32 total = 4;
}

message GetUserOverviewRequest {
	// ?? filter
	// Today, This Week, This Month, Latest 30/90/120 days
}

message GetUserOverviewResponse {
	message GameData {
		string game_type = 1;
		string ggr = 2;
		string turnover = 3;
		string rtp = 4;
	}
	string balance = 1;
	string deposit_minus_withdraw = 2;
	string cash_turnover = 3;
	string bonus_turnover = 4;
	string deposit = 5;
	string last_deposit = 6;
	string deposit_count = 7;
	string withdraw = 8;
	string last_withdraw = 9;
	int32 withdraw_count = 10;
	string bonus = 11;
	string valid_turnover = 12;
	string average_bet_amount = 13;
	string ggr = 14;
	int32 ggr_percentage = 15;
	string manually_added_balance = 16;
	string bonus_claimed = 17;
	string ngr = 18;
	int32 ggr_to_ngr_percentage = 19;
	int32 turnover_multiplier = 20;
	int32 deposit_to_withdraw_ratio = 21;
	int32 rtp_percentage = 22;
	repeated GameData game_data = 23;
	bool vpn_used = 24;
	bool has_1x_deposits_before_wd = 25;
	bool more_than_2_deposits = 26;
	bool account_older_than_3_months = 27;
	google.protobuf.Timestamp last_deposit_at = 28;	// ?? Is this time since last deposit
	bool first_withdraw_on_today = 29;
}

message GetUserProfileRequest {
	int64 user_id = 1;
	optional int32 login_page = 2;
	optional int32 login_page_size = 3;
}

message GetUserProfileResponse {
	message IpInfo {
		string ip = 1;
		int32 count = 2;
		string country = 3;
	}
	message RegistrationRecord {
		google.protobuf.Timestamp registered_at = 1;
		IpInfo ip_info = 2;
		string device = 3;
		string method = 4;
		string browser = 5;
		string app = 6; // Not available for now
		string mobile = 7;
		string email = 8;
		string username = 9;
		string source = 10;
	}
	message LoginRecord {
		google.protobuf.Timestamp login_at = 1;
		IpInfo ip_info = 2;
		string device = 3;
		string method = 4;
		string browser = 5;
		string app = 6; // Not available for now
		string email = 7;
		string mobile = 8;
		string username = 9;
	}
	message Comment {
		int64 comment_id = 1;
		string username = 2;
		string author_username = 3;
		string content = 4;
		google.protobuf.Timestamp created_at = 5;
	}
	string nickname = 1;
	int64 user_id = 2;
	int32 vip_level = 3; // Not available for now, only return 1
	bool online = 4; // Not available for now, only return true
	bool ban_withdraw = 5;
	bool ban_game = 6;
	bool ban_login = 7;
	RegistrationRecord registration_record = 8;
	repeated LoginRecord login_records = 9;
	repeated string tags = 10;
	repeated Comment comments = 11;
	int32 total_login_count = 12;
	int32 login_page = 13;
	int32 login_page_size = 14;
}

message AddOperatorUserTagRequest {
	string tag = 1;
}

message AddOperatorUserTagResponse {}

message DeleteOperatorUserTagRequest {
	string tag = 1;
}

message DeleteOperatorUserTagResponse {}

message GetOperatorUserTagsRequest {}

message GetOperatorUserTagsResponse {
	repeated string tags = 1;
}

message AddUserTagRequest {
	int64 user_id = 1;
	string tag = 2;
}

message AddUserTagResponse {}

message DeleteUserTagRequest {
	int64 user_id = 1;
	string tag = 2;
}

message DeleteUserTagResponse {}

message AddUserCommentRequest {
	int64 user_id = 1;
	int64 author_user_id = 2;
	string content = 3;
}

message AddUserCommentResponse {
	int64 comment_id = 1;
}

message ListUserCommentsRequest {
	int64 user_id = 1;
}

message ListUserCommentsResponse {
	message Comment {
		string author = 1;
		string content = 2;
		google.protobuf.Timestamp created_at = 3;
	}
	repeated Comment comments = 1;
}

message CreateUserRequest {
	string username = 1;
	string email = 2;
	string password = 3;
	string mobile = 4;
	string verification_code = 5;
}

message CreateUserResponse {}

message SendEmailVerificationCodeRequest {
	string email = 1;
}

message SendEmailVerificationCodeResponse {}

message UpdateUserRequest {
	int64 user_id = 1;
	optional bool ban_login = 2;
	optional bool ban_game = 3;
	optional bool ban_withdraw = 4;
}

message UpdateUserResponse {}

// SetOperatorTagsConfigRequest contains the operator ID.
message SetOperatorTagsConfigRequest {
	// The ID of the operator to set tag configuration for.
	int64 operator_id = 1;
	// Whether to follow parent operator's tags.
	bool follow_parent = 2;
}

// SetOperatorTagsConfigResponse is an empty message indicating successful tag configuration.
message SetOperatorTagsConfigResponse {}

// SetOperatorTagsRequest contains the operator ID and tag to add.
message SetOperatorTagsRequest {
	// The ID of the operator to add the tag to.
	int64 operator_id = 1;
	// The tag to add to the operator.
	repeated string tags = 2;
}

// SetOperatorTagsResponse is an empty message indicating successful tag addition.
message SetOperatorTagsResponse {}

// GetOperatorTagsConfigRequest contains the operator ID to retrieve tag configuration.
message GetOperatorTagsConfigRequest {
	// The ID of the operator to get tag configuration for.
	int64 operator_id = 1;
}

// GetOperatorTagsConfigResponse contains the tag configuration settings, now only follow_parent flag.
message GetOperatorTagsConfigResponse {
	// Whether the operator should follow parent operator's tags.
	bool follow_parent = 1;
}

// GetOperatorTagsRequest contains the operator ID to retrieve tags for.
message GetOperatorTagsRequest {
	// The ID of the operator to get tags for.
	int64 operator_id = 1;
}	

// GetOperatorTagsResponse contains the list of tags associated with the operator or parent operator if follow_parent is true.
message GetOperatorTagsResponse {
	// List of tags associated with the operator.
	repeated string tags = 1;
}

// GetUserTagsRequest contains the user ID to retrieve tags for.
message GetUserTagsRequest {
	// The ID of the user to get tags for.
	int64 user_id = 1;
}

// GetUserTagsResponse contains the list of active tags associated with the user.
message GetUserTagsResponse {
	// List of active tags associated with the user.
	repeated string tags = 1;
}

message SetUserTagsRequest {
	int64 user_id = 1;
	repeated string tags = 2;
}

message SetUserTagsResponse {}