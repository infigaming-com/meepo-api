syntax = "proto3";

package api.backoffice.service.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "common/common.proto";
import "user/service/v1/user.proto";

option go_package = "github.com/infigaming-com/meepo-api/backoffice/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.backoffice.service.v1";

service BackofficeUser {
	rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/user/list"
            body: "*"
        };
    }
    rpc GetUserOverview(GetUserOverviewRequest) returns (GetUserOverviewResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/user/overview/get"
            body: "*"
        };
    }
    rpc GetUserProfile(GetUserProfileRequest) returns (GetUserProfileResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/user/profile/get"
            body: "*"
        };
    }
    rpc AddUserComment(AddUserCommentRequest) returns (AddUserCommentResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/user/comments/add"
            body: "*"
        };
    }
	rpc ListUserComments(ListUserCommentsRequest) returns (ListUserCommentsResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/user/comments/list"
            body: "*"
        };
    }

	rpc SendEmailVerificationCode(SendEmailVerificationCodeRequest) returns (SendEmailVerificationCodeResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/user/send-email-verification-code"
			body: "*"
		};
	}

	rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/user/update"
            body: "*"
        };
    }

	// SetOperatorTagConfig sets or updates the follow_parent flag for an operator.
	// It will reverse the follow_parent flag if the record exists.
	// If the record doesn't exist, it will create a new one with follow_parent set to false.
	rpc SetOperatorTagsConfig(SetOperatorTagsConfigRequest) returns (SetOperatorTagsConfigResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/user/operator-tags/config/set"
			body: "*"
		};
	}

	// SetOperatorTags sets or updates the tags for an operator.
	rpc SetOperatorTags(SetOperatorTagsRequest) returns (SetOperatorTagsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/user/operator-tags/set"
			body: "*"
		};
	}

	// GetOperatorTagConfig returns follow-parent flag for the given operator ID.
	rpc GetOperatorTagsConfig(GetOperatorTagsConfigRequest) returns (GetOperatorTagsConfigResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/user/operator-tags/config/get"
			body: "*"
		};
	}

	// GetOperatorTags retrieves all tags of an operator or parent operator if follow_parent is true.
	rpc GetOperatorTags(GetOperatorTagsRequest) returns (GetOperatorTagsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/user/operator-tags/get"
			body: "*"
		};
	}

	// GetUserTags retrieves all active tags associated with a user and also exists in the related operator's tag list.
	rpc GetUserTags (GetUserTagsRequest) returns (GetUserTagsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/user/tags/get"
			body: "*"
		};
	}

	rpc SetUserTags(SetUserTagsRequest) returns (SetUserTagsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/user/tags/set"
			body: "*"
		};
	}
}

message ListUsersRequest {
	optional int64 user_id = 1;
	repeated string tags = 2; // not available for now
	optional google.protobuf.Timestamp registration_start_time = 3;
	optional google.protobuf.Timestamp registration_end_time = 4;
	optional int32 vip_level = 5;
	optional string country = 6;
	// optional int32 risk_level_min = 10;
	// optional int32 risk_level_max = 11;
	optional int32 kyc_level = 7;
	// optional bool has_made_deposit = 13;
	optional string deposit_min = 8;
	optional string deposit_max = 9;
	optional string withdrawal_min = 10;
	optional string withdrawal_max = 11;
	optional bool ban_withdraw = 12;
	optional bool ban_game = 13;
	optional bool ban_login = 14;
	optional bool online = 17;
	optional bool enabled = 18;
	optional string email = 19;
	optional string mobile = 20;
	optional int32 page = 21;
	optional int32 page_size = 22;
	api.common.OperatorContextFilters operator_context_filters = 23;
}

message ListUsersResponse {
	message User {
		string operator_name = 1;
		string company_operator_name = 2;
		string retailer_operator_name = 3;
		string system_operator_name = 4;
		int64 user_id = 5;
		string username = 6;
		string email = 7;
		string mobile = 8;
		int32 vip_level = 9;
		int32 kyc_level = 10;
		string deposit_usd = 11;
		string withdraw_usd = 12;
		string deposit_reporting_currency = 13;
		string withdraw_reporting_currency = 14;
		repeated string tags = 15;
		bool ban_withdraw = 16;
		bool ban_game = 17;
		bool ban_login = 18;
		bool online = 19;
		google.protobuf.Timestamp last_login_at = 20;
		google.protobuf.Timestamp registered_at = 21;
		// int32 risk_level = 19;
		// string referral_code = 20;
		// string affiliate_code = 21;
		string country = 22;
		// string device = 23;
		// string source = 24;
		string registration_ip = 23;
	}
	repeated User users = 1;
	int32 page = 2;
	int32 page_size = 3;
	int32 total = 4;
}

message GetUserOverviewRequest {
	int64 user_id = 1;
	// filter options:
	// - "today": Today's data
	// - "this_week": This week's data
	// - "this_month": This month's data
	// - "recent_24h": Recent 24 hours data
	// - "recent_30d": Recent 30 days data
	// If not specified, returns all time data
	optional string filter = 2;
}

message GetUserOverviewResponse {
	message GameData {
		string game_type = 1; // game category
		string ggr_usd = 2;
		string ggr_reporting_currency = 3;
		string turnover_usd = 4;
		string turnover_reporting_currency = 5;
		string rtp = 6;
	}
	string balance_usd = 1;
	string deposit_minus_withdraw_usd = 2;
	string turnover_usd = 3;
	string cash_turnover_usd = 4;
	string bonus_turnover_usd = 5;
	string deposit_usd = 6;
	string last_deposit_usd = 7;
	int32 deposit_count = 8;
	string withdraw_usd = 9; // withdrawal
	string last_withdraw_usd = 10; // last withdrawal
	int32 withdraw_count = 11; // withdrawal count
	string bonus_usd = 12; // Not available for now, only return 0
	string valid_turnover_usd = 13; // Not available for now, only return 0
	string average_bet_amount_usd = 14;
	string ggr_usd = 15;
	string ggr_percentage = 16; // Round to 2 decimal places
	string manually_added_balance_usd = 17; // Not available for now, only return 0
	string bonus_claimed_usd = 18; // Not available for now, only return 0
	string ngr_usd = 19;
	string ggr_to_ngr_percentage = 20; // Round to 2 decimal places
	string turnover_multiplier = 21; // Round to 2 decimal places
	string withdraw_to_deposit_ratio = 22; // Round to 2 decimal places
	string rtp = 23; // Round to 2 decimal places
	string balance_reporting_currency = 25;
	string deposit_minus_withdraw_reporting_currency = 26;
	string turnover_reporting_currency = 27;
	string cash_turnover_reporting_currency = 28;
	string bonus_turnover_reporting_currency = 29;
	string deposit_reporting_currency = 30;
	string last_deposit_reporting_currency = 31;
	string withdraw_reporting_currency = 32;
	string last_withdraw_reporting_currency = 33;
	string bonus_reporting_currency = 34;
	string valid_turnover_reporting_currency = 35;
	string average_bet_amount_reporting_currency = 36;
	string ggr_reporting_currency = 37;
	string manually_added_balance_reporting_currency = 38;
	string bonus_claimed_reporting_currency = 39;
	string ngr_reporting_currency = 40;
	repeated GameData game_data = 41;
}

message GetUserProfileRequest {
	int64 user_id = 1;
	optional int32 login_page = 2;
	optional int32 login_page_size = 3;
}

message GetUserProfileResponse {
	message IpInfo {
		string ip = 1;
		int32 count = 2;
		string country = 3;
	}
	message RegistrationRecord {
		google.protobuf.Timestamp registered_at = 1;
		IpInfo ip_info = 2;
		string device = 3;
		string method = 4;
		string browser = 5;
		string app = 6; // Not available for now
		string mobile = 7;
		string email = 8;
		string username = 9;
		string source = 10;
	}
	message LoginRecord {
		google.protobuf.Timestamp login_at = 1;
		IpInfo ip_info = 2;
		string device = 3;
		string method = 4;
		string browser = 5;
		string app = 6; // Not available for now
		string email = 7;
		string mobile = 8;
		string username = 9;
	}
	message Comment {
		int64 comment_id = 1;
		string username = 2;
		string author_username = 3;
		string content = 4;
		google.protobuf.Timestamp created_at = 5;
	}
	string nickname = 1;
	int64 user_id = 2;
	int32 vip_level = 3; // Not available for now, only return 1
	bool online = 4; // Not available for now, only return true
	bool ban_withdraw = 5;
	bool ban_game = 6;
	bool ban_login = 7;
	bool locked = 8;
	RegistrationRecord registration_record = 9;
	repeated LoginRecord login_records = 10;
	repeated string tags = 11;
	repeated Comment comments = 12;
	int32 total_login_count = 13;
	int32 login_page = 14;
	int32 login_page_size = 15;
	string mobile = 16;
	string email = 17;
	int32 kyc_level = 18;
}

message AddUserCommentRequest {
	int64 user_id = 1;
	string content = 2;
}

message AddUserCommentResponse {
	int64 comment_id = 1;
}

message ListUserCommentsRequest {
	int64 user_id = 1;
}

message ListUserCommentsResponse {
	message Comment {
		string author = 1;
		string content = 2;
		google.protobuf.Timestamp created_at = 3;
	}
	repeated Comment comments = 1;
}

message SendEmailVerificationCodeRequest {
	string email = 1;
}

message SendEmailVerificationCodeResponse {}

message UpdateUserRequest {
	// user id
	int64 user_id = 1;
	// nickname
	optional string nickname = 2;
	// avatar
	optional string avatar = 3;
	// ban login
	optional bool ban_login = 4;
	// ban game
	optional bool ban_game = 5;
	// ban withdraw
	optional bool ban_withdraw = 6;
	// locked
	optional bool locked = 7;
	// enabled
	optional bool enabled = 8;
	// role id
	optional int64 role_id = 9;
	// first name
	optional string firstname = 10;
	// last name
	optional string lastname = 11;
	// email
	optional string email = 12;
	// mobile
	optional string mobile = 13;
	// user identity
	optional user.service.v1.UserIdentity user_identity = 14;
	// address
	optional string address = 15;
}

message UpdateUserResponse {}

// SetOperatorTagsConfigRequest contains the operator ID.
message SetOperatorTagsConfigRequest {
	// The ID of the operator to set tag configuration for.
	int64 operator_id = 1;
	// Whether to follow parent operator's tags.
	bool follow_parent = 2;
}

// SetOperatorTagsConfigResponse is an empty message indicating successful tag configuration.
message SetOperatorTagsConfigResponse {}

// SetOperatorTagsRequest contains the operator ID and tag to add.
message SetOperatorTagsRequest {
	// The ID of the operator to add the tag to.
	int64 operator_id = 1;
	// The tag to add to the operator.
	repeated string tags = 2;
}

// SetOperatorTagsResponse is an empty message indicating successful tag addition.
message SetOperatorTagsResponse {}

// GetOperatorTagsConfigRequest contains the operator ID to retrieve tag configuration.
message GetOperatorTagsConfigRequest {
	// The ID of the operator to get tag configuration for.
	int64 operator_id = 1;
}

// GetOperatorTagsConfigResponse contains the tag configuration settings, now only follow_parent flag.
message GetOperatorTagsConfigResponse {
	// Whether the operator should follow parent operator's tags.
	bool follow_parent = 1;
}

// GetOperatorTagsRequest does not contain any parameters. It will return all tags of user's operator.
message GetOperatorTagsRequest {
}	

// GetOperatorTagsResponse contains the list of tags associated with the operator or parent operator if follow_parent is true.
message GetOperatorTagsResponse {
	// List of tags associated with the operator.
	repeated string tags = 1;
}

// GetUserTagsRequest contains the user ID to retrieve tags for.
message GetUserTagsRequest {
	// The ID of the user to get tags for.
	int64 user_id = 1;
}

// GetUserTagsResponse contains the list of active tags associated with the user.
message GetUserTagsResponse {
	// List of active tags associated with the user.
	repeated string tags = 1;
}

message SetUserTagsRequest {
	int64 user_id = 1;
	repeated string tags = 2;
}

message SetUserTagsResponse {}
