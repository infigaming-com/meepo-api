// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_wallet.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackofficeWallet_GetWallets_FullMethodName                    = "/api.backoffice.service.v1.BackofficeWallet/GetWallets"
	BackofficeWallet_GetWalletCredits_FullMethodName              = "/api.backoffice.service.v1.BackofficeWallet/GetWalletCredits"
	BackofficeWallet_ListWalletBalanceTransactions_FullMethodName = "/api.backoffice.service.v1.BackofficeWallet/ListWalletBalanceTransactions"
	BackofficeWallet_GetWalletCreditTransactions_FullMethodName   = "/api.backoffice.service.v1.BackofficeWallet/GetWalletCreditTransactions"
	BackofficeWallet_UpdateWallet_FullMethodName                  = "/api.backoffice.service.v1.BackofficeWallet/UpdateWallet"
	BackofficeWallet_AddWalletCurrency_FullMethodName             = "/api.backoffice.service.v1.BackofficeWallet/AddWalletCurrency"
	BackofficeWallet_ListWalletCurrencies_FullMethodName          = "/api.backoffice.service.v1.BackofficeWallet/ListWalletCurrencies"
	BackofficeWallet_UpdateWalletCurrency_FullMethodName          = "/api.backoffice.service.v1.BackofficeWallet/UpdateWalletCurrency"
	BackofficeWallet_ListOperatorBalances_FullMethodName          = "/api.backoffice.service.v1.BackofficeWallet/ListOperatorBalances"
	BackofficeWallet_GetExchangeRates_FullMethodName              = "/api.backoffice.service.v1.BackofficeWallet/GetExchangeRates"
	BackofficeWallet_OperatorTransfer_FullMethodName              = "/api.backoffice.service.v1.BackofficeWallet/OperatorTransfer"
	BackofficeWallet_OperatorSwap_FullMethodName                  = "/api.backoffice.service.v1.BackofficeWallet/OperatorSwap"
	BackofficeWallet_OperatorFreeze_FullMethodName                = "/api.backoffice.service.v1.BackofficeWallet/OperatorFreeze"
	BackofficeWallet_OperatorRollback_FullMethodName              = "/api.backoffice.service.v1.BackofficeWallet/OperatorRollback"
	BackofficeWallet_OperatorSettle_FullMethodName                = "/api.backoffice.service.v1.BackofficeWallet/OperatorSettle"
)

// BackofficeWalletClient is the client API for BackofficeWallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackofficeWalletClient interface {
	GetWallets(ctx context.Context, in *GetWalletsRequest, opts ...grpc.CallOption) (*GetWalletsResponse, error)
	GetWalletCredits(ctx context.Context, in *GetWalletCreditsRequest, opts ...grpc.CallOption) (*GetWalletCreditsResponse, error)
	// ListWalletBalanceTransactions provides balance transactions for a specific user in User transactions page.
	ListWalletBalanceTransactions(ctx context.Context, in *ListWalletBalanceTransactionsRequest, opts ...grpc.CallOption) (*ListWalletBalanceTransactionsResponse, error)
	GetWalletCreditTransactions(ctx context.Context, in *GetWalletCreditTransactionsRequest, opts ...grpc.CallOption) (*GetWalletCreditTransactionsResponse, error)
	UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...grpc.CallOption) (*UpdateWalletResponse, error)
	AddWalletCurrency(ctx context.Context, in *AddWalletCurrencyRequest, opts ...grpc.CallOption) (*AddWalletCurrencyResponse, error)
	ListWalletCurrencies(ctx context.Context, in *ListWalletCurrenciesRequest, opts ...grpc.CallOption) (*ListWalletCurrenciesResponse, error)
	UpdateWalletCurrency(ctx context.Context, in *UpdateWalletCurrencyRequest, opts ...grpc.CallOption) (*UpdateWalletCurrencyResponse, error)
	// ListOperatorBalances lists all operator balances which belong to the backoffice operator
	ListOperatorBalances(ctx context.Context, in *ListOperatorBalancesRequest, opts ...grpc.CallOption) (*ListOperatorBalancesResponse, error)
	GetExchangeRates(ctx context.Context, in *GetExchangeRatesRequest, opts ...grpc.CallOption) (*GetExchangeRatesResponse, error)
	// OperatorTransfer transfers cash from one operator to its company operator
	OperatorTransfer(ctx context.Context, in *OperatorTransferRequest, opts ...grpc.CallOption) (*OperatorTransferResponse, error)
	// OperatorSwap swaps cash between two balances of the same operator
	OperatorSwap(ctx context.Context, in *OperatorSwapRequest, opts ...grpc.CallOption) (*OperatorSwapResponse, error)
	// OperatorFreeze freezes cash of an operator
	OperatorFreeze(ctx context.Context, in *OperatorFreezeRequest, opts ...grpc.CallOption) (*OperatorFreezeResponse, error)
	// OperatorRollback rolls back frozen cash of an operator
	OperatorRollback(ctx context.Context, in *OperatorRollbackRequest, opts ...grpc.CallOption) (*OperatorRollbackResponse, error)
	// OperatorSettle settles frozen cash of an operator
	OperatorSettle(ctx context.Context, in *OperatorSettleRequest, opts ...grpc.CallOption) (*OperatorSettleResponse, error)
}

type backofficeWalletClient struct {
	cc grpc.ClientConnInterface
}

func NewBackofficeWalletClient(cc grpc.ClientConnInterface) BackofficeWalletClient {
	return &backofficeWalletClient{cc}
}

func (c *backofficeWalletClient) GetWallets(ctx context.Context, in *GetWalletsRequest, opts ...grpc.CallOption) (*GetWalletsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletsResponse)
	err := c.cc.Invoke(ctx, BackofficeWallet_GetWallets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeWalletClient) GetWalletCredits(ctx context.Context, in *GetWalletCreditsRequest, opts ...grpc.CallOption) (*GetWalletCreditsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletCreditsResponse)
	err := c.cc.Invoke(ctx, BackofficeWallet_GetWalletCredits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeWalletClient) ListWalletBalanceTransactions(ctx context.Context, in *ListWalletBalanceTransactionsRequest, opts ...grpc.CallOption) (*ListWalletBalanceTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWalletBalanceTransactionsResponse)
	err := c.cc.Invoke(ctx, BackofficeWallet_ListWalletBalanceTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeWalletClient) GetWalletCreditTransactions(ctx context.Context, in *GetWalletCreditTransactionsRequest, opts ...grpc.CallOption) (*GetWalletCreditTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletCreditTransactionsResponse)
	err := c.cc.Invoke(ctx, BackofficeWallet_GetWalletCreditTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeWalletClient) UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...grpc.CallOption) (*UpdateWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWalletResponse)
	err := c.cc.Invoke(ctx, BackofficeWallet_UpdateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeWalletClient) AddWalletCurrency(ctx context.Context, in *AddWalletCurrencyRequest, opts ...grpc.CallOption) (*AddWalletCurrencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddWalletCurrencyResponse)
	err := c.cc.Invoke(ctx, BackofficeWallet_AddWalletCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeWalletClient) ListWalletCurrencies(ctx context.Context, in *ListWalletCurrenciesRequest, opts ...grpc.CallOption) (*ListWalletCurrenciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWalletCurrenciesResponse)
	err := c.cc.Invoke(ctx, BackofficeWallet_ListWalletCurrencies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeWalletClient) UpdateWalletCurrency(ctx context.Context, in *UpdateWalletCurrencyRequest, opts ...grpc.CallOption) (*UpdateWalletCurrencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWalletCurrencyResponse)
	err := c.cc.Invoke(ctx, BackofficeWallet_UpdateWalletCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeWalletClient) ListOperatorBalances(ctx context.Context, in *ListOperatorBalancesRequest, opts ...grpc.CallOption) (*ListOperatorBalancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOperatorBalancesResponse)
	err := c.cc.Invoke(ctx, BackofficeWallet_ListOperatorBalances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeWalletClient) GetExchangeRates(ctx context.Context, in *GetExchangeRatesRequest, opts ...grpc.CallOption) (*GetExchangeRatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExchangeRatesResponse)
	err := c.cc.Invoke(ctx, BackofficeWallet_GetExchangeRates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeWalletClient) OperatorTransfer(ctx context.Context, in *OperatorTransferRequest, opts ...grpc.CallOption) (*OperatorTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperatorTransferResponse)
	err := c.cc.Invoke(ctx, BackofficeWallet_OperatorTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeWalletClient) OperatorSwap(ctx context.Context, in *OperatorSwapRequest, opts ...grpc.CallOption) (*OperatorSwapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperatorSwapResponse)
	err := c.cc.Invoke(ctx, BackofficeWallet_OperatorSwap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeWalletClient) OperatorFreeze(ctx context.Context, in *OperatorFreezeRequest, opts ...grpc.CallOption) (*OperatorFreezeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperatorFreezeResponse)
	err := c.cc.Invoke(ctx, BackofficeWallet_OperatorFreeze_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeWalletClient) OperatorRollback(ctx context.Context, in *OperatorRollbackRequest, opts ...grpc.CallOption) (*OperatorRollbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperatorRollbackResponse)
	err := c.cc.Invoke(ctx, BackofficeWallet_OperatorRollback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeWalletClient) OperatorSettle(ctx context.Context, in *OperatorSettleRequest, opts ...grpc.CallOption) (*OperatorSettleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperatorSettleResponse)
	err := c.cc.Invoke(ctx, BackofficeWallet_OperatorSettle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackofficeWalletServer is the server API for BackofficeWallet service.
// All implementations must embed UnimplementedBackofficeWalletServer
// for forward compatibility.
type BackofficeWalletServer interface {
	GetWallets(context.Context, *GetWalletsRequest) (*GetWalletsResponse, error)
	GetWalletCredits(context.Context, *GetWalletCreditsRequest) (*GetWalletCreditsResponse, error)
	// ListWalletBalanceTransactions provides balance transactions for a specific user in User transactions page.
	ListWalletBalanceTransactions(context.Context, *ListWalletBalanceTransactionsRequest) (*ListWalletBalanceTransactionsResponse, error)
	GetWalletCreditTransactions(context.Context, *GetWalletCreditTransactionsRequest) (*GetWalletCreditTransactionsResponse, error)
	UpdateWallet(context.Context, *UpdateWalletRequest) (*UpdateWalletResponse, error)
	AddWalletCurrency(context.Context, *AddWalletCurrencyRequest) (*AddWalletCurrencyResponse, error)
	ListWalletCurrencies(context.Context, *ListWalletCurrenciesRequest) (*ListWalletCurrenciesResponse, error)
	UpdateWalletCurrency(context.Context, *UpdateWalletCurrencyRequest) (*UpdateWalletCurrencyResponse, error)
	// ListOperatorBalances lists all operator balances which belong to the backoffice operator
	ListOperatorBalances(context.Context, *ListOperatorBalancesRequest) (*ListOperatorBalancesResponse, error)
	GetExchangeRates(context.Context, *GetExchangeRatesRequest) (*GetExchangeRatesResponse, error)
	// OperatorTransfer transfers cash from one operator to its company operator
	OperatorTransfer(context.Context, *OperatorTransferRequest) (*OperatorTransferResponse, error)
	// OperatorSwap swaps cash between two balances of the same operator
	OperatorSwap(context.Context, *OperatorSwapRequest) (*OperatorSwapResponse, error)
	// OperatorFreeze freezes cash of an operator
	OperatorFreeze(context.Context, *OperatorFreezeRequest) (*OperatorFreezeResponse, error)
	// OperatorRollback rolls back frozen cash of an operator
	OperatorRollback(context.Context, *OperatorRollbackRequest) (*OperatorRollbackResponse, error)
	// OperatorSettle settles frozen cash of an operator
	OperatorSettle(context.Context, *OperatorSettleRequest) (*OperatorSettleResponse, error)
	mustEmbedUnimplementedBackofficeWalletServer()
}

// UnimplementedBackofficeWalletServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackofficeWalletServer struct{}

func (UnimplementedBackofficeWalletServer) GetWallets(context.Context, *GetWalletsRequest) (*GetWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallets not implemented")
}
func (UnimplementedBackofficeWalletServer) GetWalletCredits(context.Context, *GetWalletCreditsRequest) (*GetWalletCreditsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletCredits not implemented")
}
func (UnimplementedBackofficeWalletServer) ListWalletBalanceTransactions(context.Context, *ListWalletBalanceTransactionsRequest) (*ListWalletBalanceTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletBalanceTransactions not implemented")
}
func (UnimplementedBackofficeWalletServer) GetWalletCreditTransactions(context.Context, *GetWalletCreditTransactionsRequest) (*GetWalletCreditTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletCreditTransactions not implemented")
}
func (UnimplementedBackofficeWalletServer) UpdateWallet(context.Context, *UpdateWalletRequest) (*UpdateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWallet not implemented")
}
func (UnimplementedBackofficeWalletServer) AddWalletCurrency(context.Context, *AddWalletCurrencyRequest) (*AddWalletCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWalletCurrency not implemented")
}
func (UnimplementedBackofficeWalletServer) ListWalletCurrencies(context.Context, *ListWalletCurrenciesRequest) (*ListWalletCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletCurrencies not implemented")
}
func (UnimplementedBackofficeWalletServer) UpdateWalletCurrency(context.Context, *UpdateWalletCurrencyRequest) (*UpdateWalletCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWalletCurrency not implemented")
}
func (UnimplementedBackofficeWalletServer) ListOperatorBalances(context.Context, *ListOperatorBalancesRequest) (*ListOperatorBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperatorBalances not implemented")
}
func (UnimplementedBackofficeWalletServer) GetExchangeRates(context.Context, *GetExchangeRatesRequest) (*GetExchangeRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeRates not implemented")
}
func (UnimplementedBackofficeWalletServer) OperatorTransfer(context.Context, *OperatorTransferRequest) (*OperatorTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorTransfer not implemented")
}
func (UnimplementedBackofficeWalletServer) OperatorSwap(context.Context, *OperatorSwapRequest) (*OperatorSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorSwap not implemented")
}
func (UnimplementedBackofficeWalletServer) OperatorFreeze(context.Context, *OperatorFreezeRequest) (*OperatorFreezeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorFreeze not implemented")
}
func (UnimplementedBackofficeWalletServer) OperatorRollback(context.Context, *OperatorRollbackRequest) (*OperatorRollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorRollback not implemented")
}
func (UnimplementedBackofficeWalletServer) OperatorSettle(context.Context, *OperatorSettleRequest) (*OperatorSettleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorSettle not implemented")
}
func (UnimplementedBackofficeWalletServer) mustEmbedUnimplementedBackofficeWalletServer() {}
func (UnimplementedBackofficeWalletServer) testEmbeddedByValue()                          {}

// UnsafeBackofficeWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackofficeWalletServer will
// result in compilation errors.
type UnsafeBackofficeWalletServer interface {
	mustEmbedUnimplementedBackofficeWalletServer()
}

func RegisterBackofficeWalletServer(s grpc.ServiceRegistrar, srv BackofficeWalletServer) {
	// If the following call pancis, it indicates UnimplementedBackofficeWalletServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackofficeWallet_ServiceDesc, srv)
}

func _BackofficeWallet_GetWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeWalletServer).GetWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeWallet_GetWallets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeWalletServer).GetWallets(ctx, req.(*GetWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeWallet_GetWalletCredits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletCreditsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeWalletServer).GetWalletCredits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeWallet_GetWalletCredits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeWalletServer).GetWalletCredits(ctx, req.(*GetWalletCreditsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeWallet_ListWalletBalanceTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletBalanceTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeWalletServer).ListWalletBalanceTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeWallet_ListWalletBalanceTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeWalletServer).ListWalletBalanceTransactions(ctx, req.(*ListWalletBalanceTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeWallet_GetWalletCreditTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletCreditTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeWalletServer).GetWalletCreditTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeWallet_GetWalletCreditTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeWalletServer).GetWalletCreditTransactions(ctx, req.(*GetWalletCreditTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeWallet_UpdateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeWalletServer).UpdateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeWallet_UpdateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeWalletServer).UpdateWallet(ctx, req.(*UpdateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeWallet_AddWalletCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWalletCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeWalletServer).AddWalletCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeWallet_AddWalletCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeWalletServer).AddWalletCurrency(ctx, req.(*AddWalletCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeWallet_ListWalletCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeWalletServer).ListWalletCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeWallet_ListWalletCurrencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeWalletServer).ListWalletCurrencies(ctx, req.(*ListWalletCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeWallet_UpdateWalletCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeWalletServer).UpdateWalletCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeWallet_UpdateWalletCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeWalletServer).UpdateWalletCurrency(ctx, req.(*UpdateWalletCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeWallet_ListOperatorBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperatorBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeWalletServer).ListOperatorBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeWallet_ListOperatorBalances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeWalletServer).ListOperatorBalances(ctx, req.(*ListOperatorBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeWallet_GetExchangeRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeWalletServer).GetExchangeRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeWallet_GetExchangeRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeWalletServer).GetExchangeRates(ctx, req.(*GetExchangeRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeWallet_OperatorTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeWalletServer).OperatorTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeWallet_OperatorTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeWalletServer).OperatorTransfer(ctx, req.(*OperatorTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeWallet_OperatorSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeWalletServer).OperatorSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeWallet_OperatorSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeWalletServer).OperatorSwap(ctx, req.(*OperatorSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeWallet_OperatorFreeze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorFreezeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeWalletServer).OperatorFreeze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeWallet_OperatorFreeze_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeWalletServer).OperatorFreeze(ctx, req.(*OperatorFreezeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeWallet_OperatorRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorRollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeWalletServer).OperatorRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeWallet_OperatorRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeWalletServer).OperatorRollback(ctx, req.(*OperatorRollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeWallet_OperatorSettle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorSettleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeWalletServer).OperatorSettle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeWallet_OperatorSettle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeWalletServer).OperatorSettle(ctx, req.(*OperatorSettleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackofficeWallet_ServiceDesc is the grpc.ServiceDesc for BackofficeWallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackofficeWallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.BackofficeWallet",
	HandlerType: (*BackofficeWalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWallets",
			Handler:    _BackofficeWallet_GetWallets_Handler,
		},
		{
			MethodName: "GetWalletCredits",
			Handler:    _BackofficeWallet_GetWalletCredits_Handler,
		},
		{
			MethodName: "ListWalletBalanceTransactions",
			Handler:    _BackofficeWallet_ListWalletBalanceTransactions_Handler,
		},
		{
			MethodName: "GetWalletCreditTransactions",
			Handler:    _BackofficeWallet_GetWalletCreditTransactions_Handler,
		},
		{
			MethodName: "UpdateWallet",
			Handler:    _BackofficeWallet_UpdateWallet_Handler,
		},
		{
			MethodName: "AddWalletCurrency",
			Handler:    _BackofficeWallet_AddWalletCurrency_Handler,
		},
		{
			MethodName: "ListWalletCurrencies",
			Handler:    _BackofficeWallet_ListWalletCurrencies_Handler,
		},
		{
			MethodName: "UpdateWalletCurrency",
			Handler:    _BackofficeWallet_UpdateWalletCurrency_Handler,
		},
		{
			MethodName: "ListOperatorBalances",
			Handler:    _BackofficeWallet_ListOperatorBalances_Handler,
		},
		{
			MethodName: "GetExchangeRates",
			Handler:    _BackofficeWallet_GetExchangeRates_Handler,
		},
		{
			MethodName: "OperatorTransfer",
			Handler:    _BackofficeWallet_OperatorTransfer_Handler,
		},
		{
			MethodName: "OperatorSwap",
			Handler:    _BackofficeWallet_OperatorSwap_Handler,
		},
		{
			MethodName: "OperatorFreeze",
			Handler:    _BackofficeWallet_OperatorFreeze_Handler,
		},
		{
			MethodName: "OperatorRollback",
			Handler:    _BackofficeWallet_OperatorRollback_Handler,
		},
		{
			MethodName: "OperatorSettle",
			Handler:    _BackofficeWallet_OperatorSettle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_wallet.proto",
}
