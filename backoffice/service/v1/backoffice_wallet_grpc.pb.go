// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_wallet.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Backoffice_Wallet_GetWallets_FullMethodName                  = "/api.backoffice.service.v1.Backoffice_Wallet/GetWallets"
	Backoffice_Wallet_GetWalletCreditTransactions_FullMethodName = "/api.backoffice.service.v1.Backoffice_Wallet/GetWalletCreditTransactions"
	Backoffice_Wallet_UpdateWallet_FullMethodName                = "/api.backoffice.service.v1.Backoffice_Wallet/UpdateWallet"
)

// Backoffice_WalletClient is the client API for Backoffice_Wallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Backoffice_WalletClient interface {
	GetWallets(ctx context.Context, in *GetWalletsRequest, opts ...grpc.CallOption) (*GetWalletsResponse, error)
	GetWalletCreditTransactions(ctx context.Context, in *GetWalletCreditTransactionsRequest, opts ...grpc.CallOption) (*GetWalletCreditTransactionsResponse, error)
	UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...grpc.CallOption) (*UpdateWalletResponse, error)
}

type backoffice_WalletClient struct {
	cc grpc.ClientConnInterface
}

func NewBackoffice_WalletClient(cc grpc.ClientConnInterface) Backoffice_WalletClient {
	return &backoffice_WalletClient{cc}
}

func (c *backoffice_WalletClient) GetWallets(ctx context.Context, in *GetWalletsRequest, opts ...grpc.CallOption) (*GetWalletsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletsResponse)
	err := c.cc.Invoke(ctx, Backoffice_Wallet_GetWallets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_WalletClient) GetWalletCreditTransactions(ctx context.Context, in *GetWalletCreditTransactionsRequest, opts ...grpc.CallOption) (*GetWalletCreditTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletCreditTransactionsResponse)
	err := c.cc.Invoke(ctx, Backoffice_Wallet_GetWalletCreditTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_WalletClient) UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...grpc.CallOption) (*UpdateWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWalletResponse)
	err := c.cc.Invoke(ctx, Backoffice_Wallet_UpdateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Backoffice_WalletServer is the server API for Backoffice_Wallet service.
// All implementations must embed UnimplementedBackoffice_WalletServer
// for forward compatibility.
type Backoffice_WalletServer interface {
	GetWallets(context.Context, *GetWalletsRequest) (*GetWalletsResponse, error)
	GetWalletCreditTransactions(context.Context, *GetWalletCreditTransactionsRequest) (*GetWalletCreditTransactionsResponse, error)
	UpdateWallet(context.Context, *UpdateWalletRequest) (*UpdateWalletResponse, error)
	mustEmbedUnimplementedBackoffice_WalletServer()
}

// UnimplementedBackoffice_WalletServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackoffice_WalletServer struct{}

func (UnimplementedBackoffice_WalletServer) GetWallets(context.Context, *GetWalletsRequest) (*GetWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallets not implemented")
}
func (UnimplementedBackoffice_WalletServer) GetWalletCreditTransactions(context.Context, *GetWalletCreditTransactionsRequest) (*GetWalletCreditTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletCreditTransactions not implemented")
}
func (UnimplementedBackoffice_WalletServer) UpdateWallet(context.Context, *UpdateWalletRequest) (*UpdateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWallet not implemented")
}
func (UnimplementedBackoffice_WalletServer) mustEmbedUnimplementedBackoffice_WalletServer() {}
func (UnimplementedBackoffice_WalletServer) testEmbeddedByValue()                           {}

// UnsafeBackoffice_WalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Backoffice_WalletServer will
// result in compilation errors.
type UnsafeBackoffice_WalletServer interface {
	mustEmbedUnimplementedBackoffice_WalletServer()
}

func RegisterBackoffice_WalletServer(s grpc.ServiceRegistrar, srv Backoffice_WalletServer) {
	// If the following call pancis, it indicates UnimplementedBackoffice_WalletServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Backoffice_Wallet_ServiceDesc, srv)
}

func _Backoffice_Wallet_GetWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_WalletServer).GetWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Wallet_GetWallets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_WalletServer).GetWallets(ctx, req.(*GetWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Wallet_GetWalletCreditTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletCreditTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_WalletServer).GetWalletCreditTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Wallet_GetWalletCreditTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_WalletServer).GetWalletCreditTransactions(ctx, req.(*GetWalletCreditTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Wallet_UpdateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_WalletServer).UpdateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Wallet_UpdateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_WalletServer).UpdateWallet(ctx, req.(*UpdateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Backoffice_Wallet_ServiceDesc is the grpc.ServiceDesc for Backoffice_Wallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backoffice_Wallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.Backoffice_Wallet",
	HandlerType: (*Backoffice_WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWallets",
			Handler:    _Backoffice_Wallet_GetWallets_Handler,
		},
		{
			MethodName: "GetWalletCreditTransactions",
			Handler:    _Backoffice_Wallet_GetWalletCreditTransactions_Handler,
		},
		{
			MethodName: "UpdateWallet",
			Handler:    _Backoffice_Wallet_UpdateWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_wallet.proto",
}
