// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_review.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficeReviewListWithdrawReviewTickets = "/api.backoffice.service.v1.BackofficeReview/ListWithdrawReviewTickets"
const OperationBackofficeReviewReviewTicket = "/api.backoffice.service.v1.BackofficeReview/ReviewTicket"

type BackofficeReviewHTTPServer interface {
	ListWithdrawReviewTickets(context.Context, *ListWithdrawReviewTicketsRequest) (*ListWithdrawReviewTicketsResponse, error)
	ReviewTicket(context.Context, *ReviewTicketRequest) (*ReviewTicketResponse, error)
}

func RegisterBackofficeReviewHTTPServer(s *http.Server, srv BackofficeReviewHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/review/withdraw-review-tickets/list", _BackofficeReview_ListWithdrawReviewTickets0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/review/ticket/review", _BackofficeReview_ReviewTicket0_HTTP_Handler(srv))
}

func _BackofficeReview_ListWithdrawReviewTickets0_HTTP_Handler(srv BackofficeReviewHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWithdrawReviewTicketsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeReviewListWithdrawReviewTickets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWithdrawReviewTickets(ctx, req.(*ListWithdrawReviewTicketsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWithdrawReviewTicketsResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeReview_ReviewTicket0_HTTP_Handler(srv BackofficeReviewHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReviewTicketRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeReviewReviewTicket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReviewTicket(ctx, req.(*ReviewTicketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReviewTicketResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficeReviewHTTPClient interface {
	ListWithdrawReviewTickets(ctx context.Context, req *ListWithdrawReviewTicketsRequest, opts ...http.CallOption) (rsp *ListWithdrawReviewTicketsResponse, err error)
	ReviewTicket(ctx context.Context, req *ReviewTicketRequest, opts ...http.CallOption) (rsp *ReviewTicketResponse, err error)
}

type BackofficeReviewHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficeReviewHTTPClient(client *http.Client) BackofficeReviewHTTPClient {
	return &BackofficeReviewHTTPClientImpl{client}
}

func (c *BackofficeReviewHTTPClientImpl) ListWithdrawReviewTickets(ctx context.Context, in *ListWithdrawReviewTicketsRequest, opts ...http.CallOption) (*ListWithdrawReviewTicketsResponse, error) {
	var out ListWithdrawReviewTicketsResponse
	pattern := "/v1/backoffice/review/withdraw-review-tickets/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeReviewListWithdrawReviewTickets))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeReviewHTTPClientImpl) ReviewTicket(ctx context.Context, in *ReviewTicketRequest, opts ...http.CallOption) (*ReviewTicketResponse, error) {
	var out ReviewTicketResponse
	pattern := "/v1/backoffice/review/ticket/review"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeReviewReviewTicket))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
