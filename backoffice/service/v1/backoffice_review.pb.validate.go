// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_review.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListWithdrawReviewTicketsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListWithdrawReviewTicketsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWithdrawReviewTicketsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListWithdrawReviewTicketsRequestMultiError, or nil if none found.
func (m *ListWithdrawReviewTicketsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWithdrawReviewTicketsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.ReviewTicketId != nil {
		// no validation rules for ReviewTicketId
	}

	if m.Currency != nil {
		// no validation rules for Currency
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWithdrawReviewTicketsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWithdrawReviewTicketsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWithdrawReviewTicketsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWithdrawReviewTicketsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWithdrawReviewTicketsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWithdrawReviewTicketsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListWithdrawReviewTicketsRequestMultiError(errors)
	}

	return nil
}

// ListWithdrawReviewTicketsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListWithdrawReviewTicketsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWithdrawReviewTicketsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWithdrawReviewTicketsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWithdrawReviewTicketsRequestMultiError) AllErrors() []error { return m }

// ListWithdrawReviewTicketsRequestValidationError is the validation error
// returned by ListWithdrawReviewTicketsRequest.Validate if the designated
// constraints aren't met.
type ListWithdrawReviewTicketsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWithdrawReviewTicketsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWithdrawReviewTicketsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWithdrawReviewTicketsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWithdrawReviewTicketsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWithdrawReviewTicketsRequestValidationError) ErrorName() string {
	return "ListWithdrawReviewTicketsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWithdrawReviewTicketsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWithdrawReviewTicketsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWithdrawReviewTicketsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWithdrawReviewTicketsRequestValidationError{}

// Validate checks the field values on ListWithdrawReviewTicketsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListWithdrawReviewTicketsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWithdrawReviewTicketsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListWithdrawReviewTicketsResponseMultiError, or nil if none found.
func (m *ListWithdrawReviewTicketsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWithdrawReviewTicketsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWithdrawReviewTickets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWithdrawReviewTicketsResponseValidationError{
						field:  fmt.Sprintf("WithdrawReviewTickets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWithdrawReviewTicketsResponseValidationError{
						field:  fmt.Sprintf("WithdrawReviewTickets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWithdrawReviewTicketsResponseValidationError{
					field:  fmt.Sprintf("WithdrawReviewTickets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	// no validation rules for TotalPending

	// no validation rules for TotalPaying

	// no validation rules for TotalPaid

	// no validation rules for TotalFailed

	// no validation rules for TotalRejected

	// no validation rules for AverageReviewTime

	if len(errors) > 0 {
		return ListWithdrawReviewTicketsResponseMultiError(errors)
	}

	return nil
}

// ListWithdrawReviewTicketsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListWithdrawReviewTicketsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWithdrawReviewTicketsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWithdrawReviewTicketsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWithdrawReviewTicketsResponseMultiError) AllErrors() []error { return m }

// ListWithdrawReviewTicketsResponseValidationError is the validation error
// returned by ListWithdrawReviewTicketsResponse.Validate if the designated
// constraints aren't met.
type ListWithdrawReviewTicketsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWithdrawReviewTicketsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWithdrawReviewTicketsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWithdrawReviewTicketsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWithdrawReviewTicketsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWithdrawReviewTicketsResponseValidationError) ErrorName() string {
	return "ListWithdrawReviewTicketsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWithdrawReviewTicketsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWithdrawReviewTicketsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWithdrawReviewTicketsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWithdrawReviewTicketsResponseValidationError{}

// Validate checks the field values on ReviewTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReviewTicketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReviewTicketRequestMultiError, or nil if none found.
func (m *ReviewTicketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewTicketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReviewTicketId

	// no validation rules for ReviewerUserId

	// no validation rules for ReviewAction

	// no validation rules for ReviewComment

	if len(errors) > 0 {
		return ReviewTicketRequestMultiError(errors)
	}

	return nil
}

// ReviewTicketRequestMultiError is an error wrapping multiple validation
// errors returned by ReviewTicketRequest.ValidateAll() if the designated
// constraints aren't met.
type ReviewTicketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewTicketRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewTicketRequestMultiError) AllErrors() []error { return m }

// ReviewTicketRequestValidationError is the validation error returned by
// ReviewTicketRequest.Validate if the designated constraints aren't met.
type ReviewTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewTicketRequestValidationError) ErrorName() string {
	return "ReviewTicketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReviewTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewTicketRequestValidationError{}

// Validate checks the field values on ReviewTicketResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReviewTicketResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewTicketResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReviewTicketResponseMultiError, or nil if none found.
func (m *ReviewTicketResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewTicketResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReviewTicketResponseMultiError(errors)
	}

	return nil
}

// ReviewTicketResponseMultiError is an error wrapping multiple validation
// errors returned by ReviewTicketResponse.ValidateAll() if the designated
// constraints aren't met.
type ReviewTicketResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewTicketResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewTicketResponseMultiError) AllErrors() []error { return m }

// ReviewTicketResponseValidationError is the validation error returned by
// ReviewTicketResponse.Validate if the designated constraints aren't met.
type ReviewTicketResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewTicketResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewTicketResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewTicketResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewTicketResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewTicketResponseValidationError) ErrorName() string {
	return "ReviewTicketResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReviewTicketResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewTicketResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewTicketResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewTicketResponseValidationError{}

// Validate checks the field values on
// ListWithdrawReviewTicketsResponse_WithdrawReviewTicket with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWithdrawReviewTicketsResponse_WithdrawReviewTicket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListWithdrawReviewTicketsResponse_WithdrawReviewTicket with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWithdrawReviewTicketsResponse_WithdrawReviewTicketMultiError, or nil if
// none found.
func (m *ListWithdrawReviewTicketsResponse_WithdrawReviewTicket) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWithdrawReviewTicketsResponse_WithdrawReviewTicket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWithdrawReviewTicketsResponse_WithdrawReviewTicketValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWithdrawReviewTicketsResponse_WithdrawReviewTicketValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWithdrawReviewTicketsResponse_WithdrawReviewTicketValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Operator

	// no validation rules for ReviewTicketId

	// no validation rules for Category

	// no validation rules for VipLevel

	// no validation rules for BeforeBalance

	// no validation rules for AfterBalance

	// no validation rules for Currency

	// no validation rules for PaymentChannel

	// no validation rules for Protocol

	// no validation rules for Fee

	if len(errors) > 0 {
		return ListWithdrawReviewTicketsResponse_WithdrawReviewTicketMultiError(errors)
	}

	return nil
}

// ListWithdrawReviewTicketsResponse_WithdrawReviewTicketMultiError is an error
// wrapping multiple validation errors returned by
// ListWithdrawReviewTicketsResponse_WithdrawReviewTicket.ValidateAll() if the
// designated constraints aren't met.
type ListWithdrawReviewTicketsResponse_WithdrawReviewTicketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWithdrawReviewTicketsResponse_WithdrawReviewTicketMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWithdrawReviewTicketsResponse_WithdrawReviewTicketMultiError) AllErrors() []error {
	return m
}

// ListWithdrawReviewTicketsResponse_WithdrawReviewTicketValidationError is the
// validation error returned by
// ListWithdrawReviewTicketsResponse_WithdrawReviewTicket.Validate if the
// designated constraints aren't met.
type ListWithdrawReviewTicketsResponse_WithdrawReviewTicketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWithdrawReviewTicketsResponse_WithdrawReviewTicketValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListWithdrawReviewTicketsResponse_WithdrawReviewTicketValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListWithdrawReviewTicketsResponse_WithdrawReviewTicketValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListWithdrawReviewTicketsResponse_WithdrawReviewTicketValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ListWithdrawReviewTicketsResponse_WithdrawReviewTicketValidationError) ErrorName() string {
	return "ListWithdrawReviewTicketsResponse_WithdrawReviewTicketValidationError"
}

// Error satisfies the builtin error interface
func (e ListWithdrawReviewTicketsResponse_WithdrawReviewTicketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWithdrawReviewTicketsResponse_WithdrawReviewTicket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWithdrawReviewTicketsResponse_WithdrawReviewTicketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWithdrawReviewTicketsResponse_WithdrawReviewTicketValidationError{}
