// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_review.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateOperatorWithdrawRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOperatorWithdrawRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOperatorWithdrawRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOperatorWithdrawRequestMultiError, or nil if none found.
func (m *CreateOperatorWithdrawRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOperatorWithdrawRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOperatorWithdrawRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOperatorWithdrawRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOperatorWithdrawRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOperatorWithdrawRequestMultiError(errors)
	}

	return nil
}

// CreateOperatorWithdrawRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOperatorWithdrawRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateOperatorWithdrawRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOperatorWithdrawRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOperatorWithdrawRequestMultiError) AllErrors() []error { return m }

// CreateOperatorWithdrawRequestValidationError is the validation error
// returned by CreateOperatorWithdrawRequest.Validate if the designated
// constraints aren't met.
type CreateOperatorWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOperatorWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOperatorWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOperatorWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOperatorWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOperatorWithdrawRequestValidationError) ErrorName() string {
	return "CreateOperatorWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOperatorWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOperatorWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOperatorWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOperatorWithdrawRequestValidationError{}

// Validate checks the field values on CreateWithdrawResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWithdrawResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWithdrawResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWithdrawResponseMultiError, or nil if none found.
func (m *CreateWithdrawResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWithdrawResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TicketId

	if len(errors) > 0 {
		return CreateWithdrawResponseMultiError(errors)
	}

	return nil
}

// CreateWithdrawResponseMultiError is an error wrapping multiple validation
// errors returned by CreateWithdrawResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateWithdrawResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWithdrawResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWithdrawResponseMultiError) AllErrors() []error { return m }

// CreateWithdrawResponseValidationError is the validation error returned by
// CreateWithdrawResponse.Validate if the designated constraints aren't met.
type CreateWithdrawResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWithdrawResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWithdrawResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWithdrawResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWithdrawResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWithdrawResponseValidationError) ErrorName() string {
	return "CreateWithdrawResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWithdrawResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWithdrawResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWithdrawResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWithdrawResponseValidationError{}

// Validate checks the field values on ListTicketsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTicketsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTicketsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTicketsRequestMultiError, or nil if none found.
func (m *ListTicketsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTicketsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTicketsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTicketsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTicketsRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.TicketId != nil {
		// no validation rules for TicketId
	}

	if m.Currency != nil {
		// no validation rules for Currency
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTicketsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTicketsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTicketsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTicketsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTicketsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTicketsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListTicketsRequestMultiError(errors)
	}

	return nil
}

// ListTicketsRequestMultiError is an error wrapping multiple validation errors
// returned by ListTicketsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTicketsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTicketsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTicketsRequestMultiError) AllErrors() []error { return m }

// ListTicketsRequestValidationError is the validation error returned by
// ListTicketsRequest.Validate if the designated constraints aren't met.
type ListTicketsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTicketsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTicketsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTicketsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTicketsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTicketsRequestValidationError) ErrorName() string {
	return "ListTicketsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTicketsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTicketsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTicketsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTicketsRequestValidationError{}

// Validate checks the field values on ListOperatorTicketsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOperatorTicketsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOperatorTicketsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOperatorTicketsRequestMultiError, or nil if none found.
func (m *ListOperatorTicketsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOperatorTicketsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListOperatorTicketsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListOperatorTicketsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOperatorTicketsRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.TicketId != nil {
		// no validation rules for TicketId
	}

	if m.Currency != nil {
		// no validation rules for Currency
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOperatorTicketsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOperatorTicketsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOperatorTicketsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOperatorTicketsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOperatorTicketsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOperatorTicketsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListOperatorTicketsRequestMultiError(errors)
	}

	return nil
}

// ListOperatorTicketsRequestMultiError is an error wrapping multiple
// validation errors returned by ListOperatorTicketsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListOperatorTicketsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOperatorTicketsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOperatorTicketsRequestMultiError) AllErrors() []error { return m }

// ListOperatorTicketsRequestValidationError is the validation error returned
// by ListOperatorTicketsRequest.Validate if the designated constraints aren't met.
type ListOperatorTicketsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperatorTicketsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperatorTicketsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperatorTicketsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperatorTicketsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperatorTicketsRequestValidationError) ErrorName() string {
	return "ListOperatorTicketsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperatorTicketsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperatorTicketsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperatorTicketsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperatorTicketsRequestValidationError{}

// Validate checks the field values on ListTicketsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTicketsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTicketsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTicketsResponseMultiError, or nil if none found.
func (m *ListTicketsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTicketsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTickets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTicketsResponseValidationError{
						field:  fmt.Sprintf("Tickets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTicketsResponseValidationError{
						field:  fmt.Sprintf("Tickets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTicketsResponseValidationError{
					field:  fmt.Sprintf("Tickets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for TotalCount

	// no validation rules for TotalAmount

	// no validation rules for TotalPendingCount

	// no validation rules for TotalPendingAmount

	// no validation rules for TotalPayingCount

	// no validation rules for TotalPayingAmount

	// no validation rules for TotalPaidCount

	// no validation rules for TotalPaidAmount

	// no validation rules for TotalFailedCount

	// no validation rules for TotalFailedAmount

	// no validation rules for TotalRejectedCount

	// no validation rules for TotalRejectedAmount

	// no validation rules for AverageReviewTime

	if len(errors) > 0 {
		return ListTicketsResponseMultiError(errors)
	}

	return nil
}

// ListTicketsResponseMultiError is an error wrapping multiple validation
// errors returned by ListTicketsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTicketsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTicketsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTicketsResponseMultiError) AllErrors() []error { return m }

// ListTicketsResponseValidationError is the validation error returned by
// ListTicketsResponse.Validate if the designated constraints aren't met.
type ListTicketsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTicketsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTicketsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTicketsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTicketsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTicketsResponseValidationError) ErrorName() string {
	return "ListTicketsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTicketsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTicketsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTicketsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTicketsResponseValidationError{}

// Validate checks the field values on GetTicketRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTicketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTicketRequestMultiError, or nil if none found.
func (m *GetTicketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTicketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TicketId

	if len(errors) > 0 {
		return GetTicketRequestMultiError(errors)
	}

	return nil
}

// GetTicketRequestMultiError is an error wrapping multiple validation errors
// returned by GetTicketRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTicketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTicketRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTicketRequestMultiError) AllErrors() []error { return m }

// GetTicketRequestValidationError is the validation error returned by
// GetTicketRequest.Validate if the designated constraints aren't met.
type GetTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTicketRequestValidationError) ErrorName() string { return "GetTicketRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTicketRequestValidationError{}

// Validate checks the field values on GetOperatorTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorTicketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorTicketRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorTicketRequestMultiError, or nil if none found.
func (m *GetOperatorTicketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorTicketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TicketId

	if all {
		switch v := interface{}(m.GetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorTicketRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorTicketRequestValidationError{
					field:  "OperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorTicketRequestValidationError{
				field:  "OperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOperatorTicketRequestMultiError(errors)
	}

	return nil
}

// GetOperatorTicketRequestMultiError is an error wrapping multiple validation
// errors returned by GetOperatorTicketRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorTicketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorTicketRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorTicketRequestMultiError) AllErrors() []error { return m }

// GetOperatorTicketRequestValidationError is the validation error returned by
// GetOperatorTicketRequest.Validate if the designated constraints aren't met.
type GetOperatorTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorTicketRequestValidationError) ErrorName() string {
	return "GetOperatorTicketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorTicketRequestValidationError{}

// Validate checks the field values on ReviewTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReviewTicketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReviewTicketRequestMultiError, or nil if none found.
func (m *ReviewTicketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewTicketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TicketId

	// no validation rules for Action

	// no validation rules for ReviewComment

	if len(errors) > 0 {
		return ReviewTicketRequestMultiError(errors)
	}

	return nil
}

// ReviewTicketRequestMultiError is an error wrapping multiple validation
// errors returned by ReviewTicketRequest.ValidateAll() if the designated
// constraints aren't met.
type ReviewTicketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewTicketRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewTicketRequestMultiError) AllErrors() []error { return m }

// ReviewTicketRequestValidationError is the validation error returned by
// ReviewTicketRequest.Validate if the designated constraints aren't met.
type ReviewTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewTicketRequestValidationError) ErrorName() string {
	return "ReviewTicketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReviewTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewTicketRequestValidationError{}

// Validate checks the field values on ReviewTicketResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReviewTicketResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewTicketResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReviewTicketResponseMultiError, or nil if none found.
func (m *ReviewTicketResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewTicketResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReviewTicketResponseMultiError(errors)
	}

	return nil
}

// ReviewTicketResponseMultiError is an error wrapping multiple validation
// errors returned by ReviewTicketResponse.ValidateAll() if the designated
// constraints aren't met.
type ReviewTicketResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewTicketResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewTicketResponseMultiError) AllErrors() []error { return m }

// ReviewTicketResponseValidationError is the validation error returned by
// ReviewTicketResponse.Validate if the designated constraints aren't met.
type ReviewTicketResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewTicketResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewTicketResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewTicketResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewTicketResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewTicketResponseValidationError) ErrorName() string {
	return "ReviewTicketResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReviewTicketResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewTicketResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewTicketResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewTicketResponseValidationError{}

// Validate checks the field values on AddCommentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCommentRequestMultiError, or nil if none found.
func (m *AddCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TicketId

	// no validation rules for Content

	if len(errors) > 0 {
		return AddCommentRequestMultiError(errors)
	}

	return nil
}

// AddCommentRequestMultiError is an error wrapping multiple validation errors
// returned by AddCommentRequest.ValidateAll() if the designated constraints
// aren't met.
type AddCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCommentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCommentRequestMultiError) AllErrors() []error { return m }

// AddCommentRequestValidationError is the validation error returned by
// AddCommentRequest.Validate if the designated constraints aren't met.
type AddCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommentRequestValidationError) ErrorName() string {
	return "AddCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommentRequestValidationError{}

// Validate checks the field values on AddCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCommentResponseMultiError, or nil if none found.
func (m *AddCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	if len(errors) > 0 {
		return AddCommentResponseMultiError(errors)
	}

	return nil
}

// AddCommentResponseMultiError is an error wrapping multiple validation errors
// returned by AddCommentResponse.ValidateAll() if the designated constraints
// aren't met.
type AddCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCommentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCommentResponseMultiError) AllErrors() []error { return m }

// AddCommentResponseValidationError is the validation error returned by
// AddCommentResponse.Validate if the designated constraints aren't met.
type AddCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCommentResponseValidationError) ErrorName() string {
	return "AddCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCommentResponseValidationError{}

// Validate checks the field values on CancelTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelTicketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelTicketRequestMultiError, or nil if none found.
func (m *CancelTicketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelTicketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TicketId

	if len(errors) > 0 {
		return CancelTicketRequestMultiError(errors)
	}

	return nil
}

// CancelTicketRequestMultiError is an error wrapping multiple validation
// errors returned by CancelTicketRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelTicketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelTicketRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelTicketRequestMultiError) AllErrors() []error { return m }

// CancelTicketRequestValidationError is the validation error returned by
// CancelTicketRequest.Validate if the designated constraints aren't met.
type CancelTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTicketRequestValidationError) ErrorName() string {
	return "CancelTicketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTicketRequestValidationError{}

// Validate checks the field values on CancelTicketResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelTicketResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelTicketResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelTicketResponseMultiError, or nil if none found.
func (m *CancelTicketResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelTicketResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelTicketResponseMultiError(errors)
	}

	return nil
}

// CancelTicketResponseMultiError is an error wrapping multiple validation
// errors returned by CancelTicketResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelTicketResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelTicketResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelTicketResponseMultiError) AllErrors() []error { return m }

// CancelTicketResponseValidationError is the validation error returned by
// CancelTicketResponse.Validate if the designated constraints aren't met.
type CancelTicketResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTicketResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTicketResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTicketResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTicketResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTicketResponseValidationError) ErrorName() string {
	return "CancelTicketResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelTicketResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTicketResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTicketResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTicketResponseValidationError{}

// Validate checks the field values on GetTicketByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTicketByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTicketByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTicketByIdRequestMultiError, or nil if none found.
func (m *GetTicketByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTicketByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TicketId

	if len(errors) > 0 {
		return GetTicketByIdRequestMultiError(errors)
	}

	return nil
}

// GetTicketByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetTicketByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTicketByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTicketByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTicketByIdRequestMultiError) AllErrors() []error { return m }

// GetTicketByIdRequestValidationError is the validation error returned by
// GetTicketByIdRequest.Validate if the designated constraints aren't met.
type GetTicketByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTicketByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTicketByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTicketByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTicketByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTicketByIdRequestValidationError) ErrorName() string {
	return "GetTicketByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTicketByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTicketByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTicketByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTicketByIdRequestValidationError{}

// Validate checks the field values on GetTicketByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTicketByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTicketByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTicketByIdResponseMultiError, or nil if none found.
func (m *GetTicketByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTicketByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTicket()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTicketByIdResponseValidationError{
					field:  "Ticket",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTicketByIdResponseValidationError{
					field:  "Ticket",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTicket()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTicketByIdResponseValidationError{
				field:  "Ticket",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTicketByIdResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTicketByIdResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTicketByIdResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTicketByIdResponseMultiError(errors)
	}

	return nil
}

// GetTicketByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetTicketByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTicketByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTicketByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTicketByIdResponseMultiError) AllErrors() []error { return m }

// GetTicketByIdResponseValidationError is the validation error returned by
// GetTicketByIdResponse.Validate if the designated constraints aren't met.
type GetTicketByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTicketByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTicketByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTicketByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTicketByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTicketByIdResponseValidationError) ErrorName() string {
	return "GetTicketByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTicketByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTicketByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTicketByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTicketByIdResponseValidationError{}

// Validate checks the field values on ListTicketsResponse_Ticket with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTicketsResponse_Ticket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTicketsResponse_Ticket with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTicketsResponse_TicketMultiError, or nil if none found.
func (m *ListTicketsResponse_Ticket) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTicketsResponse_Ticket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTicketsResponse_TicketValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTicketsResponse_TicketValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTicketsResponse_TicketValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TicketId

	// no validation rules for UserId

	// no validation rules for OperatorName

	// no validation rules for CompanyOperatorName

	// no validation rules for RetailerOperatorName

	// no validation rules for SystemOperatorName

	// no validation rules for RealOperatorName

	// no validation rules for VipLevel

	// no validation rules for BeforeBalance

	// no validation rules for BeforeBalanceUsd

	// no validation rules for Amount

	// no validation rules for AmountUsd

	// no validation rules for AfterBalance

	// no validation rules for AfterBalanceUsd

	// no validation rules for Currency

	// no validation rules for PaymentChannel

	// no validation rules for Protocol

	// no validation rules for Fee

	// no validation rules for Status

	// no validation rules for ReviewerUsername

	// no validation rules for ReviewDuration

	if len(errors) > 0 {
		return ListTicketsResponse_TicketMultiError(errors)
	}

	return nil
}

// ListTicketsResponse_TicketMultiError is an error wrapping multiple
// validation errors returned by ListTicketsResponse_Ticket.ValidateAll() if
// the designated constraints aren't met.
type ListTicketsResponse_TicketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTicketsResponse_TicketMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTicketsResponse_TicketMultiError) AllErrors() []error { return m }

// ListTicketsResponse_TicketValidationError is the validation error returned
// by ListTicketsResponse_Ticket.Validate if the designated constraints aren't met.
type ListTicketsResponse_TicketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTicketsResponse_TicketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTicketsResponse_TicketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTicketsResponse_TicketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTicketsResponse_TicketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTicketsResponse_TicketValidationError) ErrorName() string {
	return "ListTicketsResponse_TicketValidationError"
}

// Error satisfies the builtin error interface
func (e ListTicketsResponse_TicketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTicketsResponse_Ticket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTicketsResponse_TicketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTicketsResponse_TicketValidationError{}

// Validate checks the field values on GetTicketByIdResponse_Ticket with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTicketByIdResponse_Ticket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTicketByIdResponse_Ticket with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTicketByIdResponse_TicketMultiError, or nil if none found.
func (m *GetTicketByIdResponse_Ticket) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTicketByIdResponse_Ticket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Request

	// no validation rules for Response

	// no validation rules for UserId

	// no validation rules for CancellerUserId

	// no validation rules for OperatorId

	// no validation rules for Currency

	// no validation rules for TicketStatus

	// no validation rules for ReviewerUserId

	// no validation rules for ReviewerComment

	// no validation rules for PaymentStatus

	// no validation rules for PaymentTransactionId

	// no validation rules for PaymentTransactionError

	// no validation rules for WalletStatus

	// no validation rules for WalletFreezeTransactionId

	// no validation rules for WalletSettleTransactionId

	// no validation rules for WalletSettleError

	// no validation rules for WalletRollbackTransactionId

	// no validation rules for WalletRollbackError

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for ReviewedAt

	// no validation rules for CancelledAt

	if len(errors) > 0 {
		return GetTicketByIdResponse_TicketMultiError(errors)
	}

	return nil
}

// GetTicketByIdResponse_TicketMultiError is an error wrapping multiple
// validation errors returned by GetTicketByIdResponse_Ticket.ValidateAll() if
// the designated constraints aren't met.
type GetTicketByIdResponse_TicketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTicketByIdResponse_TicketMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTicketByIdResponse_TicketMultiError) AllErrors() []error { return m }

// GetTicketByIdResponse_TicketValidationError is the validation error returned
// by GetTicketByIdResponse_Ticket.Validate if the designated constraints
// aren't met.
type GetTicketByIdResponse_TicketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTicketByIdResponse_TicketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTicketByIdResponse_TicketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTicketByIdResponse_TicketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTicketByIdResponse_TicketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTicketByIdResponse_TicketValidationError) ErrorName() string {
	return "GetTicketByIdResponse_TicketValidationError"
}

// Error satisfies the builtin error interface
func (e GetTicketByIdResponse_TicketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTicketByIdResponse_Ticket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTicketByIdResponse_TicketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTicketByIdResponse_TicketValidationError{}

// Validate checks the field values on GetTicketByIdResponse_Comment with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTicketByIdResponse_Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTicketByIdResponse_Comment with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTicketByIdResponse_CommentMultiError, or nil if none found.
func (m *GetTicketByIdResponse_Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTicketByIdResponse_Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TicketId

	// no validation rules for AuthorUserId

	// no validation rules for Content

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GetTicketByIdResponse_CommentMultiError(errors)
	}

	return nil
}

// GetTicketByIdResponse_CommentMultiError is an error wrapping multiple
// validation errors returned by GetTicketByIdResponse_Comment.ValidateAll()
// if the designated constraints aren't met.
type GetTicketByIdResponse_CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTicketByIdResponse_CommentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTicketByIdResponse_CommentMultiError) AllErrors() []error { return m }

// GetTicketByIdResponse_CommentValidationError is the validation error
// returned by GetTicketByIdResponse_Comment.Validate if the designated
// constraints aren't met.
type GetTicketByIdResponse_CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTicketByIdResponse_CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTicketByIdResponse_CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTicketByIdResponse_CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTicketByIdResponse_CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTicketByIdResponse_CommentValidationError) ErrorName() string {
	return "GetTicketByIdResponse_CommentValidationError"
}

// Error satisfies the builtin error interface
func (e GetTicketByIdResponse_CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTicketByIdResponse_Comment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTicketByIdResponse_CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTicketByIdResponse_CommentValidationError{}
