// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_operator.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackofficeOperator_ListOperators_FullMethodName  = "/api.backoffice.service.v1.BackofficeOperator/ListOperators"
	BackofficeOperator_CreateOperator_FullMethodName = "/api.backoffice.service.v1.BackofficeOperator/CreateOperator"
)

// BackofficeOperatorClient is the client API for BackofficeOperator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackofficeOperatorClient interface {
	ListOperators(ctx context.Context, in *ListOperatorsRequest, opts ...grpc.CallOption) (*ListOperatorsResponse, error)
	CreateOperator(ctx context.Context, in *CreateOperatorRequest, opts ...grpc.CallOption) (*CreateOperatorResponse, error)
}

type backofficeOperatorClient struct {
	cc grpc.ClientConnInterface
}

func NewBackofficeOperatorClient(cc grpc.ClientConnInterface) BackofficeOperatorClient {
	return &backofficeOperatorClient{cc}
}

func (c *backofficeOperatorClient) ListOperators(ctx context.Context, in *ListOperatorsRequest, opts ...grpc.CallOption) (*ListOperatorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOperatorsResponse)
	err := c.cc.Invoke(ctx, BackofficeOperator_ListOperators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeOperatorClient) CreateOperator(ctx context.Context, in *CreateOperatorRequest, opts ...grpc.CallOption) (*CreateOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOperatorResponse)
	err := c.cc.Invoke(ctx, BackofficeOperator_CreateOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackofficeOperatorServer is the server API for BackofficeOperator service.
// All implementations must embed UnimplementedBackofficeOperatorServer
// for forward compatibility.
type BackofficeOperatorServer interface {
	ListOperators(context.Context, *ListOperatorsRequest) (*ListOperatorsResponse, error)
	CreateOperator(context.Context, *CreateOperatorRequest) (*CreateOperatorResponse, error)
	mustEmbedUnimplementedBackofficeOperatorServer()
}

// UnimplementedBackofficeOperatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackofficeOperatorServer struct{}

func (UnimplementedBackofficeOperatorServer) ListOperators(context.Context, *ListOperatorsRequest) (*ListOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperators not implemented")
}
func (UnimplementedBackofficeOperatorServer) CreateOperator(context.Context, *CreateOperatorRequest) (*CreateOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOperator not implemented")
}
func (UnimplementedBackofficeOperatorServer) mustEmbedUnimplementedBackofficeOperatorServer() {}
func (UnimplementedBackofficeOperatorServer) testEmbeddedByValue()                            {}

// UnsafeBackofficeOperatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackofficeOperatorServer will
// result in compilation errors.
type UnsafeBackofficeOperatorServer interface {
	mustEmbedUnimplementedBackofficeOperatorServer()
}

func RegisterBackofficeOperatorServer(s grpc.ServiceRegistrar, srv BackofficeOperatorServer) {
	// If the following call pancis, it indicates UnimplementedBackofficeOperatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackofficeOperator_ServiceDesc, srv)
}

func _BackofficeOperator_ListOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeOperatorServer).ListOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeOperator_ListOperators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeOperatorServer).ListOperators(ctx, req.(*ListOperatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeOperator_CreateOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeOperatorServer).CreateOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeOperator_CreateOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeOperatorServer).CreateOperator(ctx, req.(*CreateOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackofficeOperator_ServiceDesc is the grpc.ServiceDesc for BackofficeOperator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackofficeOperator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.BackofficeOperator",
	HandlerType: (*BackofficeOperatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOperators",
			Handler:    _BackofficeOperator_ListOperators_Handler,
		},
		{
			MethodName: "CreateOperator",
			Handler:    _BackofficeOperator_CreateOperator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_operator.proto",
}
