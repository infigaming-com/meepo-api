// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_operator.proto

package v1

import (
	context "context"
	v1 "github.com/infigaming-com/meepo-api/user/service/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackofficeOperator_ListAllOperators_FullMethodName                = "/api.backoffice.service.v1.BackofficeOperator/ListAllOperators"
	BackofficeOperator_CreateOperator_FullMethodName                  = "/api.backoffice.service.v1.BackofficeOperator/CreateOperator"
	BackofficeOperator_GetCurrentOperatorDetails_FullMethodName       = "/api.backoffice.service.v1.BackofficeOperator/GetCurrentOperatorDetails"
	BackofficeOperator_ListOperatorsByParentOperatorId_FullMethodName = "/api.backoffice.service.v1.BackofficeOperator/ListOperatorsByParentOperatorId"
	BackofficeOperator_ListRetailerOperators_FullMethodName           = "/api.backoffice.service.v1.BackofficeOperator/ListRetailerOperators"
	BackofficeOperator_ListCompanyOperators_FullMethodName            = "/api.backoffice.service.v1.BackofficeOperator/ListCompanyOperators"
	BackofficeOperator_ListBottomOperators_FullMethodName             = "/api.backoffice.service.v1.BackofficeOperator/ListBottomOperators"
	BackofficeOperator_UpdateOperatorStatus_FullMethodName            = "/api.backoffice.service.v1.BackofficeOperator/UpdateOperatorStatus"
	BackofficeOperator_ListOperatorsByAdminEmail_FullMethodName       = "/api.backoffice.service.v1.BackofficeOperator/ListOperatorsByAdminEmail"
)

// BackofficeOperatorClient is the client API for BackofficeOperator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackofficeOperatorClient interface {
	ListAllOperators(ctx context.Context, in *ListAllOperatorsRequest, opts ...grpc.CallOption) (*ListAllOperatorsResponse, error)
	CreateOperator(ctx context.Context, in *CreateOperatorRequest, opts ...grpc.CallOption) (*CreateOperatorResponse, error)
	// GetCurrentOperatorDetails returns the current operator details.
	GetCurrentOperatorDetails(ctx context.Context, in *GetCurrentOperatorDetailsRequest, opts ...grpc.CallOption) (*GetCurrentOperatorDetailsResponse, error)
	// ListOperatorsByParentOperatorId returns a list of operators by parent operator ID.
	ListOperatorsByParentOperatorId(ctx context.Context, in *ListOperatorsByParentOperatorIdRequest, opts ...grpc.CallOption) (*ListOperatorsByParentOperatorIdResponse, error)
	// ListRetailers returns a list of retailers by operator context in the middleware
	ListRetailerOperators(ctx context.Context, in *ListRetailerOperatorsRequest, opts ...grpc.CallOption) (*ListRetailerOperatorsResponse, error)
	// ListCompanies returns a list of companies by operator context in the middleware
	ListCompanyOperators(ctx context.Context, in *ListCompanyOperatorsRequest, opts ...grpc.CallOption) (*ListCompanyOperatorsResponse, error)
	// ListBottomOperators returns a list of bottom operators by operator context in the middleware
	ListBottomOperators(ctx context.Context, in *ListBottomOperatorsRequest, opts ...grpc.CallOption) (*ListBottomOperatorsResponse, error)
	// UpdateOperatorStatus updates the status of an operator
	UpdateOperatorStatus(ctx context.Context, in *UpdateOperatorStatusRequest, opts ...grpc.CallOption) (*UpdateOperatorStatusResponse, error)
	// List operators by admin email under specific operator
	ListOperatorsByAdminEmail(ctx context.Context, in *ListOperatorsByAdminEmailRequest, opts ...grpc.CallOption) (*v1.ListOperatorsByAdminEmailResponse, error)
}

type backofficeOperatorClient struct {
	cc grpc.ClientConnInterface
}

func NewBackofficeOperatorClient(cc grpc.ClientConnInterface) BackofficeOperatorClient {
	return &backofficeOperatorClient{cc}
}

func (c *backofficeOperatorClient) ListAllOperators(ctx context.Context, in *ListAllOperatorsRequest, opts ...grpc.CallOption) (*ListAllOperatorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllOperatorsResponse)
	err := c.cc.Invoke(ctx, BackofficeOperator_ListAllOperators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeOperatorClient) CreateOperator(ctx context.Context, in *CreateOperatorRequest, opts ...grpc.CallOption) (*CreateOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOperatorResponse)
	err := c.cc.Invoke(ctx, BackofficeOperator_CreateOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeOperatorClient) GetCurrentOperatorDetails(ctx context.Context, in *GetCurrentOperatorDetailsRequest, opts ...grpc.CallOption) (*GetCurrentOperatorDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCurrentOperatorDetailsResponse)
	err := c.cc.Invoke(ctx, BackofficeOperator_GetCurrentOperatorDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeOperatorClient) ListOperatorsByParentOperatorId(ctx context.Context, in *ListOperatorsByParentOperatorIdRequest, opts ...grpc.CallOption) (*ListOperatorsByParentOperatorIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOperatorsByParentOperatorIdResponse)
	err := c.cc.Invoke(ctx, BackofficeOperator_ListOperatorsByParentOperatorId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeOperatorClient) ListRetailerOperators(ctx context.Context, in *ListRetailerOperatorsRequest, opts ...grpc.CallOption) (*ListRetailerOperatorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRetailerOperatorsResponse)
	err := c.cc.Invoke(ctx, BackofficeOperator_ListRetailerOperators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeOperatorClient) ListCompanyOperators(ctx context.Context, in *ListCompanyOperatorsRequest, opts ...grpc.CallOption) (*ListCompanyOperatorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCompanyOperatorsResponse)
	err := c.cc.Invoke(ctx, BackofficeOperator_ListCompanyOperators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeOperatorClient) ListBottomOperators(ctx context.Context, in *ListBottomOperatorsRequest, opts ...grpc.CallOption) (*ListBottomOperatorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBottomOperatorsResponse)
	err := c.cc.Invoke(ctx, BackofficeOperator_ListBottomOperators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeOperatorClient) UpdateOperatorStatus(ctx context.Context, in *UpdateOperatorStatusRequest, opts ...grpc.CallOption) (*UpdateOperatorStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOperatorStatusResponse)
	err := c.cc.Invoke(ctx, BackofficeOperator_UpdateOperatorStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeOperatorClient) ListOperatorsByAdminEmail(ctx context.Context, in *ListOperatorsByAdminEmailRequest, opts ...grpc.CallOption) (*v1.ListOperatorsByAdminEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListOperatorsByAdminEmailResponse)
	err := c.cc.Invoke(ctx, BackofficeOperator_ListOperatorsByAdminEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackofficeOperatorServer is the server API for BackofficeOperator service.
// All implementations must embed UnimplementedBackofficeOperatorServer
// for forward compatibility.
type BackofficeOperatorServer interface {
	ListAllOperators(context.Context, *ListAllOperatorsRequest) (*ListAllOperatorsResponse, error)
	CreateOperator(context.Context, *CreateOperatorRequest) (*CreateOperatorResponse, error)
	// GetCurrentOperatorDetails returns the current operator details.
	GetCurrentOperatorDetails(context.Context, *GetCurrentOperatorDetailsRequest) (*GetCurrentOperatorDetailsResponse, error)
	// ListOperatorsByParentOperatorId returns a list of operators by parent operator ID.
	ListOperatorsByParentOperatorId(context.Context, *ListOperatorsByParentOperatorIdRequest) (*ListOperatorsByParentOperatorIdResponse, error)
	// ListRetailers returns a list of retailers by operator context in the middleware
	ListRetailerOperators(context.Context, *ListRetailerOperatorsRequest) (*ListRetailerOperatorsResponse, error)
	// ListCompanies returns a list of companies by operator context in the middleware
	ListCompanyOperators(context.Context, *ListCompanyOperatorsRequest) (*ListCompanyOperatorsResponse, error)
	// ListBottomOperators returns a list of bottom operators by operator context in the middleware
	ListBottomOperators(context.Context, *ListBottomOperatorsRequest) (*ListBottomOperatorsResponse, error)
	// UpdateOperatorStatus updates the status of an operator
	UpdateOperatorStatus(context.Context, *UpdateOperatorStatusRequest) (*UpdateOperatorStatusResponse, error)
	// List operators by admin email under specific operator
	ListOperatorsByAdminEmail(context.Context, *ListOperatorsByAdminEmailRequest) (*v1.ListOperatorsByAdminEmailResponse, error)
	mustEmbedUnimplementedBackofficeOperatorServer()
}

// UnimplementedBackofficeOperatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackofficeOperatorServer struct{}

func (UnimplementedBackofficeOperatorServer) ListAllOperators(context.Context, *ListAllOperatorsRequest) (*ListAllOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllOperators not implemented")
}
func (UnimplementedBackofficeOperatorServer) CreateOperator(context.Context, *CreateOperatorRequest) (*CreateOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOperator not implemented")
}
func (UnimplementedBackofficeOperatorServer) GetCurrentOperatorDetails(context.Context, *GetCurrentOperatorDetailsRequest) (*GetCurrentOperatorDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentOperatorDetails not implemented")
}
func (UnimplementedBackofficeOperatorServer) ListOperatorsByParentOperatorId(context.Context, *ListOperatorsByParentOperatorIdRequest) (*ListOperatorsByParentOperatorIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperatorsByParentOperatorId not implemented")
}
func (UnimplementedBackofficeOperatorServer) ListRetailerOperators(context.Context, *ListRetailerOperatorsRequest) (*ListRetailerOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRetailerOperators not implemented")
}
func (UnimplementedBackofficeOperatorServer) ListCompanyOperators(context.Context, *ListCompanyOperatorsRequest) (*ListCompanyOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanyOperators not implemented")
}
func (UnimplementedBackofficeOperatorServer) ListBottomOperators(context.Context, *ListBottomOperatorsRequest) (*ListBottomOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBottomOperators not implemented")
}
func (UnimplementedBackofficeOperatorServer) UpdateOperatorStatus(context.Context, *UpdateOperatorStatusRequest) (*UpdateOperatorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOperatorStatus not implemented")
}
func (UnimplementedBackofficeOperatorServer) ListOperatorsByAdminEmail(context.Context, *ListOperatorsByAdminEmailRequest) (*v1.ListOperatorsByAdminEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperatorsByAdminEmail not implemented")
}
func (UnimplementedBackofficeOperatorServer) mustEmbedUnimplementedBackofficeOperatorServer() {}
func (UnimplementedBackofficeOperatorServer) testEmbeddedByValue()                            {}

// UnsafeBackofficeOperatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackofficeOperatorServer will
// result in compilation errors.
type UnsafeBackofficeOperatorServer interface {
	mustEmbedUnimplementedBackofficeOperatorServer()
}

func RegisterBackofficeOperatorServer(s grpc.ServiceRegistrar, srv BackofficeOperatorServer) {
	// If the following call pancis, it indicates UnimplementedBackofficeOperatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackofficeOperator_ServiceDesc, srv)
}

func _BackofficeOperator_ListAllOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllOperatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeOperatorServer).ListAllOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeOperator_ListAllOperators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeOperatorServer).ListAllOperators(ctx, req.(*ListAllOperatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeOperator_CreateOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeOperatorServer).CreateOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeOperator_CreateOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeOperatorServer).CreateOperator(ctx, req.(*CreateOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeOperator_GetCurrentOperatorDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentOperatorDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeOperatorServer).GetCurrentOperatorDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeOperator_GetCurrentOperatorDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeOperatorServer).GetCurrentOperatorDetails(ctx, req.(*GetCurrentOperatorDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeOperator_ListOperatorsByParentOperatorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperatorsByParentOperatorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeOperatorServer).ListOperatorsByParentOperatorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeOperator_ListOperatorsByParentOperatorId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeOperatorServer).ListOperatorsByParentOperatorId(ctx, req.(*ListOperatorsByParentOperatorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeOperator_ListRetailerOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRetailerOperatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeOperatorServer).ListRetailerOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeOperator_ListRetailerOperators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeOperatorServer).ListRetailerOperators(ctx, req.(*ListRetailerOperatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeOperator_ListCompanyOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompanyOperatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeOperatorServer).ListCompanyOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeOperator_ListCompanyOperators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeOperatorServer).ListCompanyOperators(ctx, req.(*ListCompanyOperatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeOperator_ListBottomOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBottomOperatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeOperatorServer).ListBottomOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeOperator_ListBottomOperators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeOperatorServer).ListBottomOperators(ctx, req.(*ListBottomOperatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeOperator_UpdateOperatorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOperatorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeOperatorServer).UpdateOperatorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeOperator_UpdateOperatorStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeOperatorServer).UpdateOperatorStatus(ctx, req.(*UpdateOperatorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeOperator_ListOperatorsByAdminEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperatorsByAdminEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeOperatorServer).ListOperatorsByAdminEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeOperator_ListOperatorsByAdminEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeOperatorServer).ListOperatorsByAdminEmail(ctx, req.(*ListOperatorsByAdminEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackofficeOperator_ServiceDesc is the grpc.ServiceDesc for BackofficeOperator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackofficeOperator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.BackofficeOperator",
	HandlerType: (*BackofficeOperatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAllOperators",
			Handler:    _BackofficeOperator_ListAllOperators_Handler,
		},
		{
			MethodName: "CreateOperator",
			Handler:    _BackofficeOperator_CreateOperator_Handler,
		},
		{
			MethodName: "GetCurrentOperatorDetails",
			Handler:    _BackofficeOperator_GetCurrentOperatorDetails_Handler,
		},
		{
			MethodName: "ListOperatorsByParentOperatorId",
			Handler:    _BackofficeOperator_ListOperatorsByParentOperatorId_Handler,
		},
		{
			MethodName: "ListRetailerOperators",
			Handler:    _BackofficeOperator_ListRetailerOperators_Handler,
		},
		{
			MethodName: "ListCompanyOperators",
			Handler:    _BackofficeOperator_ListCompanyOperators_Handler,
		},
		{
			MethodName: "ListBottomOperators",
			Handler:    _BackofficeOperator_ListBottomOperators_Handler,
		},
		{
			MethodName: "UpdateOperatorStatus",
			Handler:    _BackofficeOperator_UpdateOperatorStatus_Handler,
		},
		{
			MethodName: "ListOperatorsByAdminEmail",
			Handler:    _BackofficeOperator_ListOperatorsByAdminEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_operator.proto",
}
