// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_payment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v1 "github.com/infigaming-com/meepo-api/payment/service/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v1.TransactionType(0)
)

// Validate checks the field values on GetPaymentTransactionPageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPaymentTransactionPageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentTransactionPageRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPaymentTransactionPageRequestMultiError, or nil if none found.
func (m *GetPaymentTransactionPageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentTransactionPageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for TransactionId

	// no validation rules for OperatorId

	// no validation rules for UserId

	// no validation rules for Currency

	// no validation rules for PaymentMethod

	// no validation rules for PaymentChannel

	// no validation rules for Protocol

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Agent

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPaymentTransactionPageRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPaymentTransactionPageRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaymentTransactionPageRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPaymentTransactionPageRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPaymentTransactionPageRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaymentTransactionPageRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Sort

	if len(errors) > 0 {
		return GetPaymentTransactionPageRequestMultiError(errors)
	}

	return nil
}

// GetPaymentTransactionPageRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetPaymentTransactionPageRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPaymentTransactionPageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentTransactionPageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentTransactionPageRequestMultiError) AllErrors() []error { return m }

// GetPaymentTransactionPageRequestValidationError is the validation error
// returned by GetPaymentTransactionPageRequest.Validate if the designated
// constraints aren't met.
type GetPaymentTransactionPageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentTransactionPageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentTransactionPageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentTransactionPageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentTransactionPageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentTransactionPageRequestValidationError) ErrorName() string {
	return "GetPaymentTransactionPageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentTransactionPageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentTransactionPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentTransactionPageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentTransactionPageRequestValidationError{}

// Validate checks the field values on GetPaymentTransactionPageResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPaymentTransactionPageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentTransactionPageResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPaymentTransactionPageResponseMultiError, or nil if none found.
func (m *GetPaymentTransactionPageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentTransactionPageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPaymentTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPaymentTransactionPageResponseValidationError{
						field:  fmt.Sprintf("PaymentTransactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPaymentTransactionPageResponseValidationError{
						field:  fmt.Sprintf("PaymentTransactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPaymentTransactionPageResponseValidationError{
					field:  fmt.Sprintf("PaymentTransactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for TotalPages

	// no validation rules for TotalSuccessful

	// no validation rules for TotalProcessing

	// no validation rules for TotalFailed

	if len(errors) > 0 {
		return GetPaymentTransactionPageResponseMultiError(errors)
	}

	return nil
}

// GetPaymentTransactionPageResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetPaymentTransactionPageResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPaymentTransactionPageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentTransactionPageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentTransactionPageResponseMultiError) AllErrors() []error { return m }

// GetPaymentTransactionPageResponseValidationError is the validation error
// returned by GetPaymentTransactionPageResponse.Validate if the designated
// constraints aren't met.
type GetPaymentTransactionPageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentTransactionPageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentTransactionPageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentTransactionPageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentTransactionPageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentTransactionPageResponseValidationError) ErrorName() string {
	return "GetPaymentTransactionPageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentTransactionPageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentTransactionPageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentTransactionPageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentTransactionPageResponseValidationError{}

// Validate checks the field values on
// GetPaymentTransactionPageResponse_PaymentTransaction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentTransactionPageResponse_PaymentTransaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetPaymentTransactionPageResponse_PaymentTransaction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetPaymentTransactionPageResponse_PaymentTransactionMultiError, or nil if
// none found.
func (m *GetPaymentTransactionPageResponse_PaymentTransaction) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentTransactionPageResponse_PaymentTransaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Operator

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPaymentTransactionPageResponse_PaymentTransactionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPaymentTransactionPageResponse_PaymentTransactionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaymentTransactionPageResponse_PaymentTransactionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPaymentTransactionPageResponse_PaymentTransactionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPaymentTransactionPageResponse_PaymentTransactionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaymentTransactionPageResponse_PaymentTransactionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	// no validation rules for VipLevel

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for PaymentChannel

	// no validation rules for Protocol

	// no validation rules for Status

	// no validation rules for TransactionId

	// no validation rules for PaTransactionId

	if len(errors) > 0 {
		return GetPaymentTransactionPageResponse_PaymentTransactionMultiError(errors)
	}

	return nil
}

// GetPaymentTransactionPageResponse_PaymentTransactionMultiError is an error
// wrapping multiple validation errors returned by
// GetPaymentTransactionPageResponse_PaymentTransaction.ValidateAll() if the
// designated constraints aren't met.
type GetPaymentTransactionPageResponse_PaymentTransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentTransactionPageResponse_PaymentTransactionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentTransactionPageResponse_PaymentTransactionMultiError) AllErrors() []error { return m }

// GetPaymentTransactionPageResponse_PaymentTransactionValidationError is the
// validation error returned by
// GetPaymentTransactionPageResponse_PaymentTransaction.Validate if the
// designated constraints aren't met.
type GetPaymentTransactionPageResponse_PaymentTransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentTransactionPageResponse_PaymentTransactionValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetPaymentTransactionPageResponse_PaymentTransactionValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetPaymentTransactionPageResponse_PaymentTransactionValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetPaymentTransactionPageResponse_PaymentTransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentTransactionPageResponse_PaymentTransactionValidationError) ErrorName() string {
	return "GetPaymentTransactionPageResponse_PaymentTransactionValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentTransactionPageResponse_PaymentTransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentTransactionPageResponse_PaymentTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentTransactionPageResponse_PaymentTransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentTransactionPageResponse_PaymentTransactionValidationError{}
