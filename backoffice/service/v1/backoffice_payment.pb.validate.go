// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_payment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v1 "github.com/infigaming-com/meepo-api/payment/service/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v1.TransactionType(0)
)

// Validate checks the field values on GetOperatorAddressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatorAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatorAddressRequestMultiError, or nil if none found.
func (m *GetOperatorAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelId

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorAddressRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorAddressRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorAddressRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExtra()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorAddressRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorAddressRequestValidationError{
					field:  "Extra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorAddressRequestValidationError{
				field:  "Extra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOperatorAddressRequestMultiError(errors)
	}

	return nil
}

// GetOperatorAddressRequestMultiError is an error wrapping multiple validation
// errors returned by GetOperatorAddressRequest.ValidateAll() if the
// designated constraints aren't met.
type GetOperatorAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorAddressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorAddressRequestMultiError) AllErrors() []error { return m }

// GetOperatorAddressRequestValidationError is the validation error returned by
// GetOperatorAddressRequest.Validate if the designated constraints aren't met.
type GetOperatorAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorAddressRequestValidationError) ErrorName() string {
	return "GetOperatorAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorAddressRequestValidationError{}

// Validate checks the field values on CreatePaymentMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentMethodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentMethodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentMethodRequestMultiError, or nil if none found.
func (m *CreatePaymentMethodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentMethodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentMethodId

	// no validation rules for Contact

	// no validation rules for SysFixedFee

	// no validation rules for SysFeeRate

	// no validation rules for SysMinAmount

	// no validation rules for SysMaxAmount

	// no validation rules for SysMinFee

	if len(errors) > 0 {
		return CreatePaymentMethodRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentMethodRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePaymentMethodRequest.ValidateAll() if
// the designated constraints aren't met.
type CreatePaymentMethodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentMethodRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentMethodRequestMultiError) AllErrors() []error { return m }

// CreatePaymentMethodRequestValidationError is the validation error returned
// by CreatePaymentMethodRequest.Validate if the designated constraints aren't met.
type CreatePaymentMethodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentMethodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentMethodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentMethodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentMethodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentMethodRequestValidationError) ErrorName() string {
	return "CreatePaymentMethodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentMethodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentMethodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentMethodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentMethodRequestValidationError{}

// Validate checks the field values on CreatePaymentChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentChannelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentChannelRequestMultiError, or nil if none found.
func (m *CreatePaymentChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MerchantId

	// no validation rules for PaymentMethodId

	// no validation rules for Contact

	// no validation rules for FixedFee

	// no validation rules for FeeRate

	// no validation rules for MinFee

	// no validation rules for UserFixedFee

	// no validation rules for UserFeeRate

	// no validation rules for UserMinFee

	// no validation rules for MinAmount

	// no validation rules for MaxAmount

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePaymentChannelRequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePaymentChannelRequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentChannelRequestValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePaymentChannelRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentChannelRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePaymentChannelRequest.ValidateAll() if
// the designated constraints aren't met.
type CreatePaymentChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentChannelRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentChannelRequestMultiError) AllErrors() []error { return m }

// CreatePaymentChannelRequestValidationError is the validation error returned
// by CreatePaymentChannelRequest.Validate if the designated constraints
// aren't met.
type CreatePaymentChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentChannelRequestValidationError) ErrorName() string {
	return "CreatePaymentChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentChannelRequestValidationError{}

// Validate checks the field values on GetPaymentMethodListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentMethodListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentMethodListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentMethodListRequestMultiError, or nil if none found.
func (m *GetPaymentMethodListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentMethodListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	// no validation rules for Psp

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetPaymentMethodListRequestMultiError(errors)
	}

	return nil
}

// GetPaymentMethodListRequestMultiError is an error wrapping multiple
// validation errors returned by GetPaymentMethodListRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPaymentMethodListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentMethodListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentMethodListRequestMultiError) AllErrors() []error { return m }

// GetPaymentMethodListRequestValidationError is the validation error returned
// by GetPaymentMethodListRequest.Validate if the designated constraints
// aren't met.
type GetPaymentMethodListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentMethodListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentMethodListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentMethodListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentMethodListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentMethodListRequestValidationError) ErrorName() string {
	return "GetPaymentMethodListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentMethodListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentMethodListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentMethodListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentMethodListRequestValidationError{}

// Validate checks the field values on GetTransactionPageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionPageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionPageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransactionPageRequestMultiError, or nil if none found.
func (m *GetTransactionPageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionPageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for TransactionId

	// no validation rules for Currency

	// no validation rules for PaymentMethod

	// no validation rules for PaymentChannel

	// no validation rules for Protocol

	// no validation rules for Network

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Agent

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransactionPageRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransactionPageRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionPageRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransactionPageRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransactionPageRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionPageRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Sort

	// no validation rules for MinAmount

	// no validation rules for MaxAmount

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransactionPageRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransactionPageRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionPageRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransactionPageRequestMultiError(errors)
	}

	return nil
}

// GetTransactionPageRequestMultiError is an error wrapping multiple validation
// errors returned by GetTransactionPageRequest.ValidateAll() if the
// designated constraints aren't met.
type GetTransactionPageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionPageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionPageRequestMultiError) AllErrors() []error { return m }

// GetTransactionPageRequestValidationError is the validation error returned by
// GetTransactionPageRequest.Validate if the designated constraints aren't met.
type GetTransactionPageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionPageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionPageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionPageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionPageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionPageRequestValidationError) ErrorName() string {
	return "GetTransactionPageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionPageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionPageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionPageRequestValidationError{}

// Validate checks the field values on GetOperatorPaymentChannelPageRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetOperatorPaymentChannelPageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatorPaymentChannelPageRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOperatorPaymentChannelPageRequestMultiError, or nil if none found.
func (m *GetOperatorPaymentChannelPageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatorPaymentChannelPageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Type

	// no validation rules for Category

	// no validation rules for PaymentMethod

	// no validation rules for Currency

	// no validation rules for Protocol

	// no validation rules for Network

	// no validation rules for Country

	// no validation rules for Source

	// no validation rules for Enabled

	// no validation rules for Sort

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatorPaymentChannelPageRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatorPaymentChannelPageRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatorPaymentChannelPageRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOperatorPaymentChannelPageRequestMultiError(errors)
	}

	return nil
}

// GetOperatorPaymentChannelPageRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetOperatorPaymentChannelPageRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOperatorPaymentChannelPageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatorPaymentChannelPageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatorPaymentChannelPageRequestMultiError) AllErrors() []error { return m }

// GetOperatorPaymentChannelPageRequestValidationError is the validation error
// returned by GetOperatorPaymentChannelPageRequest.Validate if the designated
// constraints aren't met.
type GetOperatorPaymentChannelPageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatorPaymentChannelPageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatorPaymentChannelPageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatorPaymentChannelPageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatorPaymentChannelPageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatorPaymentChannelPageRequestValidationError) ErrorName() string {
	return "GetOperatorPaymentChannelPageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatorPaymentChannelPageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatorPaymentChannelPageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatorPaymentChannelPageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatorPaymentChannelPageRequestValidationError{}
