// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_payment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListPaymentTransactionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPaymentTransactionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPaymentTransactionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListPaymentTransactionsRequestMultiError, or nil if none found.
func (m *ListPaymentTransactionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPaymentTransactionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.StartTime != nil {
		// no validation rules for StartTime
	}

	if m.EndTime != nil {
		// no validation rules for EndTime
	}

	if m.MinDeposit != nil {
		// no validation rules for MinDeposit
	}

	if m.MaxDeposit != nil {
		// no validation rules for MaxDeposit
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListPaymentTransactionsRequestMultiError(errors)
	}

	return nil
}

// ListPaymentTransactionsRequestMultiError is an error wrapping multiple
// validation errors returned by ListPaymentTransactionsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListPaymentTransactionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPaymentTransactionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPaymentTransactionsRequestMultiError) AllErrors() []error { return m }

// ListPaymentTransactionsRequestValidationError is the validation error
// returned by ListPaymentTransactionsRequest.Validate if the designated
// constraints aren't met.
type ListPaymentTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPaymentTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPaymentTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPaymentTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPaymentTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPaymentTransactionsRequestValidationError) ErrorName() string {
	return "ListPaymentTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPaymentTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPaymentTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPaymentTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPaymentTransactionsRequestValidationError{}

// Validate checks the field values on ListPaymentTransactionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPaymentTransactionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPaymentTransactionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListPaymentTransactionsResponseMultiError, or nil if none found.
func (m *ListPaymentTransactionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPaymentTransactionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPaymentTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPaymentTransactionsResponseValidationError{
						field:  fmt.Sprintf("PaymentTransactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPaymentTransactionsResponseValidationError{
						field:  fmt.Sprintf("PaymentTransactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPaymentTransactionsResponseValidationError{
					field:  fmt.Sprintf("PaymentTransactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	// no validation rules for TatalSuccessful

	// no validation rules for TotalPaying

	// no validation rules for TotalFailed

	if len(errors) > 0 {
		return ListPaymentTransactionsResponseMultiError(errors)
	}

	return nil
}

// ListPaymentTransactionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListPaymentTransactionsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListPaymentTransactionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPaymentTransactionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPaymentTransactionsResponseMultiError) AllErrors() []error { return m }

// ListPaymentTransactionsResponseValidationError is the validation error
// returned by ListPaymentTransactionsResponse.Validate if the designated
// constraints aren't met.
type ListPaymentTransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPaymentTransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPaymentTransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPaymentTransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPaymentTransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPaymentTransactionsResponseValidationError) ErrorName() string {
	return "ListPaymentTransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPaymentTransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPaymentTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPaymentTransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPaymentTransactionsResponseValidationError{}

// Validate checks the field values on
// ListPaymentTransactionsResponse_PaymentTransaction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPaymentTransactionsResponse_PaymentTransaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListPaymentTransactionsResponse_PaymentTransaction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListPaymentTransactionsResponse_PaymentTransactionMultiError, or nil if
// none found.
func (m *ListPaymentTransactionsResponse_PaymentTransaction) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPaymentTransactionsResponse_PaymentTransaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Operator

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPaymentTransactionsResponse_PaymentTransactionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPaymentTransactionsResponse_PaymentTransactionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPaymentTransactionsResponse_PaymentTransactionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPaymentTransactionsResponse_PaymentTransactionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPaymentTransactionsResponse_PaymentTransactionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPaymentTransactionsResponse_PaymentTransactionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for UserId

	// no validation rules for VipLevel

	// no validation rules for Amount

	// no validation rules for BeforeBalance

	// no validation rules for AfterBalance

	// no validation rules for Currency

	// no validation rules for PaymentChannel

	// no validation rules for Protocol

	// no validation rules for Status

	// no validation rules for TransactionId

	// no validation rules for PaymentGatewayTransactionId

	if len(errors) > 0 {
		return ListPaymentTransactionsResponse_PaymentTransactionMultiError(errors)
	}

	return nil
}

// ListPaymentTransactionsResponse_PaymentTransactionMultiError is an error
// wrapping multiple validation errors returned by
// ListPaymentTransactionsResponse_PaymentTransaction.ValidateAll() if the
// designated constraints aren't met.
type ListPaymentTransactionsResponse_PaymentTransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPaymentTransactionsResponse_PaymentTransactionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPaymentTransactionsResponse_PaymentTransactionMultiError) AllErrors() []error { return m }

// ListPaymentTransactionsResponse_PaymentTransactionValidationError is the
// validation error returned by
// ListPaymentTransactionsResponse_PaymentTransaction.Validate if the
// designated constraints aren't met.
type ListPaymentTransactionsResponse_PaymentTransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPaymentTransactionsResponse_PaymentTransactionValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListPaymentTransactionsResponse_PaymentTransactionValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListPaymentTransactionsResponse_PaymentTransactionValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListPaymentTransactionsResponse_PaymentTransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPaymentTransactionsResponse_PaymentTransactionValidationError) ErrorName() string {
	return "ListPaymentTransactionsResponse_PaymentTransactionValidationError"
}

// Error satisfies the builtin error interface
func (e ListPaymentTransactionsResponse_PaymentTransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPaymentTransactionsResponse_PaymentTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPaymentTransactionsResponse_PaymentTransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPaymentTransactionsResponse_PaymentTransactionValidationError{}
