syntax = "proto3";

package api.backoffice.service.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "common/common.proto";
import "wallet/service/v1/wallet.proto";

option go_package = "github.com/infigaming-com/meepo-api/backoffice/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.backoffice.service.v1";

service BackofficeWallet {
	rpc GetWallets(GetWalletsRequest) returns (wallet.service.v1.GetWalletsResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/wallet/get"
            body: "*"
        };
    }
	rpc GetWalletCredits(GetWalletCreditsRequest) returns (GetWalletCreditsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/wallet/credits/get"
			body: "*"
		};
	}
	// ListWalletBalanceTransactions provides balance transactions for a specific user in User transactions page.
	rpc ListWalletBalanceTransactions(ListWalletBalanceTransactionsRequest) returns (ListWalletBalanceTransactionsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/wallet/balance-transactions/list"
			body: "*"
		};
	}
    rpc GetWalletCreditTransactions(GetWalletCreditTransactionsRequest) returns (GetWalletCreditTransactionsResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/wallet/credit-transactions/get"
            body: "*"
        };
    }
    rpc UpdateWallet(UpdateWalletRequest) returns (UpdateWalletResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/wallet/update"
            body: "*"
        };
    }

	rpc AddWalletCurrency(AddWalletCurrencyRequest) returns (AddWalletCurrencyResponse) {
		option (google.api.http) = {
            post: "/v1/backoffice/wallet/currencies/add"
            body: "*"
        };
	};

	rpc ListWalletCurrencies(ListWalletCurrenciesRequest) returns (ListWalletCurrenciesResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/wallet/currencies/list"
            body: "*"
        };
    }
	rpc UpdateWalletCurrency(UpdateWalletCurrencyRequest) returns (UpdateWalletCurrencyResponse) {
        option (google.api.http) = {
            post: "/v1/backoffice/wallet/currencies/update"
            body: "*"
        };
    }
	// ListOperatorBalances lists all operator balances which belong to the backoffice operator
	rpc ListOperatorBalances(ListOperatorBalancesRequest) returns (wallet.service.v1.ListBottomOperatorBalancesResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/wallet/operator/balances/list"
			body: "*"
		};
	}

	rpc GetExchangeRates(GetExchangeRatesRequest) returns (GetExchangeRatesResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/wallet/exchange-rates/get"
			body: "*"
		};
	}
	// OperatorTransfer transfers cash from one operator to its company operator, only allow USD, USDT, USDC, 1:1 exchange
	rpc OperatorTransfer(OperatorTransferRequest) returns (OperatorTransferResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/wallet/operator/transfer"
			body: "*"
		};
	}
	// OperatorSwap swaps cash between two balances of the same company's operator
	rpc OperatorSwap(OperatorSwapRequest) returns (OperatorSwapResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/wallet/operator/swap"
			body: "*"
		};
	}
	// OperatorFreeze freezes cash of an operator
	rpc OperatorBalanceFreeze(OperatorBalanceFreezeRequest) returns (OperatorBalanceFreezeResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/wallet/operator/balance-freeze"
			body: "*"
		};
	}
	// OperatorRollback rolls back frozen cash of an operator
	rpc OperatorBalanceRollback(OperatorBalanceRollbackRequest) returns (OperatorBalanceRollbackResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/wallet/operator/balance-rollback"
			body: "*"
		};
	}
	// OperatorSettle settles frozen cash of an operator
	rpc OperatorBalanceSettle(OperatorBalanceSettleRequest) returns (OperatorBalanceSettleResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/wallet/operator/balance-settle"
			body: "*"
		};
	}
	// ListOperatorBalanceTransactions lists the balance transactions of an operator
	rpc ListOperatorBalanceTransactions(ListOperatorBalanceTransactionsRequest) returns (ListOperatorBalanceTransactionsResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/wallet/operator/transactions/list"
			body: "*"
		};
	}
	// UpdateOperatorBalance updates an operator balanceï¼Œ now only support update the enabled status
	rpc UpdateOperatorBalance(UpdateOperatorBalanceRequest) returns (UpdateOperatorBalanceResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/wallet/operator/balance/update"
			body: "*"
		};
	}
	// GetOperatorBalance gets the balances of an operator
	rpc GetOperatorBalance(wallet.service.v1.GetOperatorBalanceRequest) returns (wallet.service.v1.GetOperatorBalanceResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/wallet/operator/balance/get"
			body: "*"
		};
	}
	// SetDepositRewardSequences sets the deposit reward sequences of a operator currency config
	rpc SetDepositRewardSequences(SetDepositRewardSequencesRequest) returns (wallet.service.v1.SetDepositRewardSequencesResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/wallet/deposit-reward/sequences/set"
			body: "*"
		};
	}
	// DeleteDepositRewardSequences deletes a deposit reward sequence of a operator currency config
	rpc DeleteDepositRewardSequences(DeleteDepositRewardSequencesRequest) returns (wallet.service.v1.DeleteDepositRewardSequencesResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/wallet/deposit-reward/sequences/delete"
			body: "*"
		};
	}
	// GetDepositRewardConfig returns the default and custom deposit reward config based on currency and operator context
	rpc GetDepositRewardConfig(GetDepositRewardConfigRequest) returns (wallet.service.v1.GetDepositRewardConfigResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/wallet/deposit-reward/config/get"
			body: "*"
		};
	}

	// GetGamificationCurrencyConfig returns the currency config and the deduction order config based on currency and operator context
	rpc GetGamificationCurrencyConfig(GetGamificationCurrencyConfigRequest) returns (wallet.service.v1.GetGamificationCurrencyConfigResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/wallet/gamification/get"
			body: "*"
		};
	}

	// UpdateOperatorCurrencyConfig updates the config of a operator and its currency
	rpc UpdateOperatorCurrencyConfig(UpdateOperatorCurrencyConfigRequest) returns (wallet.service.v1.UpdateOperatorCurrencyConfigResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/wallet/currency/config/update"
			body: "*"
		};
	}

	// UpdateDeductionOrder updates the deduction order config based on operator context
	rpc UpdateDeductionOrder(UpdateDeductionOrderRequest) returns (wallet.service.v1.UpdateDeductionOrderResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/wallet/deduction-order/update"
			body: "*"
		};
	}

	// DeleteResponsibleGamblingConfig deletes gambling config for a user's currency
	rpc DeleteResponsibleGamblingConfig(DeleteResponsibleGamblingConfigRequest) returns (wallet.service.v1.DeleteResponsibleGamblingConfigResponse) {
		option (google.api.http) = {
			post: "/v1/backoffice/wallet/responsible-gambling/config/delete"
			body: "*"
		};
	}
}

message GetWalletsRequest {
	int64 user_id = 1;
	repeated string currencies = 2;
}

message GetWalletCreditsRequest {
	int64 user_id = 1;
	optional string transaction_type = 2;	// credit or debit
	optional string currency = 3;
	optional google.protobuf.Timestamp start_time = 4;
	optional google.protobuf.Timestamp end_time = 5;
	optional int32 page = 6;
	optional int32 page_size = 7;
}

message GetWalletCreditsResponse {
	message Credit {
		google.protobuf.Timestamp created_at = 1;
		int64 credit_id = 2 [json_name="transactionId"];
		string type = 3;
		int32 vip_level = 4;
		string before_blanace = 5;
		string after_balance = 6;
		string currency = 7;
	}
	repeated Credit credits = 1;
	int32 page = 2;
	int32 page_size = 3;
	int32 total = 4;
}

message ListWalletBalanceTransactionsRequest {
	int64 user_id = 1;
	// Transaction types for different operations
	// Expected values:
	// Credit operations:
	//   - "payment_deposit"    - Payment deposit transaction
	//   - "game_win"          - Game win transaction
	//
	// Debit operations:
	//   - "payment_withdraw"   - Payment withdraw transaction
	//   - "game_bet"          - Game bet transaction
	//   - "payment_withdraw_freeze" - Payment withdraw freeze transaction
	//
	// Settlement operations:
	//   - "payment_withdraw_settle" - Payment withdraw settlement
	//
	// Rollback operations:
	//   - "game_bet_rollback"            - Game bet transaction rollback
	//   - "game_win_rollback"            - Game win transaction rollback
	//   - "payment_withdraw_rollback" - Payment withdraw transaction rollback
	optional string transaction_type = 2;
	optional string currency = 3;
	optional google.protobuf.Timestamp start_time = 4;
	optional google.protobuf.Timestamp end_time = 5;
	optional int32 page = 6;
	optional int32 page_size = 7;
}

message ListWalletBalanceTransactionsResponse {
	message BalanceTransaction {
		google.protobuf.Timestamp created_at = 1;
		int64 transaction_id = 2;
		// Transaction types for different operations
		// Expected values:
		// Credit operations:
		//   - "payment_deposit"    - Payment deposit transaction
		//   - "game_win"          - Game win transaction
		//
		// Debit operations:
		//   - "payment_withdraw"   - Payment withdraw transaction
		//   - "game_bet"          - Game bet transaction
		//   - "payment_withdraw_freeze" - Payment withdraw freeze transaction
		//
		// Settlement operations:
		//   - "payment_withdraw_settle" - Payment withdraw settlement
		//
		// Rollback operations:
		//   - "game_bet_rollback"            - Game bet transaction rollback
		//   - "game_win_rollback"            - Game win transaction rollback
		//   - "payment_withdraw_rollback" - Payment withdraw transaction rollback
		string transaction_type = 3;
		int32 vip_level = 4;
		string change_balance = 5;
		string before_balance = 6;
		string after_balance = 7;
		string currency = 8;
		int64 related_transaction_id = 9;
	}
	repeated BalanceTransaction balance_transactions = 1;
	int32 total = 2;
	int32 page = 3;
	int32 page_size = 4;
}

message GetWalletCreditTransactionsRequest {
	int64 credit_id = 1 [json_name="transactionId"];
}

message GetWalletCreditTransactionsResponse {
	message CreditTransaction {
		google.protobuf.Timestamp created_at = 1;
		string type = 2;
	}
	repeated CreditTransaction credit_transactions = 1;
	int32 page = 2;
	int32 page_size = 3;
	int32 total = 4;
}

message UpdateWalletRequest {
	int64 user_id = 1;
	string currency = 2;
	optional bool enabled = 3;
}

message UpdateWalletResponse {}

message WalletCurrency {
	string currency = 1;
	bool enabled = 2;
	bool hidden = 3;
	string type = 4;
	string symbol = 5;
	string icon = 6;
	int32 decimal_places = 7;
}

message AddWalletCurrencyRequest {
	string currency = 1;
	bool enabled = 2;
	bool hidden = 3;
	string type = 4;
	string symbol = 5;
	string icon = 6;
	int32 decimal_places = 7;
	int32 currency_decimal_places = 8;
}

message AddWalletCurrencyResponse {}

message ListWalletCurrenciesRequest {
	repeated string currencies = 1;
	optional bool enabled = 2;
	optional bool hidden = 3;
}

message ListWalletCurrenciesResponse {
	repeated WalletCurrency currencies = 1;
	int32 total = 2;
	int32 total_enabled = 3;
	int32 total_hidden = 4;
}

message UpdateWalletCurrencyRequest {
	string currency = 1;
	optional bool enabled = 2;
	optional bool hidden = 3;
	optional string type = 4;
	optional string symbol = 5;
	optional string icon = 6;
	optional int32 decimal_places = 7;
	optional int32 currency_decimal_places = 8;
}

message UpdateWalletCurrencyResponse {
	WalletCurrency currency = 1;
}

message ListOperatorBalancesRequest {
	api.common.OperatorContextFilters operator_context_filters = 1;
	repeated string currencies = 2;
	optional int32 page = 3; // default 1
	optional int32 page_size = 4; // default 20
}

message GetExchangeRatesRequest {
	repeated string currencies = 1;
}

message GetExchangeRatesResponse {
	// map key is source currency, value is target currency rate
	map<string, string> exchange_rates = 1;
}

message OperatorTransferRequest {
	api.common.OperatorContext operator_context = 1;
	string currency = 2;
	string cash_amount = 3;
}

message OperatorTransferResponse {
	string operator_cash = 1;
	string operator_balance_currency = 2;
	string target_operator_cash = 3;
	string target_operator_balance_currency = 4;
}

message OperatorSwapRequest {
	api.common.OperatorContext operator_context = 1;
	api.common.OperatorContext target_operator_context = 2;
	string currency = 3;
	string target_currency = 4;
	string cash_amount = 5; // cash amount of the operator's balance currency
}

message OperatorSwapResponse {
	string currency_balance_cash = 1;
	string currency_balance_cash_usd = 2;
	string currency_balance_cash_reporting_currency = 3;
	string target_currency_balance_cash = 4;
	string target_currency_balance_cash_usd = 5;
	string target_currency_balance_cash_reporting_currency = 6;
}

message OperatorBalanceFreezeRequest {
	api.common.OperatorContext operator_context = 1;
	string currency = 2;
	string cash_amount = 3;
	string memo = 4;
}

message OperatorBalanceFreezeResponse {
	int64 transaction_id = 1;
	string cash = 2;
}

message OperatorBalanceRollbackRequest {
	api.common.OperatorContext operator_context = 1;
	int64 original_transaction_id = 2;
	string memo = 3;
}

message OperatorBalanceRollbackResponse {
	int64 transaction_id = 1;
	string cash = 2;
	string cash_amount = 3;
	string cash_amount_usd = 4;
	string cash_amount_reporting_currency = 5;
}

message OperatorBalanceSettleRequest {
	api.common.OperatorContext operator_context = 1;
	string currency = 2;
	int64 original_transaction_id = 3;
	string memo = 4;
}

message OperatorBalanceSettleResponse {
	int64 transaction_id = 1;
	string cash = 2;
	string cash_amount = 3;
	string cash_amount_usd = 4;
	string cash_amount_reporting_currency = 5;
}

message ListOperatorBalanceTransactionsRequest {
	api.common.OperatorContextFilters operator_context_filters = 1;
	repeated string settlement_currencies = 2;
	repeated string transaction_types = 3;
	optional int64 transaction_id = 4;
	string target_operator_type = 5;
	optional google.protobuf.Timestamp start_time = 6;
	optional google.protobuf.Timestamp end_time = 7;
	optional int32 page = 8;
	optional int32 page_size = 9;
}

message OperatorBalanceTransaction {
	int64 transaction_id = 1;
	api.common.OperatorContext operator_context = 2;
	string retailer_operator_name = 3;
	string company_operator_name = 4;
	string operator_name = 5;
	string settlement_currency = 6;
	string before_balance = 7;
	string after_balance = 8;
	string cash_amount = 9;
	string transaction_type = 10;
	string status = 11;
	string memo = 12;
	string fee_amount = 13;
	google.protobuf.Timestamp created_at = 14;
	google.protobuf.Timestamp updated_at = 15;
}

message ListOperatorBalanceTransactionsResponse {
	repeated OperatorBalanceTransaction transactions = 1;
	int32 total = 2;
	int32 page = 3;
	int32 page_size = 4;
}

message UpdateOperatorBalanceRequest {
	api.common.OperatorContext target_operator_context = 1;
	string currency = 2;
	bool enabled = 3;
}

message UpdateOperatorBalanceResponse {
	bool enabled = 1;
}

message SetDepositRewardSequencesRequest {
	api.common.OperatorContext target_operator_context = 1;
	string currency = 2;
	optional bool follow_parent = 3;
	optional bool welcome_reward_enabled = 4;
	optional bool daily_reward_enabled = 5;
	repeated wallet.service.v1.RewardSequence welcome_reward_sequences = 6;
	repeated wallet.service.v1.RewardSequence daily_reward_sequences = 7;
}

message DeleteDepositRewardSequencesRequest {
	api.common.OperatorContext target_operator_context = 1;
	string currency = 2;
	repeated wallet.service.v1.RewardSequence welcome_reward_sequences = 3; // the sequences to delete
	repeated wallet.service.v1.RewardSequence daily_reward_sequences = 4; // the sequences to delete
}

message GetDepositRewardConfigRequest {
	api.common.OperatorContext target_operator_context = 1;
	string currency = 2;
}

message GetGamificationCurrencyConfigRequest {
	api.common.OperatorContext target_operator_context = 1;
}

message UpdateOperatorCurrencyConfigRequest {
	api.common.OperatorContext target_operator_context = 1;
	wallet.service.v1.OperatorCurrencyConfig operator_currency_config = 2;
}

message UpdateDeductionOrderRequest {
	api.common.OperatorContext target_operator_context = 1;
	wallet.service.v1.DeductionOrder deduction_order = 2;
}

message DeleteResponsibleGamblingConfigRequest {
	string currency = 1;
	// deposit_limit, withdrawal_limit, daily_play_limit, weekly_play_limit, monthly_play_limit
	// daily_loss_limit, weekly_loss_limit, monthly_loss_limit
	string limit_type = 2;
}
