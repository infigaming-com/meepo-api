// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_report.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackofficeReport_GetSummary_FullMethodName                 = "/api.backoffice.service.v1.BackofficeReport/GetSummary"
	BackofficeReport_ListDailySummaries_FullMethodName         = "/api.backoffice.service.v1.BackofficeReport/ListDailySummaries"
	BackofficeReport_GetGameDataSummary_FullMethodName         = "/api.backoffice.service.v1.BackofficeReport/GetGameDataSummary"
	BackofficeReport_ListGameDataDailySummaries_FullMethodName = "/api.backoffice.service.v1.BackofficeReport/ListGameDataDailySummaries"
	BackofficeReport_GetPlayerGameDataSummary_FullMethodName   = "/api.backoffice.service.v1.BackofficeReport/GetPlayerGameDataSummary"
	BackofficeReport_ListDepositDailySummaries_FullMethodName  = "/api.backoffice.service.v1.BackofficeReport/ListDepositDailySummaries"
	BackofficeReport_ListDepositDailyDetails_FullMethodName    = "/api.backoffice.service.v1.BackofficeReport/ListDepositDailyDetails"
	BackofficeReport_ListWithdrawDailySummaries_FullMethodName = "/api.backoffice.service.v1.BackofficeReport/ListWithdrawDailySummaries"
	BackofficeReport_ListWithdrawDailyDetails_FullMethodName   = "/api.backoffice.service.v1.BackofficeReport/ListWithdrawDailyDetails"
)

// BackofficeReportClient is the client API for BackofficeReport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackofficeReportClient interface {
	GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*GetSummaryResponse, error)
	ListDailySummaries(ctx context.Context, in *ListDailySummariesRequest, opts ...grpc.CallOption) (*ListDailySummariesResponse, error)
	GetGameDataSummary(ctx context.Context, in *GetGameDataSummaryRequest, opts ...grpc.CallOption) (*GetGameDataSummaryResponse, error)
	ListGameDataDailySummaries(ctx context.Context, in *ListGameDataDailySummariesRequest, opts ...grpc.CallOption) (*ListGameDataDailySummariesResponse, error)
	GetPlayerGameDataSummary(ctx context.Context, in *GetPlayerGameDataSummaryRequest, opts ...grpc.CallOption) (*GetPlayerGameDataSummaryResponse, error)
	ListDepositDailySummaries(ctx context.Context, in *ListDepositDailySummariesRequest, opts ...grpc.CallOption) (*ListDepositDailySummariesResponse, error)
	ListDepositDailyDetails(ctx context.Context, in *ListDepositDailyDetailsRequest, opts ...grpc.CallOption) (*ListDepositDailyDetailsResponse, error)
	ListWithdrawDailySummaries(ctx context.Context, in *ListWithdrawDailySummariesRequest, opts ...grpc.CallOption) (*ListWithdrawDailySummariesResponse, error)
	ListWithdrawDailyDetails(ctx context.Context, in *ListWithdrawDailyDetailsRequest, opts ...grpc.CallOption) (*ListWithdrawDailyDetailsResponse, error)
}

type backofficeReportClient struct {
	cc grpc.ClientConnInterface
}

func NewBackofficeReportClient(cc grpc.ClientConnInterface) BackofficeReportClient {
	return &backofficeReportClient{cc}
}

func (c *backofficeReportClient) GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*GetSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSummaryResponse)
	err := c.cc.Invoke(ctx, BackofficeReport_GetSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeReportClient) ListDailySummaries(ctx context.Context, in *ListDailySummariesRequest, opts ...grpc.CallOption) (*ListDailySummariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDailySummariesResponse)
	err := c.cc.Invoke(ctx, BackofficeReport_ListDailySummaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeReportClient) GetGameDataSummary(ctx context.Context, in *GetGameDataSummaryRequest, opts ...grpc.CallOption) (*GetGameDataSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGameDataSummaryResponse)
	err := c.cc.Invoke(ctx, BackofficeReport_GetGameDataSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeReportClient) ListGameDataDailySummaries(ctx context.Context, in *ListGameDataDailySummariesRequest, opts ...grpc.CallOption) (*ListGameDataDailySummariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGameDataDailySummariesResponse)
	err := c.cc.Invoke(ctx, BackofficeReport_ListGameDataDailySummaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeReportClient) GetPlayerGameDataSummary(ctx context.Context, in *GetPlayerGameDataSummaryRequest, opts ...grpc.CallOption) (*GetPlayerGameDataSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlayerGameDataSummaryResponse)
	err := c.cc.Invoke(ctx, BackofficeReport_GetPlayerGameDataSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeReportClient) ListDepositDailySummaries(ctx context.Context, in *ListDepositDailySummariesRequest, opts ...grpc.CallOption) (*ListDepositDailySummariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDepositDailySummariesResponse)
	err := c.cc.Invoke(ctx, BackofficeReport_ListDepositDailySummaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeReportClient) ListDepositDailyDetails(ctx context.Context, in *ListDepositDailyDetailsRequest, opts ...grpc.CallOption) (*ListDepositDailyDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDepositDailyDetailsResponse)
	err := c.cc.Invoke(ctx, BackofficeReport_ListDepositDailyDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeReportClient) ListWithdrawDailySummaries(ctx context.Context, in *ListWithdrawDailySummariesRequest, opts ...grpc.CallOption) (*ListWithdrawDailySummariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWithdrawDailySummariesResponse)
	err := c.cc.Invoke(ctx, BackofficeReport_ListWithdrawDailySummaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeReportClient) ListWithdrawDailyDetails(ctx context.Context, in *ListWithdrawDailyDetailsRequest, opts ...grpc.CallOption) (*ListWithdrawDailyDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWithdrawDailyDetailsResponse)
	err := c.cc.Invoke(ctx, BackofficeReport_ListWithdrawDailyDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackofficeReportServer is the server API for BackofficeReport service.
// All implementations must embed UnimplementedBackofficeReportServer
// for forward compatibility.
type BackofficeReportServer interface {
	GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error)
	ListDailySummaries(context.Context, *ListDailySummariesRequest) (*ListDailySummariesResponse, error)
	GetGameDataSummary(context.Context, *GetGameDataSummaryRequest) (*GetGameDataSummaryResponse, error)
	ListGameDataDailySummaries(context.Context, *ListGameDataDailySummariesRequest) (*ListGameDataDailySummariesResponse, error)
	GetPlayerGameDataSummary(context.Context, *GetPlayerGameDataSummaryRequest) (*GetPlayerGameDataSummaryResponse, error)
	ListDepositDailySummaries(context.Context, *ListDepositDailySummariesRequest) (*ListDepositDailySummariesResponse, error)
	ListDepositDailyDetails(context.Context, *ListDepositDailyDetailsRequest) (*ListDepositDailyDetailsResponse, error)
	ListWithdrawDailySummaries(context.Context, *ListWithdrawDailySummariesRequest) (*ListWithdrawDailySummariesResponse, error)
	ListWithdrawDailyDetails(context.Context, *ListWithdrawDailyDetailsRequest) (*ListWithdrawDailyDetailsResponse, error)
	mustEmbedUnimplementedBackofficeReportServer()
}

// UnimplementedBackofficeReportServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackofficeReportServer struct{}

func (UnimplementedBackofficeReportServer) GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummary not implemented")
}
func (UnimplementedBackofficeReportServer) ListDailySummaries(context.Context, *ListDailySummariesRequest) (*ListDailySummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDailySummaries not implemented")
}
func (UnimplementedBackofficeReportServer) GetGameDataSummary(context.Context, *GetGameDataSummaryRequest) (*GetGameDataSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameDataSummary not implemented")
}
func (UnimplementedBackofficeReportServer) ListGameDataDailySummaries(context.Context, *ListGameDataDailySummariesRequest) (*ListGameDataDailySummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGameDataDailySummaries not implemented")
}
func (UnimplementedBackofficeReportServer) GetPlayerGameDataSummary(context.Context, *GetPlayerGameDataSummaryRequest) (*GetPlayerGameDataSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerGameDataSummary not implemented")
}
func (UnimplementedBackofficeReportServer) ListDepositDailySummaries(context.Context, *ListDepositDailySummariesRequest) (*ListDepositDailySummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepositDailySummaries not implemented")
}
func (UnimplementedBackofficeReportServer) ListDepositDailyDetails(context.Context, *ListDepositDailyDetailsRequest) (*ListDepositDailyDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepositDailyDetails not implemented")
}
func (UnimplementedBackofficeReportServer) ListWithdrawDailySummaries(context.Context, *ListWithdrawDailySummariesRequest) (*ListWithdrawDailySummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawDailySummaries not implemented")
}
func (UnimplementedBackofficeReportServer) ListWithdrawDailyDetails(context.Context, *ListWithdrawDailyDetailsRequest) (*ListWithdrawDailyDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawDailyDetails not implemented")
}
func (UnimplementedBackofficeReportServer) mustEmbedUnimplementedBackofficeReportServer() {}
func (UnimplementedBackofficeReportServer) testEmbeddedByValue()                          {}

// UnsafeBackofficeReportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackofficeReportServer will
// result in compilation errors.
type UnsafeBackofficeReportServer interface {
	mustEmbedUnimplementedBackofficeReportServer()
}

func RegisterBackofficeReportServer(s grpc.ServiceRegistrar, srv BackofficeReportServer) {
	// If the following call pancis, it indicates UnimplementedBackofficeReportServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackofficeReport_ServiceDesc, srv)
}

func _BackofficeReport_GetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeReportServer).GetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeReport_GetSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeReportServer).GetSummary(ctx, req.(*GetSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeReport_ListDailySummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDailySummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeReportServer).ListDailySummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeReport_ListDailySummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeReportServer).ListDailySummaries(ctx, req.(*ListDailySummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeReport_GetGameDataSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameDataSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeReportServer).GetGameDataSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeReport_GetGameDataSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeReportServer).GetGameDataSummary(ctx, req.(*GetGameDataSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeReport_ListGameDataDailySummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameDataDailySummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeReportServer).ListGameDataDailySummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeReport_ListGameDataDailySummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeReportServer).ListGameDataDailySummaries(ctx, req.(*ListGameDataDailySummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeReport_GetPlayerGameDataSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerGameDataSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeReportServer).GetPlayerGameDataSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeReport_GetPlayerGameDataSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeReportServer).GetPlayerGameDataSummary(ctx, req.(*GetPlayerGameDataSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeReport_ListDepositDailySummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepositDailySummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeReportServer).ListDepositDailySummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeReport_ListDepositDailySummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeReportServer).ListDepositDailySummaries(ctx, req.(*ListDepositDailySummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeReport_ListDepositDailyDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepositDailyDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeReportServer).ListDepositDailyDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeReport_ListDepositDailyDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeReportServer).ListDepositDailyDetails(ctx, req.(*ListDepositDailyDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeReport_ListWithdrawDailySummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawDailySummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeReportServer).ListWithdrawDailySummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeReport_ListWithdrawDailySummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeReportServer).ListWithdrawDailySummaries(ctx, req.(*ListWithdrawDailySummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeReport_ListWithdrawDailyDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawDailyDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeReportServer).ListWithdrawDailyDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeReport_ListWithdrawDailyDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeReportServer).ListWithdrawDailyDetails(ctx, req.(*ListWithdrawDailyDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackofficeReport_ServiceDesc is the grpc.ServiceDesc for BackofficeReport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackofficeReport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.BackofficeReport",
	HandlerType: (*BackofficeReportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSummary",
			Handler:    _BackofficeReport_GetSummary_Handler,
		},
		{
			MethodName: "ListDailySummaries",
			Handler:    _BackofficeReport_ListDailySummaries_Handler,
		},
		{
			MethodName: "GetGameDataSummary",
			Handler:    _BackofficeReport_GetGameDataSummary_Handler,
		},
		{
			MethodName: "ListGameDataDailySummaries",
			Handler:    _BackofficeReport_ListGameDataDailySummaries_Handler,
		},
		{
			MethodName: "GetPlayerGameDataSummary",
			Handler:    _BackofficeReport_GetPlayerGameDataSummary_Handler,
		},
		{
			MethodName: "ListDepositDailySummaries",
			Handler:    _BackofficeReport_ListDepositDailySummaries_Handler,
		},
		{
			MethodName: "ListDepositDailyDetails",
			Handler:    _BackofficeReport_ListDepositDailyDetails_Handler,
		},
		{
			MethodName: "ListWithdrawDailySummaries",
			Handler:    _BackofficeReport_ListWithdrawDailySummaries_Handler,
		},
		{
			MethodName: "ListWithdrawDailyDetails",
			Handler:    _BackofficeReport_ListWithdrawDailyDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_report.proto",
}
