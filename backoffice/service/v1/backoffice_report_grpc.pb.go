// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_report.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Backoffice_Report_GetSummary_FullMethodName                 = "/api.backoffice.service.v1.Backoffice_Report/GetSummary"
	Backoffice_Report_ListDailySummaries_FullMethodName         = "/api.backoffice.service.v1.Backoffice_Report/ListDailySummaries"
	Backoffice_Report_GetGameDataSummary_FullMethodName         = "/api.backoffice.service.v1.Backoffice_Report/GetGameDataSummary"
	Backoffice_Report_ListGameDataDailySummaries_FullMethodName = "/api.backoffice.service.v1.Backoffice_Report/ListGameDataDailySummaries"
	Backoffice_Report_GetPlayerGameDataSummary_FullMethodName   = "/api.backoffice.service.v1.Backoffice_Report/GetPlayerGameDataSummary"
	Backoffice_Report_ListDepositDailySummaries_FullMethodName  = "/api.backoffice.service.v1.Backoffice_Report/ListDepositDailySummaries"
	Backoffice_Report_ListDepositDailyDetails_FullMethodName    = "/api.backoffice.service.v1.Backoffice_Report/ListDepositDailyDetails"
	Backoffice_Report_ListWithdrawDailySummaries_FullMethodName = "/api.backoffice.service.v1.Backoffice_Report/ListWithdrawDailySummaries"
	Backoffice_Report_ListWithdrawDailyDetails_FullMethodName   = "/api.backoffice.service.v1.Backoffice_Report/ListWithdrawDailyDetails"
)

// Backoffice_ReportClient is the client API for Backoffice_Report service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Backoffice_ReportClient interface {
	GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*GetSummaryResponse, error)
	ListDailySummaries(ctx context.Context, in *ListDailySummariesRequest, opts ...grpc.CallOption) (*ListDailySummariesResponse, error)
	GetGameDataSummary(ctx context.Context, in *GetGameDataSummaryRequest, opts ...grpc.CallOption) (*GetGameDataSummaryResponse, error)
	ListGameDataDailySummaries(ctx context.Context, in *ListGameDataDailySummariesRequest, opts ...grpc.CallOption) (*ListGameDataDailySummariesResponse, error)
	GetPlayerGameDataSummary(ctx context.Context, in *GetPlayerGameDataSummaryRequest, opts ...grpc.CallOption) (*GetPlayerGameDataSummaryResponse, error)
	ListDepositDailySummaries(ctx context.Context, in *ListDepositDailySummariesRequest, opts ...grpc.CallOption) (*ListDepositDailySummariesResponse, error)
	ListDepositDailyDetails(ctx context.Context, in *ListDepositDailyDetailsRequest, opts ...grpc.CallOption) (*ListDepositDailyDetailsResponse, error)
	ListWithdrawDailySummaries(ctx context.Context, in *ListWithdrawDailySummariesRequest, opts ...grpc.CallOption) (*ListWithdrawDailySummariesResponse, error)
	ListWithdrawDailyDetails(ctx context.Context, in *ListWithdrawDailyDetailsRequest, opts ...grpc.CallOption) (*ListWithdrawDailyDetailsResponse, error)
}

type backoffice_ReportClient struct {
	cc grpc.ClientConnInterface
}

func NewBackoffice_ReportClient(cc grpc.ClientConnInterface) Backoffice_ReportClient {
	return &backoffice_ReportClient{cc}
}

func (c *backoffice_ReportClient) GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*GetSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSummaryResponse)
	err := c.cc.Invoke(ctx, Backoffice_Report_GetSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_ReportClient) ListDailySummaries(ctx context.Context, in *ListDailySummariesRequest, opts ...grpc.CallOption) (*ListDailySummariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDailySummariesResponse)
	err := c.cc.Invoke(ctx, Backoffice_Report_ListDailySummaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_ReportClient) GetGameDataSummary(ctx context.Context, in *GetGameDataSummaryRequest, opts ...grpc.CallOption) (*GetGameDataSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGameDataSummaryResponse)
	err := c.cc.Invoke(ctx, Backoffice_Report_GetGameDataSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_ReportClient) ListGameDataDailySummaries(ctx context.Context, in *ListGameDataDailySummariesRequest, opts ...grpc.CallOption) (*ListGameDataDailySummariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGameDataDailySummariesResponse)
	err := c.cc.Invoke(ctx, Backoffice_Report_ListGameDataDailySummaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_ReportClient) GetPlayerGameDataSummary(ctx context.Context, in *GetPlayerGameDataSummaryRequest, opts ...grpc.CallOption) (*GetPlayerGameDataSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlayerGameDataSummaryResponse)
	err := c.cc.Invoke(ctx, Backoffice_Report_GetPlayerGameDataSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_ReportClient) ListDepositDailySummaries(ctx context.Context, in *ListDepositDailySummariesRequest, opts ...grpc.CallOption) (*ListDepositDailySummariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDepositDailySummariesResponse)
	err := c.cc.Invoke(ctx, Backoffice_Report_ListDepositDailySummaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_ReportClient) ListDepositDailyDetails(ctx context.Context, in *ListDepositDailyDetailsRequest, opts ...grpc.CallOption) (*ListDepositDailyDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDepositDailyDetailsResponse)
	err := c.cc.Invoke(ctx, Backoffice_Report_ListDepositDailyDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_ReportClient) ListWithdrawDailySummaries(ctx context.Context, in *ListWithdrawDailySummariesRequest, opts ...grpc.CallOption) (*ListWithdrawDailySummariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWithdrawDailySummariesResponse)
	err := c.cc.Invoke(ctx, Backoffice_Report_ListWithdrawDailySummaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backoffice_ReportClient) ListWithdrawDailyDetails(ctx context.Context, in *ListWithdrawDailyDetailsRequest, opts ...grpc.CallOption) (*ListWithdrawDailyDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWithdrawDailyDetailsResponse)
	err := c.cc.Invoke(ctx, Backoffice_Report_ListWithdrawDailyDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Backoffice_ReportServer is the server API for Backoffice_Report service.
// All implementations must embed UnimplementedBackoffice_ReportServer
// for forward compatibility.
type Backoffice_ReportServer interface {
	GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error)
	ListDailySummaries(context.Context, *ListDailySummariesRequest) (*ListDailySummariesResponse, error)
	GetGameDataSummary(context.Context, *GetGameDataSummaryRequest) (*GetGameDataSummaryResponse, error)
	ListGameDataDailySummaries(context.Context, *ListGameDataDailySummariesRequest) (*ListGameDataDailySummariesResponse, error)
	GetPlayerGameDataSummary(context.Context, *GetPlayerGameDataSummaryRequest) (*GetPlayerGameDataSummaryResponse, error)
	ListDepositDailySummaries(context.Context, *ListDepositDailySummariesRequest) (*ListDepositDailySummariesResponse, error)
	ListDepositDailyDetails(context.Context, *ListDepositDailyDetailsRequest) (*ListDepositDailyDetailsResponse, error)
	ListWithdrawDailySummaries(context.Context, *ListWithdrawDailySummariesRequest) (*ListWithdrawDailySummariesResponse, error)
	ListWithdrawDailyDetails(context.Context, *ListWithdrawDailyDetailsRequest) (*ListWithdrawDailyDetailsResponse, error)
	mustEmbedUnimplementedBackoffice_ReportServer()
}

// UnimplementedBackoffice_ReportServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackoffice_ReportServer struct{}

func (UnimplementedBackoffice_ReportServer) GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummary not implemented")
}
func (UnimplementedBackoffice_ReportServer) ListDailySummaries(context.Context, *ListDailySummariesRequest) (*ListDailySummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDailySummaries not implemented")
}
func (UnimplementedBackoffice_ReportServer) GetGameDataSummary(context.Context, *GetGameDataSummaryRequest) (*GetGameDataSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameDataSummary not implemented")
}
func (UnimplementedBackoffice_ReportServer) ListGameDataDailySummaries(context.Context, *ListGameDataDailySummariesRequest) (*ListGameDataDailySummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGameDataDailySummaries not implemented")
}
func (UnimplementedBackoffice_ReportServer) GetPlayerGameDataSummary(context.Context, *GetPlayerGameDataSummaryRequest) (*GetPlayerGameDataSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerGameDataSummary not implemented")
}
func (UnimplementedBackoffice_ReportServer) ListDepositDailySummaries(context.Context, *ListDepositDailySummariesRequest) (*ListDepositDailySummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepositDailySummaries not implemented")
}
func (UnimplementedBackoffice_ReportServer) ListDepositDailyDetails(context.Context, *ListDepositDailyDetailsRequest) (*ListDepositDailyDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepositDailyDetails not implemented")
}
func (UnimplementedBackoffice_ReportServer) ListWithdrawDailySummaries(context.Context, *ListWithdrawDailySummariesRequest) (*ListWithdrawDailySummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawDailySummaries not implemented")
}
func (UnimplementedBackoffice_ReportServer) ListWithdrawDailyDetails(context.Context, *ListWithdrawDailyDetailsRequest) (*ListWithdrawDailyDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWithdrawDailyDetails not implemented")
}
func (UnimplementedBackoffice_ReportServer) mustEmbedUnimplementedBackoffice_ReportServer() {}
func (UnimplementedBackoffice_ReportServer) testEmbeddedByValue()                           {}

// UnsafeBackoffice_ReportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Backoffice_ReportServer will
// result in compilation errors.
type UnsafeBackoffice_ReportServer interface {
	mustEmbedUnimplementedBackoffice_ReportServer()
}

func RegisterBackoffice_ReportServer(s grpc.ServiceRegistrar, srv Backoffice_ReportServer) {
	// If the following call pancis, it indicates UnimplementedBackoffice_ReportServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Backoffice_Report_ServiceDesc, srv)
}

func _Backoffice_Report_GetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_ReportServer).GetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Report_GetSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_ReportServer).GetSummary(ctx, req.(*GetSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Report_ListDailySummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDailySummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_ReportServer).ListDailySummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Report_ListDailySummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_ReportServer).ListDailySummaries(ctx, req.(*ListDailySummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Report_GetGameDataSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameDataSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_ReportServer).GetGameDataSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Report_GetGameDataSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_ReportServer).GetGameDataSummary(ctx, req.(*GetGameDataSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Report_ListGameDataDailySummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameDataDailySummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_ReportServer).ListGameDataDailySummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Report_ListGameDataDailySummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_ReportServer).ListGameDataDailySummaries(ctx, req.(*ListGameDataDailySummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Report_GetPlayerGameDataSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerGameDataSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_ReportServer).GetPlayerGameDataSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Report_GetPlayerGameDataSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_ReportServer).GetPlayerGameDataSummary(ctx, req.(*GetPlayerGameDataSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Report_ListDepositDailySummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepositDailySummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_ReportServer).ListDepositDailySummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Report_ListDepositDailySummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_ReportServer).ListDepositDailySummaries(ctx, req.(*ListDepositDailySummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Report_ListDepositDailyDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepositDailyDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_ReportServer).ListDepositDailyDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Report_ListDepositDailyDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_ReportServer).ListDepositDailyDetails(ctx, req.(*ListDepositDailyDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Report_ListWithdrawDailySummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawDailySummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_ReportServer).ListWithdrawDailySummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Report_ListWithdrawDailySummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_ReportServer).ListWithdrawDailySummaries(ctx, req.(*ListWithdrawDailySummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backoffice_Report_ListWithdrawDailyDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWithdrawDailyDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Backoffice_ReportServer).ListWithdrawDailyDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backoffice_Report_ListWithdrawDailyDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Backoffice_ReportServer).ListWithdrawDailyDetails(ctx, req.(*ListWithdrawDailyDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Backoffice_Report_ServiceDesc is the grpc.ServiceDesc for Backoffice_Report service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backoffice_Report_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.Backoffice_Report",
	HandlerType: (*Backoffice_ReportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSummary",
			Handler:    _Backoffice_Report_GetSummary_Handler,
		},
		{
			MethodName: "ListDailySummaries",
			Handler:    _Backoffice_Report_ListDailySummaries_Handler,
		},
		{
			MethodName: "GetGameDataSummary",
			Handler:    _Backoffice_Report_GetGameDataSummary_Handler,
		},
		{
			MethodName: "ListGameDataDailySummaries",
			Handler:    _Backoffice_Report_ListGameDataDailySummaries_Handler,
		},
		{
			MethodName: "GetPlayerGameDataSummary",
			Handler:    _Backoffice_Report_GetPlayerGameDataSummary_Handler,
		},
		{
			MethodName: "ListDepositDailySummaries",
			Handler:    _Backoffice_Report_ListDepositDailySummaries_Handler,
		},
		{
			MethodName: "ListDepositDailyDetails",
			Handler:    _Backoffice_Report_ListDepositDailyDetails_Handler,
		},
		{
			MethodName: "ListWithdrawDailySummaries",
			Handler:    _Backoffice_Report_ListWithdrawDailySummaries_Handler,
		},
		{
			MethodName: "ListWithdrawDailyDetails",
			Handler:    _Backoffice_Report_ListWithdrawDailyDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_report.proto",
}
