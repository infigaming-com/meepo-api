syntax = "proto3";

package api.backoffice.service.v1;
import "google/api/annotations.proto";
import "common/common.proto";


option go_package = "github.com/infigaming-com/meepo-api/backoffice/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.backoffice.service.v1";

// VIP系统服务
service BackofficeVip {
  // ==================== VIP配置管理 ====================
  
  // VIP配置开关管理
  rpc GetVipConfig(GetVipConfigRequest) returns (GetVipConfigResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/config/get"
      body: "*"
    };
  }

  rpc UpdateVipConfig(UpdateVipConfigRequest) returns (UpdateVipConfigResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/config/update"
      body: "*"
    };
  }

  // VIP设置管理
  rpc GetVipSetting(GetVipSettingRequest) returns (GetVipSettingResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/setting/get"
      body: "*"
    };
  }

  rpc UpdateVipSetting(UpdateVipSettingRequest) returns (UpdateVipSettingResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/setting/update"
      body: "*"
    };
  }



  // ==================== VIP等级配置模板管理 ====================
  
  rpc ListVipLevelConfigTemplates(ListVipLevelConfigTemplatesRequest) returns (ListVipLevelConfigTemplatesResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/level-config-templates/list"
      body: "*"
    };
  }

  rpc GetVipLevelConfigTemplate(GetVipLevelConfigTemplateRequest) returns (GetVipLevelConfigTemplateResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/level-config-template/get"
      body: "*"
    };
  }

  rpc CreateVipLevelConfigTemplate(CreateVipLevelConfigTemplateRequest) returns (CreateVipLevelConfigTemplateResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/level-config-template/create"
      body: "*"
    };
  }

  rpc UpdateVipLevelConfigTemplate(UpdateVipLevelConfigTemplateRequest) returns (UpdateVipLevelConfigTemplateResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/level-config-template/update"
      body: "*"
    };
  }

  rpc DeleteVipLevelConfigTemplate(DeleteVipLevelConfigTemplateRequest) returns (DeleteVipLevelConfigTemplateResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/level-config-template/delete"
      body: "*"
    };
  }

  // ==================== VIP会员管理 ====================
  
  rpc ListVipMembers(ListVipMembersRequest) returns (ListVipMembersResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/members/list"
      body: "*"
    };
  }

  rpc GetVipMember(GetVipMemberRequest) returns (GetVipMemberResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/member/get"
      body: "*"
    };
  }

  rpc UpdateVipMember(UpdateVipMemberRequest) returns (UpdateVipMemberResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/member/update"
      body: "*"
    };
  }

  // ==================== XP账本管理 ====================
  
  rpc ListVipXpLedger(ListVipXpLedgerRequest) returns (ListVipXpLedgerResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/xp-ledger/list"
      body: "*"
    };
  }

  rpc GetVipXpLedger(GetVipXpLedgerRequest) returns (GetVipXpLedgerResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/xp-ledger/get"
      body: "*"
    };
  }

  rpc AddVipXpLedger(AddVipXpLedgerRequest) returns (AddVipXpLedgerResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/xp-ledger/add"
      body: "*"
    };
  }

  // ==================== 奖励账本管理 ====================
  
  rpc ListVipRewardLedger(ListVipRewardLedgerRequest) returns (ListVipRewardLedgerResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/reward-ledger/list"
      body: "*"
    };
  }

  rpc GetVipRewardLedger(GetVipRewardLedgerRequest) returns (GetVipRewardLedgerResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/reward-ledger/get"
      body: "*"
    };
  }

  rpc IssueVipReward(IssueVipRewardRequest) returns (IssueVipRewardResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/reward/issue"
      body: "*"
    };
  }

  rpc UpdateVipRewardStatus(UpdateVipRewardStatusRequest) returns (UpdateVipRewardStatusResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/reward/update-status"
      body: "*"
    };
  }

  // ==================== 结算状态管理 ====================
  
  rpc GetVipSettlementState(GetVipSettlementStateRequest) returns (GetVipSettlementStateResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/settlement-state/get"
      body: "*"
    };
  }

  rpc UpdateVipSettlementState(UpdateVipSettlementStateRequest) returns (UpdateVipSettlementStateResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/settlement-state/update"
      body: "*"
    };
  }

  // ==================== 统计和报表 ====================
  
  rpc GetVipStatistics(GetVipStatisticsRequest) returns (GetVipStatisticsResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/statistics/get"
      body: "*"
    };
  }

  rpc GetVipUserProgress(GetVipUserProgressRequest) returns (GetVipUserProgressResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/user-progress/get"
      body: "*"
    };
  }

  // ==================== 批量操作 ====================
  
  rpc BatchUpdateVipLevels(BatchUpdateVipLevelsRequest) returns (BatchUpdateVipLevelsResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/levels/batch-update"
      body: "*"
    };
  }

  rpc RecalculateVipLevels(RecalculateVipLevelsRequest) returns (RecalculateVipLevelsResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/levels/recalculate"
      body: "*"
    };
  }
}

// ==================== 枚举类型定义 ====================

enum VipDisplayRule {
  VIP_DISPLAY_RULE_UNSPECIFIED = 0;
  VIP_DISPLAY_RULE_CUMULATIVE = 1;  // cumulative
  VIP_DISPLAY_RULE_CURRENT = 2;     // current
}

enum VipRewardKind {
  VIP_REWARD_KIND_UNSPECIFIED = 0;
  VIP_REWARD_KIND_UPGRADE_BASE = 1;        // upgrade_base
  VIP_REWARD_KIND_UPGRADE_INCREMENTAL = 2; // upgrade_incremental
  VIP_REWARD_KIND_RAKEBACK_INSTANT = 3;    // rakeback_instant
  VIP_REWARD_KIND_RAKEBACK_DAILY = 4;      // rakeback_daily
  VIP_REWARD_KIND_RAKEBACK_WEEKLY = 5;     // rakeback_weekly
  VIP_REWARD_KIND_RAKEBACK_MONTHLY = 6;    // rakeback_monthly
}

enum VipPayoutType {
  VIP_PAYOUT_TYPE_UNSPECIFIED = 0;
  VIP_PAYOUT_TYPE_CASH = 1;   // cash
  VIP_PAYOUT_TYPE_BONUS = 2;  // bonus
}

enum VipResetPolicy {
  VIP_RESET_POLICY_UNSPECIFIED = 0;
  VIP_RESET_POLICY_NONE = 1;              // none
  VIP_RESET_POLICY_RESET_ON_UPGRADE = 2;  // reset_on_upgrade
  VIP_RESET_POLICY_RESET_NEXT_WEEK = 3;   // reset_next_week
  VIP_RESET_POLICY_RESET_NEXT_MONTH = 4;  // reset_next_month
}

enum VipRewardStatus {
  VIP_REWARD_STATUS_UNSPECIFIED = 0;
  VIP_REWARD_STATUS_PENDING = 1;   // pending
  VIP_REWARD_STATUS_ISSUED = 2;    // issued
  VIP_REWARD_STATUS_EXPIRED = 3;   // expired
  VIP_REWARD_STATUS_REVOKED = 4;   // revoked
}

// ==================== VIP配置 ====================

message VipConfig {
  int64 id = 1;
  int64 system_operator_id = 2;
  int64 retailer_operator_id = 3;
  int64 company_operator_id = 4;
  int64 operator_id = 5;
  bool enabled = 6;
  bool follow_parent_setting = 7;
  bool follow_parent_reward_expiry = 8;
  bool follow_parent_level_tpl = 9;
  int64 created_at = 10;
  int64 updated_at = 11;
}

message GetVipConfigRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
}

message GetVipConfigResponse {
  VipConfig config = 1;
}

message UpdateVipConfigRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  VipConfig config = 2;
}

message UpdateVipConfigResponse {
  bool success = 1;
}

// ==================== VIP设置 ====================

message VipSetting {
  int64 id = 1;
  int64 system_operator_id = 2;
  int64 retailer_operator_id = 3;
  int64 company_operator_id = 4;
  int64 operator_id = 5;
  
  string base_currency = 6;
  VipDisplayRule display_rule = 7;
  bool rewards_slider = 8;
  
  VipPayoutType upgrade_payout_type = 9;
  VipPayoutType rakeback_instant_payout_type = 10;
  VipPayoutType rakeback_daily_payout_type = 11;
  VipPayoutType weekly_reward_payout_type = 12;
  VipPayoutType monthly_reward_payout_type = 13;
  
  double deposit_xp_rate = 14;
  double wagering_xp_rate = 15;
  double max_house_edge_limit_percent = 16;
  double standard_xp_multiplier = 17;
  
  string timezone = 18;
  string daily_issue_at = 19;
  int32 weekly_issue_dow = 20;
  string weekly_issue_at = 21;
  int32 monthly_issue_dom = 22;
  string monthly_issue_at = 23;
  
  int64 created_at = 24;
  int64 updated_at = 25;
}

message GetVipSettingRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
}

message GetVipSettingResponse {
  VipSetting setting = 1;
}

message UpdateVipSettingRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  VipSetting setting = 2;
}

message UpdateVipSettingResponse {
  bool success = 1;
}

// ==================== 奖励过期配置 ====================

message VipRewardExpiry {
  int64 id = 1;
  int64 system_operator_id = 2;
  int64 retailer_operator_id = 3;
  int64 company_operator_id = 4;
  int64 operator_id = 5;
  int64 vip_setting_id = 6;
  VipRewardKind reward_kind = 7;
  
  int32 expiry_days = 8;
  int32 expiry_hours = 9;
  bool never_expire = 10;
  VipResetPolicy reset_policy = 11;
  
  int64 created_at = 12;
  int64 updated_at = 13;
}

message GetVipRewardExpiryRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  VipRewardKind reward_kind = 2;
}

message GetVipRewardExpiryResponse {
  VipRewardExpiry expiry = 1;
}

message UpdateVipRewardExpiryRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  VipRewardExpiry expiry = 2;
}

message UpdateVipRewardExpiryResponse {
  bool success = 1;
}

// ==================== VIP等级配置模板 ====================

message VipLevelConfigTemplate {
  int64 id = 1;
  int64 system_operator_id = 2;
  int64 retailer_operator_id = 3;
  int64 company_operator_id = 4;
  int64 operator_id = 5;
  
  string name = 6;
  int64 start_level = 7;
  int64 end_level = 8;
  
  // 升级设置
  double base_level_upgrade_xp = 9;
  double incr_level_upgrade_xp = 10;
  double base_upgrade_reward_amt = 11;
  double incr_upgrade_reward_amt = 12;
  double upgrade_reward_wagering_x = 13;
  
  // 等级维护要求
  double weekly_xp_loss = 14;
  double monthly_xp_loss = 15;
  
  // 即时返水
  bool rakeback_instant_enabled = 16;
  double rakeback_instant_rate = 17;
  double rakeback_instant_req = 18;
  
  // 每日返水
  bool rakeback_daily_enabled = 19;
  double rakeback_daily_rate = 20;
  double rakeback_daily_req = 21;
  
  // 每周奖励
  bool weekly_reward_enabled = 22;
  double weekly_fixed_reward_amt = 23;
  double weekly_turnover_rate = 24;
  double weekly_net_loss_amt = 25;
  double weekly_adjust_range_pct = 26;
  int32 weekly_active_days_reward = 27;
  double weekly_wagering_req = 28;
  
  int64 created_at = 29;
  int64 updated_at = 30;
}

message ListVipLevelConfigTemplatesRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  int32 page = 2;
  int32 page_size = 3;
  string search = 4;
  int64 start_level = 5;
  int64 end_level = 6;
}

message ListVipLevelConfigTemplatesResponse {
  repeated VipLevelConfigTemplate templates = 1;
  int32 total = 2;
  int32 page = 3;
  int32 page_size = 4;
}

message GetVipLevelConfigTemplateRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  int64 template_id = 2;
}

message GetVipLevelConfigTemplateResponse {
  VipLevelConfigTemplate template = 1;
}

message CreateVipLevelConfigTemplateRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  VipLevelConfigTemplate template = 2;
}

message CreateVipLevelConfigTemplateResponse {
  int64 template_id = 1;
  bool success = 2;
}

message UpdateVipLevelConfigTemplateRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  VipLevelConfigTemplate template = 2;
}

message UpdateVipLevelConfigTemplateResponse {
  bool success = 1;
}

message DeleteVipLevelConfigTemplateRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  int64 template_id = 2;
}

message DeleteVipLevelConfigTemplateResponse {
  bool success = 1;
}

// ==================== VIP会员 ====================

message VipMember {
  int64 id = 1;
  int64 system_operator_id = 2;
  int64 retailer_operator_id = 3;
  int64 company_operator_id = 4;
  int64 operator_id = 5;
  int64 user_id = 6;
  
  int64 current_level_id = 7;
  double current_xp = 8;
  double total_xp = 9;
  int64 last_level_up_at = 10;
  int64 last_instant_upgrade_at = 11;
  
  int64 created_at = 12;
  int64 updated_at = 13;
  
  // 扩展字段
  string username = 14;
  string current_level_name = 15;
  double next_level_xp = 16;
  double total_deposit = 17;
  double total_wagering = 18;
}

message ListVipMembersRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  int32 page = 2;
  int32 page_size = 3;
  string search = 4;
  int64 current_level_id = 5;
  double min_xp = 6;
  double max_xp = 7;
  int64 user_id = 8;
}

message ListVipMembersResponse {
  repeated VipMember members = 1;
  int32 total = 2;
  int32 page = 3;
  int32 page_size = 4;
}

message GetVipMemberRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  int64 user_id = 2;
}

message GetVipMemberResponse {
  VipMember member = 1;
}

message UpdateVipMemberRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  VipMember member = 2;
}

message UpdateVipMemberResponse {
  bool success = 1;
}

// ==================== XP账本 ====================

message VipXpLedger {
  int64 id = 1;
  int64 system_operator_id = 2;
  int64 retailer_operator_id = 3;
  int64 company_operator_id = 4;
  int64 operator_id = 5;
  int64 user_id = 6;
  
  string source_type = 7;  // deposit/wagering/adjust
  double base_amount = 8;
  string currency = 9;
  double xp_earned = 10;
  double applied_rate = 11;
  double house_edge_used = 12;
  double std_xp_multiplier = 13;
  
  int64 event_ts = 14;
  int64 created_at = 15;
  
  // 扩展字段
  string username = 16;
  string source_type_name = 17;
}

message ListVipXpLedgerRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  int32 page = 2;
  int32 page_size = 3;
  int64 user_id = 4;
  string source_type = 5;
  int64 start_time = 6;
  int64 end_time = 7;
}

message ListVipXpLedgerResponse {
  repeated VipXpLedger entries = 1;
  int32 total = 2;
  int32 page = 3;
  int32 page_size = 4;
}

message GetVipXpLedgerRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  int64 entry_id = 2;
}

message GetVipXpLedgerResponse {
  VipXpLedger entry = 1;
}

message AddVipXpLedgerRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  VipXpLedger entry = 2;
}

message AddVipXpLedgerResponse {
  int64 entry_id = 1;
  bool success = 2;
}

// ==================== 奖励账本 ====================

message VipRewardLedger {
  int64 id = 1;
  int64 system_operator_id = 2;
  int64 retailer_operator_id = 3;
  int64 company_operator_id = 4;
  int64 operator_id = 5;
  int64 user_id = 6;
  int64 level_id = 7;
  
  VipRewardKind reward_type = 8;
  VipPayoutType payout_type = 9;
  double amount = 10;
  string currency = 11;
  
  double claim_amount = 12;
  string claim_currency = 13;
  
  VipRewardStatus status = 14;
  int64 issue_at = 15;
  int64 expire_at = 16;
  
  int64 created_at = 17;
  int64 updated_at = 18;
  
  // 扩展字段
  string username = 19;
  string level_name = 20;
  string reward_type_name = 21;
  string payout_type_name = 22;
}

message ListVipRewardLedgerRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  int32 page = 2;
  int32 page_size = 3;
  int64 user_id = 4;
  int64 level_id = 5;
  VipRewardKind reward_type = 6;
  VipRewardStatus status = 7;
  int64 start_time = 8;
  int64 end_time = 9;
}

message ListVipRewardLedgerResponse {
  repeated VipRewardLedger entries = 1;
  int32 total = 2;
  int32 page = 3;
  int32 page_size = 4;
}

message GetVipRewardLedgerRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  int64 entry_id = 2;
}

message GetVipRewardLedgerResponse {
  VipRewardLedger entry = 1;
}

message IssueVipRewardRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  int64 user_id = 2;
  int64 level_id = 3;
  VipRewardKind reward_type = 4;
  VipPayoutType payout_type = 5;
  double amount = 6;
  string currency = 7;
  double claim_amount = 8;
  string claim_currency = 9;
  int64 expire_at = 10;
}

message IssueVipRewardResponse {
  int64 entry_id = 1;
  bool success = 2;
}

message UpdateVipRewardStatusRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  int64 entry_id = 2;
  VipRewardStatus status = 3;
  int64 issue_at = 4;
}

message UpdateVipRewardStatusResponse {
  bool success = 1;
}

// ==================== 结算状态 ====================

message VipSettlementState {
  int64 id = 1;
  int64 system_operator_id = 2;
  int64 retailer_operator_id = 3;
  int64 company_operator_id = 4;
  int64 operator_id = 5;
  
  int64 daily_last_run_at = 6;
  int64 weekly_last_run_at = 7;
  int64 monthly_last_run_at = 8;
  
  int64 created_at = 9;
  int64 updated_at = 10;
}

message GetVipSettlementStateRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
}

message GetVipSettlementStateResponse {
  VipSettlementState state = 1;
}

message UpdateVipSettlementStateRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  VipSettlementState state = 2;
}

message UpdateVipSettlementStateResponse {
  bool success = 1;
}

// ==================== 统计和报表 ====================

message VipStatistics {
  int64 total_members = 1;
  int64 active_members = 2;
  double total_xp_earned = 3;
  double total_rewards_issued = 4;
  double total_rewards_pending = 5;
  repeated VipLevelStatistics level_stats = 6;
}

message VipLevelStatistics {
  int64 level_id = 1;
  string level_name = 2;
  int64 member_count = 3;
  double avg_xp = 4;
  double total_rewards = 5;
}

message GetVipStatisticsRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  int64 start_time = 2;
  int64 end_time = 3;
}

message GetVipStatisticsResponse {
  VipStatistics statistics = 1;
}

message VipUserProgress {
  int64 user_id = 1;
  string username = 2;
  int64 current_level_id = 3;
  string current_level_name = 4;
  double current_xp = 5;
  double total_xp = 6;
  double next_level_xp = 7;
  double progress_percentage = 8;
  repeated VipXpLedger recent_xp_entries = 9;
  repeated VipRewardLedger recent_rewards = 10;
}

message GetVipUserProgressRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  int64 user_id = 2;
}

message GetVipUserProgressResponse {
  VipUserProgress progress = 1;
}

// ==================== 批量操作 ====================

message BatchUpdateVipLevelsRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  repeated VipLevelConfigTemplate templates = 2;
}

message BatchUpdateVipLevelsResponse {
  int32 updated_count = 1;
  bool success = 2;
}

message RecalculateVipLevelsRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  repeated int64 user_ids = 2;
  bool recalculate_all = 3;
}

message RecalculateVipLevelsResponse {
  int32 recalculated_count = 1;
  bool success = 2;
}
