syntax = "proto3";

package api.backoffice.service.v1;
import "google/api/annotations.proto";
import "common/common.proto";


option go_package = "github.com/infigaming-com/meepo-api/backoffice/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.backoffice.service.v1";

// VIP系统服务
service BackofficeVip {
  // VIP设置管理
  rpc GetVipSetting(GetVipSettingRequest) returns (GetVipSettingResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/setting/get"
      body: "*"
    };
  }

  rpc UpdateVipSetting(UpdateVipSettingRequest) returns (UpdateVipSettingResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/setting/update"
      body: "*"
    };
  }

  // ==================== VIP等级配置模板管理 ====================
  
  rpc ListVipLevelConfigTemplates(ListVipLevelConfigTemplatesRequest) returns (ListVipLevelConfigTemplatesResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/level-config-templates/list"
      body: "*"
    };
  }

  rpc GetVipLevelConfigTemplate(GetVipLevelConfigTemplateRequest) returns (GetVipLevelConfigTemplateResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/level-config-template/get"
      body: "*"
    };
  }

  rpc CreateVipLevelConfigTemplate(CreateVipLevelConfigTemplateRequest) returns (CreateVipLevelConfigTemplateResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/level-config-template/create"
      body: "*"
    };
  }

  rpc UpdateVipLevelConfigTemplate(UpdateVipLevelConfigTemplateRequest) returns (UpdateVipLevelConfigTemplateResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/level-config-template/update"
      body: "*"
    };
  }

  rpc DeleteVipLevelConfigTemplate(DeleteVipLevelConfigTemplateRequest) returns (DeleteVipLevelConfigTemplateResponse) {
    option (google.api.http) = {
      post: "/v1/backoffice/vip/level-config-template/delete"
      body: "*"
    };
  }

}

enum VipDisplayRule {
  VIP_DISPLAY_RULE_UNSPECIFIED = 0;
  VIP_DISPLAY_RULE_CUMULATIVE = 1;  // cumulative
  VIP_DISPLAY_RULE_CURRENT = 2;     // current
}

enum VipRewardKind {
  VIP_REWARD_KIND_UNSPECIFIED = 0;
  VIP_REWARD_KIND_UPGRADE_BASE = 1;        // upgrade_base
  VIP_REWARD_KIND_UPGRADE_INCREMENTAL = 2; // upgrade_incremental
  VIP_REWARD_KIND_RAKEBACK_INSTANT = 3;    // rakeback_instant
  VIP_REWARD_KIND_RAKEBACK_DAILY = 4;      // rakeback_daily
  VIP_REWARD_KIND_RAKEBACK_WEEKLY = 5;     // rakeback_weekly
  VIP_REWARD_KIND_RAKEBACK_MONTHLY = 6;    // rakeback_monthly
}

enum VipPayoutType {
  VIP_PAYOUT_TYPE_UNSPECIFIED = 0;
  VIP_PAYOUT_TYPE_CASH = 1;   // cash
  VIP_PAYOUT_TYPE_BONUS = 2;  // bonus
}

enum VipResetPolicy {
  VIP_RESET_POLICY_UNSPECIFIED = 0;
  VIP_RESET_POLICY_NONE = 1;              // none
  VIP_RESET_POLICY_RESET_ON_UPGRADE = 2;  // reset_on_upgrade
  VIP_RESET_POLICY_RESET_NEXT_WEEK = 3;   // reset_next_week
  VIP_RESET_POLICY_RESET_NEXT_MONTH = 4;  // reset_next_month
}

enum VipRewardStatus {
  VIP_REWARD_STATUS_UNSPECIFIED = 0;
  VIP_REWARD_STATUS_PENDING = 1;   // pending
  VIP_REWARD_STATUS_ISSUED = 2;    // issued
  VIP_REWARD_STATUS_EXPIRED = 3;   // expired
  VIP_REWARD_STATUS_REVOKED = 4;   // revoked
}

// ==================== VIP设置 ====================

message VipSetting {
  int64 id = 1;
  int64 system_operator_id = 2;
  int64 retailer_operator_id = 3;
  int64 company_operator_id = 4;
  int64 operator_id = 5;
  
  string base_currency = 6;
  VipDisplayRule display_rule = 7;
  bool rewards_slider = 8;
  
  VipPayoutType upgrade_payout_type = 9;
  VipPayoutType rakeback_instant_payout_type = 10;
  VipPayoutType rakeback_daily_payout_type = 11;
  VipPayoutType weekly_reward_payout_type = 12;
  VipPayoutType monthly_reward_payout_type = 13;
  
  double deposit_xp_rate = 14;
  double wagering_xp_rate = 15;
  double max_house_edge_limit_percent = 16;
  double standard_xp_multiplier = 17;
  
  string timezone = 18;
  string daily_issue_at = 19;
  int32 weekly_issue_dow = 20;
  string weekly_issue_at = 21;
  int32 monthly_issue_dom = 22;
  string monthly_issue_at = 23;
  
  int64 created_at = 24;
  int64 updated_at = 25;
}

message GetVipSettingRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
}

message GetVipSettingResponse {
  VipSetting setting = 1;
}

message UpdateVipSettingRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  VipSetting setting = 2;
}

message UpdateVipSettingResponse {
}


message VipLevelConfigTemplate {
  int64 id = 1;
  int64 system_operator_id = 2;
  int64 retailer_operator_id = 3;
  int64 company_operator_id = 4;
  int64 operator_id = 5;
  
  string name = 6;
  int64 start_level = 7;
  int64 end_level = 8;
  
  // 升级设置
  double base_level_upgrade_xp = 9;
  double incr_level_upgrade_xp = 10;
  double base_upgrade_reward_amt = 11;
  double incr_upgrade_reward_amt = 12;
  double upgrade_reward_wagering_x = 13;
  
  // 等级维护要求
  double weekly_xp_loss = 14;
  double monthly_xp_loss = 15;
  
  // 即时返水
  bool rakeback_instant_enabled = 16;
  double rakeback_instant_rate = 17;
  double rakeback_instant_req = 18;
  
  // 每日返水
  bool rakeback_daily_enabled = 19;
  double rakeback_daily_rate = 20;
  double rakeback_daily_req = 21;
  
  // 每周奖励
  bool weekly_reward_enabled = 22;
  double weekly_fixed_reward_amt = 23;
  double weekly_turnover_rate = 24;
  double weekly_net_loss_amt = 25;
  double weekly_adjust_range_pct = 26;
  int32 weekly_active_days_reward = 27;
  double weekly_wagering_req = 28;
  
  int64 created_at = 29;
  int64 updated_at = 30;
}

message ListVipLevelConfigTemplatesRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  int32 page = 2;
  int32 page_size = 3;
  string search = 4;
  int64 start_level = 5;
  int64 end_level = 6;
}

message ListVipLevelConfigTemplatesResponse {
  repeated VipLevelConfigTemplate templates = 1;
  int32 total = 2;
  int32 page = 3;
  int32 page_size = 4;
}

message GetVipLevelConfigTemplateRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  int64 template_id = 2;
}

message GetVipLevelConfigTemplateResponse {
  VipLevelConfigTemplate template = 1;
}

message CreateVipLevelConfigTemplateRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  VipLevelConfigTemplate template = 2;
}

message CreateVipLevelConfigTemplateResponse {
}

message UpdateVipLevelConfigTemplateRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  VipLevelConfigTemplate template = 2;
}

message UpdateVipLevelConfigTemplateResponse {
}

message DeleteVipLevelConfigTemplateRequest {
  api.common.OperatorContextFilters operator_context_filters = 1;
  int64 template_id = 2;
}

message DeleteVipLevelConfigTemplateResponse {
}