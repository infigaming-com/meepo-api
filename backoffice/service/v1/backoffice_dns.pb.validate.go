// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_dns.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListOperatorDomainsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOperatorDomainsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOperatorDomainsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOperatorDomainsRequestMultiError, or nil if none found.
func (m *ListOperatorDomainsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOperatorDomainsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperatorContextFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListOperatorDomainsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListOperatorDomainsRequestValidationError{
					field:  "OperatorContextFilters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatorContextFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOperatorDomainsRequestValidationError{
				field:  "OperatorContextFilters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if len(errors) > 0 {
		return ListOperatorDomainsRequestMultiError(errors)
	}

	return nil
}

// ListOperatorDomainsRequestMultiError is an error wrapping multiple
// validation errors returned by ListOperatorDomainsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListOperatorDomainsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOperatorDomainsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOperatorDomainsRequestMultiError) AllErrors() []error { return m }

// ListOperatorDomainsRequestValidationError is the validation error returned
// by ListOperatorDomainsRequest.Validate if the designated constraints aren't met.
type ListOperatorDomainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperatorDomainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperatorDomainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperatorDomainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperatorDomainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperatorDomainsRequestValidationError) ErrorName() string {
	return "ListOperatorDomainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperatorDomainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperatorDomainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperatorDomainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperatorDomainsRequestValidationError{}

// Validate checks the field values on ListOperatorByoDomainsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOperatorByoDomainsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOperatorByoDomainsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOperatorByoDomainsRequestMultiError, or nil if none found.
func (m *ListOperatorByoDomainsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOperatorByoDomainsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListOperatorByoDomainsRequestMultiError(errors)
	}

	return nil
}

// ListOperatorByoDomainsRequestMultiError is an error wrapping multiple
// validation errors returned by ListOperatorByoDomainsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListOperatorByoDomainsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOperatorByoDomainsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOperatorByoDomainsRequestMultiError) AllErrors() []error { return m }

// ListOperatorByoDomainsRequestValidationError is the validation error
// returned by ListOperatorByoDomainsRequest.Validate if the designated
// constraints aren't met.
type ListOperatorByoDomainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperatorByoDomainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperatorByoDomainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperatorByoDomainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperatorByoDomainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperatorByoDomainsRequestValidationError) ErrorName() string {
	return "ListOperatorByoDomainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperatorByoDomainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperatorByoDomainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperatorByoDomainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperatorByoDomainsRequestValidationError{}

// Validate checks the field values on AddOperatorByoDomainRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOperatorByoDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOperatorByoDomainRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOperatorByoDomainRequestMultiError, or nil if none found.
func (m *AddOperatorByoDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOperatorByoDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ByoDomain

	// no validation rules for Domain

	// no validation rules for AcmeChallengeType

	if len(errors) > 0 {
		return AddOperatorByoDomainRequestMultiError(errors)
	}

	return nil
}

// AddOperatorByoDomainRequestMultiError is an error wrapping multiple
// validation errors returned by AddOperatorByoDomainRequest.ValidateAll() if
// the designated constraints aren't met.
type AddOperatorByoDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOperatorByoDomainRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOperatorByoDomainRequestMultiError) AllErrors() []error { return m }

// AddOperatorByoDomainRequestValidationError is the validation error returned
// by AddOperatorByoDomainRequest.Validate if the designated constraints
// aren't met.
type AddOperatorByoDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOperatorByoDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOperatorByoDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOperatorByoDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOperatorByoDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOperatorByoDomainRequestValidationError) ErrorName() string {
	return "AddOperatorByoDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOperatorByoDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOperatorByoDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOperatorByoDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOperatorByoDomainRequestValidationError{}

// Validate checks the field values on DeleteOperatorByoDomainRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOperatorByoDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOperatorByoDomainRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOperatorByoDomainRequestMultiError, or nil if none found.
func (m *DeleteOperatorByoDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOperatorByoDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ByoDomain

	if len(errors) > 0 {
		return DeleteOperatorByoDomainRequestMultiError(errors)
	}

	return nil
}

// DeleteOperatorByoDomainRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteOperatorByoDomainRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteOperatorByoDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOperatorByoDomainRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOperatorByoDomainRequestMultiError) AllErrors() []error { return m }

// DeleteOperatorByoDomainRequestValidationError is the validation error
// returned by DeleteOperatorByoDomainRequest.Validate if the designated
// constraints aren't met.
type DeleteOperatorByoDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOperatorByoDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOperatorByoDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOperatorByoDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOperatorByoDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOperatorByoDomainRequestValidationError) ErrorName() string {
	return "DeleteOperatorByoDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOperatorByoDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOperatorByoDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOperatorByoDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOperatorByoDomainRequestValidationError{}
