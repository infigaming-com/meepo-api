// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_payment.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/infigaming-com/meepo-api/payment/service/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficePaymentCreatePaymentChannel = "/api.backoffice.service.v1.BackofficePayment/CreatePaymentChannel"
const OperationBackofficePaymentCreatePaymentMethod = "/api.backoffice.service.v1.BackofficePayment/CreatePaymentMethod"
const OperationBackofficePaymentDisablePaymentChannel = "/api.backoffice.service.v1.BackofficePayment/DisablePaymentChannel"
const OperationBackofficePaymentGetCustodyAddress = "/api.backoffice.service.v1.BackofficePayment/GetCustodyAddress"
const OperationBackofficePaymentGetPaymentMethodList = "/api.backoffice.service.v1.BackofficePayment/GetPaymentMethodList"
const OperationBackofficePaymentGetPaymentTransactionById = "/api.backoffice.service.v1.BackofficePayment/GetPaymentTransactionById"
const OperationBackofficePaymentGetPaymentTransactionPage = "/api.backoffice.service.v1.BackofficePayment/GetPaymentTransactionPage"
const OperationBackofficePaymentGetSupportedPaymentMethodList = "/api.backoffice.service.v1.BackofficePayment/GetSupportedPaymentMethodList"

type BackofficePaymentHTTPServer interface {
	// CreatePaymentChannel Create payment channel
	// Creates a new payment channel with specified configuration
	// Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
	CreatePaymentChannel(context.Context, *CreatePaymentChannelRequest) (*CreatePaymentChannelResponse, error)
	// CreatePaymentMethod Create payment channel
	// Creates a new payment channel with specified configuration
	// Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
	CreatePaymentMethod(context.Context, *CreatePaymentMethodRequest) (*CreatePaymentMethodResponse, error)
	// DisablePaymentChannel Create payment channel
	// Creates a new payment channel with specified configuration
	// Error code: CREATE_PAYMENT_CHANNEL_FAILED(50002) - Failed to create payment channel
	DisablePaymentChannel(context.Context, *DisablePaymentChannelRequest) (*DisablePaymentChannelResponse, error)
	GetCustodyAddress(context.Context, *GetCustodyAddressRequest) (*GetCustodyAddressResponse, error)
	// GetPaymentMethodList Get list of payment methods
	// Retrieves all available payment methods supported by the system
	// Error code: GET_PAYMENT_METHOD_LIST_FAILED(50001) - Failed to get payment method list
	GetPaymentMethodList(context.Context, *GetPaymentMethodListRequest) (*GetPaymentMethodListResponse, error)
	// GetPaymentTransactionById Get transaction detail
	// Retrieves detailed information about a specific transaction
	// Error code: GET_TRANSACTION_DETAIL_FAILED(50009) - Failed to get transaction detail
	GetPaymentTransactionById(context.Context, *GetPaymentTransactionByIdRequest) (*GetPaymentTransactionByIdResponse, error)
	// GetPaymentTransactionPage Get payment transaction page
	// Retrieves a paginated list of payment transactions with optional filtering
	GetPaymentTransactionPage(context.Context, *v1.GetTransactionPageRequest) (*v1.GetTransactionPageResponse, error)
	// GetSupportedPaymentMethodList Get list of payment methods
	// Retrieves all available payment methods supported by the system
	// Error code: GET_PAYMENT_METHOD_LIST_FAILED(50001) - Failed to get payment method list
	GetSupportedPaymentMethodList(context.Context, *GetSupportedPaymentMethodListRequest) (*GetSupportedPaymentMethodListResponse, error)
}

func RegisterBackofficePaymentHTTPServer(s *http.Server, srv BackofficePaymentHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/payment/transaction/page", _BackofficePayment_GetPaymentTransactionPage0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/payment/transaction/detail", _BackofficePayment_GetPaymentTransactionById0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/payment/supportedmethod/list", _BackofficePayment_GetSupportedPaymentMethodList1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/payment/method/list", _BackofficePayment_GetPaymentMethodList1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/payment/method/create", _BackofficePayment_CreatePaymentMethod1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/payment/channel/update", _BackofficePayment_DisablePaymentChannel1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/payment/channel/create", _BackofficePayment_CreatePaymentChannel1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/payment/custody/address/get", _BackofficePayment_GetCustodyAddress0_HTTP_Handler(srv))
}

func _BackofficePayment_GetPaymentTransactionPage0_HTTP_Handler(srv BackofficePaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetTransactionPageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficePaymentGetPaymentTransactionPage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPaymentTransactionPage(ctx, req.(*v1.GetTransactionPageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetTransactionPageResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficePayment_GetPaymentTransactionById0_HTTP_Handler(srv BackofficePaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPaymentTransactionByIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficePaymentGetPaymentTransactionById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPaymentTransactionById(ctx, req.(*GetPaymentTransactionByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPaymentTransactionByIdResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficePayment_GetSupportedPaymentMethodList1_HTTP_Handler(srv BackofficePaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSupportedPaymentMethodListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficePaymentGetSupportedPaymentMethodList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSupportedPaymentMethodList(ctx, req.(*GetSupportedPaymentMethodListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSupportedPaymentMethodListResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficePayment_GetPaymentMethodList1_HTTP_Handler(srv BackofficePaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPaymentMethodListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficePaymentGetPaymentMethodList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPaymentMethodList(ctx, req.(*GetPaymentMethodListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPaymentMethodListResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficePayment_CreatePaymentMethod1_HTTP_Handler(srv BackofficePaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePaymentMethodRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficePaymentCreatePaymentMethod)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePaymentMethod(ctx, req.(*CreatePaymentMethodRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePaymentMethodResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficePayment_DisablePaymentChannel1_HTTP_Handler(srv BackofficePaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DisablePaymentChannelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficePaymentDisablePaymentChannel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DisablePaymentChannel(ctx, req.(*DisablePaymentChannelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DisablePaymentChannelResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficePayment_CreatePaymentChannel1_HTTP_Handler(srv BackofficePaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePaymentChannelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficePaymentCreatePaymentChannel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePaymentChannel(ctx, req.(*CreatePaymentChannelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePaymentChannelResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficePayment_GetCustodyAddress0_HTTP_Handler(srv BackofficePaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCustodyAddressRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficePaymentGetCustodyAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCustodyAddress(ctx, req.(*GetCustodyAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCustodyAddressResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficePaymentHTTPClient interface {
	CreatePaymentChannel(ctx context.Context, req *CreatePaymentChannelRequest, opts ...http.CallOption) (rsp *CreatePaymentChannelResponse, err error)
	CreatePaymentMethod(ctx context.Context, req *CreatePaymentMethodRequest, opts ...http.CallOption) (rsp *CreatePaymentMethodResponse, err error)
	DisablePaymentChannel(ctx context.Context, req *DisablePaymentChannelRequest, opts ...http.CallOption) (rsp *DisablePaymentChannelResponse, err error)
	GetCustodyAddress(ctx context.Context, req *GetCustodyAddressRequest, opts ...http.CallOption) (rsp *GetCustodyAddressResponse, err error)
	GetPaymentMethodList(ctx context.Context, req *GetPaymentMethodListRequest, opts ...http.CallOption) (rsp *GetPaymentMethodListResponse, err error)
	GetPaymentTransactionById(ctx context.Context, req *GetPaymentTransactionByIdRequest, opts ...http.CallOption) (rsp *GetPaymentTransactionByIdResponse, err error)
	GetPaymentTransactionPage(ctx context.Context, req *v1.GetTransactionPageRequest, opts ...http.CallOption) (rsp *v1.GetTransactionPageResponse, err error)
	GetSupportedPaymentMethodList(ctx context.Context, req *GetSupportedPaymentMethodListRequest, opts ...http.CallOption) (rsp *GetSupportedPaymentMethodListResponse, err error)
}

type BackofficePaymentHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficePaymentHTTPClient(client *http.Client) BackofficePaymentHTTPClient {
	return &BackofficePaymentHTTPClientImpl{client}
}

func (c *BackofficePaymentHTTPClientImpl) CreatePaymentChannel(ctx context.Context, in *CreatePaymentChannelRequest, opts ...http.CallOption) (*CreatePaymentChannelResponse, error) {
	var out CreatePaymentChannelResponse
	pattern := "/v1/backoffice/payment/channel/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficePaymentCreatePaymentChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficePaymentHTTPClientImpl) CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, opts ...http.CallOption) (*CreatePaymentMethodResponse, error) {
	var out CreatePaymentMethodResponse
	pattern := "/v1/backoffice/payment/method/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficePaymentCreatePaymentMethod))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficePaymentHTTPClientImpl) DisablePaymentChannel(ctx context.Context, in *DisablePaymentChannelRequest, opts ...http.CallOption) (*DisablePaymentChannelResponse, error) {
	var out DisablePaymentChannelResponse
	pattern := "/v1/backoffice/payment/channel/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficePaymentDisablePaymentChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficePaymentHTTPClientImpl) GetCustodyAddress(ctx context.Context, in *GetCustodyAddressRequest, opts ...http.CallOption) (*GetCustodyAddressResponse, error) {
	var out GetCustodyAddressResponse
	pattern := "/v1/backoffice/payment/custody/address/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficePaymentGetCustodyAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficePaymentHTTPClientImpl) GetPaymentMethodList(ctx context.Context, in *GetPaymentMethodListRequest, opts ...http.CallOption) (*GetPaymentMethodListResponse, error) {
	var out GetPaymentMethodListResponse
	pattern := "/v1/backoffice/payment/method/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficePaymentGetPaymentMethodList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficePaymentHTTPClientImpl) GetPaymentTransactionById(ctx context.Context, in *GetPaymentTransactionByIdRequest, opts ...http.CallOption) (*GetPaymentTransactionByIdResponse, error) {
	var out GetPaymentTransactionByIdResponse
	pattern := "/v1/backoffice/payment/transaction/detail"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficePaymentGetPaymentTransactionById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficePaymentHTTPClientImpl) GetPaymentTransactionPage(ctx context.Context, in *v1.GetTransactionPageRequest, opts ...http.CallOption) (*v1.GetTransactionPageResponse, error) {
	var out v1.GetTransactionPageResponse
	pattern := "/v1/backoffice/payment/transaction/page"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficePaymentGetPaymentTransactionPage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficePaymentHTTPClientImpl) GetSupportedPaymentMethodList(ctx context.Context, in *GetSupportedPaymentMethodListRequest, opts ...http.CallOption) (*GetSupportedPaymentMethodListResponse, error) {
	var out GetSupportedPaymentMethodListResponse
	pattern := "/v1/backoffice/payment/supportedmethod/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficePaymentGetSupportedPaymentMethodList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
