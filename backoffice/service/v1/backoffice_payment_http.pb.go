// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_payment.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/infigaming-com/meepo-api/payment/service/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficePaymentGetPaymentTransactionPage = "/api.backoffice.service.v1.BackofficePayment/GetPaymentTransactionPage"

type BackofficePaymentHTTPServer interface {
	// GetPaymentTransactionPage Get payment transaction page
	// Retrieves a paginated list of payment transactions with optional filtering
	GetPaymentTransactionPage(context.Context, *v1.GetTransactionPageRequest) (*v1.GetTransactionPageResponse, error)
}

func RegisterBackofficePaymentHTTPServer(s *http.Server, srv BackofficePaymentHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/payment/transaction/page", _BackofficePayment_GetPaymentTransactionPage0_HTTP_Handler(srv))
}

func _BackofficePayment_GetPaymentTransactionPage0_HTTP_Handler(srv BackofficePaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetTransactionPageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficePaymentGetPaymentTransactionPage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPaymentTransactionPage(ctx, req.(*v1.GetTransactionPageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetTransactionPageResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficePaymentHTTPClient interface {
	GetPaymentTransactionPage(ctx context.Context, req *v1.GetTransactionPageRequest, opts ...http.CallOption) (rsp *v1.GetTransactionPageResponse, err error)
}

type BackofficePaymentHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficePaymentHTTPClient(client *http.Client) BackofficePaymentHTTPClient {
	return &BackofficePaymentHTTPClientImpl{client}
}

func (c *BackofficePaymentHTTPClientImpl) GetPaymentTransactionPage(ctx context.Context, in *v1.GetTransactionPageRequest, opts ...http.CallOption) (*v1.GetTransactionPageResponse, error) {
	var out v1.GetTransactionPageResponse
	pattern := "/v1/backoffice/payment/transaction/page"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficePaymentGetPaymentTransactionPage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
