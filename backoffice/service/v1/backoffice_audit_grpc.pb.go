// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_audit.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackofficeAudit_ListAuditLogs_FullMethodName    = "/api.backoffice.service.v1.BackofficeAudit/ListAuditLogs"
	BackofficeAudit_ListAuditActions_FullMethodName = "/api.backoffice.service.v1.BackofficeAudit/ListAuditActions"
)

// BackofficeAuditClient is the client API for BackofficeAudit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackofficeAuditClient interface {
	ListAuditLogs(ctx context.Context, in *ListAuditLogsRequest, opts ...grpc.CallOption) (*ListAuditLogsResponse, error)
	ListAuditActions(ctx context.Context, in *ListAuditActionsRequest, opts ...grpc.CallOption) (*ListAuditActionsResponse, error)
}

type backofficeAuditClient struct {
	cc grpc.ClientConnInterface
}

func NewBackofficeAuditClient(cc grpc.ClientConnInterface) BackofficeAuditClient {
	return &backofficeAuditClient{cc}
}

func (c *backofficeAuditClient) ListAuditLogs(ctx context.Context, in *ListAuditLogsRequest, opts ...grpc.CallOption) (*ListAuditLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAuditLogsResponse)
	err := c.cc.Invoke(ctx, BackofficeAudit_ListAuditLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backofficeAuditClient) ListAuditActions(ctx context.Context, in *ListAuditActionsRequest, opts ...grpc.CallOption) (*ListAuditActionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAuditActionsResponse)
	err := c.cc.Invoke(ctx, BackofficeAudit_ListAuditActions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackofficeAuditServer is the server API for BackofficeAudit service.
// All implementations must embed UnimplementedBackofficeAuditServer
// for forward compatibility.
type BackofficeAuditServer interface {
	ListAuditLogs(context.Context, *ListAuditLogsRequest) (*ListAuditLogsResponse, error)
	ListAuditActions(context.Context, *ListAuditActionsRequest) (*ListAuditActionsResponse, error)
	mustEmbedUnimplementedBackofficeAuditServer()
}

// UnimplementedBackofficeAuditServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackofficeAuditServer struct{}

func (UnimplementedBackofficeAuditServer) ListAuditLogs(context.Context, *ListAuditLogsRequest) (*ListAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuditLogs not implemented")
}
func (UnimplementedBackofficeAuditServer) ListAuditActions(context.Context, *ListAuditActionsRequest) (*ListAuditActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuditActions not implemented")
}
func (UnimplementedBackofficeAuditServer) mustEmbedUnimplementedBackofficeAuditServer() {}
func (UnimplementedBackofficeAuditServer) testEmbeddedByValue()                         {}

// UnsafeBackofficeAuditServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackofficeAuditServer will
// result in compilation errors.
type UnsafeBackofficeAuditServer interface {
	mustEmbedUnimplementedBackofficeAuditServer()
}

func RegisterBackofficeAuditServer(s grpc.ServiceRegistrar, srv BackofficeAuditServer) {
	// If the following call pancis, it indicates UnimplementedBackofficeAuditServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackofficeAudit_ServiceDesc, srv)
}

func _BackofficeAudit_ListAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAuditServer).ListAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAudit_ListAuditLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAuditServer).ListAuditLogs(ctx, req.(*ListAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackofficeAudit_ListAuditActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuditActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackofficeAuditServer).ListAuditActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackofficeAudit_ListAuditActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackofficeAuditServer).ListAuditActions(ctx, req.(*ListAuditActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackofficeAudit_ServiceDesc is the grpc.ServiceDesc for BackofficeAudit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackofficeAudit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.backoffice.service.v1.BackofficeAudit",
	HandlerType: (*BackofficeAuditServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAuditLogs",
			Handler:    _BackofficeAudit_ListAuditLogs_Handler,
		},
		{
			MethodName: "ListAuditActions",
			Handler:    _BackofficeAudit_ListAuditActions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backoffice/service/v1/backoffice_audit.proto",
}
