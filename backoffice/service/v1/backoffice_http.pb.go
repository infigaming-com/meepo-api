// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficeAddAccount = "/api.backoffice.service.v1.Backoffice/AddAccount"
const OperationBackofficeAddOperatorUserTag = "/api.backoffice.service.v1.Backoffice/AddOperatorUserTag"
const OperationBackofficeAddUserComment = "/api.backoffice.service.v1.Backoffice/AddUserComment"
const OperationBackofficeAddUserTag = "/api.backoffice.service.v1.Backoffice/AddUserTag"
const OperationBackofficeBind2fa = "/api.backoffice.service.v1.Backoffice/Bind2fa"
const OperationBackofficeDeleteOperatorUserTag = "/api.backoffice.service.v1.Backoffice/DeleteOperatorUserTag"
const OperationBackofficeDeleteUserTag = "/api.backoffice.service.v1.Backoffice/DeleteUserTag"
const OperationBackofficeGenerate2fa = "/api.backoffice.service.v1.Backoffice/Generate2fa"
const OperationBackofficeGetGameDataSummary = "/api.backoffice.service.v1.Backoffice/GetGameDataSummary"
const OperationBackofficeGetGameTransactionsForBet = "/api.backoffice.service.v1.Backoffice/GetGameTransactionsForBet"
const OperationBackofficeGetOperatorUserTags = "/api.backoffice.service.v1.Backoffice/GetOperatorUserTags"
const OperationBackofficeGetOverviewDashboard = "/api.backoffice.service.v1.Backoffice/GetOverviewDashboard"
const OperationBackofficeGetPlayerGameDataSummary = "/api.backoffice.service.v1.Backoffice/GetPlayerGameDataSummary"
const OperationBackofficeGetSummary = "/api.backoffice.service.v1.Backoffice/GetSummary"
const OperationBackofficeGetTimeRangedDashboard = "/api.backoffice.service.v1.Backoffice/GetTimeRangedDashboard"
const OperationBackofficeGetTopOperatorsDashboard = "/api.backoffice.service.v1.Backoffice/GetTopOperatorsDashboard"
const OperationBackofficeGetUserBetsOverview = "/api.backoffice.service.v1.Backoffice/GetUserBetsOverview"
const OperationBackofficeGetUserOverview = "/api.backoffice.service.v1.Backoffice/GetUserOverview"
const OperationBackofficeGetUserProfile = "/api.backoffice.service.v1.Backoffice/GetUserProfile"
const OperationBackofficeGetWalletCreditTransactions = "/api.backoffice.service.v1.Backoffice/GetWalletCreditTransactions"
const OperationBackofficeGetWallets = "/api.backoffice.service.v1.Backoffice/GetWallets"
const OperationBackofficeListBets = "/api.backoffice.service.v1.Backoffice/ListBets"
const OperationBackofficeListDailySummaries = "/api.backoffice.service.v1.Backoffice/ListDailySummaries"
const OperationBackofficeListDepositDailyDetails = "/api.backoffice.service.v1.Backoffice/ListDepositDailyDetails"
const OperationBackofficeListDepositDailySummaries = "/api.backoffice.service.v1.Backoffice/ListDepositDailySummaries"
const OperationBackofficeListGameDataDailySummaries = "/api.backoffice.service.v1.Backoffice/ListGameDataDailySummaries"
const OperationBackofficeListGames = "/api.backoffice.service.v1.Backoffice/ListGames"
const OperationBackofficeListPaymentTransactions = "/api.backoffice.service.v1.Backoffice/ListPaymentTransactions"
const OperationBackofficeListUserBets = "/api.backoffice.service.v1.Backoffice/ListUserBets"
const OperationBackofficeListUsers = "/api.backoffice.service.v1.Backoffice/ListUsers"
const OperationBackofficeListWithdrawDailyDetails = "/api.backoffice.service.v1.Backoffice/ListWithdrawDailyDetails"
const OperationBackofficeListWithdrawDailySummaries = "/api.backoffice.service.v1.Backoffice/ListWithdrawDailySummaries"
const OperationBackofficeListWithdrawReviewTickets = "/api.backoffice.service.v1.Backoffice/ListWithdrawReviewTickets"
const OperationBackofficeResetPassword = "/api.backoffice.service.v1.Backoffice/ResetPassword"
const OperationBackofficeReviewTicket = "/api.backoffice.service.v1.Backoffice/ReviewTicket"
const OperationBackofficeSendEmailVerification = "/api.backoffice.service.v1.Backoffice/SendEmailVerification"
const OperationBackofficeSendMobileVerification = "/api.backoffice.service.v1.Backoffice/SendMobileVerification"
const OperationBackofficeUnbind2fa = "/api.backoffice.service.v1.Backoffice/Unbind2fa"
const OperationBackofficeUpdateAccount = "/api.backoffice.service.v1.Backoffice/UpdateAccount"
const OperationBackofficeUpdateWallet = "/api.backoffice.service.v1.Backoffice/UpdateWallet"
const OperationBackofficeVerifyEmail = "/api.backoffice.service.v1.Backoffice/VerifyEmail"
const OperationBackofficeVerifyMobile = "/api.backoffice.service.v1.Backoffice/VerifyMobile"

type BackofficeHTTPServer interface {
	// AddAccount Account
	AddAccount(context.Context, *AddAccountRequest) (*AddAccountResponse, error)
	AddOperatorUserTag(context.Context, *AddOperatorUserTagRequest) (*AddOperatorUserTagResponse, error)
	AddUserComment(context.Context, *AddUserCommentRequest) (*AddUserCommentResponse, error)
	AddUserTag(context.Context, *AddUserTagRequest) (*AddUserTagResponse, error)
	Bind2Fa(context.Context, *Bind2FaRequest) (*Bind2FaResponse, error)
	DeleteOperatorUserTag(context.Context, *DeleteOperatorUserTagRequest) (*DeleteOperatorUserTagResponse, error)
	DeleteUserTag(context.Context, *DeleteUserTagRequest) (*DeleteUserTagResponse, error)
	Generate2Fa(context.Context, *Generate2FaRequest) (*Generate2FaResponse, error)
	GetGameDataSummary(context.Context, *GetGameDataSummaryRequest) (*GetGameDataSummaryResponse, error)
	GetGameTransactionsForBet(context.Context, *GetGameTransactionsForBetRequest) (*GetGameTransactionsForBetResponse, error)
	GetOperatorUserTags(context.Context, *GetOperatorUserTagsRequest) (*GetOperatorUserTagsResponse, error)
	// GetOverviewDashboard Dashboard
	GetOverviewDashboard(context.Context, *GetOverviewDashboardRequest) (*GetOverviewDashboardResponse, error)
	GetPlayerGameDataSummary(context.Context, *GetPlayerGameDataSummaryRequest) (*GetPlayerGameDataSummaryResponse, error)
	// GetSummary Report
	GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error)
	GetTimeRangedDashboard(context.Context, *GetTimeRangedDashboardRequest) (*GetTimeRangedDashboardResponse, error)
	GetTopOperatorsDashboard(context.Context, *GetTopOperatorsDashboardRequest) (*GetTopOperatorsDashboardResponse, error)
	GetUserBetsOverview(context.Context, *GetUserBetsOverviewRequest) (*GetUserBetsOverviewResponse, error)
	GetUserOverview(context.Context, *GetUserOverviewRequest) (*GetUserOverviewResponse, error)
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	GetWalletCreditTransactions(context.Context, *GetWalletCreditTransactionsRequest) (*GetWalletCreditTransactionsResponse, error)
	// GetWallets Wallet
	GetWallets(context.Context, *GetWalletsRequest) (*GetWalletsResponse, error)
	// ListBets Game
	ListBets(context.Context, *ListBetsRequest) (*ListBetsResponse, error)
	ListDailySummaries(context.Context, *ListDailySummariesRequest) (*ListDailySummariesResponse, error)
	ListDepositDailyDetails(context.Context, *ListDepositDailyDetailsRequest) (*ListDepositDailyDetailsResponse, error)
	ListDepositDailySummaries(context.Context, *ListDepositDailySummariesRequest) (*ListDepositDailySummariesResponse, error)
	ListGameDataDailySummaries(context.Context, *ListGameDataDailySummariesRequest) (*ListGameDataDailySummariesResponse, error)
	ListGames(context.Context, *ListGamesRequest) (*ListGamesResponse, error)
	// ListPaymentTransactions Payment
	ListPaymentTransactions(context.Context, *ListPaymentTransactionsRequest) (*ListPaymentTransactionsResponse, error)
	ListUserBets(context.Context, *ListUserBetsRequest) (*ListUserBetsResponse, error)
	// ListUsers User
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	ListWithdrawDailyDetails(context.Context, *ListWithdrawDailyDetailsRequest) (*ListWithdrawDailyDetailsResponse, error)
	ListWithdrawDailySummaries(context.Context, *ListWithdrawDailySummariesRequest) (*ListWithdrawDailySummariesResponse, error)
	// ListWithdrawReviewTickets Review
	ListWithdrawReviewTickets(context.Context, *ListWithdrawReviewTicketsRequest) (*ListWithdrawReviewTicketsResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	ReviewTicket(context.Context, *ReviewTicketRequest) (*ReviewTicketResponse, error)
	SendEmailVerification(context.Context, *SendEmailVerificationRequest) (*SendEmailVerificationResponse, error)
	SendMobileVerification(context.Context, *SendMobileVerificationRequest) (*SendMobileVerificationResponse, error)
	Unbind2Fa(context.Context, *Unbind2FaRequest) (*Unbind2FaResponse, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	UpdateWallet(context.Context, *UpdateWalletRequest) (*UpdateWalletResponse, error)
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	VerifyMobile(context.Context, *VerifyMobileRequest) (*VerifyMobileResponse, error)
}

func RegisterBackofficeHTTPServer(s *http.Server, srv BackofficeHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/accounts/add", _Backoffice_AddAccount0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/email/verification/send", _Backoffice_SendEmailVerification0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/email/verify", _Backoffice_VerifyEmail0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/mobile/verification/send", _Backoffice_SendMobileVerification0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/mobile/verify", _Backoffice_VerifyMobile0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/password/reset", _Backoffice_ResetPassword0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/2fa/generate", _Backoffice_Generate2Fa0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/2fa/bind", _Backoffice_Bind2Fa0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/2fa/unbind", _Backoffice_Unbind2Fa0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/accounts/update", _Backoffice_UpdateAccount0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/dashboard/get", _Backoffice_GetOverviewDashboard0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/dashboard/time-ranged/get", _Backoffice_GetTimeRangedDashboard0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/dashboard/top-operators/get", _Backoffice_GetTopOperatorsDashboard0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/list", _Backoffice_ListBets0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/overview/get", _Backoffice_GetUserBetsOverview0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/transactions/get", _Backoffice_GetGameTransactionsForBet0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/bets/list", _Backoffice_ListUserBets0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/game/list", _Backoffice_ListGames1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/list", _Backoffice_ListUsers0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/overview/get", _Backoffice_GetUserOverview0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/profile/get", _Backoffice_GetUserProfile0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/user-tags/add", _Backoffice_AddOperatorUserTag0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/user-tags/delete", _Backoffice_DeleteOperatorUserTag0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/operator/user-tags/get", _Backoffice_GetOperatorUserTags0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/tags/add", _Backoffice_AddUserTag1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/tags/delete", _Backoffice_DeleteUserTag1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/user/comments/add", _Backoffice_AddUserComment0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/payment/transactions/list", _Backoffice_ListPaymentTransactions0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/get", _Backoffice_GetWallets0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/credit-transactions/get", _Backoffice_GetWalletCreditTransactions0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/wallet/update", _Backoffice_UpdateWallet0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/review/withdraw-review-tickets/list", _Backoffice_ListWithdrawReviewTickets0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/review/ticket/review", _Backoffice_ReviewTicket0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/summary/get", _Backoffice_GetSummary0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/daily-summaries/list", _Backoffice_ListDailySummaries0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/game-data-summary/get", _Backoffice_GetGameDataSummary0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/game-data-daily-summaries/list", _Backoffice_ListGameDataDailySummaries0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/player-game-data-summary/get", _Backoffice_GetPlayerGameDataSummary0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/deposit-daily-summaries/list", _Backoffice_ListDepositDailySummaries0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/deposit-daily-details/list", _Backoffice_ListDepositDailyDetails0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/withdraw-daily-summaries/list", _Backoffice_ListWithdrawDailySummaries0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/report/withdraw-daily-details/list", _Backoffice_ListWithdrawDailyDetails0_HTTP_Handler(srv))
}

func _Backoffice_AddAccount0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAddAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddAccount(ctx, req.(*AddAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddAccountResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_SendEmailVerification0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendEmailVerificationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeSendEmailVerification)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendEmailVerification(ctx, req.(*SendEmailVerificationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendEmailVerificationResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_VerifyEmail0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VerifyEmailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeVerifyEmail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifyEmail(ctx, req.(*VerifyEmailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VerifyEmailResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_SendMobileVerification0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendMobileVerificationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeSendMobileVerification)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendMobileVerification(ctx, req.(*SendMobileVerificationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendMobileVerificationResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_VerifyMobile0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VerifyMobileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeVerifyMobile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifyMobile(ctx, req.(*VerifyMobileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VerifyMobileResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_ResetPassword0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResetPasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeResetPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ResetPassword(ctx, req.(*ResetPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResetPasswordResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Generate2Fa0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Generate2FaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGenerate2fa)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Generate2Fa(ctx, req.(*Generate2FaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Generate2FaResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Bind2Fa0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Bind2FaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeBind2fa)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Bind2Fa(ctx, req.(*Bind2FaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Bind2FaResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_Unbind2Fa0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Unbind2FaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUnbind2fa)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Unbind2Fa(ctx, req.(*Unbind2FaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Unbind2FaResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_UpdateAccount0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUpdateAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAccount(ctx, req.(*UpdateAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAccountResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_GetOverviewDashboard0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOverviewDashboardRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGetOverviewDashboard)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOverviewDashboard(ctx, req.(*GetOverviewDashboardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOverviewDashboardResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_GetTimeRangedDashboard0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTimeRangedDashboardRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGetTimeRangedDashboard)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTimeRangedDashboard(ctx, req.(*GetTimeRangedDashboardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTimeRangedDashboardResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_GetTopOperatorsDashboard0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTopOperatorsDashboardRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGetTopOperatorsDashboard)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTopOperatorsDashboard(ctx, req.(*GetTopOperatorsDashboardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTopOperatorsDashboardResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_ListBets0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBetsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeListBets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBets(ctx, req.(*ListBetsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBetsResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_GetUserBetsOverview0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserBetsOverviewRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGetUserBetsOverview)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserBetsOverview(ctx, req.(*GetUserBetsOverviewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserBetsOverviewResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_GetGameTransactionsForBet0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGameTransactionsForBetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGetGameTransactionsForBet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGameTransactionsForBet(ctx, req.(*GetGameTransactionsForBetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGameTransactionsForBetResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_ListUserBets0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserBetsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeListUserBets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserBets(ctx, req.(*ListUserBetsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserBetsResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_ListGames1_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGamesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeListGames)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGames(ctx, req.(*ListGamesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGamesResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_ListUsers0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUsersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeListUsers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUsers(ctx, req.(*ListUsersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUsersResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_GetUserOverview0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserOverviewRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGetUserOverview)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserOverview(ctx, req.(*GetUserOverviewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserOverviewResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_GetUserProfile0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserProfileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGetUserProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserProfile(ctx, req.(*GetUserProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserProfileResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_AddOperatorUserTag0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddOperatorUserTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAddOperatorUserTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddOperatorUserTag(ctx, req.(*AddOperatorUserTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddOperatorUserTagResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_DeleteOperatorUserTag0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOperatorUserTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeDeleteOperatorUserTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOperatorUserTag(ctx, req.(*DeleteOperatorUserTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteOperatorUserTagResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_GetOperatorUserTags0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOperatorUserTagsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGetOperatorUserTags)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOperatorUserTags(ctx, req.(*GetOperatorUserTagsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOperatorUserTagsResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_AddUserTag1_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAddUserTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddUserTag(ctx, req.(*AddUserTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddUserTagResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_DeleteUserTag1_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeDeleteUserTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUserTag(ctx, req.(*DeleteUserTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserTagResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_AddUserComment0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddUserCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeAddUserComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddUserComment(ctx, req.(*AddUserCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddUserCommentResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_ListPaymentTransactions0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPaymentTransactionsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeListPaymentTransactions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPaymentTransactions(ctx, req.(*ListPaymentTransactionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPaymentTransactionsResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_GetWallets0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWalletsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGetWallets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWallets(ctx, req.(*GetWalletsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWalletsResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_GetWalletCreditTransactions0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWalletCreditTransactionsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGetWalletCreditTransactions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWalletCreditTransactions(ctx, req.(*GetWalletCreditTransactionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWalletCreditTransactionsResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_UpdateWallet0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateWalletRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeUpdateWallet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateWallet(ctx, req.(*UpdateWalletRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateWalletResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_ListWithdrawReviewTickets0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWithdrawReviewTicketsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeListWithdrawReviewTickets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWithdrawReviewTickets(ctx, req.(*ListWithdrawReviewTicketsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWithdrawReviewTicketsResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_ReviewTicket0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReviewTicketRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeReviewTicket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReviewTicket(ctx, req.(*ReviewTicketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReviewTicketResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_GetSummary0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSummaryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGetSummary)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSummary(ctx, req.(*GetSummaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSummaryResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_ListDailySummaries0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDailySummariesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeListDailySummaries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDailySummaries(ctx, req.(*ListDailySummariesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDailySummariesResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_GetGameDataSummary0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGameDataSummaryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGetGameDataSummary)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGameDataSummary(ctx, req.(*GetGameDataSummaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGameDataSummaryResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_ListGameDataDailySummaries0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGameDataDailySummariesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeListGameDataDailySummaries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGameDataDailySummaries(ctx, req.(*ListGameDataDailySummariesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGameDataDailySummariesResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_GetPlayerGameDataSummary0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPlayerGameDataSummaryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeGetPlayerGameDataSummary)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPlayerGameDataSummary(ctx, req.(*GetPlayerGameDataSummaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPlayerGameDataSummaryResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_ListDepositDailySummaries0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDepositDailySummariesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeListDepositDailySummaries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDepositDailySummaries(ctx, req.(*ListDepositDailySummariesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDepositDailySummariesResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_ListDepositDailyDetails0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDepositDailyDetailsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeListDepositDailyDetails)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDepositDailyDetails(ctx, req.(*ListDepositDailyDetailsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDepositDailyDetailsResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_ListWithdrawDailySummaries0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWithdrawDailySummariesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeListWithdrawDailySummaries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWithdrawDailySummaries(ctx, req.(*ListWithdrawDailySummariesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWithdrawDailySummariesResponse)
		return ctx.Result(200, reply)
	}
}

func _Backoffice_ListWithdrawDailyDetails0_HTTP_Handler(srv BackofficeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWithdrawDailyDetailsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeListWithdrawDailyDetails)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWithdrawDailyDetails(ctx, req.(*ListWithdrawDailyDetailsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWithdrawDailyDetailsResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficeHTTPClient interface {
	AddAccount(ctx context.Context, req *AddAccountRequest, opts ...http.CallOption) (rsp *AddAccountResponse, err error)
	AddOperatorUserTag(ctx context.Context, req *AddOperatorUserTagRequest, opts ...http.CallOption) (rsp *AddOperatorUserTagResponse, err error)
	AddUserComment(ctx context.Context, req *AddUserCommentRequest, opts ...http.CallOption) (rsp *AddUserCommentResponse, err error)
	AddUserTag(ctx context.Context, req *AddUserTagRequest, opts ...http.CallOption) (rsp *AddUserTagResponse, err error)
	Bind2Fa(ctx context.Context, req *Bind2FaRequest, opts ...http.CallOption) (rsp *Bind2FaResponse, err error)
	DeleteOperatorUserTag(ctx context.Context, req *DeleteOperatorUserTagRequest, opts ...http.CallOption) (rsp *DeleteOperatorUserTagResponse, err error)
	DeleteUserTag(ctx context.Context, req *DeleteUserTagRequest, opts ...http.CallOption) (rsp *DeleteUserTagResponse, err error)
	Generate2Fa(ctx context.Context, req *Generate2FaRequest, opts ...http.CallOption) (rsp *Generate2FaResponse, err error)
	GetGameDataSummary(ctx context.Context, req *GetGameDataSummaryRequest, opts ...http.CallOption) (rsp *GetGameDataSummaryResponse, err error)
	GetGameTransactionsForBet(ctx context.Context, req *GetGameTransactionsForBetRequest, opts ...http.CallOption) (rsp *GetGameTransactionsForBetResponse, err error)
	GetOperatorUserTags(ctx context.Context, req *GetOperatorUserTagsRequest, opts ...http.CallOption) (rsp *GetOperatorUserTagsResponse, err error)
	GetOverviewDashboard(ctx context.Context, req *GetOverviewDashboardRequest, opts ...http.CallOption) (rsp *GetOverviewDashboardResponse, err error)
	GetPlayerGameDataSummary(ctx context.Context, req *GetPlayerGameDataSummaryRequest, opts ...http.CallOption) (rsp *GetPlayerGameDataSummaryResponse, err error)
	GetSummary(ctx context.Context, req *GetSummaryRequest, opts ...http.CallOption) (rsp *GetSummaryResponse, err error)
	GetTimeRangedDashboard(ctx context.Context, req *GetTimeRangedDashboardRequest, opts ...http.CallOption) (rsp *GetTimeRangedDashboardResponse, err error)
	GetTopOperatorsDashboard(ctx context.Context, req *GetTopOperatorsDashboardRequest, opts ...http.CallOption) (rsp *GetTopOperatorsDashboardResponse, err error)
	GetUserBetsOverview(ctx context.Context, req *GetUserBetsOverviewRequest, opts ...http.CallOption) (rsp *GetUserBetsOverviewResponse, err error)
	GetUserOverview(ctx context.Context, req *GetUserOverviewRequest, opts ...http.CallOption) (rsp *GetUserOverviewResponse, err error)
	GetUserProfile(ctx context.Context, req *GetUserProfileRequest, opts ...http.CallOption) (rsp *GetUserProfileResponse, err error)
	GetWalletCreditTransactions(ctx context.Context, req *GetWalletCreditTransactionsRequest, opts ...http.CallOption) (rsp *GetWalletCreditTransactionsResponse, err error)
	GetWallets(ctx context.Context, req *GetWalletsRequest, opts ...http.CallOption) (rsp *GetWalletsResponse, err error)
	ListBets(ctx context.Context, req *ListBetsRequest, opts ...http.CallOption) (rsp *ListBetsResponse, err error)
	ListDailySummaries(ctx context.Context, req *ListDailySummariesRequest, opts ...http.CallOption) (rsp *ListDailySummariesResponse, err error)
	ListDepositDailyDetails(ctx context.Context, req *ListDepositDailyDetailsRequest, opts ...http.CallOption) (rsp *ListDepositDailyDetailsResponse, err error)
	ListDepositDailySummaries(ctx context.Context, req *ListDepositDailySummariesRequest, opts ...http.CallOption) (rsp *ListDepositDailySummariesResponse, err error)
	ListGameDataDailySummaries(ctx context.Context, req *ListGameDataDailySummariesRequest, opts ...http.CallOption) (rsp *ListGameDataDailySummariesResponse, err error)
	ListGames(ctx context.Context, req *ListGamesRequest, opts ...http.CallOption) (rsp *ListGamesResponse, err error)
	ListPaymentTransactions(ctx context.Context, req *ListPaymentTransactionsRequest, opts ...http.CallOption) (rsp *ListPaymentTransactionsResponse, err error)
	ListUserBets(ctx context.Context, req *ListUserBetsRequest, opts ...http.CallOption) (rsp *ListUserBetsResponse, err error)
	ListUsers(ctx context.Context, req *ListUsersRequest, opts ...http.CallOption) (rsp *ListUsersResponse, err error)
	ListWithdrawDailyDetails(ctx context.Context, req *ListWithdrawDailyDetailsRequest, opts ...http.CallOption) (rsp *ListWithdrawDailyDetailsResponse, err error)
	ListWithdrawDailySummaries(ctx context.Context, req *ListWithdrawDailySummariesRequest, opts ...http.CallOption) (rsp *ListWithdrawDailySummariesResponse, err error)
	ListWithdrawReviewTickets(ctx context.Context, req *ListWithdrawReviewTicketsRequest, opts ...http.CallOption) (rsp *ListWithdrawReviewTicketsResponse, err error)
	ResetPassword(ctx context.Context, req *ResetPasswordRequest, opts ...http.CallOption) (rsp *ResetPasswordResponse, err error)
	ReviewTicket(ctx context.Context, req *ReviewTicketRequest, opts ...http.CallOption) (rsp *ReviewTicketResponse, err error)
	SendEmailVerification(ctx context.Context, req *SendEmailVerificationRequest, opts ...http.CallOption) (rsp *SendEmailVerificationResponse, err error)
	SendMobileVerification(ctx context.Context, req *SendMobileVerificationRequest, opts ...http.CallOption) (rsp *SendMobileVerificationResponse, err error)
	Unbind2Fa(ctx context.Context, req *Unbind2FaRequest, opts ...http.CallOption) (rsp *Unbind2FaResponse, err error)
	UpdateAccount(ctx context.Context, req *UpdateAccountRequest, opts ...http.CallOption) (rsp *UpdateAccountResponse, err error)
	UpdateWallet(ctx context.Context, req *UpdateWalletRequest, opts ...http.CallOption) (rsp *UpdateWalletResponse, err error)
	VerifyEmail(ctx context.Context, req *VerifyEmailRequest, opts ...http.CallOption) (rsp *VerifyEmailResponse, err error)
	VerifyMobile(ctx context.Context, req *VerifyMobileRequest, opts ...http.CallOption) (rsp *VerifyMobileResponse, err error)
}

type BackofficeHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficeHTTPClient(client *http.Client) BackofficeHTTPClient {
	return &BackofficeHTTPClientImpl{client}
}

func (c *BackofficeHTTPClientImpl) AddAccount(ctx context.Context, in *AddAccountRequest, opts ...http.CallOption) (*AddAccountResponse, error) {
	var out AddAccountResponse
	pattern := "/v1/backoffice/accounts/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAddAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) AddOperatorUserTag(ctx context.Context, in *AddOperatorUserTagRequest, opts ...http.CallOption) (*AddOperatorUserTagResponse, error) {
	var out AddOperatorUserTagResponse
	pattern := "/v1/backoffice/operator/user-tags/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAddOperatorUserTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) AddUserComment(ctx context.Context, in *AddUserCommentRequest, opts ...http.CallOption) (*AddUserCommentResponse, error) {
	var out AddUserCommentResponse
	pattern := "/v1/backoffice/user/comments/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAddUserComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) AddUserTag(ctx context.Context, in *AddUserTagRequest, opts ...http.CallOption) (*AddUserTagResponse, error) {
	var out AddUserTagResponse
	pattern := "/v1/backoffice/user/tags/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeAddUserTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) Bind2Fa(ctx context.Context, in *Bind2FaRequest, opts ...http.CallOption) (*Bind2FaResponse, error) {
	var out Bind2FaResponse
	pattern := "/v1/backoffice/accounts/2fa/bind"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeBind2fa))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) DeleteOperatorUserTag(ctx context.Context, in *DeleteOperatorUserTagRequest, opts ...http.CallOption) (*DeleteOperatorUserTagResponse, error) {
	var out DeleteOperatorUserTagResponse
	pattern := "/v1/backoffice/operator/user-tags/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeDeleteOperatorUserTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) DeleteUserTag(ctx context.Context, in *DeleteUserTagRequest, opts ...http.CallOption) (*DeleteUserTagResponse, error) {
	var out DeleteUserTagResponse
	pattern := "/v1/backoffice/user/tags/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeDeleteUserTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) Generate2Fa(ctx context.Context, in *Generate2FaRequest, opts ...http.CallOption) (*Generate2FaResponse, error) {
	var out Generate2FaResponse
	pattern := "/v1/backoffice/accounts/2fa/generate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGenerate2fa))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) GetGameDataSummary(ctx context.Context, in *GetGameDataSummaryRequest, opts ...http.CallOption) (*GetGameDataSummaryResponse, error) {
	var out GetGameDataSummaryResponse
	pattern := "/v1/backoffice/report/game-data-summary/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGetGameDataSummary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) GetGameTransactionsForBet(ctx context.Context, in *GetGameTransactionsForBetRequest, opts ...http.CallOption) (*GetGameTransactionsForBetResponse, error) {
	var out GetGameTransactionsForBetResponse
	pattern := "/v1/backoffice/game/bets/transactions/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGetGameTransactionsForBet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) GetOperatorUserTags(ctx context.Context, in *GetOperatorUserTagsRequest, opts ...http.CallOption) (*GetOperatorUserTagsResponse, error) {
	var out GetOperatorUserTagsResponse
	pattern := "/v1/backoffice/operator/user-tags/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGetOperatorUserTags))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) GetOverviewDashboard(ctx context.Context, in *GetOverviewDashboardRequest, opts ...http.CallOption) (*GetOverviewDashboardResponse, error) {
	var out GetOverviewDashboardResponse
	pattern := "/v1/backoffice/dashboard/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGetOverviewDashboard))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) GetPlayerGameDataSummary(ctx context.Context, in *GetPlayerGameDataSummaryRequest, opts ...http.CallOption) (*GetPlayerGameDataSummaryResponse, error) {
	var out GetPlayerGameDataSummaryResponse
	pattern := "/v1/backoffice/report/player-game-data-summary/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGetPlayerGameDataSummary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...http.CallOption) (*GetSummaryResponse, error) {
	var out GetSummaryResponse
	pattern := "/v1/backoffice/report/summary/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGetSummary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) GetTimeRangedDashboard(ctx context.Context, in *GetTimeRangedDashboardRequest, opts ...http.CallOption) (*GetTimeRangedDashboardResponse, error) {
	var out GetTimeRangedDashboardResponse
	pattern := "/v1/backoffice/dashboard/time-ranged/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGetTimeRangedDashboard))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) GetTopOperatorsDashboard(ctx context.Context, in *GetTopOperatorsDashboardRequest, opts ...http.CallOption) (*GetTopOperatorsDashboardResponse, error) {
	var out GetTopOperatorsDashboardResponse
	pattern := "/v1/backoffice/dashboard/top-operators/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGetTopOperatorsDashboard))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) GetUserBetsOverview(ctx context.Context, in *GetUserBetsOverviewRequest, opts ...http.CallOption) (*GetUserBetsOverviewResponse, error) {
	var out GetUserBetsOverviewResponse
	pattern := "/v1/backoffice/game/bets/overview/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGetUserBetsOverview))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) GetUserOverview(ctx context.Context, in *GetUserOverviewRequest, opts ...http.CallOption) (*GetUserOverviewResponse, error) {
	var out GetUserOverviewResponse
	pattern := "/v1/backoffice/user/overview/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGetUserOverview))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...http.CallOption) (*GetUserProfileResponse, error) {
	var out GetUserProfileResponse
	pattern := "/v1/backoffice/user/profile/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGetUserProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) GetWalletCreditTransactions(ctx context.Context, in *GetWalletCreditTransactionsRequest, opts ...http.CallOption) (*GetWalletCreditTransactionsResponse, error) {
	var out GetWalletCreditTransactionsResponse
	pattern := "/v1/backoffice/wallet/credit-transactions/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGetWalletCreditTransactions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) GetWallets(ctx context.Context, in *GetWalletsRequest, opts ...http.CallOption) (*GetWalletsResponse, error) {
	var out GetWalletsResponse
	pattern := "/v1/backoffice/wallet/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeGetWallets))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) ListBets(ctx context.Context, in *ListBetsRequest, opts ...http.CallOption) (*ListBetsResponse, error) {
	var out ListBetsResponse
	pattern := "/v1/backoffice/game/bets/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeListBets))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) ListDailySummaries(ctx context.Context, in *ListDailySummariesRequest, opts ...http.CallOption) (*ListDailySummariesResponse, error) {
	var out ListDailySummariesResponse
	pattern := "/v1/backoffice/report/daily-summaries/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeListDailySummaries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) ListDepositDailyDetails(ctx context.Context, in *ListDepositDailyDetailsRequest, opts ...http.CallOption) (*ListDepositDailyDetailsResponse, error) {
	var out ListDepositDailyDetailsResponse
	pattern := "/v1/backoffice/report/deposit-daily-details/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeListDepositDailyDetails))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) ListDepositDailySummaries(ctx context.Context, in *ListDepositDailySummariesRequest, opts ...http.CallOption) (*ListDepositDailySummariesResponse, error) {
	var out ListDepositDailySummariesResponse
	pattern := "/v1/backoffice/report/deposit-daily-summaries/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeListDepositDailySummaries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) ListGameDataDailySummaries(ctx context.Context, in *ListGameDataDailySummariesRequest, opts ...http.CallOption) (*ListGameDataDailySummariesResponse, error) {
	var out ListGameDataDailySummariesResponse
	pattern := "/v1/backoffice/report/game-data-daily-summaries/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeListGameDataDailySummaries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) ListGames(ctx context.Context, in *ListGamesRequest, opts ...http.CallOption) (*ListGamesResponse, error) {
	var out ListGamesResponse
	pattern := "/v1/backoffice/game/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeListGames))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) ListPaymentTransactions(ctx context.Context, in *ListPaymentTransactionsRequest, opts ...http.CallOption) (*ListPaymentTransactionsResponse, error) {
	var out ListPaymentTransactionsResponse
	pattern := "/v1/backoffice/payment/transactions/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeListPaymentTransactions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) ListUserBets(ctx context.Context, in *ListUserBetsRequest, opts ...http.CallOption) (*ListUserBetsResponse, error) {
	var out ListUserBetsResponse
	pattern := "/v1/backoffice/game/bets/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeListUserBets))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...http.CallOption) (*ListUsersResponse, error) {
	var out ListUsersResponse
	pattern := "/v1/backoffice/user/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeListUsers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) ListWithdrawDailyDetails(ctx context.Context, in *ListWithdrawDailyDetailsRequest, opts ...http.CallOption) (*ListWithdrawDailyDetailsResponse, error) {
	var out ListWithdrawDailyDetailsResponse
	pattern := "/v1/backoffice/report/withdraw-daily-details/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeListWithdrawDailyDetails))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) ListWithdrawDailySummaries(ctx context.Context, in *ListWithdrawDailySummariesRequest, opts ...http.CallOption) (*ListWithdrawDailySummariesResponse, error) {
	var out ListWithdrawDailySummariesResponse
	pattern := "/v1/backoffice/report/withdraw-daily-summaries/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeListWithdrawDailySummaries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) ListWithdrawReviewTickets(ctx context.Context, in *ListWithdrawReviewTicketsRequest, opts ...http.CallOption) (*ListWithdrawReviewTicketsResponse, error) {
	var out ListWithdrawReviewTicketsResponse
	pattern := "/v1/backoffice/review/withdraw-review-tickets/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeListWithdrawReviewTickets))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...http.CallOption) (*ResetPasswordResponse, error) {
	var out ResetPasswordResponse
	pattern := "/v1/backoffice/accounts/password/reset"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeResetPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) ReviewTicket(ctx context.Context, in *ReviewTicketRequest, opts ...http.CallOption) (*ReviewTicketResponse, error) {
	var out ReviewTicketResponse
	pattern := "/v1/backoffice/review/ticket/review"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeReviewTicket))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) SendEmailVerification(ctx context.Context, in *SendEmailVerificationRequest, opts ...http.CallOption) (*SendEmailVerificationResponse, error) {
	var out SendEmailVerificationResponse
	pattern := "/v1/backoffice/accounts/email/verification/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeSendEmailVerification))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) SendMobileVerification(ctx context.Context, in *SendMobileVerificationRequest, opts ...http.CallOption) (*SendMobileVerificationResponse, error) {
	var out SendMobileVerificationResponse
	pattern := "/v1/backoffice/accounts/mobile/verification/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeSendMobileVerification))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) Unbind2Fa(ctx context.Context, in *Unbind2FaRequest, opts ...http.CallOption) (*Unbind2FaResponse, error) {
	var out Unbind2FaResponse
	pattern := "/v1/backoffice/accounts/2fa/unbind"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUnbind2fa))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...http.CallOption) (*UpdateAccountResponse, error) {
	var out UpdateAccountResponse
	pattern := "/v1/backoffice/accounts/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUpdateAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...http.CallOption) (*UpdateWalletResponse, error) {
	var out UpdateWalletResponse
	pattern := "/v1/backoffice/wallet/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeUpdateWallet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...http.CallOption) (*VerifyEmailResponse, error) {
	var out VerifyEmailResponse
	pattern := "/v1/backoffice/accounts/email/verify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeVerifyEmail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeHTTPClientImpl) VerifyMobile(ctx context.Context, in *VerifyMobileRequest, opts ...http.CallOption) (*VerifyMobileResponse, error) {
	var out VerifyMobileResponse
	pattern := "/v1/backoffice/accounts/mobile/verify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeVerifyMobile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
