// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: backoffice/service/v1/backoffice_filestore.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UploadOperatorStaticFileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadOperatorStaticFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadOperatorStaticFileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UploadOperatorStaticFileRequestMultiError, or nil if none found.
func (m *UploadOperatorStaticFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadOperatorStaticFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	// no validation rules for ContentType

	// no validation rules for Domain

	// no validation rules for FilePath

	if len(errors) > 0 {
		return UploadOperatorStaticFileRequestMultiError(errors)
	}

	return nil
}

// UploadOperatorStaticFileRequestMultiError is an error wrapping multiple
// validation errors returned by UploadOperatorStaticFileRequest.ValidateAll()
// if the designated constraints aren't met.
type UploadOperatorStaticFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadOperatorStaticFileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadOperatorStaticFileRequestMultiError) AllErrors() []error { return m }

// UploadOperatorStaticFileRequestValidationError is the validation error
// returned by UploadOperatorStaticFileRequest.Validate if the designated
// constraints aren't met.
type UploadOperatorStaticFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadOperatorStaticFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadOperatorStaticFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadOperatorStaticFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadOperatorStaticFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadOperatorStaticFileRequestValidationError) ErrorName() string {
	return "UploadOperatorStaticFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadOperatorStaticFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadOperatorStaticFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadOperatorStaticFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadOperatorStaticFileRequestValidationError{}

// Validate checks the field values on UploadOperatorStaticFileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UploadOperatorStaticFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadOperatorStaticFileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UploadOperatorStaticFileResponseMultiError, or nil if none found.
func (m *UploadOperatorStaticFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadOperatorStaticFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UploadOperatorStaticFileResponseMultiError(errors)
	}

	return nil
}

// UploadOperatorStaticFileResponseMultiError is an error wrapping multiple
// validation errors returned by
// UploadOperatorStaticFileResponse.ValidateAll() if the designated
// constraints aren't met.
type UploadOperatorStaticFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadOperatorStaticFileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadOperatorStaticFileResponseMultiError) AllErrors() []error { return m }

// UploadOperatorStaticFileResponseValidationError is the validation error
// returned by UploadOperatorStaticFileResponse.Validate if the designated
// constraints aren't met.
type UploadOperatorStaticFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadOperatorStaticFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadOperatorStaticFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadOperatorStaticFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadOperatorStaticFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadOperatorStaticFileResponseValidationError) ErrorName() string {
	return "UploadOperatorStaticFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadOperatorStaticFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadOperatorStaticFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadOperatorStaticFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadOperatorStaticFileResponseValidationError{}

// Validate checks the field values on UploadRegisterLoginBlacklistRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UploadRegisterLoginBlacklistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadRegisterLoginBlacklistRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UploadRegisterLoginBlacklistRequestMultiError, or nil if none found.
func (m *UploadRegisterLoginBlacklistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadRegisterLoginBlacklistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTargetOperatorContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UploadRegisterLoginBlacklistRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UploadRegisterLoginBlacklistRequestValidationError{
					field:  "TargetOperatorContext",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOperatorContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UploadRegisterLoginBlacklistRequestValidationError{
				field:  "TargetOperatorContext",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Data

	// no validation rules for IdType

	if len(errors) > 0 {
		return UploadRegisterLoginBlacklistRequestMultiError(errors)
	}

	return nil
}

// UploadRegisterLoginBlacklistRequestMultiError is an error wrapping multiple
// validation errors returned by
// UploadRegisterLoginBlacklistRequest.ValidateAll() if the designated
// constraints aren't met.
type UploadRegisterLoginBlacklistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadRegisterLoginBlacklistRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadRegisterLoginBlacklistRequestMultiError) AllErrors() []error { return m }

// UploadRegisterLoginBlacklistRequestValidationError is the validation error
// returned by UploadRegisterLoginBlacklistRequest.Validate if the designated
// constraints aren't met.
type UploadRegisterLoginBlacklistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadRegisterLoginBlacklistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadRegisterLoginBlacklistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadRegisterLoginBlacklistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadRegisterLoginBlacklistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadRegisterLoginBlacklistRequestValidationError) ErrorName() string {
	return "UploadRegisterLoginBlacklistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadRegisterLoginBlacklistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadRegisterLoginBlacklistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadRegisterLoginBlacklistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadRegisterLoginBlacklistRequestValidationError{}

// Validate checks the field values on UploadRegisterLoginBlacklistResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UploadRegisterLoginBlacklistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadRegisterLoginBlacklistResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UploadRegisterLoginBlacklistResponseMultiError, or nil if none found.
func (m *UploadRegisterLoginBlacklistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadRegisterLoginBlacklistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UploadRegisterLoginBlacklistResponseMultiError(errors)
	}

	return nil
}

// UploadRegisterLoginBlacklistResponseMultiError is an error wrapping multiple
// validation errors returned by
// UploadRegisterLoginBlacklistResponse.ValidateAll() if the designated
// constraints aren't met.
type UploadRegisterLoginBlacklistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadRegisterLoginBlacklistResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadRegisterLoginBlacklistResponseMultiError) AllErrors() []error { return m }

// UploadRegisterLoginBlacklistResponseValidationError is the validation error
// returned by UploadRegisterLoginBlacklistResponse.Validate if the designated
// constraints aren't met.
type UploadRegisterLoginBlacklistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadRegisterLoginBlacklistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadRegisterLoginBlacklistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadRegisterLoginBlacklistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadRegisterLoginBlacklistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadRegisterLoginBlacklistResponseValidationError) ErrorName() string {
	return "UploadRegisterLoginBlacklistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadRegisterLoginBlacklistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadRegisterLoginBlacklistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadRegisterLoginBlacklistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadRegisterLoginBlacklistResponseValidationError{}
