// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v4.25.6
// source: backoffice/service/v1/backoffice_vip.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/infigaming-com/meepo-api/vip/service/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBackofficeVipCreateVipLevelConfigTemplate = "/api.backoffice.service.v1.BackofficeVip/CreateVipLevelConfigTemplate"
const OperationBackofficeVipDeleteVipLevelConfigTemplate = "/api.backoffice.service.v1.BackofficeVip/DeleteVipLevelConfigTemplate"
const OperationBackofficeVipGetVipConfig = "/api.backoffice.service.v1.BackofficeVip/GetVipConfig"
const OperationBackofficeVipGetVipLevelConfigTemplate = "/api.backoffice.service.v1.BackofficeVip/GetVipLevelConfigTemplate"
const OperationBackofficeVipGetVipSetting = "/api.backoffice.service.v1.BackofficeVip/GetVipSetting"
const OperationBackofficeVipUpdateVipLevelConfigTemplate = "/api.backoffice.service.v1.BackofficeVip/UpdateVipLevelConfigTemplate"
const OperationBackofficeVipUpdateVipSetting = "/api.backoffice.service.v1.BackofficeVip/UpdateVipSetting"

type BackofficeVipHTTPServer interface {
	CreateVipLevelConfigTemplate(context.Context, *CreateVipLevelConfigTemplateRequest) (*CreateVipLevelConfigTemplateResponse, error)
	DeleteVipLevelConfigTemplate(context.Context, *DeleteVipLevelConfigTemplateRequest) (*DeleteVipLevelConfigTemplateResponse, error)
	GetVipConfig(context.Context, *GetVipConfigRequest) (*GetVipConfigResponse, error)
	GetVipLevelConfigTemplate(context.Context, *GetVipLevelConfigTemplateRequest) (*GetVipLevelConfigTemplateResponse, error)
	// GetVipSetting VIP设置管理
	GetVipSetting(context.Context, *GetVipSettingRequest) (*v1.GetVipSettingResponse, error)
	UpdateVipLevelConfigTemplate(context.Context, *UpdateVipLevelConfigTemplateRequest) (*UpdateVipLevelConfigTemplateResponse, error)
	UpdateVipSetting(context.Context, *UpdateVipSettingRequest) (*UpdateVipSettingResponse, error)
}

func RegisterBackofficeVipHTTPServer(s *http.Server, srv BackofficeVipHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/backoffice/vip/setting/get", _BackofficeVip_GetVipSetting1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/vip/setting/update", _BackofficeVip_UpdateVipSetting0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/vip/level-config-template/get", _BackofficeVip_GetVipLevelConfigTemplate1_HTTP_Handler(srv))
	r.POST("/v1/backoffice/vip/level-config-template/create", _BackofficeVip_CreateVipLevelConfigTemplate0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/vip/level-config-template/update", _BackofficeVip_UpdateVipLevelConfigTemplate0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/vip/level-config-template/delete", _BackofficeVip_DeleteVipLevelConfigTemplate0_HTTP_Handler(srv))
	r.POST("/v1/backoffice/vip/config/get", _BackofficeVip_GetVipConfig0_HTTP_Handler(srv))
}

func _BackofficeVip_GetVipSetting1_HTTP_Handler(srv BackofficeVipHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVipSettingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeVipGetVipSetting)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVipSetting(ctx, req.(*GetVipSettingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetVipSettingResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeVip_UpdateVipSetting0_HTTP_Handler(srv BackofficeVipHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateVipSettingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeVipUpdateVipSetting)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateVipSetting(ctx, req.(*UpdateVipSettingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateVipSettingResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeVip_GetVipLevelConfigTemplate1_HTTP_Handler(srv BackofficeVipHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVipLevelConfigTemplateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeVipGetVipLevelConfigTemplate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVipLevelConfigTemplate(ctx, req.(*GetVipLevelConfigTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetVipLevelConfigTemplateResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeVip_CreateVipLevelConfigTemplate0_HTTP_Handler(srv BackofficeVipHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateVipLevelConfigTemplateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeVipCreateVipLevelConfigTemplate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateVipLevelConfigTemplate(ctx, req.(*CreateVipLevelConfigTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateVipLevelConfigTemplateResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeVip_UpdateVipLevelConfigTemplate0_HTTP_Handler(srv BackofficeVipHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateVipLevelConfigTemplateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeVipUpdateVipLevelConfigTemplate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateVipLevelConfigTemplate(ctx, req.(*UpdateVipLevelConfigTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateVipLevelConfigTemplateResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeVip_DeleteVipLevelConfigTemplate0_HTTP_Handler(srv BackofficeVipHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteVipLevelConfigTemplateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeVipDeleteVipLevelConfigTemplate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteVipLevelConfigTemplate(ctx, req.(*DeleteVipLevelConfigTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteVipLevelConfigTemplateResponse)
		return ctx.Result(200, reply)
	}
}

func _BackofficeVip_GetVipConfig0_HTTP_Handler(srv BackofficeVipHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVipConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBackofficeVipGetVipConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVipConfig(ctx, req.(*GetVipConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetVipConfigResponse)
		return ctx.Result(200, reply)
	}
}

type BackofficeVipHTTPClient interface {
	CreateVipLevelConfigTemplate(ctx context.Context, req *CreateVipLevelConfigTemplateRequest, opts ...http.CallOption) (rsp *CreateVipLevelConfigTemplateResponse, err error)
	DeleteVipLevelConfigTemplate(ctx context.Context, req *DeleteVipLevelConfigTemplateRequest, opts ...http.CallOption) (rsp *DeleteVipLevelConfigTemplateResponse, err error)
	GetVipConfig(ctx context.Context, req *GetVipConfigRequest, opts ...http.CallOption) (rsp *GetVipConfigResponse, err error)
	GetVipLevelConfigTemplate(ctx context.Context, req *GetVipLevelConfigTemplateRequest, opts ...http.CallOption) (rsp *GetVipLevelConfigTemplateResponse, err error)
	GetVipSetting(ctx context.Context, req *GetVipSettingRequest, opts ...http.CallOption) (rsp *v1.GetVipSettingResponse, err error)
	UpdateVipLevelConfigTemplate(ctx context.Context, req *UpdateVipLevelConfigTemplateRequest, opts ...http.CallOption) (rsp *UpdateVipLevelConfigTemplateResponse, err error)
	UpdateVipSetting(ctx context.Context, req *UpdateVipSettingRequest, opts ...http.CallOption) (rsp *UpdateVipSettingResponse, err error)
}

type BackofficeVipHTTPClientImpl struct {
	cc *http.Client
}

func NewBackofficeVipHTTPClient(client *http.Client) BackofficeVipHTTPClient {
	return &BackofficeVipHTTPClientImpl{client}
}

func (c *BackofficeVipHTTPClientImpl) CreateVipLevelConfigTemplate(ctx context.Context, in *CreateVipLevelConfigTemplateRequest, opts ...http.CallOption) (*CreateVipLevelConfigTemplateResponse, error) {
	var out CreateVipLevelConfigTemplateResponse
	pattern := "/v1/backoffice/vip/level-config-template/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeVipCreateVipLevelConfigTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeVipHTTPClientImpl) DeleteVipLevelConfigTemplate(ctx context.Context, in *DeleteVipLevelConfigTemplateRequest, opts ...http.CallOption) (*DeleteVipLevelConfigTemplateResponse, error) {
	var out DeleteVipLevelConfigTemplateResponse
	pattern := "/v1/backoffice/vip/level-config-template/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeVipDeleteVipLevelConfigTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeVipHTTPClientImpl) GetVipConfig(ctx context.Context, in *GetVipConfigRequest, opts ...http.CallOption) (*GetVipConfigResponse, error) {
	var out GetVipConfigResponse
	pattern := "/v1/backoffice/vip/config/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeVipGetVipConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeVipHTTPClientImpl) GetVipLevelConfigTemplate(ctx context.Context, in *GetVipLevelConfigTemplateRequest, opts ...http.CallOption) (*GetVipLevelConfigTemplateResponse, error) {
	var out GetVipLevelConfigTemplateResponse
	pattern := "/v1/backoffice/vip/level-config-template/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeVipGetVipLevelConfigTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeVipHTTPClientImpl) GetVipSetting(ctx context.Context, in *GetVipSettingRequest, opts ...http.CallOption) (*v1.GetVipSettingResponse, error) {
	var out v1.GetVipSettingResponse
	pattern := "/v1/backoffice/vip/setting/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeVipGetVipSetting))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeVipHTTPClientImpl) UpdateVipLevelConfigTemplate(ctx context.Context, in *UpdateVipLevelConfigTemplateRequest, opts ...http.CallOption) (*UpdateVipLevelConfigTemplateResponse, error) {
	var out UpdateVipLevelConfigTemplateResponse
	pattern := "/v1/backoffice/vip/level-config-template/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeVipUpdateVipLevelConfigTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BackofficeVipHTTPClientImpl) UpdateVipSetting(ctx context.Context, in *UpdateVipSettingRequest, opts ...http.CallOption) (*UpdateVipSettingResponse, error) {
	var out UpdateVipSettingResponse
	pattern := "/v1/backoffice/vip/setting/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBackofficeVipUpdateVipSetting))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
