// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.6
// source: cron/cron.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CronJobRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Param         string                 `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CronJobRequest) Reset() {
	*x = CronJobRequest{}
	mi := &file_cron_cron_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronJobRequest) ProtoMessage() {}

func (x *CronJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cron_cron_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronJobRequest.ProtoReflect.Descriptor instead.
func (*CronJobRequest) Descriptor() ([]byte, []int) {
	return file_cron_cron_proto_rawDescGZIP(), []int{0}
}

func (x *CronJobRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CronJobRequest) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

type CronJobResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CronJobResponse) Reset() {
	*x = CronJobResponse{}
	mi := &file_cron_cron_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronJobResponse) ProtoMessage() {}

func (x *CronJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cron_cron_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronJobResponse.ProtoReflect.Descriptor instead.
func (*CronJobResponse) Descriptor() ([]byte, []int) {
	return file_cron_cron_proto_rawDescGZIP(), []int{1}
}

var File_cron_cron_proto protoreflect.FileDescriptor

const file_cron_cron_proto_rawDesc = "" +
	"\n" +
	"\x0fcron/cron.proto\x12\x13api.cron.service.v1\":\n" +
	"\x0eCronJobRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05param\x18\x02 \x01(\tR\x05param\"\x11\n" +
	"\x0fCronJobResponse2^\n" +
	"\x04Cron\x12V\n" +
	"\aCronJob\x12#.api.cron.service.v1.CronJobRequest\x1a$.api.cron.service.v1.CronJobResponse\"\x00BO\n" +
	"\x13api.cron.service.v1P\x01Z6github.com/infigaming-com/meepo-api/cron/service/v1;v1b\x06proto3"

var (
	file_cron_cron_proto_rawDescOnce sync.Once
	file_cron_cron_proto_rawDescData []byte
)

func file_cron_cron_proto_rawDescGZIP() []byte {
	file_cron_cron_proto_rawDescOnce.Do(func() {
		file_cron_cron_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cron_cron_proto_rawDesc), len(file_cron_cron_proto_rawDesc)))
	})
	return file_cron_cron_proto_rawDescData
}

var file_cron_cron_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_cron_cron_proto_goTypes = []any{
	(*CronJobRequest)(nil),  // 0: api.cron.service.v1.CronJobRequest
	(*CronJobResponse)(nil), // 1: api.cron.service.v1.CronJobResponse
}
var file_cron_cron_proto_depIdxs = []int32{
	0, // 0: api.cron.service.v1.Cron.CronJob:input_type -> api.cron.service.v1.CronJobRequest
	1, // 1: api.cron.service.v1.Cron.CronJob:output_type -> api.cron.service.v1.CronJobResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cron_cron_proto_init() }
func file_cron_cron_proto_init() {
	if File_cron_cron_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cron_cron_proto_rawDesc), len(file_cron_cron_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cron_cron_proto_goTypes,
		DependencyIndexes: file_cron_cron_proto_depIdxs,
		MessageInfos:      file_cron_cron_proto_msgTypes,
	}.Build()
	File_cron_cron_proto = out.File
	file_cron_cron_proto_goTypes = nil
	file_cron_cron_proto_depIdxs = nil
}
