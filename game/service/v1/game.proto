syntax = "proto3";

import "google/api/annotations.proto";

package game.service.v1;

option go_package = "github.com/infigaming-com/meepo-api/game/service/v1;v1";
option java_multiple_files = true;
option java_package = "game.service.v1";

service Game {
	rpc CreateOperator(CreateOperatorRequest) returns (CreateOperatorResponse) {
	};

	rpc UpdateOperator(UpdateOperatorRequest) returns (UpdateOperatorResponse) {
	};

	rpc DeleteOperator(DeleteOperatorRequest) returns (DeleteOperatorResponse) {
	};

	rpc ListGames(ListGamesRequest) returns (ListGamesResponse) {
		option (google.api.http) = {
			post: "/v1/game/list"
			body: "*"
		};
	};

	rpc GetGame(GetGameRequest) returns (GetGameResponse) {
		option (google.api.http) = {
			post: "/v1/game/get"
			body: "*"
		};
	};

	rpc ProviderList(ProviderListRequest) returns (ProviderListResponse) {
		option (google.api.http) = {
			post: "/v1/game/provider/list"
			body: "*"
		};
	};

	rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse) {
		option (google.api.http) = {
			post: "/v1/game/create-session"
			body: "*"
		};
	};

	rpc Balance(BalanceRequest) returns (BalanceResponse) {
		option (google.api.http) = {
			post: "/v1/game/balance"
			body: "*"
		};
	};

	rpc Play(PlayRequest) returns (PlayResponse) {
		option (google.api.http) = {
			post: "/v1/game/play"
			body: "*"
		};
	};

	rpc Rollback(RollbackRequest) returns (RollbackResponse) {
		option (google.api.http) = {
			post: "/v1/game/rollback"
			body: "*"
		};
	};
}

message CreateOperatorRequest {
	string aggregator_operator_id = 1;
	int64 operator_id = 2;
	string api_key = 3;
	string api_secret = 4;
	bool enabled = 5;
}

message CreateOperatorResponse {
}

message UpdateOperatorRequest {
	int64 operator_id = 1;
	string aggregator_operator_id = 2;
	string api_key = 3;
	string api_secret = 4;
	bool enabled = 5;
}

message UpdateOperatorResponse {
	int64 operator_id = 1;
	string aggregator_operator_id = 2;
	string api_key = 3;
	string api_secret = 4;
	bool enabled = 5;
}

message DeleteOperatorRequest {
	int64 operator_id = 1;
}

message DeleteOperatorResponse {
}

message GameFilter {
	// provider id: provider list api
	string provider_id = 1;
	// tags: hot game, live casino, slots, etc..
	string tags = 2;
}

message GameSort {
	enum Field {
		ASC = 0;
		DESC = 1;
		POPULARITY = 2;
		HIGHLIGHT = 3;
	}
	Field field = 1;
}

message ListGamesRequest {
	// page number for pagination (starts from 1)
	int64 page = 1;
	// page size for pagination
	int64 page_size = 2;
	// filter
	GameFilter filter = 3;
	// sort
	GameSort sort = 4;
}

message ListGamesResponse {
	repeated string game_ids = 1;
	int64 total = 2;
	int64 page = 3;
	int64 page_size = 4;
}

message GetGameRequest {
	string game_id = 1;
}

message GetGameResponse {
	GameInfo game = 1;
}

message GameInfo {
	string id = 1;
	bool enabled = 2;
	string name = 3;
	string provider_id = 4;
	string category = 5;
	repeated string languages = 6;
	repeated string currencies = 7;
	string theme = 8;
	bool has_jackpot = 9;
	string jackpot_type = 10;
	bool forbid_bonus_play = 11;
	bool has_freespins = 12;
	double payout = 13;
	double hit_rate = 14;
	string volatility_rating = 15;
	int32 lines = 16;
	int32 ways = 17;
	string description = 18;
	double multiplier = 19;
	int64 released_at = 20;
	bool bonus_buy = 21;
	string restrictions = 22;
}

message CreateSessionRequest {
	string game_id = 1;
	string currency = 2;
	string settlement_currency = 3;
	string locale = 4;
	int64 user_id = 5;
	UrlInfo urls = 6;
}

message CreateSessionResponse {
	string game_url = 1;
}

message UrlInfo {
	// URL to redirect user after session is finished.
	string return_url = 1;
	// URL to redirect user to deposit.
	string deposit_url = 2;
	// URL to redirect user to lobby.
	string lobby_url = 3;
}

message ProviderListRequest {
	// tags: hot game, live casino, slots, etc..
	string tags = 1;
}

message ProviderListResponse {
	repeated Provider providers = 1;
}

message Provider {
	string id = 1;
	string name = 2;
	int32 game_count = 3;
}

message BalanceRequest {
	int64 user_id = 1;
	string currency = 2;
	string game_id = 3;
	string round_id = 4;
	bool finished = 5;
}

message BalanceResponse {
	double balance = 1;
	double bonus = 2;
	string round_id = 3;
}

message PlayRequest {
	int64 user_id = 1;
	string currency = 2;
	string game_id = 3;
	string round_id = 4;
	bool finished = 5;
	string sm_result = 6;
	repeated Action actions = 7;
}

message PlayResponse {
	double balance = 1;
	string round_id = 2;
	repeated Transactions transactions = 3;
}

message Action {
	string action = 1;
	string bet_id = 2;
	string txn_id = 3;
	string ext_txn_id = 4;
	bool update_balance = 5;
	bool take_all = 6;
	bool is_refund = 7;
	int64 amount = 8;
	float jackpot_contribution = 9;
	int64 jackpot_win = 10;
	int64 bet_time = 11;
	int64 settle_time = 12;
	int64 provider_timestamp = 13;
}

message Transactions {
	string txn_id = 1;
	string operator_txn_id = 2;
	string processed_at = 3;
	double bonus_amount = 4;
}

message RollbackRequest {
	string user_id = 1;
	string currency = 2;
	string game_id = 3;
	string round_id = 4;
	bool finished = 5;
	string sm_result = 6;
	repeated RollbackAction actions = 7;
}

message RollbackAction {
	string action = 1;
	string bet_id = 2;
	string txn_id = 3;
	string ext_txn_id = 4;
	string original_txn_id = 5;
	string original_ext_txn_id = 6;
	int64 provider_timestamp = 7;
}

message RollbackResponse {
	double balance = 1;
	string round_id = 2;
	repeated RollbackTransactions transactions = 3;
}

message RollbackTransactions {
	string txn_id = 1;
	string operator_txn_id = 2;
	string processed_at = 3;
}
