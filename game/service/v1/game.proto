syntax = "proto3";

package api.game.service.v1;
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "common/common.proto";

option go_package = "github.com/infigaming-com/meepo-api/game/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.game.service.v1";

service Game {
	rpc CreateOperator(CreateOperatorRequest) returns (CreateOperatorResponse) {
	};

	rpc UpdateOperator(UpdateOperatorRequest) returns (UpdateOperatorResponse) {
	};

	rpc DeleteOperator(DeleteOperatorRequest) returns (DeleteOperatorResponse) {
	};

	rpc ListProviders(ListProvidersRequest) returns (ListProvidersResponse) {
		option (google.api.http) = {
			post: "/v1/game/providers/list"
			body: "*"
		};
	}

	rpc ListCategories(ListCategoriesRequest) returns (ListCategoriesResponse) {
		option (google.api.http) = {
			post: "/v1/game/categories/list"
			body: "*"
		};
	};

	rpc ListFeeGroups(ListFeeGroupsRequest) returns (ListFeeGroupsResponse) {}

	rpc ListTags(ListTagsRequest) returns (ListTagsResponse) {}

	rpc ListThemes(ListThemesRequest) returns (ListThemesResponse) {}

	rpc ListCurrencies(ListCurrenciesRequest) returns (ListCurrenciesResponse) {}

	rpc ListGames(ListGamesRequest) returns (ListGamesResponse) {
		option (google.api.http) = {
			post: "/v1/game/list"
			body: "*"
		};
	};

	rpc GetGame(GetGameRequest) returns (GetGameResponse) {
		option (google.api.http) = {
			post: "/v1/game/get"
			body: "*"
		};
	};

	rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse) {
		option (google.api.http) = {
			post: "/v1/game/create-session"
			body: "*"
		};
	};

	rpc Balance(BalanceRequest) returns (BalanceResponse) {
		option (google.api.http) = {
			post: "/v1/game/balance"
			body: "*"
		};
	};

	rpc Play(PlayRequest) returns (PlayResponse) {
		option (google.api.http) = {
			post: "/v1/game/play"
			body: "*"
		};
	};

	rpc Rollback(RollbackRequest) returns (RollbackResponse) {
		option (google.api.http) = {
			post: "/v1/game/rollback"
			body: "*"
		};
	};

	rpc ListBets(ListBetsRequest) returns (ListBetsResponse) {
		option (google.api.http) = {
			post: "/v1/game/bets/list"
			body: "*"
		};
	};

	rpc BackofficeListGames(BackofficeListGamesRequest) returns (BackofficeListGamesResponse) {
	};

	rpc UpdateGame(UpdateGameRequest) returns (UpdateGameResponse) {
	};

	rpc UpdateProvider(UpdateProviderRequest) returns (UpdateProviderResponse) {
	};

	rpc GetBetById(GetBetByIdRequest) returns (GetBetByIdResponse) {
	}

	rpc GetBackofficeUserOverviewFromGame(GetBackofficeUserOverviewFromGameRequest) returns (GetBackofficeUserOverviewFromGameResponse) {
	}

	rpc ListProviderRates(ListProviderRatesRequest) returns (ListProviderRatesResponse) {}

	rpc GetGameTransactionById(GetGameTransactionByIdRequest) returns (GetGameTransactionByIdResponse) {
	}

	rpc GetDailyGameTransactionData(GetDailyGameTransactionDataRequest) returns (GetDailyGameTransactionDataResponse) {
	}

	rpc ListProviderByIDs(ListProviderByIDsRequest) returns (ListProviderByIDsResponse) {
	}

	// Tax Report related APIs
	rpc GetTaxReportConfig(GetTaxReportConfigRequest) returns (GetTaxReportConfigResponse) {
	}

	rpc UpdateTaxReportConfig(UpdateTaxReportConfigRequest) returns (UpdateTaxReportConfigResponse) {
	}

	rpc ListTaxReports(ListTaxReportsRequest) returns (ListTaxReportsResponse) {
	}

	rpc UpdateTaxReport(UpdateTaxReportRequest) returns (UpdateTaxReportResponse) {
	}

	rpc GetResponsibleGamblingStatus(GetResponsibleGamblingStatusRequest) returns (GetResponsibleGamblingStatusResponse) {
	}

	rpc ListUnpaidBets(ListUnpaidBetsRequest) returns (ListUnpaidBetsResponse) {
	}

	rpc ExportUnpaidBets(ExportUnpaidBetsRequest) returns (ExportUnpaidBetsResponse) {
	}

	rpc ListMultipleBets(ListMultipleBetsRequest) returns (ListMultipleBetsResponse) {
	}

	rpc ExportMultipleBets(ExportMultipleBetsRequest) returns (ExportMultipleBetsResponse) {
	}

	rpc ListStakeVarianceBets(ListStakeVarianceBetsRequest) returns (ListStakeVarianceBetsResponse) {
	}

	rpc ExportStakeVarianceBets(ExportStakeVarianceBetsRequest) returns (ExportStakeVarianceBetsResponse) {
	}

	// Sport Events related APIs
	rpc ListSportEvents(ListSportEventsRequest) returns (ListSportEventsResponse) {
	}

	rpc ExportSportEvents(ExportSportEventsRequest) returns (ExportSportEventsResponse) {
	}

	rpc GetBetAndEventInfo(GetBetAndEventInfoRequest) returns (GetBetAndEventInfoResponse) {
	}

	rpc GetTransactionAndEventInfo(GetTransactionAndEventInfoRequest) returns (GetTransactionAndEventInfoResponse) {
	}

	// Customer Strike Report related APIs
	rpc ListCustomerStrikeReports(ListCustomerStrikeReportsRequest) returns (ListCustomerStrikeReportsResponse) {
	}

	rpc ExportCustomerStrikeReports(ExportCustomerStrikeReportsRequest) returns (ExportCustomerStrikeReportsResponse) {
	}

	rpc CreateTaxReport(CreateTaxReportRequest) returns (CreateTaxReportResponse) {
	}
}

message CreateOperatorRequest {
	string aggregator_operator_id = 1;
	int64 operator_id = 2;
	string api_key = 3;
	string api_secret = 4;
	bool enabled = 5;
	api.common.OperatorContext operator_context = 6;
}

message CreateOperatorResponse {
}

message UpdateOperatorRequest {
	int64 operator_id = 1;
	string aggregator_operator_id = 2;
	string api_key = 3;
	string api_secret = 4;
	bool enabled = 5;
	api.common.OperatorContext operator_context = 6;
}

message UpdateOperatorResponse {
	int64 operator_id = 1;
	string aggregator_operator_id = 2;
	string api_key = 3;
	string api_secret = 4;
	bool enabled = 5;
}

message DeleteOperatorRequest {
	int64 operator_id = 1;
	api.common.OperatorContext operator_context = 2;
}

message DeleteOperatorResponse {
}

message GameFilter {
	// provider id: provider list api
	repeated string provider_ids = 1;
	// tag: hot game, live casino, slots, etc..
	string tag = 2;
	// name: game name
	string name = 3;
}

message GameSort {
	enum Field {
		ASC = 0;
		DESC = 1;
		POPULARITY = 2;
		HIGHLIGHT = 3;
	}
	Field field = 1;
}

message ListProvidersRequest {
	// Optional filter for provider's id.
	// If not provided, all providers will be returned.
	optional string provider_id = 1;
	// Optional filter for provider's enabled status.
	// If not provided, all providers will be returned.
	optional bool enabled = 2;
	// Optional filter for game's tag.
	// If not provided, all providers will be returned.
	optional string tag = 3;
	// Include game count in response, false by default.
	// Only enable it for ListProviders page which game_count is needed.
	optional bool include_game_count = 4;
	// Enable pagination, false by default.
	// Only enable it for ListProviders page.
	optional bool pagination_enabled = 5;
	optional int32 page = 6;
	optional int32 page_size = 7;
}

message ListProvidersResponse {
	message Provider {
		string provider_id = 1;
		string provider_name = 2;
		// Only available when include_game_count is true
		optional int32 game_count = 3;
		bool enabled = 4;
	}
	repeated Provider providers = 1;
	optional int32 total = 2;
	optional int32 total_enabled = 3;
	optional int32 total_disabled = 4;
	optional int32 page = 5;
	optional int32 page_size = 6;
}

message ListCategoriesRequest{
	optional string provider_id = 1;
}

message ListCategoriesResponse {
	repeated string categories = 1;
}

message ListFeeGroupsRequest {
	optional string provider_id = 1;
	optional string category = 2;
}

message ListFeeGroupsResponse {
	repeated string fee_groups = 1;
}

message ListTagsRequest {}

message ListTagsResponse {
	repeated string tags = 1;
}

message ListThemesRequest {}

message ListThemesResponse {
	repeated string themes = 1;
}

message ListCurrenciesRequest {
	optional string provider_id = 1;
}

message ListCurrenciesResponse {
	repeated string currencies = 1;
}

message ListGamesRequest {
	// page number for pagination (starts from 1)
	int32 page = 1;
	// page size for pagination
	int32 page_size = 2;
	// filter
	GameFilter filter = 3;
	// sort
	GameSort sort = 4;
}

message ListGamesResponse {
	repeated string game_ids = 1;
	int32 total = 2;
	int32 page = 3;
	int32 page_size = 4;
}

message GetGameRequest {
	string game_id = 1;
}

message GetGameResponse {
	GameInfo game = 1;
}

message GameInfo {
	string id = 1;
	bool enabled = 2;
	string name = 3;
	string provider_id = 4;
	string provider_name = 5;
	string category = 6;
	repeated string languages = 7;
	repeated string currencies = 8;
	string theme = 9;
	bool has_jackpot = 10;
	string jackpot_type = 11;
	bool forbid_bonus_play = 12;
	bool has_freespins = 13;
	double payout = 14;
	double hit_rate = 15;
	string volatility_rating = 16;
	int32 lines = 17;
	int32 ways = 18;
	string description = 19;
	double multiplier = 20;
	int64 released_at = 21;
	bool bonus_buy = 22;
	string restrictions = 23;
}

message CreateSessionRequest {
	string game_id = 1;
	string currency = 2;
	string settlement_currency = 3;
	string locale = 4;
	UrlInfo urls = 5;
}

message CreateSessionResponse {
	string game_url = 1;
}

message UrlInfo {
	// URL to redirect user after session is finished.
	string return_url = 1;
	// URL to redirect user to deposit.
	string deposit_url = 2;
	// URL to redirect user to lobby.
	string lobby_url = 3;
}

message BalanceRequest {
	string user_id = 1;
	string currency = 2;
	string game_id = 3;
	string round_id = 4;
	bool finished = 5;
	int64 session_id = 6;
}

message BalanceResponse {
	message Data {
		string balance = 1;
		string bonus = 2;
		string round_id = 3;
	}
	Data data = 1;
}

message PlayRequest {
	string user_id = 1;
	string currency = 2;
	string game_id = 3;
	string round_id = 4;
	bool finished = 5;
	string sm_result = 6;
	int64 session_id = 7;
	repeated Action actions = 8;
}

message PlayResponse {
	message Data {
		string balance = 1;
		string round_id = 2;
		repeated Transactions transactions = 3;
	}
	Data data = 1;
}

message Action {
	string action = 1;
	string bet_id = 2;
	string txn_id = 3;
	string ext_txn_id = 4;
	bool update_balance = 5;
	bool take_all = 6;
	bool is_refund = 7;
	string amount = 8;
	string jackpot_contribution = 9;
	string jackpot_win = 10;
	int64 bet_time = 11;
	int64 settle_time = 12;
	int64 provider_timestamp = 13;
	bool finished = 14;
	string extra = 15;
}

message Transactions {
	string txn_id = 1 [json_name="txn_id"];
	string operator_txn_id = 2 [json_name="operator_txn_id"];
	double processed_at = 3 [json_name="processed_at"];
	string bonus_amount = 4 [json_name="bonus_amount"];
}

message RollbackRequest {
	string user_id = 1;
	string currency = 2;
	string game_id = 3;
	string round_id = 4;
	bool finished = 5;
	string sm_result = 6;
	repeated RollbackAction actions = 7;
}

message RollbackAction {
	string action = 1;
	string bet_id = 2;
	string txn_id = 3;
	string ext_txn_id = 4;
	string original_txn_id = 5;
	string original_ext_txn_id = 6;
	int64 provider_timestamp = 7;
}

message RollbackResponse {
	message Data {
		string balance = 1;
		string round_id = 2;
		repeated RollbackTransactions transactions = 3;
	}
	Data data = 1;
}

message RollbackTransactions {
	string txn_id = 1;
	string operator_txn_id = 2;
	string processed_at = 3;
}

message ListBetsRequest {
	message CurrencyWithRange {
		string currency = 1;
		optional string min_bet_amount = 2;
		optional string max_bet_amount = 3;
		optional string min_win_amount = 4;
		optional string max_win_amount = 5;
	}
	message Currencies {
		repeated string currencies = 1;
	}
	repeated string provider_ids = 1;
	optional string game_name = 2;
	optional string game_id = 3;
	optional int64 user_id = 4;
	optional int64 operator_bet_id = 5;
	optional string provider_bet_id = 6;
	optional google.protobuf.Timestamp start_time = 7;
	optional google.protobuf.Timestamp end_time = 8;
	optional CurrencyWithRange currency_with_ranges = 9;
	oneof settlement_currency_option {
		CurrencyWithRange settlement_currency_with_ranges = 10;
		Currencies settlement_currencies = 11;
	}
	repeated string categories = 12;
	optional string status = 13;
	optional int32 page = 14;
	optional int32 page_size = 15;
	api.common.OperatorContext operator_context = 16;
	api.common.OperatorContextFilters operator_context_filters = 17;
}

message Bet {
	int64 id = 1;
	string provider_bet_id = 2;
	int64 round_id = 3;
	string provider_round_id = 4;
	string provider_id = 5;
	string provider_name = 6;
	int64 operator_id = 7;
	string operator_name = 8;
	int64 company_operator_id = 9;
	string company_operator_name = 10;
	int64 retailer_operator_id = 11;
	string retailer_operator_name = 12;
	int64 system_operator_id = 13;
	string system_operator_name = 14;
	string currency = 15;
	string settlement_currency = 16;
	string status = 17; //pending, end
	int64 user_id = 18;
	string game_id = 19;
	string game_name = 20;
	string game_category = 21;
	int32 win_count = 22;
	string bet_amount = 23;
	string valid_bet_amount = 24;
	string settlement_bet_amount = 25;
	string win_amount = 26;
	string settlement_win_amount = 27;
	string turnover = 28;
	string odds = 29;
	string rollback_bet_amount = 30;
	string rollback_win_amount = 31;
	google.protobuf.Timestamp created_at = 32;
	google.protobuf.Timestamp updated_at = 33;
}

message ListBetsResponse {
	repeated Bet bets = 1;
	string turnover = 2;
	string win_amount = 3;
	int32 bet_count = 4;
	int32 rtp_percentage = 5; // value from 0 to 100
	int32 total = 6;
	int32 page = 7;
	int32 page_size = 8;
}

message BackofficeListGamesRequest {
	repeated string provider_ids = 1;
	repeated string categories = 2;
	repeated string fee_groups = 3;
	optional string game_id = 4;
	repeated string game_tags = 5;
	repeated string themes = 6;
	optional bool support_bonus_buy = 7;
	optional bool has_freespins = 8;
	repeated string support_currencies = 9;
	repeated string restricted_countries = 10;
	optional string rtp_min = 11;
	optional string rtp_max = 12;
	optional bool enabled = 13;
	optional int32 page = 14;
	optional int32 page_size = 15;	
}

message BackofficeListGamesResponse {
	message Game {
		string name = 1;
		string provider = 2;
		string id = 3;
		string category = 4;
		string theme = 5;
		bool support_bonus_buy = 6;
		bool has_freespins = 7;
		repeated string tags = 8;
		string fee_group = 9;
		string rate = 10;
		string rtp = 11;
		string valid_bet_rate = 12;
		repeated string support_currencies = 13;
		repeated string restricted_countries = 14;
		bool enabled = 15;
	}
	repeated Game games = 1;
	int32 page = 2;
	int32 page_size = 3;
	int32 total = 4;
	int32 total_enabled = 5;
	int32 total_disabled = 6;
}

message UpdateGameRequest {
	string game_id = 1;
	optional bool enabled = 2;
}

message UpdateGameResponse {
}

message UpdateProviderRequest {
	string provider_id = 1;
	optional bool enabled = 2;
}

message UpdateProviderResponse {
}

message GetBetByIdRequest {
	int64 bet_id = 1;
	optional bool include_actions = 2;
}

message GetBetByIdResponse {
	message Action {
		int64 id = 1;
		int64 round_id = 2;
		string action = 3;
		int64 bet_id = 4;
		string provider_bet_id = 5;
		string provider_transaction_id = 6;
		string provider_external_transaction_id = 7;
		string provider_id = 8;
		string provider_name = 9;
		int64 operator_id = 10;
		string operator_name = 11;
		bool update_balance = 12;
		bool take_all = 13;
		bool is_refund = 14;
		string amount = 15;
		string amount_usd = 16;
		string amount_reporting_currency = 17;
		string settlement_amount = 18;
		string settlement_amount_usd = 19;
		string settlement_amount_reporting_currency = 20;
		string turnover = 21;
		string turnover_usd = 22;
		string turnover_reporting_currency = 23;
		int64 user_id = 24;
		string currency = 25;
		string settlement_currency = 26;
		string game_id = 27;
		string game_name = 28;
		string game_category = 29;
		string jackpot_contribution = 30;
		string jackpot_contribution_usd = 31;
		string jackpot_contribution_reporting_currency = 32;
		string jackpot_win = 33;
		string jackpot_win_usd = 34;
		string jackpot_win_reporting_currency = 35;
		google.protobuf.Timestamp bet_time = 36;
		google.protobuf.Timestamp settle_time = 37;
		google.protobuf.Timestamp provider_timestamp = 38;
		string bonus_amount = 39;
		string bonus_amount_usd = 40;
		string bonus_amount_reporting_currency = 41;
		google.protobuf.Timestamp operator_timestamp = 42;
		google.protobuf.Timestamp processed_at = 43;
		google.protobuf.Timestamp created_at = 44;
		google.protobuf.Timestamp updated_at = 45;
	}
	message Bet {
		int64 id = 1;
		string provider_bet_id = 2;
		int64 round_id = 3;
		string provider_round_id = 4;
		string provider_id = 5;
		string provider_name = 6;
		int64 operator_id = 7;
		string operator_name = 8;
		string currency = 9;
		string settlement_currency = 10;
		string status = 11;
		int64 user_id = 12;
		string game_id = 13;
		string game_name = 14;
		string game_category = 15;
		int32 win_count = 16;
		string bet_amount = 17;
		string bet_amount_usd = 18;
		string bet_amount_reporting_currency = 19;
		string settlement_bet_amount = 20;
		string settlement_bet_amount_usd = 21;
		string settlement_bet_amount_reporting_currency = 22;
		string win_amount = 23;
		string win_amount_usd = 24;
		string win_amount_reporting_currency = 25;
		string settlement_win_amount = 26;
		string settlement_win_amount_usd = 27;
		string settlement_win_amount_reporting_currency = 28;
		string turnover = 29;
		string turnover_usd = 30;
		string turnover_reporting_currency = 31;
		string rollback_bet_amount = 32;
		string rollback_bet_amount_usd = 33;
		string rollback_bet_amount_reporting_currency = 34;
		string rollback_win_amount = 35;
		string rollback_win_amount_usd = 36;
		string rollback_win_amount_reporting_currency = 37;
		google.protobuf.Timestamp created_at = 38;
		google.protobuf.Timestamp updated_at = 39;
		repeated Action actions = 40;
	}
	Bet bet = 1;
}

message GetBackofficeUserOverviewFromGameRequest {
	string user_id = 1;
	optional google.protobuf.Timestamp start_time = 2;
	optional google.protobuf.Timestamp end_time = 3;
}

message GetBackofficeUserOverviewFromGameResponse {
	message GameData {
		string game_type = 1; // game category
		string ggr_usd = 2;
		string ggr_reporting_currency = 3;
		string turnover_usd = 4;
		string turnover_reporting_currency = 5;
		string rtp = 6;
	}
	repeated GameData game_data = 1;
}

message GetGameTransactionByIdRequest {
	int64 transaction_id = 1;
}

message GetGameTransactionByIdResponse {
	int64 id = 1; // transaction id
	int64 round_id = 2;
	string action = 3;
	int64 bet_id = 4;
	string provider_bet_id = 5;
	string provider_transaction_id = 6;
	string provider_external_transaction_id = 7;
	string provider_id = 8;
	string provider_name = 9;
	int64 operator_id = 10;
	string operator_name = 11;
	bool update_balance = 12;
	bool take_all = 13;
	bool is_refund = 14;
	string amount = 15;
	string amount_usd = 16;
	string amount_reporting_currency = 17;
	string settlement_amount = 18;
	string settlement_amount_usd = 19;
	string settlement_amount_reporting_currency = 20;
	string turnover = 21;
	string turnover_usd = 22;
	string turnover_reporting_currency = 23;
	int64 user_id = 24;
	string currency = 25;
	string settlement_currency = 26;
	string game_id = 27;
	string game_name = 28;
	string game_category = 29;
	string jackpot_contribution = 30;
	string jackpot_contribution_usd = 31;
	string jackpot_contribution_reporting_currency = 32;
	string jackpot_win = 33;
	string jackpot_win_usd = 34;
	string jackpot_win_reporting_currency = 35;
	google.protobuf.Timestamp bet_time = 36;
	google.protobuf.Timestamp settle_time = 37;
	google.protobuf.Timestamp provider_timestamp = 38;
	string bonus_amount = 39;
	string bonus_amount_usd = 40;
	string bonus_amount_reporting_currency = 41;
	google.protobuf.Timestamp operator_timestamp = 42;
	google.protobuf.Timestamp processed_at = 43;
	google.protobuf.Timestamp created_at = 44;
	google.protobuf.Timestamp updated_at = 45;
}

message ListProviderRatesRequest {
	optional string fee_group = 1;
	optional string currency = 2;
	optional string provider_id = 3;
	int32 page = 4;
	int32 page_size = 5;
	api.common.OperatorContext operator_context = 6;
	api.common.OperatorContext target_operator_context = 7;
}

message ListProviderRatesResponse {
	message ProviderRate {
		string provider_id = 1;
		string provider_name = 2;
		string fee_group = 3;
		string currency = 4;
		string rate = 5;
		int64 operator_id = 6;
		string operator_name = 7;
	}
	repeated ProviderRate provider_rates = 1;
	int32 page = 2;
	int32 page_size = 3;
	int32 total = 4;
}

message GetDailyGameTransactionDataRequest {
	message TimeRange {
		google.protobuf.Timestamp start_time = 1; // more than or equal to start_time
		google.protobuf.Timestamp end_time = 2; // less than end_time
	}
	TimeRange time_range = 1;
	repeated int64 operator_ids = 2;
}

message GetDailyGameTransactionDataResponse {
	message GameTransactionData {
		int64 operator_id = 1; // key
		int64 company_operator_id = 2;
		int64 retailer_operator_id = 3;
		string provider_id = 4; // key
		string fee_group = 5; // key
		string currency = 6; // key
		string amount = 7; // total bet - total payout
		string amount_usd = 8;
		string amount_reporting_currency = 9;
		string total_bet = 10;
		string total_bet_usd = 11;
		string total_bet_reporting_currency = 12;
		string total_payout = 13;
		string total_payout_usd = 14;
		string total_payout_reporting_currency = 15;
		int32 bets_count = 16;
	}
	repeated GameTransactionData game_transaction_data = 1;
}

message ListProviderByIDsRequest {
	repeated string provider_ids = 1;
}

message ListProviderByIDsResponse {
	message Provider {
		string provider_id = 1;
		string provider_name = 2;
		bool enabled = 3;
	}
	repeated Provider providers = 1;
}

message GetTaxReportConfigRequest {
	string type = 1;
}

message GetTaxReportConfigResponse {
	// config is a json string
	// example:
	// {
	//	"timezone": "UTC+0",
	//	"report_generation_time": {
	//		"monthly": "2nd of each month",
	//		"quarterly": "2nd of each quarter",
	//		"yearly": "2nd of each year"
	//	},
	//	"tax_currency": "ZAR",
	//	"user_registration_countries": ["US", "ZA", "TR", "VN"],
	//	"user_currencies": ["USD", "EUR", "INR", "ZAR", "USDT"],
	//  "vat_payable": 6.5,
	//  "tax_for_sportsbook_and_other_contingencies": 6.5,
	//  "tax_for_horse_racing": 6.5,
	//	}
	string config = 1;
}

message UpdateTaxReportConfigRequest {
	// type: south_afirca
	string type = 1;
	// config is a json string
	// example:
	// {
	//	"timezone": "UTC+0",
	//	"report_generation_time": {
	//		"monthly": "2nd of each month",
	//		"quarterly": "2nd of each quarter",
	//		"yearly": "2nd of each year"
	//	},
	//	"tax_currency": "ZAR",
	//	"user_registration_countries": ["US", "ZA", "TR", "VN"],
	//	"user_currencies": ["USD", "EUR", "INR", "ZAR", "USDT"],
	//  "vat_payable": 6.5,
	//  "tax_for_sportsbook_and_other_contingencies": 6.5,
	//  "tax_for_horse_racing": 6.5,
	//	}
	string config = 2;
}

message UpdateTaxReportConfigResponse {
}

message ListTaxReportsRequest {
	optional int32 page = 1;
	optional int32 page_size = 2;
	string tax_period = 3;
	// license_provider: south_afirca
	string report_category = 4;
	optional string period_type = 5;
}

message ListTaxReportsResponse {
	message TaxReport {
		// Basic information
		string report_category = 1; // e.g., "horse_racing","sportsbook_and_other_contingencies"
		string licensed_operator = 2; // e.g., "playing.io"
		string tax_period = 3; // Format: YYYY-MM (e.g., "2025-08")

		// Deposit information
		string deposit_date = 4; // Format: YYYY-MM-DD or "-" if empty
		string deposit_slip_no = 5; // e.g., "DSL-202508-003" or "-" if empty
		string ref_code = 6; // e.g., "DSL-HR-202508-002" or "-" if empty

		// Financial data (all amounts in ZAR)
		int64 hold_total_stake = 7; // e.g., "1,800,000"
		int64 winning_stakes = 8; // e.g., "1,200,000"
		int64 punter_winnings_loss = 9; // e.g., "520,000"
		int64 profit_loss = 10; // e.g., "108,000"
		int64 total_tax_levy = 11; // e.g., "108,000"
		int64 vat_payable_receivable = 12; // e.g., "16,200"
		int64 event_calculations = 13; // e.g., "124,200"

		TaxReportRecordStatus status = 14;
		
		// Timestamps
		int64 created_at = 15;
		int64 updated_at = 16;
		int64 id = 17;
	}

	repeated TaxReport tax_reports = 1;
	int32 total_count = 2;
	int32 page = 3;
	int32 page_size = 4;
}

// Tax report record status
enum TaxReportRecordStatus {
	TaxReportRecordStatus_PENDING = 0;
	TaxReportRecordStatus_CONFIRMED = 1;
}

message UpdateTaxReportRequest {
	int64 id = 1;
	string deposit_date = 2;
	string deposit_slip_no = 3;
	string ref_code = 4;
	TaxReportRecordStatus status = 5;
}

message UpdateTaxReportResponse {
}

message GetResponsibleGamblingStatusRequest {
	int64 user_id = 1;
	api.common.OperatorContext operator_context = 2;
}

message GetResponsibleGamblingStatusResponse {
	message ResponsibleGamblingStatus {
		string currency = 1;
		string daily_play_usage = 2;
		string weekly_play_usage = 3;
		string monthly_play_usage = 4;
		string daily_loss_usage = 5;
		string weekly_loss_usage = 6;
		string monthly_loss_usage = 7;
	}
	repeated ResponsibleGamblingStatus responsible_gambling_statuses = 1;
}

message ListUnpaidBetsRequest {
	optional google.protobuf.Timestamp start_time = 1;
	optional google.protobuf.Timestamp end_time = 2;
	optional int64 user_id = 3;
	optional int64 transaction_id = 4;
	optional int32 page = 5;
	optional int32 page_size = 6;
	api.common.OperatorContext operator_context = 7;
	api.common.OperatorContextFilters operator_context_filters = 8;
}

message ListUnpaidBetsResponse {
	message UnpaidBet {
		google.protobuf.Timestamp create_date_time = 1;
		google.protobuf.Timestamp update_date_time = 2;
		string status = 3; // always is pending
		int64 user_id = 4;
		int64 bet_id = 5;
		int64 round_id = 6;
		string category = 7;
		string game = 8;
		string game_id = 9;
		string provider_name = 10;
		string currency = 11;
		string bet_amount = 12;
		string payout_amount = 13;
		string win_amount = 14; // payout_amount - bet_amount
		int64 operator_id = 15;
		int64 company_operator_id = 16;
		int64 retailer_operator_id = 17;
		int64 system_operator_id = 18;
		string operator_name = 19;
		string company_operator_name = 20;
		string retailer_operator_name = 21;
		string system_operator_name = 22;
	}
	repeated UnpaidBet unpaid_bets = 1;
	int32 unpaid_bet_count = 2;
	string total_amount = 3;
	int32 unpaid_user_count = 4;
	int32 total = 5;
	int32 page = 6;
	int32 page_size = 7;
}

// Sport Events related messages
message ExportUnpaidBetsRequest {
	optional google.protobuf.Timestamp start_time = 1;
	optional google.protobuf.Timestamp end_time = 2;
	optional int64 user_id = 3;
	optional int64 transaction_id = 4;
	string format = 5; // accepted values: csv, excel, pdf
	string time_zone = 6; // e.g. UTC+0, UTC+8, etc.
	api.common.OperatorContext operator_context = 7;
	api.common.OperatorContextFilters operator_context_filters = 8;
	int64 initiator_user_id = 9;
}

message ExportUnpaidBetsResponse {
	int64 task_id = 1;
}

// Multiple Bets Report related messages
message ListMultipleBetsRequest {
	// Filter conditions
	optional google.protobuf.Timestamp start_time = 1;
	optional google.protobuf.Timestamp end_time = 2;
	optional string status = 3; // All, Pending, Won, Loss, etc.
	optional int64 user_id = 4; // User ID
	optional int64 transaction_id = 5; // Transaction ID
	
	// Pagination
	optional int32 page = 6;
	optional int32 page_size = 7;
	
	// Operator context for filtering
	api.common.OperatorContext operator_context = 8;
	api.common.OperatorContextFilters operator_context_filters = 9;
}

message ListMultipleBetsResponse {
	message MultipleBet {
		// Basic information
		google.protobuf.Timestamp created_at = 1; // Date
		string status = 2; // Pending, Won, Loss, etc.
		int64 user_id = 3; // User ID
		int64 transaction_id = 4; // Transaction ID (e.g., "TXN-202509042200")
		int64 round_id = 5; // Round ID (e.g., "TXN-202509042200")
		
		// Game information
		string category = 6; // Sports, Casino, etc.
		string provider = 7; // Provider name (e.g., "Bti")
		
		// Financial information
		string currency = 8; // Currency (e.g., "ZAR")
		string bet_amount = 9; // Bet Amount (e.g., "350.00")
		string win_amount = 10; // Win Amount (e.g., "192.50")
		string taxable = 11; // Taxable amount (e.g., "0.00")
		string prospective_tax = 12; // Prospective Tax (e.g., "0.00")
		int64 operator_id = 13;
		int64 company_operator_id = 14;
		int64 retailer_operator_id = 15;
		int64 system_operator_id = 16;
		string operator_name = 17;
		string company_operator_name = 18;
		string retailer_operator_name = 19;
		string system_operator_name = 20;
	}
	
	repeated MultipleBet records = 1;
	int32 total_count = 2;
	int32 page = 3;
	int32 page_size = 4;
}

message ExportMultipleBetsRequest {
	optional google.protobuf.Timestamp start_time = 1;
	optional google.protobuf.Timestamp end_time = 2;
	optional string status = 3; // All, Pending, Won, Loss, etc.
	optional int64 user_id = 4; // User ID
	optional int64 transaction_id = 5; // Transaction ID
	string format = 6; // accepted values: csv, excel, pdf
	string time_zone = 7; // e.g. UTC+0, UTC+8, etc.
	api.common.OperatorContext operator_context = 8;
	api.common.OperatorContextFilters operator_context_filters = 9;
	int64 initiator_user_id = 10;
}

message ExportMultipleBetsResponse {
	int64 task_id = 1;
}

// Stake Variance Report related messages
message ListStakeVarianceBetsRequest {
	// Filter conditions
	optional google.protobuf.Timestamp start_time = 1;
	optional google.protobuf.Timestamp end_time = 2;
	optional int64 user_id = 3; // User ID
	optional int64 transaction_id = 4; // Transaction ID
	optional string category = 5; // All, Bet, Win, etc.
	optional int64 round_id = 6; // Round ID
	
	// Pagination
	optional int32 page = 7;
	optional int32 page_size = 8;
	
	// Operator context for filtering
	api.common.OperatorContext operator_context = 9;
	api.common.OperatorContext target_operator_context = 10;
}

message ListStakeVarianceBetsResponse {
	message StakeVarianceBet {
		// Basic information
		google.protobuf.Timestamp created_at = 1; // Date (2025-09-02 14:30:21)
		google.protobuf.Timestamp updated_at = 2; // Date (2025-09-02 14:30:21)
		string status = 3; // Pending, Won, Loss, Cashed Out, etc.
		int64 user_id = 4; // User ID (User012345)
		int64 transaction_id = 5; // Transaction ID (TXN-202509042200)
		int64 round_id = 6; // Round ID (214215166135)
		
		// Game information
		string category = 7; // Sports, Casino, etc.
		string provider = 8; // Provider name (Bti)
		
		// Financial information
		string currency = 9; // Currency (ZAR)
		string bet_amount = 10; // Bet Amount (R 350.00)
		string payout_amount = 11; // Payout Amount (R 700.00)
		string win_amount = 12; // Win Amount (R 350.00)
		int64 operator_id = 13;
		int64 company_operator_id = 14;
		int64 retailer_operator_id = 15;
		int64 system_operator_id = 16;
		string operator_name = 17;
		string company_operator_name = 18;
		string retailer_operator_name = 19;
		string system_operator_name = 20;
	}
	
	message SummaryStats {
		// Summary statistics shown in cards
		int32 total_records = 1; // Total Records (e.g., 1000)
		string total_bet_amount = 2; // Total Bet Amount (e.g., "45,000")
		string average_bet_amount = 3; // Average Bet Amount (e.g., "8.2k")
		string maximum_bet_amount = 4; // Maximum Bet Amount (e.g., "1000")
	}
	
	repeated StakeVarianceBet records = 1;
	SummaryStats summary = 2;
	int32 total_count = 3;
	int32 page = 4;
	int32 page_size = 5;
}

message ExportStakeVarianceBetsRequest {
	optional google.protobuf.Timestamp start_time = 1;
	optional google.protobuf.Timestamp end_time = 2;
	optional int64 user_id = 3; // User ID
	optional int64 transaction_id = 4; // Transaction ID
	optional string category = 5; // All, Bet, Win, etc.
	optional int64 round_id = 6; // Round ID
	string format = 7; // accepted values: csv, excel, pdf
	string time_zone = 8; // e.g. UTC+0, UTC+8, etc.
	api.common.OperatorContext operator_context = 9;
	api.common.OperatorContext target_operator_context = 10;
	int64 initiator_user_id = 11;
}

message ExportStakeVarianceBetsResponse {
	int64 task_id = 1;
}

message ListSportEventsRequest {
	optional int32 page = 1;
	optional int32 page_size = 2;
	optional string event_name = 3; // Event name filter
	optional string venue = 4; // Venue filter
	optional string tournament = 5; // Tournament filter
	optional string start_time = 6; // Start date filter
	optional string end_time = 7; // End date filter
}

message ListSportEventsResponse {
	message SportEvent {
		// Basic information
		string event_id = 1; // e.g., "EV2025090901"
		string event_name = 2; // e.g., "Premier League-Manchester United vs Chelsea Old Trafford | Premier League 2025/26"
		string venue = 3; // Venue name
		string tournament = 4; // Tournament name
		
		// Timing information (all in SAST timezone)
		int64 carded_time = 5; // Carded Time
		int64 first_bet_time = 6; // First Bet Time
		int64 last_bet_time = 7; // Last Bet Time
		int64 no_more_bets_time = 8; // No More Bets Time
		int64 result_processing_time = 9; // Result Processing Time
		int64 revised_official_carded_time = 10; // Revised Official Carded Time or null
		
		// Status information
		string status = 11; // Event status (e.g., "Completed", "Pending", "Cancelled")
	}
	
	repeated SportEvent events = 1;
	
	// Summary information
	int32 total_count = 2;
	int32 page = 3;
	int32 page_size = 4;
	int32 total_pages = 5;
}

// Transaction and Settlement related messages

message EventInfo {
	// Basic event information
	string event_id = 1; // VARCHAR(32)
	string event_name = 2; // VARCHAR(255)
	string venue = 3; // VARCHAR(255)
	string tournament = 4; // VARCHAR(255)
	
	// Betting information
	string odds_in_user_style = 5; // VARCHAR(32)
	string bet_type_name = 6; // VARCHAR(128)
	string win_multiplier = 7; // VARCHAR(32)
	string bet_details = 8; // VARCHAR(255)
	
	// Event Description fields
	string event_description = 9; // TEXT
	string league_name = 10; // VARCHAR(255)
	string home_team = 11; // VARCHAR(255)
	string away_team = 12; // VARCHAR(255)
	string current_result = 13; // VARCHAR(32)
	int64 event_date_utc = 14; // BIGINT
	
	// Settlement Details fields
	string settlement_status = 15; // VARCHAR(64)
	string settlement_description = 16; // TEXT
	int64 bet_settled_date = 17; // BIGINT
	string triggered_result = 18; // VARCHAR(32)
	
	// Time fields
	int64 carded_time = 19; // BIGINT
	int64 first_bet_time = 20; // BIGINT
	int64 last_bet_time = 21; // BIGINT
	int64 no_more_bets_time = 22; // BIGINT
	int64 result_processing_time = 23; // BIGINT
	int64 revised_official_carded_time = 24; // BIGINT
	string status = 25; // VARCHAR(32) - pending, completed, etc.
	string selections = 26; // VARCHAR(255) - selection1, selection2, etc.
}

// Get bet and event info by game bet id
message GetBetAndEventInfoRequest {
	string game_bet_id= 1;
}

message BetInfo {
	// Basic bet information
	int64 id = 1; // bet id
	string provider_bet_id = 2; // varchar(64)
	int64 round_id = 3; // int8
	string provider_round_id = 4; // varchar(64)
	string currency = 5; // varchar(16)
	string settlement_currency = 6; // varchar(16)
	int64 user_id = 7; // int8
	string game_id = 8; // varchar(128)
	string game_name = 9; // varchar(128)
	string game_category = 10; // varchar(64)

	// Amount fields
	string bet_amount = 11; // numeric(36,18)
	string settlement_bet_amount = 12; // numeric(36,18)
	string win_amount = 13; // numeric(36,18)
	string settlement_win_amount = 14; // numeric(36,18)
	string rollback_bet_amount = 15; // numeric(36,18)
	string rollback_win_amount = 16; // numeric(36,18)

	// Timestamps
	int64 created_at = 17; // int8
	int64 updated_at = 18; // int8

	// Status and provider info
	string status = 19; // varchar(16)
	string provider_id = 20; // varchar(64)
	string provider_name = 21; // varchar(128)
	int64 operator_id = 22; // int8
	string operator_name = 23; // text

	// Additional bet info
	int64 win_count = 24; // int8
	string turnover = 25; // numeric(36,18)

	// USD amounts
	string bet_amount_usd = 26; // numeric(36,18)
	string settlement_bet_amount_usd = 27; // numeric(36,18)
	string win_amount_usd = 28; // numeric(36,18)
	string settlement_win_amount_usd = 29; // numeric(36,18)
	string turnover_usd = 30; // numeric(36,18)
	string rollback_bet_amount_usd = 31; // numeric(36,18)
	string rollback_win_amount_usd = 32; // numeric(36,18)

	// Operator hierarchy
	int64 system_operator_id = 33; // int8, nullable
	int64 retailer_operator_id = 34; // int8, nullable
	int64 company_operator_id = 35; // int8, nullable

	// Reporting currency amounts
	string reporting_currency = 36; // varchar(16)
	string amount_reporting_currency = 37; // numeric(36,18)
	string bet_amount_reporting_currency = 38; // numeric(36,18)
	string settlement_bet_amount_reporting_currency = 39; // numeric(36,18)
	string win_amount_reporting_currency = 40; // numeric(36,18)
	string settlement_win_amount_reporting_currency = 41; // numeric(36,18)
	string turnover_reporting_currency = 42; // numeric(36,18)
	string rollback_bet_amount_reporting_currency = 43; // numeric(36,18)
	string rollback_win_amount_reporting_currency = 44; // numeric(36,18)

	// Additional fields
	bool finished = 45; // bool, nullable
	string wager_type = 46; // varchar(128)
	int64 settle_time = 47; // int8, nullable
	string odds = 48; // varchar(128)
	string win_multiplier = 49; // varchar(128)
}

message GetBetAndEventInfoResponse {
	BetInfo bet_info = 1;
	repeated EventInfo event_infos = 2;
}

// Get bet and event info by game transaction id
// transaction info

// get event info

message GetTransactionAndEventInfoRequest {
	string game_transaction_id= 1;
}

message TransactionInfo {
	// Basic transaction information
	int64 id = 1; // transaction id
	int64 round_id = 2; // int8
	string action = 3; // varchar(16)
	int64 bet_id = 4; // int8
	string provider_bet_id = 5; // varchar(64)
	string provider_transaction_id = 6; // varchar(64)
	string provider_external_transaction_id = 7; // varchar(64), nullable
	
	// Transaction flags
	bool update_balance = 8; // bool, default true
	bool take_all = 9; // bool, default false
	bool is_refund = 10; // bool, default false
	
	// Amount fields
	string amount = 11; // numeric(36,18)
	string settlement_amount = 12; // numeric(36,18)
	
	// User and game info
	int64 user_id = 13; // int8
	string currency = 14; // varchar(16)
	string settlement_currency = 15; // varchar(16)
	string game_id = 16; // varchar(128)
	string game_name = 17; // varchar(128)
	string game_category = 18; // varchar(64)
	
	// Jackpot fields
	string jackpot_contribution = 19; // numeric(36,18)
	string jackpot_win = 20; // numeric(36,18)
	
	// Timestamps
	int64 bet_time = 21; // int8
	int64 settle_time = 22; // int8
	int64 provider_timestamp = 23; // int8
	string bonus_amount = 24; // numeric(36,18)
	int64 operator_timestamp = 25; // int8
	int64 processed_at = 26; // int8
	int64 created_at = 27; // int8
	int64 updated_at = 28; // int8
	
	// Provider and operator info
	string provider_id = 29; // varchar(64)
	string provider_name = 30; // varchar(128)
	int64 operator_id = 31; // int8
	string operator_name = 32; // text
	
	// Turnover
	string turnover = 33; // numeric(36,18)
	
	// USD amounts
	string amount_usd = 34; // numeric(36,18)
	string settlement_amount_usd = 35; // numeric(36,18)
	string turnover_usd = 36; // numeric(36,18)
	string bonus_amount_usd = 37; // numeric(36,18)
	string jackpot_contribution_usd = 38; // numeric(36,18)
	string jackpot_win_usd = 39; // numeric(36,18)
	
	// Operator hierarchy (nullable)
	int64 system_operator_id = 40; // int8, nullable
	int64 retailer_operator_id = 41; // int8, nullable
	int64 company_operator_id = 42; // int8, nullable
	
	// Reporting currency amounts
	string reporting_currency = 43; // varchar(16)
	string amount_reporting_currency = 44; // numeric(36,18)
	string settlement_amount_reporting_currency = 45; // numeric(36,18)
	string turnover_reporting_currency = 46; // numeric(36,18)
	string bonus_amount_reporting_currency = 47; // numeric(36,18)
	string jackpot_contribution_reporting_currency = 48; // numeric(36,18)
	string jackpot_win_reporting_currency = 49; // numeric(36,18)
}

message GetTransactionAndEventInfoResponse {
	TransactionInfo transaction_info = 1;
	BetInfo bet_info = 2;
	repeated EventInfo event_infos = 3;
}

// Customer Strike Report related messages
message ListCustomerStrikeReportsRequest {
	// Filter conditions
	optional string user_id = 1;
	// Pagination
	optional int32 page = 2;
	optional int32 page_size = 3;
	
	// Operator context for filtering
	api.common.OperatorContext operator_context = 4;
	api.common.OperatorContextFilters operator_context_filters = 5;
}

message ListCustomerStrikeReportsResponse {
	message CustomerStrikeReport {
		// Basic user information
		string user_id = 1; // User ID (e.g., "UID000042")
		string user_name = 2; // Full name (e.g., "John Smith")
		
		// Betting statistics
		int32 total_bets = 3; // Total number of bets placed (e.g., 245)
		int32 winning_bets = 4; // Number of winning bets (e.g., 198)
		string win_rate = 5; // Win rate percentage (e.g., "80.82%")
		
		// Financial information (in settlement currency, e.g., ZAR)
		string total_stake = 6; // Total stake amount (e.g., "R 24,500.00")
		string total_winning = 7; // Total winning amount (e.g., "R 31,850.00")
		string payout_rate = 8; // Payout rate percentage (e.g., "120.00%")
		int64 operator_id = 9;
		int64 company_operator_id = 10;
		int64 retailer_operator_id = 11;
		int64 system_operator_id = 12;
		string operator_name = 13;
		string company_operator_name = 14;
		string retailer_operator_name = 15;
		string system_operator_name = 16;
	}
	
	repeated CustomerStrikeReport reports = 1;
	int32 total_count = 2; // Total number of records found
	int32 page = 3;
	int32 page_size = 4;
}

message ExportSportEventsRequest {
	optional string event_name = 1;
	optional string venue = 2;
	optional string tournament = 3;
	optional string start_time = 4;
	optional string end_time = 5;
	string format = 6; // accepted values: csv, excel, pdf
	string time_zone = 7; // e.g. UTC+0, UTC+8, etc.
	api.common.OperatorContext operator_context = 8;
	int64 initiator_user_id = 9;
}

message ExportSportEventsResponse {
	int64 task_id = 1;
}

message ExportCustomerStrikeReportsRequest {
	optional int64 user_id = 1;
	string format = 2; // accepted values: csv, excel, pdf
	string time_zone = 3; // e.g. UTC+0, UTC+8, etc.
	api.common.OperatorContext operator_context = 4;
	api.common.OperatorContextFilters operator_context_filters = 5;
	int64 initiator_user_id = 6;
}

message ExportCustomerStrikeReportsResponse {
	int64 task_id = 1;
}

message CreateTaxReportRequest {
}

message CreateTaxReportResponse {
}