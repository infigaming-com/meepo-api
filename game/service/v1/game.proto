syntax = "proto3";

package api.game.service.v1;
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/infigaming-com/meepo-api/game/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.game.service.v1";

service Game {
	rpc CreateOperator(CreateOperatorRequest) returns (CreateOperatorResponse) {
	};

	rpc UpdateOperator(UpdateOperatorRequest) returns (UpdateOperatorResponse) {
	};

	rpc DeleteOperator(DeleteOperatorRequest) returns (DeleteOperatorResponse) {
	};

	rpc ListProviders(ListProvidersRequest) returns (ListProvidersResponse) {
		option (google.api.http) = {
			post: "/decimal/v1/game/providers/list"
			body: "*"
		};
	}

	rpc ListCategories(ListCategoriesRequest) returns (ListCategoriesResponse) {
		option (google.api.http) = {
			post: "/decimal/v1/game/categories/list"
			body: "*"
		};
	};

	rpc ListFeeGroups(ListFeeGroupsRequest) returns (ListFeeGroupsResponse) {}

	rpc ListTags(ListTagsRequest) returns (ListTagsResponse) {}

	rpc ListThemes(ListThemesRequest) returns (ListThemesResponse) {}

	rpc ListCurrencies(ListCurrenciesRequest) returns (ListCurrenciesResponse) {}

	rpc ListGames(ListGamesRequest) returns (ListGamesResponse) {
		option (google.api.http) = {
			post: "/decimal/v1/game/list"
			body: "*"
		};
	};

	rpc GetGame(GetGameRequest) returns (GetGameResponse) {
		option (google.api.http) = {
			post: "/decimal/v1/game/get"
			body: "*"
		};
	};

	rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse) {
		option (google.api.http) = {
			post: "/decimal/v1/game/create-session"
			body: "*"
		};
	};

	rpc Balance(BalanceRequest) returns (BalanceResponse) {
		option (google.api.http) = {
			post: "/decimal/v1/game/balance"
			body: "*"
		};
	};

	rpc Play(PlayRequest) returns (PlayResponse) {
		option (google.api.http) = {
			post: "/decimal/v1/game/play"
			body: "*"
		};
	};

	rpc Rollback(RollbackRequest) returns (RollbackResponse) {
		option (google.api.http) = {
			post: "/decimal/v1/game/rollback"
			body: "*"
		};
	};

	rpc ListBets(ListBetsRequest) returns (ListBetsResponse) {
		option (google.api.http) = {
			post: "/decimal/v1/game/bets/list"
			body: "*"
		};
	};

	rpc BackofficeListGames(BackofficeListGamesRequest) returns (BackofficeListGamesResponse) {
		option (google.api.http) = {
			post: "/decimal/v1/game/backoffice/games/list"
			body: "*"
		};
	};

	rpc UpdateGame(UpdateGameRequest) returns (UpdateGameResponse) {
	};

	rpc UpdateProvider(UpdateProviderRequest) returns (UpdateProviderResponse) {
	};

	rpc GetBetById(GetBetByIdRequest) returns (GetBetByIdResponse) {
	}

	rpc GetBackofficeUserOverviewFromGame(GetBackofficeUserOverviewFromGameRequest) returns (GetBackofficeUserOverviewFromGameResponse) {
	}

	rpc ListProviderRates(ListProviderRatesRequest) returns (ListProviderRatesResponse) {}

	rpc GetGameTransactionById(GetGameTransactionByIdRequest) returns (GetGameTransactionByIdResponse) {
	}
}

message CreateOperatorRequest {
	string aggregator_operator_id = 1;
	int64 operator_id = 2;
	string api_key = 3;
	string api_secret = 4;
	bool enabled = 5;
}

message CreateOperatorResponse {
}

message UpdateOperatorRequest {
	int64 operator_id = 1;
	string aggregator_operator_id = 2;
	string api_key = 3;
	string api_secret = 4;
	bool enabled = 5;
}

message UpdateOperatorResponse {
	int64 operator_id = 1;
	string aggregator_operator_id = 2;
	string api_key = 3;
	string api_secret = 4;
	bool enabled = 5;
}

message DeleteOperatorRequest {
	int64 operator_id = 1;
}

message DeleteOperatorResponse {
}

message GameFilter {
	// provider id: provider list api
	repeated string provider_ids = 1;
	// tag: hot game, live casino, slots, etc..
	string tag = 2;
	// name: game name
	string name = 3;
}

message GameSort {
	enum Field {
		ASC = 0;
		DESC = 1;
		POPULARITY = 2;
		HIGHLIGHT = 3;
	}
	Field field = 1;
}

message ListProvidersRequest {
	// Optional filter for provider's id.
	// If not provided, all providers will be returned.
	optional string provider_id = 1;
	// Optional filter for provider's enabled status.
	// If not provided, all providers will be returned.
	optional bool enabled = 2;
	// Optional filter for game's tag.
	// If not provided, all providers will be returned.
	optional string tag = 3;
	// Include game count in response, false by default.
	// Only enable it for ListProviders page which game_count is needed.
	optional bool include_game_count = 4;
	// Enable pagination, false by default.
	// Only enable it for ListProviders page.
	optional bool pagination_enabled = 5;
	optional int32 page = 6;
	optional int32 page_size = 7;
}

message ListProvidersResponse {
	message Provider {
		string provider_id = 1;
		string provider_name = 2;
		// Only available when include_game_count is true
		optional int32 game_count = 3;
		bool enabled = 4;
	}
	repeated Provider providers = 1;
	optional int32 total = 2;
	optional int32 total_enabled = 3;
	optional int32 total_disabled = 4;
	optional int32 page = 5;
	optional int32 page_size = 6;
}

message ListCategoriesRequest{}

message ListCategoriesResponse {
	repeated string categories = 1;
}

message ListFeeGroupsRequest {}

message ListFeeGroupsResponse {
	repeated string fee_groups = 1;
}

message ListTagsRequest {}

message ListTagsResponse {
	repeated string tags = 1;
}

message ListThemesRequest {}

message ListThemesResponse {
	repeated string themes = 1;
}

message ListCurrenciesRequest {}

message ListCurrenciesResponse {
	repeated string currencies = 1;
}

message ListGamesRequest {
	// page number for pagination (starts from 1)
	int64 page = 1;
	// page size for pagination
	int64 page_size = 2;
	// filter
	GameFilter filter = 3;
	// sort
	GameSort sort = 4;
}

message ListGamesResponse {
	repeated string game_ids = 1;
	int64 total = 2;
	int64 page = 3;
	int64 page_size = 4;
}

message GetGameRequest {
	string game_id = 1;
}

message GetGameResponse {
	GameInfo game = 1;
}

message GameInfo {
	string id = 1;
	bool enabled = 2;
	string name = 3;
	string provider_id = 4;
	string provider_name = 5;
	string category = 6;
	repeated string languages = 7;
	repeated string currencies = 8;
	string theme = 9;
	bool has_jackpot = 10;
	string jackpot_type = 11;
	bool forbid_bonus_play = 12;
	bool has_freespins = 13;
	double payout = 14;
	double hit_rate = 15;
	string volatility_rating = 16;
	int32 lines = 17;
	int32 ways = 18;
	string description = 19;
	double multiplier = 20;
	int64 released_at = 21;
	bool bonus_buy = 22;
	string restrictions = 23;
}

message CreateSessionRequest {
	string game_id = 1;
	string currency = 2;
	string settlement_currency = 3;
	string locale = 4;
	UrlInfo urls = 5;
}

message CreateSessionResponse {
	string game_url = 1;
}

message UrlInfo {
	// URL to redirect user after session is finished.
	string return_url = 1;
	// URL to redirect user to deposit.
	string deposit_url = 2;
	// URL to redirect user to lobby.
	string lobby_url = 3;
}

message BalanceRequest {
	string user_id = 1;
	string currency = 2;
	string game_id = 3;
	string round_id = 4;
	bool finished = 5;
	int64 session_id = 6;
}

message BalanceResponse {
	message Data {
		double balance = 1;
		double bonus = 2;
		string round_id = 3;
	}
	Data data = 1;
}

message PlayRequest {
	string user_id = 1;
	string currency = 2;
	string game_id = 3;
	string round_id = 4;
	bool finished = 5;
	string sm_result = 6;
	int64 session_id = 7;
	repeated Action actions = 8;
}

message PlayResponse {
	message Data {
		double balance = 1;
		string round_id = 2;
		repeated Transactions transactions = 3;
	}
	Data data = 1;
}

message Action {
	string action = 1;
	string bet_id = 2;
	string txn_id = 3;
	string ext_txn_id = 4;
	bool update_balance = 5;
	bool take_all = 6;
	bool is_refund = 7;
	int64 amount = 8;
	float jackpot_contribution = 9;
	int64 jackpot_win = 10;
	int64 bet_time = 11;
	int64 settle_time = 12;
	int64 provider_timestamp = 13;
}

message Transactions {
	string txn_id = 1 [json_name="txn_id"];
	string operator_txn_id = 2 [json_name="operator_txn_id"];
	double processed_at = 3 [json_name="processed_at"];
	double bonus_amount = 4 [json_name="bonus_amount"];
}

message RollbackRequest {
	string user_id = 1;
	string currency = 2;
	string game_id = 3;
	string round_id = 4;
	bool finished = 5;
	string sm_result = 6;
	repeated RollbackAction actions = 7;
}

message RollbackAction {
	string action = 1;
	string bet_id = 2;
	string txn_id = 3;
	string ext_txn_id = 4;
	string original_txn_id = 5;
	string original_ext_txn_id = 6;
	int64 provider_timestamp = 7;
}

message RollbackResponse {
	message Data {
		double balance = 1;
		string round_id = 2;
		repeated RollbackTransactions transactions = 3;
	}
	Data data = 1;
}

message RollbackTransactions {
	string txn_id = 1;
	string operator_txn_id = 2;
	string processed_at = 3;
}

message ListBetsRequest {
	message CurrencyWithRange {
		string currency = 1;
		optional string min_bet_amount = 2;
		optional string max_bet_amount = 3;
		optional string min_win_amount = 4;
		optional string max_win_amount = 5;
	}
	message Currencies {
		repeated string currencies = 1;
	}
	repeated int64 operator_ids = 1;
	repeated string provider_ids = 2;
	optional string game_name = 3;
	optional string game_id = 4;
	optional int64 user_id = 5;
	optional int64 operator_bet_id = 6;
	optional string provider_bet_id = 7;
	optional google.protobuf.Timestamp start_time = 8;
	optional google.protobuf.Timestamp end_time = 9;
	oneof settlement_currency_option {
		CurrencyWithRange settlement_currency_with_ranges = 10;
		Currencies settlement_currencies = 11;
	}
	repeated string categories = 12;
	optional string status = 13;
	optional int64 page = 14;
	optional int64 page_size = 15;
}

message Bet {
	int64 id = 1;
	string provider_bet_id = 2;
	int64 round_id = 3;
	string provider_round_id = 4;
	string provider_id = 5;
	string provider_name = 6;
	int64 operator_id = 7;
	string operator_name = 8;
	string currency = 9;
	string settlement_currency = 10;
	string status = 11; //pending, end
	int64 user_id = 12;
	string game_id = 13;
	string game_name = 14;
	string game_category = 15;
	int32 win_count = 16;
	string bet_amount = 17;
	string valid_bet_amount = 18;
	string settlement_bet_amount = 19;
	string win_amount = 20;
	string settlement_win_amount = 21;
	string turnover = 22;
	string odds = 23;
	string rollback_bet_amount = 24;
	string rollback_win_amount = 25;
	google.protobuf.Timestamp created_at = 26;
	google.protobuf.Timestamp updated_at = 27;
}

message ListBetsResponse {
	repeated Bet bets = 1;
	string turnover = 2;
	string win_amount = 3;
	int32 bet_count = 4;
	int32 rtp_percentage = 5; // value from 0 to 100
	int64 total = 6;
	int64 page = 7;
	int64 page_size = 8;
}

message BackofficeListGamesRequest {
	repeated string provider_ids = 1;
	repeated string categories = 2;
	repeated string fee_groups = 3;
	optional string game_id = 4;
	repeated string game_tags = 5;
	repeated string themes = 6;
	optional bool support_bonus_buy = 7;
	optional bool has_freespins = 8;
	repeated string support_currencies = 9;
	repeated string restricted_countries = 10;
	optional bool enabled = 11;
	optional int64 page = 12;
	optional int64 page_size = 13;
}

message BackofficeListGamesResponse {
	message Game {
		string name = 1;
		string provider = 2;
		string id = 3;
		string category = 4;
		string theme = 5;
		bool support_bonus_buy = 6;
		bool has_freespins = 7;
		repeated string tags = 8;
		string fee_group = 9;
		int32 rate = 10;
		int32 rtp = 11;
		int32 valid_bet_rate = 12;
		repeated string support_currencies = 13;
		repeated string restricted_countries = 14;
		bool enabled = 15;
	}
	repeated Game games = 1;
	int64 page = 2;
	int64 page_size = 3;
	int64 total = 4;
	int64 total_enabled = 5;
	int64 total_disabled = 6;
}

message UpdateGameRequest {
	string game_id = 1;
	optional bool enabled = 2;
}

message UpdateGameResponse {
}

message UpdateProviderRequest {
	string provider_id = 1;
	optional bool enabled = 2;
}

message UpdateProviderResponse {
}

message GetBetByIdRequest {
	int64 bet_id = 1;
	optional bool include_actions = 2;
}

message GetBetByIdResponse {
	message Action {
		int64 id = 1;
		int64 round_id = 2;
		string action = 3;
		int64 bet_id = 4;
		string provider_bet_id = 5;
		string provider_transaction_id = 6;
		string provider_external_transaction_id = 7;
		string provider_id = 8;
		string provider_name = 9;
		int64 operator_id = 10;
		string operator_name = 11;
		bool update_balance = 12;
		bool take_all = 13;
		bool is_refund = 14;
		int64 amount = 15;
		int64 amount_usd = 16;
		int64 settlement_amount = 17;
		int64 settlement_amount_usd = 18;
		int64 turnover = 19;
		int64 turnover_usd = 20;
		int64 user_id = 21;
		string currency = 22;
		string settlement_currency = 23;
		string game_id = 24;
		string game_name = 25;
		string game_category = 26;
		double jackpot_contribution = 27;
		double jackpot_contribution_usd = 28;
		int64 jackpot_win = 29;
		int64 jackpot_win_usd = 30;
		int64 bet_time = 31;
		int64 settle_time = 32;
		int64 provider_timestamp = 33;
		int64 bonus_amount = 34;
		int64 bonus_amount_usd = 35;
		int64 operator_timestamp = 36;
		int64 processed_at = 37;
		int64 created_at = 38;
		int64 updated_at = 39;
	}
	message Bet {
		int64 id = 1;
		string provider_bet_id = 2;
		int64 round_id = 3;
		string provider_round_id = 4;
		string provider_id = 5;
		string provider_name = 6;
		int64 operator_id = 7;
		string operator_name = 8;
		string currency = 9;
		string settlement_currency = 10;
		string status = 11;
		int64 user_id = 12;
		string game_id = 13;
		string game_name = 14;
		string game_category = 15;
		int64 win_count = 16;
		int64 bet_amount = 17;
		int64 bet_amount_usd = 18;
		int64 settlement_bet_amount = 19;
		int64 settlement_bet_amount_usd = 20;
		int64 win_amount = 21;
		int64 win_amount_usd = 22;
		int64 settlement_win_amount = 23;
		int64 settlement_win_amount_usd = 24;
		int64 turnover = 25;
		int64 turnover_usd = 26;
		int64 rollback_bet_amount = 27;
		int64 rollback_bet_amount_usd = 28;
		int64 rollback_win_amount = 29;
		int64 rollback_win_amount_usd = 30;
		int64 created_at = 31;
		int64 updated_at = 32;
		repeated Action actions = 33;
	}
	Bet bet = 1;
}

message GetBackofficeUserOverviewFromGameRequest {
	string user_id = 1;
	optional google.protobuf.Timestamp start_time = 2;
	optional google.protobuf.Timestamp end_time = 3;
}

message GetBackofficeUserOverviewFromGameResponse {
	message GameData {
		string game_type = 1; // game category
		string ggr = 2;
		string turnover = 3;
		string rtp = 4;
	}
	repeated GameData game_data = 1;
}

message GetGameTransactionByIdRequest {
	int64 transaction_id = 1;
}

message GetGameTransactionByIdResponse {
	int64 id = 1; // transaction id
	int64 round_id = 2;
	string action = 3;
	int64 bet_id = 4;
	string provider_bet_id = 5;
	string provider_transaction_id = 6;
	string provider_external_transaction_id = 7;
	string provider_id = 8;
	string provider_name = 9;
	int64 operator_id = 10;
	string operator_name = 11;
	bool update_balance = 12;
	bool take_all = 13;
	bool is_refund = 14;
	string amount = 15;
	string amount_usd = 16;
	string settlement_amount = 17;
	string settlement_amount_usd = 18;
	string turnover = 19;
	string turnover_usd = 20;
	int64 user_id = 21;
	string currency = 22;
	string settlement_currency = 23;
	string game_id = 24;
	string game_name = 25;
	string game_category = 26;
	string jackpot_contribution = 27;
	string jackpot_contribution_usd = 28;
	string jackpot_win = 29;
	string jackpot_win_usd = 30;
	google.protobuf.Timestamp bet_time = 31;
	google.protobuf.Timestamp settle_time = 32;
	google.protobuf.Timestamp provider_timestamp = 33;
	string bonus_amount = 34;
	string bonus_amount_usd = 35;
	google.protobuf.Timestamp operator_timestamp = 36;
	google.protobuf.Timestamp processed_at = 37;
	google.protobuf.Timestamp created_at = 38;
	google.protobuf.Timestamp updated_at = 39;
}

message ListProviderRatesRequest {
	optional string fee_group = 1;
	optional string currency = 2;
	optional string provider_id = 3;
	int32 page = 4;
	int32 page_size = 5;
}

message ListProviderRatesResponse {
	message ProviderRate {
		string provider_id = 1;
		string provider_name = 2;
		string fee_group = 3;
		string currency = 4;
		double rate = 5;
	}
	repeated ProviderRate provider_rates = 1;
	int32 page = 2;
	int32 page_size = 3;
	int32 total = 4;
}