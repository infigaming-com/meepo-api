// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: game/service/v1/game.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOperatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOperatorRequestMultiError, or nil if none found.
func (m *CreateOperatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOperatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AggregatorOperatorId

	// no validation rules for OperatorId

	// no validation rules for ApiKey

	// no validation rules for ApiSecret

	// no validation rules for Enabled

	if len(errors) > 0 {
		return CreateOperatorRequestMultiError(errors)
	}

	return nil
}

// CreateOperatorRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOperatorRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOperatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOperatorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOperatorRequestMultiError) AllErrors() []error { return m }

// CreateOperatorRequestValidationError is the validation error returned by
// CreateOperatorRequest.Validate if the designated constraints aren't met.
type CreateOperatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOperatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOperatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOperatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOperatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOperatorRequestValidationError) ErrorName() string {
	return "CreateOperatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOperatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOperatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOperatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOperatorRequestValidationError{}

// Validate checks the field values on CreateOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOperatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOperatorResponseMultiError, or nil if none found.
func (m *CreateOperatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOperatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOperatorResponseMultiError(errors)
	}

	return nil
}

// CreateOperatorResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOperatorResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOperatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOperatorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOperatorResponseMultiError) AllErrors() []error { return m }

// CreateOperatorResponseValidationError is the validation error returned by
// CreateOperatorResponse.Validate if the designated constraints aren't met.
type CreateOperatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOperatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOperatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOperatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOperatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOperatorResponseValidationError) ErrorName() string {
	return "CreateOperatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOperatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOperatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOperatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOperatorResponseValidationError{}

// Validate checks the field values on UpdateOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOperatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOperatorRequestMultiError, or nil if none found.
func (m *UpdateOperatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOperatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for AggregatorOperatorId

	// no validation rules for ApiKey

	// no validation rules for ApiSecret

	// no validation rules for Enabled

	if len(errors) > 0 {
		return UpdateOperatorRequestMultiError(errors)
	}

	return nil
}

// UpdateOperatorRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOperatorRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOperatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOperatorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOperatorRequestMultiError) AllErrors() []error { return m }

// UpdateOperatorRequestValidationError is the validation error returned by
// UpdateOperatorRequest.Validate if the designated constraints aren't met.
type UpdateOperatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOperatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOperatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOperatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOperatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOperatorRequestValidationError) ErrorName() string {
	return "UpdateOperatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOperatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOperatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOperatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOperatorRequestValidationError{}

// Validate checks the field values on UpdateOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOperatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOperatorResponseMultiError, or nil if none found.
func (m *UpdateOperatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOperatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for AggregatorOperatorId

	// no validation rules for ApiKey

	// no validation rules for ApiSecret

	// no validation rules for Enabled

	if len(errors) > 0 {
		return UpdateOperatorResponseMultiError(errors)
	}

	return nil
}

// UpdateOperatorResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateOperatorResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOperatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOperatorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOperatorResponseMultiError) AllErrors() []error { return m }

// UpdateOperatorResponseValidationError is the validation error returned by
// UpdateOperatorResponse.Validate if the designated constraints aren't met.
type UpdateOperatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOperatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOperatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOperatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOperatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOperatorResponseValidationError) ErrorName() string {
	return "UpdateOperatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOperatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOperatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOperatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOperatorResponseValidationError{}

// Validate checks the field values on DeleteOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOperatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOperatorRequestMultiError, or nil if none found.
func (m *DeleteOperatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOperatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return DeleteOperatorRequestMultiError(errors)
	}

	return nil
}

// DeleteOperatorRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOperatorRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteOperatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOperatorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOperatorRequestMultiError) AllErrors() []error { return m }

// DeleteOperatorRequestValidationError is the validation error returned by
// DeleteOperatorRequest.Validate if the designated constraints aren't met.
type DeleteOperatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOperatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOperatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOperatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOperatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOperatorRequestValidationError) ErrorName() string {
	return "DeleteOperatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOperatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOperatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOperatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOperatorRequestValidationError{}

// Validate checks the field values on DeleteOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOperatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOperatorResponseMultiError, or nil if none found.
func (m *DeleteOperatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOperatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOperatorResponseMultiError(errors)
	}

	return nil
}

// DeleteOperatorResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteOperatorResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteOperatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOperatorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOperatorResponseMultiError) AllErrors() []error { return m }

// DeleteOperatorResponseValidationError is the validation error returned by
// DeleteOperatorResponse.Validate if the designated constraints aren't met.
type DeleteOperatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOperatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOperatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOperatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOperatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOperatorResponseValidationError) ErrorName() string {
	return "DeleteOperatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOperatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOperatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOperatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOperatorResponseValidationError{}

// Validate checks the field values on ListGamesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGamesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGamesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGamesRequestMultiError, or nil if none found.
func (m *ListGamesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGamesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListGamesRequestMultiError(errors)
	}

	return nil
}

// ListGamesRequestMultiError is an error wrapping multiple validation errors
// returned by ListGamesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListGamesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGamesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGamesRequestMultiError) AllErrors() []error { return m }

// ListGamesRequestValidationError is the validation error returned by
// ListGamesRequest.Validate if the designated constraints aren't met.
type ListGamesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGamesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGamesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGamesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGamesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGamesRequestValidationError) ErrorName() string { return "ListGamesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListGamesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGamesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGamesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGamesRequestValidationError{}

// Validate checks the field values on ListGamesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGamesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGamesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGamesResponseMultiError, or nil if none found.
func (m *ListGamesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGamesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGames() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGamesResponseValidationError{
						field:  fmt.Sprintf("Games[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGamesResponseValidationError{
						field:  fmt.Sprintf("Games[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGamesResponseValidationError{
					field:  fmt.Sprintf("Games[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListGamesResponseMultiError(errors)
	}

	return nil
}

// ListGamesResponseMultiError is an error wrapping multiple validation errors
// returned by ListGamesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListGamesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGamesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGamesResponseMultiError) AllErrors() []error { return m }

// ListGamesResponseValidationError is the validation error returned by
// ListGamesResponse.Validate if the designated constraints aren't met.
type ListGamesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGamesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGamesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGamesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGamesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGamesResponseValidationError) ErrorName() string {
	return "ListGamesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGamesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGamesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGamesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGamesResponseValidationError{}

// Validate checks the field values on GameInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GameInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GameInfoMultiError, or nil
// if none found.
func (m *GameInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GameInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Enabled

	// no validation rules for Name

	// no validation rules for ProviderId

	// no validation rules for Category

	// no validation rules for Theme

	// no validation rules for FeeGroup

	// no validation rules for Customised

	// no validation rules for HasJackpot

	// no validation rules for JackpotType

	// no validation rules for ForbidBonusPlay

	// no validation rules for HasFreespins

	// no validation rules for Payout

	// no validation rules for HitRate

	// no validation rules for VolatilityRating

	// no validation rules for Lines

	// no validation rules for Ways

	// no validation rules for Description

	// no validation rules for HasLive

	// no validation rules for Hd

	// no validation rules for Accumulating

	// no validation rules for Multiplier

	// no validation rules for ReleasedAt

	// no validation rules for RecalledAt

	// no validation rules for BonusBuy

	// no validation rules for Restrictions

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Resources

	// no validation rules for ProviderGameId

	// no validation rules for Assets

	if len(errors) > 0 {
		return GameInfoMultiError(errors)
	}

	return nil
}

// GameInfoMultiError is an error wrapping multiple validation errors returned
// by GameInfo.ValidateAll() if the designated constraints aren't met.
type GameInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameInfoMultiError) AllErrors() []error { return m }

// GameInfoValidationError is the validation error returned by
// GameInfo.Validate if the designated constraints aren't met.
type GameInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameInfoValidationError) ErrorName() string { return "GameInfoValidationError" }

// Error satisfies the builtin error interface
func (e GameInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameInfoValidationError{}

// Validate checks the field values on CreateSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSessionRequestMultiError, or nil if none found.
func (m *CreateSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for GameId

	// no validation rules for Currency

	// no validation rules for Locale

	// no validation rules for Ip

	// no validation rules for ClientType

	// no validation rules for Balance

	if all {
		switch v := interface{}(m.GetUrls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSessionRequestValidationError{
					field:  "Urls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSessionRequestValidationError{
					field:  "Urls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUrls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSessionRequestValidationError{
				field:  "Urls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSessionRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSessionRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSessionRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Jurisdiction

	// no validation rules for Payload

	if len(errors) > 0 {
		return CreateSessionRequestMultiError(errors)
	}

	return nil
}

// CreateSessionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSessionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSessionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSessionRequestMultiError) AllErrors() []error { return m }

// CreateSessionRequestValidationError is the validation error returned by
// CreateSessionRequest.Validate if the designated constraints aren't met.
type CreateSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSessionRequestValidationError) ErrorName() string {
	return "CreateSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSessionRequestValidationError{}

// Validate checks the field values on CreateSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSessionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSessionResponseMultiError, or nil if none found.
func (m *CreateSessionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSessionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameUrl

	if len(errors) > 0 {
		return CreateSessionResponseMultiError(errors)
	}

	return nil
}

// CreateSessionResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSessionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSessionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSessionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSessionResponseMultiError) AllErrors() []error { return m }

// CreateSessionResponseValidationError is the validation error returned by
// CreateSessionResponse.Validate if the designated constraints aren't met.
type CreateSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSessionResponseValidationError) ErrorName() string {
	return "CreateSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSessionResponseValidationError{}

// Validate checks the field values on UrlInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UrlInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UrlInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UrlInfoMultiError, or nil if none found.
func (m *UrlInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UrlInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReturnUrl

	// no validation rules for DepositUrl

	// no validation rules for LobbyUrl

	if len(errors) > 0 {
		return UrlInfoMultiError(errors)
	}

	return nil
}

// UrlInfoMultiError is an error wrapping multiple validation errors returned
// by UrlInfo.ValidateAll() if the designated constraints aren't met.
type UrlInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UrlInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UrlInfoMultiError) AllErrors() []error { return m }

// UrlInfoValidationError is the validation error returned by UrlInfo.Validate
// if the designated constraints aren't met.
type UrlInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UrlInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UrlInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UrlInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UrlInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UrlInfoValidationError) ErrorName() string { return "UrlInfoValidationError" }

// Error satisfies the builtin error interface
func (e UrlInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUrlInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UrlInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UrlInfoValidationError{}

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WalletUserId

	// no validation rules for UserId

	// no validation rules for Email

	// no validation rules for Firstname

	// no validation rules for Lastname

	// no validation rules for Nickname

	// no validation rules for City

	// no validation rules for DateOfBirth

	// no validation rules for RegisteredAt

	// no validation rules for Gender

	// no validation rules for Country

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}
