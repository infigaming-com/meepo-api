// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: game/service/v1/game.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOperatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOperatorRequestMultiError, or nil if none found.
func (m *CreateOperatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOperatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AggregatorOperatorId

	// no validation rules for OperatorId

	// no validation rules for ApiKey

	// no validation rules for ApiSecret

	// no validation rules for Enabled

	if len(errors) > 0 {
		return CreateOperatorRequestMultiError(errors)
	}

	return nil
}

// CreateOperatorRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOperatorRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOperatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOperatorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOperatorRequestMultiError) AllErrors() []error { return m }

// CreateOperatorRequestValidationError is the validation error returned by
// CreateOperatorRequest.Validate if the designated constraints aren't met.
type CreateOperatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOperatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOperatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOperatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOperatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOperatorRequestValidationError) ErrorName() string {
	return "CreateOperatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOperatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOperatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOperatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOperatorRequestValidationError{}

// Validate checks the field values on CreateOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOperatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOperatorResponseMultiError, or nil if none found.
func (m *CreateOperatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOperatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOperatorResponseMultiError(errors)
	}

	return nil
}

// CreateOperatorResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOperatorResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOperatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOperatorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOperatorResponseMultiError) AllErrors() []error { return m }

// CreateOperatorResponseValidationError is the validation error returned by
// CreateOperatorResponse.Validate if the designated constraints aren't met.
type CreateOperatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOperatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOperatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOperatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOperatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOperatorResponseValidationError) ErrorName() string {
	return "CreateOperatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOperatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOperatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOperatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOperatorResponseValidationError{}

// Validate checks the field values on UpdateOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOperatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOperatorRequestMultiError, or nil if none found.
func (m *UpdateOperatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOperatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for AggregatorOperatorId

	// no validation rules for ApiKey

	// no validation rules for ApiSecret

	// no validation rules for Enabled

	if len(errors) > 0 {
		return UpdateOperatorRequestMultiError(errors)
	}

	return nil
}

// UpdateOperatorRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOperatorRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOperatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOperatorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOperatorRequestMultiError) AllErrors() []error { return m }

// UpdateOperatorRequestValidationError is the validation error returned by
// UpdateOperatorRequest.Validate if the designated constraints aren't met.
type UpdateOperatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOperatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOperatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOperatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOperatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOperatorRequestValidationError) ErrorName() string {
	return "UpdateOperatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOperatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOperatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOperatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOperatorRequestValidationError{}

// Validate checks the field values on UpdateOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOperatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOperatorResponseMultiError, or nil if none found.
func (m *UpdateOperatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOperatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for AggregatorOperatorId

	// no validation rules for ApiKey

	// no validation rules for ApiSecret

	// no validation rules for Enabled

	if len(errors) > 0 {
		return UpdateOperatorResponseMultiError(errors)
	}

	return nil
}

// UpdateOperatorResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateOperatorResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOperatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOperatorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOperatorResponseMultiError) AllErrors() []error { return m }

// UpdateOperatorResponseValidationError is the validation error returned by
// UpdateOperatorResponse.Validate if the designated constraints aren't met.
type UpdateOperatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOperatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOperatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOperatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOperatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOperatorResponseValidationError) ErrorName() string {
	return "UpdateOperatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOperatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOperatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOperatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOperatorResponseValidationError{}

// Validate checks the field values on DeleteOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOperatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOperatorRequestMultiError, or nil if none found.
func (m *DeleteOperatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOperatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return DeleteOperatorRequestMultiError(errors)
	}

	return nil
}

// DeleteOperatorRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOperatorRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteOperatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOperatorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOperatorRequestMultiError) AllErrors() []error { return m }

// DeleteOperatorRequestValidationError is the validation error returned by
// DeleteOperatorRequest.Validate if the designated constraints aren't met.
type DeleteOperatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOperatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOperatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOperatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOperatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOperatorRequestValidationError) ErrorName() string {
	return "DeleteOperatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOperatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOperatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOperatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOperatorRequestValidationError{}

// Validate checks the field values on DeleteOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOperatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOperatorResponseMultiError, or nil if none found.
func (m *DeleteOperatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOperatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOperatorResponseMultiError(errors)
	}

	return nil
}

// DeleteOperatorResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteOperatorResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteOperatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOperatorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOperatorResponseMultiError) AllErrors() []error { return m }

// DeleteOperatorResponseValidationError is the validation error returned by
// DeleteOperatorResponse.Validate if the designated constraints aren't met.
type DeleteOperatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOperatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOperatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOperatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOperatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOperatorResponseValidationError) ErrorName() string {
	return "DeleteOperatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOperatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOperatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOperatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOperatorResponseValidationError{}

// Validate checks the field values on GameFilter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GameFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GameFilterMultiError, or
// nil if none found.
func (m *GameFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *GameFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProviderId

	// no validation rules for Tags

	if len(errors) > 0 {
		return GameFilterMultiError(errors)
	}

	return nil
}

// GameFilterMultiError is an error wrapping multiple validation errors
// returned by GameFilter.ValidateAll() if the designated constraints aren't met.
type GameFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameFilterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameFilterMultiError) AllErrors() []error { return m }

// GameFilterValidationError is the validation error returned by
// GameFilter.Validate if the designated constraints aren't met.
type GameFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameFilterValidationError) ErrorName() string { return "GameFilterValidationError" }

// Error satisfies the builtin error interface
func (e GameFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameFilterValidationError{}

// Validate checks the field values on GameSort with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GameSort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameSort with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GameSortMultiError, or nil
// if none found.
func (m *GameSort) ValidateAll() error {
	return m.validate(true)
}

func (m *GameSort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	if len(errors) > 0 {
		return GameSortMultiError(errors)
	}

	return nil
}

// GameSortMultiError is an error wrapping multiple validation errors returned
// by GameSort.ValidateAll() if the designated constraints aren't met.
type GameSortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameSortMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameSortMultiError) AllErrors() []error { return m }

// GameSortValidationError is the validation error returned by
// GameSort.Validate if the designated constraints aren't met.
type GameSortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameSortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameSortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameSortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameSortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameSortValidationError) ErrorName() string { return "GameSortValidationError" }

// Error satisfies the builtin error interface
func (e GameSortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameSort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameSortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameSortValidationError{}

// Validate checks the field values on ListCategoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCategoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCategoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCategoriesRequestMultiError, or nil if none found.
func (m *ListCategoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCategoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCategoriesRequestMultiError(errors)
	}

	return nil
}

// ListCategoriesRequestMultiError is an error wrapping multiple validation
// errors returned by ListCategoriesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCategoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCategoriesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCategoriesRequestMultiError) AllErrors() []error { return m }

// ListCategoriesRequestValidationError is the validation error returned by
// ListCategoriesRequest.Validate if the designated constraints aren't met.
type ListCategoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoriesRequestValidationError) ErrorName() string {
	return "ListCategoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCategoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoriesRequestValidationError{}

// Validate checks the field values on ListCategoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCategoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCategoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCategoriesResponseMultiError, or nil if none found.
func (m *ListCategoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCategoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCategoriesResponseMultiError(errors)
	}

	return nil
}

// ListCategoriesResponseMultiError is an error wrapping multiple validation
// errors returned by ListCategoriesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCategoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCategoriesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCategoriesResponseMultiError) AllErrors() []error { return m }

// ListCategoriesResponseValidationError is the validation error returned by
// ListCategoriesResponse.Validate if the designated constraints aren't met.
type ListCategoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoriesResponseValidationError) ErrorName() string {
	return "ListCategoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCategoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoriesResponseValidationError{}

// Validate checks the field values on ListGamesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGamesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGamesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGamesRequestMultiError, or nil if none found.
func (m *ListGamesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGamesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGamesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGamesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGamesRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSort()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGamesRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGamesRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGamesRequestValidationError{
				field:  "Sort",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListGamesRequestMultiError(errors)
	}

	return nil
}

// ListGamesRequestMultiError is an error wrapping multiple validation errors
// returned by ListGamesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListGamesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGamesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGamesRequestMultiError) AllErrors() []error { return m }

// ListGamesRequestValidationError is the validation error returned by
// ListGamesRequest.Validate if the designated constraints aren't met.
type ListGamesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGamesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGamesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGamesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGamesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGamesRequestValidationError) ErrorName() string { return "ListGamesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListGamesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGamesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGamesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGamesRequestValidationError{}

// Validate checks the field values on ListGamesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGamesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGamesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGamesResponseMultiError, or nil if none found.
func (m *ListGamesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGamesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListGamesResponseMultiError(errors)
	}

	return nil
}

// ListGamesResponseMultiError is an error wrapping multiple validation errors
// returned by ListGamesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListGamesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGamesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGamesResponseMultiError) AllErrors() []error { return m }

// ListGamesResponseValidationError is the validation error returned by
// ListGamesResponse.Validate if the designated constraints aren't met.
type ListGamesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGamesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGamesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGamesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGamesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGamesResponseValidationError) ErrorName() string {
	return "ListGamesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGamesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGamesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGamesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGamesResponseValidationError{}

// Validate checks the field values on GetGameRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetGameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetGameRequestMultiError,
// or nil if none found.
func (m *GetGameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if len(errors) > 0 {
		return GetGameRequestMultiError(errors)
	}

	return nil
}

// GetGameRequestMultiError is an error wrapping multiple validation errors
// returned by GetGameRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameRequestMultiError) AllErrors() []error { return m }

// GetGameRequestValidationError is the validation error returned by
// GetGameRequest.Validate if the designated constraints aren't met.
type GetGameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameRequestValidationError) ErrorName() string { return "GetGameRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameRequestValidationError{}

// Validate checks the field values on GetGameResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameResponseMultiError, or nil if none found.
func (m *GetGameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGame()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGameResponseValidationError{
					field:  "Game",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGameResponseValidationError{
					field:  "Game",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGame()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGameResponseValidationError{
				field:  "Game",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGameResponseMultiError(errors)
	}

	return nil
}

// GetGameResponseMultiError is an error wrapping multiple validation errors
// returned by GetGameResponse.ValidateAll() if the designated constraints
// aren't met.
type GetGameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameResponseMultiError) AllErrors() []error { return m }

// GetGameResponseValidationError is the validation error returned by
// GetGameResponse.Validate if the designated constraints aren't met.
type GetGameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameResponseValidationError) ErrorName() string { return "GetGameResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetGameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameResponseValidationError{}

// Validate checks the field values on GameInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GameInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GameInfoMultiError, or nil
// if none found.
func (m *GameInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GameInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Enabled

	// no validation rules for Name

	// no validation rules for ProviderId

	// no validation rules for ProviderName

	// no validation rules for Category

	// no validation rules for Theme

	// no validation rules for HasJackpot

	// no validation rules for JackpotType

	// no validation rules for ForbidBonusPlay

	// no validation rules for HasFreespins

	// no validation rules for Payout

	// no validation rules for HitRate

	// no validation rules for VolatilityRating

	// no validation rules for Lines

	// no validation rules for Ways

	// no validation rules for Description

	// no validation rules for Multiplier

	// no validation rules for ReleasedAt

	// no validation rules for BonusBuy

	// no validation rules for Restrictions

	if len(errors) > 0 {
		return GameInfoMultiError(errors)
	}

	return nil
}

// GameInfoMultiError is an error wrapping multiple validation errors returned
// by GameInfo.ValidateAll() if the designated constraints aren't met.
type GameInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameInfoMultiError) AllErrors() []error { return m }

// GameInfoValidationError is the validation error returned by
// GameInfo.Validate if the designated constraints aren't met.
type GameInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameInfoValidationError) ErrorName() string { return "GameInfoValidationError" }

// Error satisfies the builtin error interface
func (e GameInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameInfoValidationError{}

// Validate checks the field values on CreateSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSessionRequestMultiError, or nil if none found.
func (m *CreateSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	// no validation rules for Currency

	// no validation rules for SettlementCurrency

	// no validation rules for Locale

	if all {
		switch v := interface{}(m.GetUrls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSessionRequestValidationError{
					field:  "Urls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSessionRequestValidationError{
					field:  "Urls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUrls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSessionRequestValidationError{
				field:  "Urls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSessionRequestMultiError(errors)
	}

	return nil
}

// CreateSessionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSessionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSessionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSessionRequestMultiError) AllErrors() []error { return m }

// CreateSessionRequestValidationError is the validation error returned by
// CreateSessionRequest.Validate if the designated constraints aren't met.
type CreateSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSessionRequestValidationError) ErrorName() string {
	return "CreateSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSessionRequestValidationError{}

// Validate checks the field values on CreateSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSessionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSessionResponseMultiError, or nil if none found.
func (m *CreateSessionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSessionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameUrl

	if len(errors) > 0 {
		return CreateSessionResponseMultiError(errors)
	}

	return nil
}

// CreateSessionResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSessionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSessionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSessionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSessionResponseMultiError) AllErrors() []error { return m }

// CreateSessionResponseValidationError is the validation error returned by
// CreateSessionResponse.Validate if the designated constraints aren't met.
type CreateSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSessionResponseValidationError) ErrorName() string {
	return "CreateSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSessionResponseValidationError{}

// Validate checks the field values on UrlInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UrlInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UrlInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UrlInfoMultiError, or nil if none found.
func (m *UrlInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UrlInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReturnUrl

	// no validation rules for DepositUrl

	// no validation rules for LobbyUrl

	if len(errors) > 0 {
		return UrlInfoMultiError(errors)
	}

	return nil
}

// UrlInfoMultiError is an error wrapping multiple validation errors returned
// by UrlInfo.ValidateAll() if the designated constraints aren't met.
type UrlInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UrlInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UrlInfoMultiError) AllErrors() []error { return m }

// UrlInfoValidationError is the validation error returned by UrlInfo.Validate
// if the designated constraints aren't met.
type UrlInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UrlInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UrlInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UrlInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UrlInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UrlInfoValidationError) ErrorName() string { return "UrlInfoValidationError" }

// Error satisfies the builtin error interface
func (e UrlInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUrlInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UrlInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UrlInfoValidationError{}

// Validate checks the field values on ProviderListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProviderListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProviderListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProviderListRequestMultiError, or nil if none found.
func (m *ProviderListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProviderListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Tags

	if len(errors) > 0 {
		return ProviderListRequestMultiError(errors)
	}

	return nil
}

// ProviderListRequestMultiError is an error wrapping multiple validation
// errors returned by ProviderListRequest.ValidateAll() if the designated
// constraints aren't met.
type ProviderListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProviderListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProviderListRequestMultiError) AllErrors() []error { return m }

// ProviderListRequestValidationError is the validation error returned by
// ProviderListRequest.Validate if the designated constraints aren't met.
type ProviderListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderListRequestValidationError) ErrorName() string {
	return "ProviderListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProviderListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProviderListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderListRequestValidationError{}

// Validate checks the field values on ProviderListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProviderListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProviderListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProviderListResponseMultiError, or nil if none found.
func (m *ProviderListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProviderListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProviderListResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProviderListResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProviderListResponseValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProviderListResponseMultiError(errors)
	}

	return nil
}

// ProviderListResponseMultiError is an error wrapping multiple validation
// errors returned by ProviderListResponse.ValidateAll() if the designated
// constraints aren't met.
type ProviderListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProviderListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProviderListResponseMultiError) AllErrors() []error { return m }

// ProviderListResponseValidationError is the validation error returned by
// ProviderListResponse.Validate if the designated constraints aren't met.
type ProviderListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderListResponseValidationError) ErrorName() string {
	return "ProviderListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProviderListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProviderListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderListResponseValidationError{}

// Validate checks the field values on Provider with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Provider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Provider with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProviderMultiError, or nil
// if none found.
func (m *Provider) ValidateAll() error {
	return m.validate(true)
}

func (m *Provider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for GameCount

	if len(errors) > 0 {
		return ProviderMultiError(errors)
	}

	return nil
}

// ProviderMultiError is an error wrapping multiple validation errors returned
// by Provider.ValidateAll() if the designated constraints aren't met.
type ProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProviderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProviderMultiError) AllErrors() []error { return m }

// ProviderValidationError is the validation error returned by
// Provider.Validate if the designated constraints aren't met.
type ProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderValidationError) ErrorName() string { return "ProviderValidationError" }

// Error satisfies the builtin error interface
func (e ProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderValidationError{}

// Validate checks the field values on BalanceRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BalanceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BalanceRequestMultiError,
// or nil if none found.
func (m *BalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Currency

	// no validation rules for GameId

	// no validation rules for RoundId

	// no validation rules for Finished

	// no validation rules for SessionId

	if len(errors) > 0 {
		return BalanceRequestMultiError(errors)
	}

	return nil
}

// BalanceRequestMultiError is an error wrapping multiple validation errors
// returned by BalanceRequest.ValidateAll() if the designated constraints
// aren't met.
type BalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BalanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BalanceRequestMultiError) AllErrors() []error { return m }

// BalanceRequestValidationError is the validation error returned by
// BalanceRequest.Validate if the designated constraints aren't met.
type BalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BalanceRequestValidationError) ErrorName() string { return "BalanceRequestValidationError" }

// Error satisfies the builtin error interface
func (e BalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BalanceRequestValidationError{}

// Validate checks the field values on BalanceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BalanceResponseMultiError, or nil if none found.
func (m *BalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BalanceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BalanceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BalanceResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BalanceResponseMultiError(errors)
	}

	return nil
}

// BalanceResponseMultiError is an error wrapping multiple validation errors
// returned by BalanceResponse.ValidateAll() if the designated constraints
// aren't met.
type BalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BalanceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BalanceResponseMultiError) AllErrors() []error { return m }

// BalanceResponseValidationError is the validation error returned by
// BalanceResponse.Validate if the designated constraints aren't met.
type BalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BalanceResponseValidationError) ErrorName() string { return "BalanceResponseValidationError" }

// Error satisfies the builtin error interface
func (e BalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BalanceResponseValidationError{}

// Validate checks the field values on PlayRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlayRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlayRequestMultiError, or
// nil if none found.
func (m *PlayRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Currency

	// no validation rules for GameId

	// no validation rules for RoundId

	// no validation rules for Finished

	// no validation rules for SmResult

	// no validation rules for SessionId

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlayRequestValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlayRequestValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlayRequestValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlayRequestMultiError(errors)
	}

	return nil
}

// PlayRequestMultiError is an error wrapping multiple validation errors
// returned by PlayRequest.ValidateAll() if the designated constraints aren't met.
type PlayRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayRequestMultiError) AllErrors() []error { return m }

// PlayRequestValidationError is the validation error returned by
// PlayRequest.Validate if the designated constraints aren't met.
type PlayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayRequestValidationError) ErrorName() string { return "PlayRequestValidationError" }

// Error satisfies the builtin error interface
func (e PlayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayRequestValidationError{}

// Validate checks the field values on PlayResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlayResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlayResponseMultiError, or
// nil if none found.
func (m *PlayResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlayResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlayResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlayResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlayResponseMultiError(errors)
	}

	return nil
}

// PlayResponseMultiError is an error wrapping multiple validation errors
// returned by PlayResponse.ValidateAll() if the designated constraints aren't met.
type PlayResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayResponseMultiError) AllErrors() []error { return m }

// PlayResponseValidationError is the validation error returned by
// PlayResponse.Validate if the designated constraints aren't met.
type PlayResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayResponseValidationError) ErrorName() string { return "PlayResponseValidationError" }

// Error satisfies the builtin error interface
func (e PlayResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayResponseValidationError{}

// Validate checks the field values on Action with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Action) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Action with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ActionMultiError, or nil if none found.
func (m *Action) ValidateAll() error {
	return m.validate(true)
}

func (m *Action) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Action

	// no validation rules for BetId

	// no validation rules for TxnId

	// no validation rules for ExtTxnId

	// no validation rules for UpdateBalance

	// no validation rules for TakeAll

	// no validation rules for IsRefund

	// no validation rules for Amount

	// no validation rules for JackpotContribution

	// no validation rules for JackpotWin

	// no validation rules for BetTime

	// no validation rules for SettleTime

	// no validation rules for ProviderTimestamp

	if len(errors) > 0 {
		return ActionMultiError(errors)
	}

	return nil
}

// ActionMultiError is an error wrapping multiple validation errors returned by
// Action.ValidateAll() if the designated constraints aren't met.
type ActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionMultiError) AllErrors() []error { return m }

// ActionValidationError is the validation error returned by Action.Validate if
// the designated constraints aren't met.
type ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionValidationError) ErrorName() string { return "ActionValidationError" }

// Error satisfies the builtin error interface
func (e ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionValidationError{}

// Validate checks the field values on Transactions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Transactions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transactions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransactionsMultiError, or
// nil if none found.
func (m *Transactions) ValidateAll() error {
	return m.validate(true)
}

func (m *Transactions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TxnId

	// no validation rules for OperatorTxnId

	// no validation rules for ProcessedAt

	// no validation rules for BonusAmount

	if len(errors) > 0 {
		return TransactionsMultiError(errors)
	}

	return nil
}

// TransactionsMultiError is an error wrapping multiple validation errors
// returned by Transactions.ValidateAll() if the designated constraints aren't met.
type TransactionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionsMultiError) AllErrors() []error { return m }

// TransactionsValidationError is the validation error returned by
// Transactions.Validate if the designated constraints aren't met.
type TransactionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionsValidationError) ErrorName() string { return "TransactionsValidationError" }

// Error satisfies the builtin error interface
func (e TransactionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionsValidationError{}

// Validate checks the field values on RollbackRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RollbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RollbackRequestMultiError, or nil if none found.
func (m *RollbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Currency

	// no validation rules for GameId

	// no validation rules for RoundId

	// no validation rules for Finished

	// no validation rules for SmResult

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RollbackRequestValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RollbackRequestValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RollbackRequestValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RollbackRequestMultiError(errors)
	}

	return nil
}

// RollbackRequestMultiError is an error wrapping multiple validation errors
// returned by RollbackRequest.ValidateAll() if the designated constraints
// aren't met.
type RollbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackRequestMultiError) AllErrors() []error { return m }

// RollbackRequestValidationError is the validation error returned by
// RollbackRequest.Validate if the designated constraints aren't met.
type RollbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackRequestValidationError) ErrorName() string { return "RollbackRequestValidationError" }

// Error satisfies the builtin error interface
func (e RollbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackRequestValidationError{}

// Validate checks the field values on RollbackAction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RollbackAction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackAction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RollbackActionMultiError,
// or nil if none found.
func (m *RollbackAction) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackAction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Action

	// no validation rules for BetId

	// no validation rules for TxnId

	// no validation rules for ExtTxnId

	// no validation rules for OriginalTxnId

	// no validation rules for OriginalExtTxnId

	// no validation rules for ProviderTimestamp

	if len(errors) > 0 {
		return RollbackActionMultiError(errors)
	}

	return nil
}

// RollbackActionMultiError is an error wrapping multiple validation errors
// returned by RollbackAction.ValidateAll() if the designated constraints
// aren't met.
type RollbackActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackActionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackActionMultiError) AllErrors() []error { return m }

// RollbackActionValidationError is the validation error returned by
// RollbackAction.Validate if the designated constraints aren't met.
type RollbackActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackActionValidationError) ErrorName() string { return "RollbackActionValidationError" }

// Error satisfies the builtin error interface
func (e RollbackActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackActionValidationError{}

// Validate checks the field values on RollbackResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RollbackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RollbackResponseMultiError, or nil if none found.
func (m *RollbackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RollbackResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RollbackResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RollbackResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RollbackResponseMultiError(errors)
	}

	return nil
}

// RollbackResponseMultiError is an error wrapping multiple validation errors
// returned by RollbackResponse.ValidateAll() if the designated constraints
// aren't met.
type RollbackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackResponseMultiError) AllErrors() []error { return m }

// RollbackResponseValidationError is the validation error returned by
// RollbackResponse.Validate if the designated constraints aren't met.
type RollbackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackResponseValidationError) ErrorName() string { return "RollbackResponseValidationError" }

// Error satisfies the builtin error interface
func (e RollbackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackResponseValidationError{}

// Validate checks the field values on RollbackTransactions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RollbackTransactions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackTransactions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RollbackTransactionsMultiError, or nil if none found.
func (m *RollbackTransactions) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackTransactions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TxnId

	// no validation rules for OperatorTxnId

	// no validation rules for ProcessedAt

	if len(errors) > 0 {
		return RollbackTransactionsMultiError(errors)
	}

	return nil
}

// RollbackTransactionsMultiError is an error wrapping multiple validation
// errors returned by RollbackTransactions.ValidateAll() if the designated
// constraints aren't met.
type RollbackTransactionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackTransactionsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackTransactionsMultiError) AllErrors() []error { return m }

// RollbackTransactionsValidationError is the validation error returned by
// RollbackTransactions.Validate if the designated constraints aren't met.
type RollbackTransactionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackTransactionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackTransactionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackTransactionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackTransactionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackTransactionsValidationError) ErrorName() string {
	return "RollbackTransactionsValidationError"
}

// Error satisfies the builtin error interface
func (e RollbackTransactionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackTransactions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackTransactionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackTransactionsValidationError{}

// Validate checks the field values on ListBetsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListBetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBetsRequestMultiError, or nil if none found.
func (m *ListBetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.StartTime != nil {
		// no validation rules for StartTime
	}

	if m.EndTime != nil {
		// no validation rules for EndTime
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListBetsRequestMultiError(errors)
	}

	return nil
}

// ListBetsRequestMultiError is an error wrapping multiple validation errors
// returned by ListBetsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListBetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBetsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBetsRequestMultiError) AllErrors() []error { return m }

// ListBetsRequestValidationError is the validation error returned by
// ListBetsRequest.Validate if the designated constraints aren't met.
type ListBetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBetsRequestValidationError) ErrorName() string { return "ListBetsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListBetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBetsRequestValidationError{}

// Validate checks the field values on ListBetsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListBetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBetsResponseMultiError, or nil if none found.
func (m *ListBetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBetsResponseValidationError{
						field:  fmt.Sprintf("Bets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBetsResponseValidationError{
						field:  fmt.Sprintf("Bets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBetsResponseValidationError{
					field:  fmt.Sprintf("Bets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListBetsResponseMultiError(errors)
	}

	return nil
}

// ListBetsResponseMultiError is an error wrapping multiple validation errors
// returned by ListBetsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListBetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBetsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBetsResponseMultiError) AllErrors() []error { return m }

// ListBetsResponseValidationError is the validation error returned by
// ListBetsResponse.Validate if the designated constraints aren't met.
type ListBetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBetsResponseValidationError) ErrorName() string { return "ListBetsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListBetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBetsResponseValidationError{}

// Validate checks the field values on Bet with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Bet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bet with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BetMultiError, or nil if none found.
func (m *Bet) ValidateAll() error {
	return m.validate(true)
}

func (m *Bet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProviderBetId

	// no validation rules for RoundId

	// no validation rules for ProviderRoundId

	// no validation rules for Currency

	// no validation rules for SettlementCurrency

	// no validation rules for UserId

	// no validation rules for GameId

	// no validation rules for GameName

	// no validation rules for GameCategory

	// no validation rules for BetAmount

	// no validation rules for SettlementBetAmount

	// no validation rules for WinAmount

	// no validation rules for SettlementWinAmount

	// no validation rules for RollbackBetAmount

	// no validation rules for RollbackWinAmount

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return BetMultiError(errors)
	}

	return nil
}

// BetMultiError is an error wrapping multiple validation errors returned by
// Bet.ValidateAll() if the designated constraints aren't met.
type BetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BetMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BetMultiError) AllErrors() []error { return m }

// BetValidationError is the validation error returned by Bet.Validate if the
// designated constraints aren't met.
type BetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BetValidationError) ErrorName() string { return "BetValidationError" }

// Error satisfies the builtin error interface
func (e BetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BetValidationError{}

// Validate checks the field values on BalanceResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BalanceResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BalanceResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BalanceResponse_DataMultiError, or nil if none found.
func (m *BalanceResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BalanceResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Balance

	// no validation rules for Bonus

	// no validation rules for RoundId

	if len(errors) > 0 {
		return BalanceResponse_DataMultiError(errors)
	}

	return nil
}

// BalanceResponse_DataMultiError is an error wrapping multiple validation
// errors returned by BalanceResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type BalanceResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BalanceResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BalanceResponse_DataMultiError) AllErrors() []error { return m }

// BalanceResponse_DataValidationError is the validation error returned by
// BalanceResponse_Data.Validate if the designated constraints aren't met.
type BalanceResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BalanceResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BalanceResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BalanceResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BalanceResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BalanceResponse_DataValidationError) ErrorName() string {
	return "BalanceResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BalanceResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBalanceResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BalanceResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BalanceResponse_DataValidationError{}

// Validate checks the field values on PlayResponse_Data with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PlayResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlayResponse_DataMultiError, or nil if none found.
func (m *PlayResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Balance

	// no validation rules for RoundId

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlayResponse_DataValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlayResponse_DataValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlayResponse_DataValidationError{
					field:  fmt.Sprintf("Transactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlayResponse_DataMultiError(errors)
	}

	return nil
}

// PlayResponse_DataMultiError is an error wrapping multiple validation errors
// returned by PlayResponse_Data.ValidateAll() if the designated constraints
// aren't met.
type PlayResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayResponse_DataMultiError) AllErrors() []error { return m }

// PlayResponse_DataValidationError is the validation error returned by
// PlayResponse_Data.Validate if the designated constraints aren't met.
type PlayResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayResponse_DataValidationError) ErrorName() string {
	return "PlayResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e PlayResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayResponse_DataValidationError{}

// Validate checks the field values on RollbackResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RollbackResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RollbackResponse_DataMultiError, or nil if none found.
func (m *RollbackResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Balance

	// no validation rules for RoundId

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RollbackResponse_DataValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RollbackResponse_DataValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RollbackResponse_DataValidationError{
					field:  fmt.Sprintf("Transactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RollbackResponse_DataMultiError(errors)
	}

	return nil
}

// RollbackResponse_DataMultiError is an error wrapping multiple validation
// errors returned by RollbackResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type RollbackResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackResponse_DataMultiError) AllErrors() []error { return m }

// RollbackResponse_DataValidationError is the validation error returned by
// RollbackResponse_Data.Validate if the designated constraints aren't met.
type RollbackResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackResponse_DataValidationError) ErrorName() string {
	return "RollbackResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e RollbackResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackResponse_DataValidationError{}
