// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: game/service/v1/game.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOperatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOperatorRequestMultiError, or nil if none found.
func (m *CreateOperatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOperatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AggregatorOperatorId

	// no validation rules for OperatorId

	// no validation rules for ApiKey

	// no validation rules for ApiSecret

	// no validation rules for Enabled

	if len(errors) > 0 {
		return CreateOperatorRequestMultiError(errors)
	}

	return nil
}

// CreateOperatorRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOperatorRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOperatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOperatorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOperatorRequestMultiError) AllErrors() []error { return m }

// CreateOperatorRequestValidationError is the validation error returned by
// CreateOperatorRequest.Validate if the designated constraints aren't met.
type CreateOperatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOperatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOperatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOperatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOperatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOperatorRequestValidationError) ErrorName() string {
	return "CreateOperatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOperatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOperatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOperatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOperatorRequestValidationError{}

// Validate checks the field values on CreateOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOperatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOperatorResponseMultiError, or nil if none found.
func (m *CreateOperatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOperatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOperatorResponseMultiError(errors)
	}

	return nil
}

// CreateOperatorResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOperatorResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOperatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOperatorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOperatorResponseMultiError) AllErrors() []error { return m }

// CreateOperatorResponseValidationError is the validation error returned by
// CreateOperatorResponse.Validate if the designated constraints aren't met.
type CreateOperatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOperatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOperatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOperatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOperatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOperatorResponseValidationError) ErrorName() string {
	return "CreateOperatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOperatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOperatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOperatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOperatorResponseValidationError{}

// Validate checks the field values on UpdateOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOperatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOperatorRequestMultiError, or nil if none found.
func (m *UpdateOperatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOperatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for AggregatorOperatorId

	// no validation rules for ApiKey

	// no validation rules for ApiSecret

	// no validation rules for Enabled

	if len(errors) > 0 {
		return UpdateOperatorRequestMultiError(errors)
	}

	return nil
}

// UpdateOperatorRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOperatorRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOperatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOperatorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOperatorRequestMultiError) AllErrors() []error { return m }

// UpdateOperatorRequestValidationError is the validation error returned by
// UpdateOperatorRequest.Validate if the designated constraints aren't met.
type UpdateOperatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOperatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOperatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOperatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOperatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOperatorRequestValidationError) ErrorName() string {
	return "UpdateOperatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOperatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOperatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOperatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOperatorRequestValidationError{}

// Validate checks the field values on UpdateOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOperatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOperatorResponseMultiError, or nil if none found.
func (m *UpdateOperatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOperatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	// no validation rules for AggregatorOperatorId

	// no validation rules for ApiKey

	// no validation rules for ApiSecret

	// no validation rules for Enabled

	if len(errors) > 0 {
		return UpdateOperatorResponseMultiError(errors)
	}

	return nil
}

// UpdateOperatorResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateOperatorResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOperatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOperatorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOperatorResponseMultiError) AllErrors() []error { return m }

// UpdateOperatorResponseValidationError is the validation error returned by
// UpdateOperatorResponse.Validate if the designated constraints aren't met.
type UpdateOperatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOperatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOperatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOperatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOperatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOperatorResponseValidationError) ErrorName() string {
	return "UpdateOperatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOperatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOperatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOperatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOperatorResponseValidationError{}

// Validate checks the field values on DeleteOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOperatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOperatorRequestMultiError, or nil if none found.
func (m *DeleteOperatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOperatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return DeleteOperatorRequestMultiError(errors)
	}

	return nil
}

// DeleteOperatorRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOperatorRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteOperatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOperatorRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOperatorRequestMultiError) AllErrors() []error { return m }

// DeleteOperatorRequestValidationError is the validation error returned by
// DeleteOperatorRequest.Validate if the designated constraints aren't met.
type DeleteOperatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOperatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOperatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOperatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOperatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOperatorRequestValidationError) ErrorName() string {
	return "DeleteOperatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOperatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOperatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOperatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOperatorRequestValidationError{}

// Validate checks the field values on DeleteOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOperatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOperatorResponseMultiError, or nil if none found.
func (m *DeleteOperatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOperatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOperatorResponseMultiError(errors)
	}

	return nil
}

// DeleteOperatorResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteOperatorResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteOperatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOperatorResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOperatorResponseMultiError) AllErrors() []error { return m }

// DeleteOperatorResponseValidationError is the validation error returned by
// DeleteOperatorResponse.Validate if the designated constraints aren't met.
type DeleteOperatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOperatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOperatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOperatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOperatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOperatorResponseValidationError) ErrorName() string {
	return "DeleteOperatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOperatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOperatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOperatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOperatorResponseValidationError{}

// Validate checks the field values on GameFilter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GameFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GameFilterMultiError, or
// nil if none found.
func (m *GameFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *GameFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProviderId

	// no validation rules for Tags

	if len(errors) > 0 {
		return GameFilterMultiError(errors)
	}

	return nil
}

// GameFilterMultiError is an error wrapping multiple validation errors
// returned by GameFilter.ValidateAll() if the designated constraints aren't met.
type GameFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameFilterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameFilterMultiError) AllErrors() []error { return m }

// GameFilterValidationError is the validation error returned by
// GameFilter.Validate if the designated constraints aren't met.
type GameFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameFilterValidationError) ErrorName() string { return "GameFilterValidationError" }

// Error satisfies the builtin error interface
func (e GameFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameFilterValidationError{}

// Validate checks the field values on GameSort with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GameSort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameSort with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GameSortMultiError, or nil
// if none found.
func (m *GameSort) ValidateAll() error {
	return m.validate(true)
}

func (m *GameSort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	if len(errors) > 0 {
		return GameSortMultiError(errors)
	}

	return nil
}

// GameSortMultiError is an error wrapping multiple validation errors returned
// by GameSort.ValidateAll() if the designated constraints aren't met.
type GameSortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameSortMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameSortMultiError) AllErrors() []error { return m }

// GameSortValidationError is the validation error returned by
// GameSort.Validate if the designated constraints aren't met.
type GameSortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameSortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameSortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameSortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameSortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameSortValidationError) ErrorName() string { return "GameSortValidationError" }

// Error satisfies the builtin error interface
func (e GameSortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameSort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameSortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameSortValidationError{}

// Validate checks the field values on ListProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProvidersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProvidersRequestMultiError, or nil if none found.
func (m *ListProvidersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProvidersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.ProviderId != nil {
		// no validation rules for ProviderId
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.IncludeGameCount != nil {
		// no validation rules for IncludeGameCount
	}

	if m.PaginationEnabled != nil {
		// no validation rules for PaginationEnabled
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListProvidersRequestMultiError(errors)
	}

	return nil
}

// ListProvidersRequestMultiError is an error wrapping multiple validation
// errors returned by ListProvidersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProvidersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProvidersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProvidersRequestMultiError) AllErrors() []error { return m }

// ListProvidersRequestValidationError is the validation error returned by
// ListProvidersRequest.Validate if the designated constraints aren't met.
type ListProvidersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersRequestValidationError) ErrorName() string {
	return "ListProvidersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersRequestValidationError{}

// Validate checks the field values on ListProvidersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProvidersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProvidersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProvidersResponseMultiError, or nil if none found.
func (m *ListProvidersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProvidersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProvidersResponseValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Total != nil {
		// no validation rules for Total
	}

	if m.TotalEnabled != nil {
		// no validation rules for TotalEnabled
	}

	if m.TotalDisabled != nil {
		// no validation rules for TotalDisabled
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListProvidersResponseMultiError(errors)
	}

	return nil
}

// ListProvidersResponseMultiError is an error wrapping multiple validation
// errors returned by ListProvidersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProvidersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProvidersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProvidersResponseMultiError) AllErrors() []error { return m }

// ListProvidersResponseValidationError is the validation error returned by
// ListProvidersResponse.Validate if the designated constraints aren't met.
type ListProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersResponseValidationError) ErrorName() string {
	return "ListProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersResponseValidationError{}

// Validate checks the field values on ListCategoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCategoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCategoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCategoriesRequestMultiError, or nil if none found.
func (m *ListCategoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCategoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCategoriesRequestMultiError(errors)
	}

	return nil
}

// ListCategoriesRequestMultiError is an error wrapping multiple validation
// errors returned by ListCategoriesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCategoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCategoriesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCategoriesRequestMultiError) AllErrors() []error { return m }

// ListCategoriesRequestValidationError is the validation error returned by
// ListCategoriesRequest.Validate if the designated constraints aren't met.
type ListCategoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoriesRequestValidationError) ErrorName() string {
	return "ListCategoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCategoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoriesRequestValidationError{}

// Validate checks the field values on ListCategoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCategoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCategoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCategoriesResponseMultiError, or nil if none found.
func (m *ListCategoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCategoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCategoriesResponseMultiError(errors)
	}

	return nil
}

// ListCategoriesResponseMultiError is an error wrapping multiple validation
// errors returned by ListCategoriesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCategoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCategoriesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCategoriesResponseMultiError) AllErrors() []error { return m }

// ListCategoriesResponseValidationError is the validation error returned by
// ListCategoriesResponse.Validate if the designated constraints aren't met.
type ListCategoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoriesResponseValidationError) ErrorName() string {
	return "ListCategoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCategoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoriesResponseValidationError{}

// Validate checks the field values on ListFeeGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFeeGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFeeGroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFeeGroupsRequestMultiError, or nil if none found.
func (m *ListFeeGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFeeGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListFeeGroupsRequestMultiError(errors)
	}

	return nil
}

// ListFeeGroupsRequestMultiError is an error wrapping multiple validation
// errors returned by ListFeeGroupsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListFeeGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFeeGroupsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFeeGroupsRequestMultiError) AllErrors() []error { return m }

// ListFeeGroupsRequestValidationError is the validation error returned by
// ListFeeGroupsRequest.Validate if the designated constraints aren't met.
type ListFeeGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFeeGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFeeGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFeeGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFeeGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFeeGroupsRequestValidationError) ErrorName() string {
	return "ListFeeGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFeeGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFeeGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFeeGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFeeGroupsRequestValidationError{}

// Validate checks the field values on ListFeeGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFeeGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFeeGroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFeeGroupsResponseMultiError, or nil if none found.
func (m *ListFeeGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFeeGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListFeeGroupsResponseMultiError(errors)
	}

	return nil
}

// ListFeeGroupsResponseMultiError is an error wrapping multiple validation
// errors returned by ListFeeGroupsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListFeeGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFeeGroupsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFeeGroupsResponseMultiError) AllErrors() []error { return m }

// ListFeeGroupsResponseValidationError is the validation error returned by
// ListFeeGroupsResponse.Validate if the designated constraints aren't met.
type ListFeeGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFeeGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFeeGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFeeGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFeeGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFeeGroupsResponseValidationError) ErrorName() string {
	return "ListFeeGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFeeGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFeeGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFeeGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFeeGroupsResponseValidationError{}

// Validate checks the field values on ListTagsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTagsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTagsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTagsRequestMultiError, or nil if none found.
func (m *ListTagsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTagsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTagsRequestMultiError(errors)
	}

	return nil
}

// ListTagsRequestMultiError is an error wrapping multiple validation errors
// returned by ListTagsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTagsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTagsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTagsRequestMultiError) AllErrors() []error { return m }

// ListTagsRequestValidationError is the validation error returned by
// ListTagsRequest.Validate if the designated constraints aren't met.
type ListTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTagsRequestValidationError) ErrorName() string { return "ListTagsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTagsRequestValidationError{}

// Validate checks the field values on ListTagsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTagsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTagsResponseMultiError, or nil if none found.
func (m *ListTagsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTagsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTagsResponseMultiError(errors)
	}

	return nil
}

// ListTagsResponseMultiError is an error wrapping multiple validation errors
// returned by ListTagsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListTagsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTagsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTagsResponseMultiError) AllErrors() []error { return m }

// ListTagsResponseValidationError is the validation error returned by
// ListTagsResponse.Validate if the designated constraints aren't met.
type ListTagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTagsResponseValidationError) ErrorName() string { return "ListTagsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListTagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTagsResponseValidationError{}

// Validate checks the field values on ListThemesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListThemesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListThemesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListThemesRequestMultiError, or nil if none found.
func (m *ListThemesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThemesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListThemesRequestMultiError(errors)
	}

	return nil
}

// ListThemesRequestMultiError is an error wrapping multiple validation errors
// returned by ListThemesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListThemesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThemesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThemesRequestMultiError) AllErrors() []error { return m }

// ListThemesRequestValidationError is the validation error returned by
// ListThemesRequest.Validate if the designated constraints aren't met.
type ListThemesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThemesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThemesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThemesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThemesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThemesRequestValidationError) ErrorName() string {
	return "ListThemesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListThemesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThemesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThemesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThemesRequestValidationError{}

// Validate checks the field values on ListThemesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListThemesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListThemesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListThemesResponseMultiError, or nil if none found.
func (m *ListThemesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThemesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListThemesResponseMultiError(errors)
	}

	return nil
}

// ListThemesResponseMultiError is an error wrapping multiple validation errors
// returned by ListThemesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListThemesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThemesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThemesResponseMultiError) AllErrors() []error { return m }

// ListThemesResponseValidationError is the validation error returned by
// ListThemesResponse.Validate if the designated constraints aren't met.
type ListThemesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThemesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThemesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThemesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThemesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThemesResponseValidationError) ErrorName() string {
	return "ListThemesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListThemesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThemesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThemesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThemesResponseValidationError{}

// Validate checks the field values on ListCurrenciesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCurrenciesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCurrenciesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCurrenciesRequestMultiError, or nil if none found.
func (m *ListCurrenciesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCurrenciesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCurrenciesRequestMultiError(errors)
	}

	return nil
}

// ListCurrenciesRequestMultiError is an error wrapping multiple validation
// errors returned by ListCurrenciesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCurrenciesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCurrenciesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCurrenciesRequestMultiError) AllErrors() []error { return m }

// ListCurrenciesRequestValidationError is the validation error returned by
// ListCurrenciesRequest.Validate if the designated constraints aren't met.
type ListCurrenciesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCurrenciesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCurrenciesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCurrenciesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCurrenciesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCurrenciesRequestValidationError) ErrorName() string {
	return "ListCurrenciesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCurrenciesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCurrenciesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCurrenciesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCurrenciesRequestValidationError{}

// Validate checks the field values on ListCurrenciesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCurrenciesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCurrenciesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCurrenciesResponseMultiError, or nil if none found.
func (m *ListCurrenciesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCurrenciesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCurrenciesResponseMultiError(errors)
	}

	return nil
}

// ListCurrenciesResponseMultiError is an error wrapping multiple validation
// errors returned by ListCurrenciesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCurrenciesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCurrenciesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCurrenciesResponseMultiError) AllErrors() []error { return m }

// ListCurrenciesResponseValidationError is the validation error returned by
// ListCurrenciesResponse.Validate if the designated constraints aren't met.
type ListCurrenciesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCurrenciesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCurrenciesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCurrenciesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCurrenciesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCurrenciesResponseValidationError) ErrorName() string {
	return "ListCurrenciesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCurrenciesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCurrenciesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCurrenciesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCurrenciesResponseValidationError{}

// Validate checks the field values on ListGamesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGamesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGamesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGamesRequestMultiError, or nil if none found.
func (m *ListGamesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGamesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGamesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGamesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGamesRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSort()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGamesRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGamesRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGamesRequestValidationError{
				field:  "Sort",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListGamesRequestMultiError(errors)
	}

	return nil
}

// ListGamesRequestMultiError is an error wrapping multiple validation errors
// returned by ListGamesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListGamesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGamesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGamesRequestMultiError) AllErrors() []error { return m }

// ListGamesRequestValidationError is the validation error returned by
// ListGamesRequest.Validate if the designated constraints aren't met.
type ListGamesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGamesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGamesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGamesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGamesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGamesRequestValidationError) ErrorName() string { return "ListGamesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListGamesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGamesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGamesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGamesRequestValidationError{}

// Validate checks the field values on ListGamesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGamesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGamesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGamesResponseMultiError, or nil if none found.
func (m *ListGamesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGamesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListGamesResponseMultiError(errors)
	}

	return nil
}

// ListGamesResponseMultiError is an error wrapping multiple validation errors
// returned by ListGamesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListGamesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGamesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGamesResponseMultiError) AllErrors() []error { return m }

// ListGamesResponseValidationError is the validation error returned by
// ListGamesResponse.Validate if the designated constraints aren't met.
type ListGamesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGamesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGamesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGamesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGamesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGamesResponseValidationError) ErrorName() string {
	return "ListGamesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGamesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGamesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGamesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGamesResponseValidationError{}

// Validate checks the field values on GetGameRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetGameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetGameRequestMultiError,
// or nil if none found.
func (m *GetGameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if len(errors) > 0 {
		return GetGameRequestMultiError(errors)
	}

	return nil
}

// GetGameRequestMultiError is an error wrapping multiple validation errors
// returned by GetGameRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameRequestMultiError) AllErrors() []error { return m }

// GetGameRequestValidationError is the validation error returned by
// GetGameRequest.Validate if the designated constraints aren't met.
type GetGameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameRequestValidationError) ErrorName() string { return "GetGameRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameRequestValidationError{}

// Validate checks the field values on GetGameResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameResponseMultiError, or nil if none found.
func (m *GetGameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGame()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGameResponseValidationError{
					field:  "Game",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGameResponseValidationError{
					field:  "Game",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGame()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGameResponseValidationError{
				field:  "Game",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGameResponseMultiError(errors)
	}

	return nil
}

// GetGameResponseMultiError is an error wrapping multiple validation errors
// returned by GetGameResponse.ValidateAll() if the designated constraints
// aren't met.
type GetGameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameResponseMultiError) AllErrors() []error { return m }

// GetGameResponseValidationError is the validation error returned by
// GetGameResponse.Validate if the designated constraints aren't met.
type GetGameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameResponseValidationError) ErrorName() string { return "GetGameResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetGameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameResponseValidationError{}

// Validate checks the field values on GameInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GameInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GameInfoMultiError, or nil
// if none found.
func (m *GameInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GameInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Enabled

	// no validation rules for Name

	// no validation rules for ProviderId

	// no validation rules for ProviderName

	// no validation rules for Category

	// no validation rules for Theme

	// no validation rules for HasJackpot

	// no validation rules for JackpotType

	// no validation rules for ForbidBonusPlay

	// no validation rules for HasFreespins

	// no validation rules for Payout

	// no validation rules for HitRate

	// no validation rules for VolatilityRating

	// no validation rules for Lines

	// no validation rules for Ways

	// no validation rules for Description

	// no validation rules for Multiplier

	// no validation rules for ReleasedAt

	// no validation rules for BonusBuy

	// no validation rules for Restrictions

	if len(errors) > 0 {
		return GameInfoMultiError(errors)
	}

	return nil
}

// GameInfoMultiError is an error wrapping multiple validation errors returned
// by GameInfo.ValidateAll() if the designated constraints aren't met.
type GameInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameInfoMultiError) AllErrors() []error { return m }

// GameInfoValidationError is the validation error returned by
// GameInfo.Validate if the designated constraints aren't met.
type GameInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameInfoValidationError) ErrorName() string { return "GameInfoValidationError" }

// Error satisfies the builtin error interface
func (e GameInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameInfoValidationError{}

// Validate checks the field values on CreateSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSessionRequestMultiError, or nil if none found.
func (m *CreateSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	// no validation rules for Currency

	// no validation rules for SettlementCurrency

	// no validation rules for Locale

	if all {
		switch v := interface{}(m.GetUrls()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSessionRequestValidationError{
					field:  "Urls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSessionRequestValidationError{
					field:  "Urls",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUrls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSessionRequestValidationError{
				field:  "Urls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSessionRequestMultiError(errors)
	}

	return nil
}

// CreateSessionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSessionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSessionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSessionRequestMultiError) AllErrors() []error { return m }

// CreateSessionRequestValidationError is the validation error returned by
// CreateSessionRequest.Validate if the designated constraints aren't met.
type CreateSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSessionRequestValidationError) ErrorName() string {
	return "CreateSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSessionRequestValidationError{}

// Validate checks the field values on CreateSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSessionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSessionResponseMultiError, or nil if none found.
func (m *CreateSessionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSessionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameUrl

	if len(errors) > 0 {
		return CreateSessionResponseMultiError(errors)
	}

	return nil
}

// CreateSessionResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSessionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSessionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSessionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSessionResponseMultiError) AllErrors() []error { return m }

// CreateSessionResponseValidationError is the validation error returned by
// CreateSessionResponse.Validate if the designated constraints aren't met.
type CreateSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSessionResponseValidationError) ErrorName() string {
	return "CreateSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSessionResponseValidationError{}

// Validate checks the field values on UrlInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UrlInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UrlInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UrlInfoMultiError, or nil if none found.
func (m *UrlInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UrlInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReturnUrl

	// no validation rules for DepositUrl

	// no validation rules for LobbyUrl

	if len(errors) > 0 {
		return UrlInfoMultiError(errors)
	}

	return nil
}

// UrlInfoMultiError is an error wrapping multiple validation errors returned
// by UrlInfo.ValidateAll() if the designated constraints aren't met.
type UrlInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UrlInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UrlInfoMultiError) AllErrors() []error { return m }

// UrlInfoValidationError is the validation error returned by UrlInfo.Validate
// if the designated constraints aren't met.
type UrlInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UrlInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UrlInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UrlInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UrlInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UrlInfoValidationError) ErrorName() string { return "UrlInfoValidationError" }

// Error satisfies the builtin error interface
func (e UrlInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUrlInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UrlInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UrlInfoValidationError{}

// Validate checks the field values on BalanceRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BalanceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BalanceRequestMultiError,
// or nil if none found.
func (m *BalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Currency

	// no validation rules for GameId

	// no validation rules for RoundId

	// no validation rules for Finished

	// no validation rules for SessionId

	if len(errors) > 0 {
		return BalanceRequestMultiError(errors)
	}

	return nil
}

// BalanceRequestMultiError is an error wrapping multiple validation errors
// returned by BalanceRequest.ValidateAll() if the designated constraints
// aren't met.
type BalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BalanceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BalanceRequestMultiError) AllErrors() []error { return m }

// BalanceRequestValidationError is the validation error returned by
// BalanceRequest.Validate if the designated constraints aren't met.
type BalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BalanceRequestValidationError) ErrorName() string { return "BalanceRequestValidationError" }

// Error satisfies the builtin error interface
func (e BalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BalanceRequestValidationError{}

// Validate checks the field values on BalanceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BalanceResponseMultiError, or nil if none found.
func (m *BalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BalanceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BalanceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BalanceResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BalanceResponseMultiError(errors)
	}

	return nil
}

// BalanceResponseMultiError is an error wrapping multiple validation errors
// returned by BalanceResponse.ValidateAll() if the designated constraints
// aren't met.
type BalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BalanceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BalanceResponseMultiError) AllErrors() []error { return m }

// BalanceResponseValidationError is the validation error returned by
// BalanceResponse.Validate if the designated constraints aren't met.
type BalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BalanceResponseValidationError) ErrorName() string { return "BalanceResponseValidationError" }

// Error satisfies the builtin error interface
func (e BalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BalanceResponseValidationError{}

// Validate checks the field values on PlayRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlayRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlayRequestMultiError, or
// nil if none found.
func (m *PlayRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Currency

	// no validation rules for GameId

	// no validation rules for RoundId

	// no validation rules for Finished

	// no validation rules for SmResult

	// no validation rules for SessionId

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlayRequestValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlayRequestValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlayRequestValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlayRequestMultiError(errors)
	}

	return nil
}

// PlayRequestMultiError is an error wrapping multiple validation errors
// returned by PlayRequest.ValidateAll() if the designated constraints aren't met.
type PlayRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayRequestMultiError) AllErrors() []error { return m }

// PlayRequestValidationError is the validation error returned by
// PlayRequest.Validate if the designated constraints aren't met.
type PlayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayRequestValidationError) ErrorName() string { return "PlayRequestValidationError" }

// Error satisfies the builtin error interface
func (e PlayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayRequestValidationError{}

// Validate checks the field values on PlayResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlayResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlayResponseMultiError, or
// nil if none found.
func (m *PlayResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlayResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlayResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlayResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlayResponseMultiError(errors)
	}

	return nil
}

// PlayResponseMultiError is an error wrapping multiple validation errors
// returned by PlayResponse.ValidateAll() if the designated constraints aren't met.
type PlayResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayResponseMultiError) AllErrors() []error { return m }

// PlayResponseValidationError is the validation error returned by
// PlayResponse.Validate if the designated constraints aren't met.
type PlayResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayResponseValidationError) ErrorName() string { return "PlayResponseValidationError" }

// Error satisfies the builtin error interface
func (e PlayResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayResponseValidationError{}

// Validate checks the field values on Action with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Action) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Action with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ActionMultiError, or nil if none found.
func (m *Action) ValidateAll() error {
	return m.validate(true)
}

func (m *Action) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Action

	// no validation rules for BetId

	// no validation rules for TxnId

	// no validation rules for ExtTxnId

	// no validation rules for UpdateBalance

	// no validation rules for TakeAll

	// no validation rules for IsRefund

	// no validation rules for Amount

	// no validation rules for JackpotContribution

	// no validation rules for JackpotWin

	// no validation rules for BetTime

	// no validation rules for SettleTime

	// no validation rules for ProviderTimestamp

	if len(errors) > 0 {
		return ActionMultiError(errors)
	}

	return nil
}

// ActionMultiError is an error wrapping multiple validation errors returned by
// Action.ValidateAll() if the designated constraints aren't met.
type ActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActionMultiError) AllErrors() []error { return m }

// ActionValidationError is the validation error returned by Action.Validate if
// the designated constraints aren't met.
type ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionValidationError) ErrorName() string { return "ActionValidationError" }

// Error satisfies the builtin error interface
func (e ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionValidationError{}

// Validate checks the field values on Transactions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Transactions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transactions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransactionsMultiError, or
// nil if none found.
func (m *Transactions) ValidateAll() error {
	return m.validate(true)
}

func (m *Transactions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TxnId

	// no validation rules for OperatorTxnId

	// no validation rules for ProcessedAt

	// no validation rules for BonusAmount

	if len(errors) > 0 {
		return TransactionsMultiError(errors)
	}

	return nil
}

// TransactionsMultiError is an error wrapping multiple validation errors
// returned by Transactions.ValidateAll() if the designated constraints aren't met.
type TransactionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionsMultiError) AllErrors() []error { return m }

// TransactionsValidationError is the validation error returned by
// Transactions.Validate if the designated constraints aren't met.
type TransactionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionsValidationError) ErrorName() string { return "TransactionsValidationError" }

// Error satisfies the builtin error interface
func (e TransactionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionsValidationError{}

// Validate checks the field values on RollbackRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RollbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RollbackRequestMultiError, or nil if none found.
func (m *RollbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Currency

	// no validation rules for GameId

	// no validation rules for RoundId

	// no validation rules for Finished

	// no validation rules for SmResult

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RollbackRequestValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RollbackRequestValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RollbackRequestValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RollbackRequestMultiError(errors)
	}

	return nil
}

// RollbackRequestMultiError is an error wrapping multiple validation errors
// returned by RollbackRequest.ValidateAll() if the designated constraints
// aren't met.
type RollbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackRequestMultiError) AllErrors() []error { return m }

// RollbackRequestValidationError is the validation error returned by
// RollbackRequest.Validate if the designated constraints aren't met.
type RollbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackRequestValidationError) ErrorName() string { return "RollbackRequestValidationError" }

// Error satisfies the builtin error interface
func (e RollbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackRequestValidationError{}

// Validate checks the field values on RollbackAction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RollbackAction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackAction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RollbackActionMultiError,
// or nil if none found.
func (m *RollbackAction) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackAction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Action

	// no validation rules for BetId

	// no validation rules for TxnId

	// no validation rules for ExtTxnId

	// no validation rules for OriginalTxnId

	// no validation rules for OriginalExtTxnId

	// no validation rules for ProviderTimestamp

	if len(errors) > 0 {
		return RollbackActionMultiError(errors)
	}

	return nil
}

// RollbackActionMultiError is an error wrapping multiple validation errors
// returned by RollbackAction.ValidateAll() if the designated constraints
// aren't met.
type RollbackActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackActionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackActionMultiError) AllErrors() []error { return m }

// RollbackActionValidationError is the validation error returned by
// RollbackAction.Validate if the designated constraints aren't met.
type RollbackActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackActionValidationError) ErrorName() string { return "RollbackActionValidationError" }

// Error satisfies the builtin error interface
func (e RollbackActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackActionValidationError{}

// Validate checks the field values on RollbackResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RollbackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RollbackResponseMultiError, or nil if none found.
func (m *RollbackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RollbackResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RollbackResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RollbackResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RollbackResponseMultiError(errors)
	}

	return nil
}

// RollbackResponseMultiError is an error wrapping multiple validation errors
// returned by RollbackResponse.ValidateAll() if the designated constraints
// aren't met.
type RollbackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackResponseMultiError) AllErrors() []error { return m }

// RollbackResponseValidationError is the validation error returned by
// RollbackResponse.Validate if the designated constraints aren't met.
type RollbackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackResponseValidationError) ErrorName() string { return "RollbackResponseValidationError" }

// Error satisfies the builtin error interface
func (e RollbackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackResponseValidationError{}

// Validate checks the field values on RollbackTransactions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RollbackTransactions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackTransactions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RollbackTransactionsMultiError, or nil if none found.
func (m *RollbackTransactions) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackTransactions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TxnId

	// no validation rules for OperatorTxnId

	// no validation rules for ProcessedAt

	if len(errors) > 0 {
		return RollbackTransactionsMultiError(errors)
	}

	return nil
}

// RollbackTransactionsMultiError is an error wrapping multiple validation
// errors returned by RollbackTransactions.ValidateAll() if the designated
// constraints aren't met.
type RollbackTransactionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackTransactionsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackTransactionsMultiError) AllErrors() []error { return m }

// RollbackTransactionsValidationError is the validation error returned by
// RollbackTransactions.Validate if the designated constraints aren't met.
type RollbackTransactionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackTransactionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackTransactionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackTransactionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackTransactionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackTransactionsValidationError) ErrorName() string {
	return "RollbackTransactionsValidationError"
}

// Error satisfies the builtin error interface
func (e RollbackTransactionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackTransactions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackTransactionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackTransactionsValidationError{}

// Validate checks the field values on ListBetsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListBetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBetsRequestMultiError, or nil if none found.
func (m *ListBetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.SettlementCurrencyOption.(type) {
	case *ListBetsRequest_SettlementCurrencyWithRanges:
		if v == nil {
			err := ListBetsRequestValidationError{
				field:  "SettlementCurrencyOption",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSettlementCurrencyWithRanges()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBetsRequestValidationError{
						field:  "SettlementCurrencyWithRanges",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBetsRequestValidationError{
						field:  "SettlementCurrencyWithRanges",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSettlementCurrencyWithRanges()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBetsRequestValidationError{
					field:  "SettlementCurrencyWithRanges",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListBetsRequest_SettlementCurrencies:
		if v == nil {
			err := ListBetsRequestValidationError{
				field:  "SettlementCurrencyOption",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSettlementCurrencies()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBetsRequestValidationError{
						field:  "SettlementCurrencies",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBetsRequestValidationError{
						field:  "SettlementCurrencies",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSettlementCurrencies()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBetsRequestValidationError{
					field:  "SettlementCurrencies",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if m.GameName != nil {
		// no validation rules for GameName
	}

	if m.GameId != nil {
		// no validation rules for GameId
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.OperatorBetId != nil {
		// no validation rules for OperatorBetId
	}

	if m.ProviderBetId != nil {
		// no validation rules for ProviderBetId
	}

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBetsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBetsRequestValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBetsRequestValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBetsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBetsRequestValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBetsRequestValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return ListBetsRequestMultiError(errors)
	}

	return nil
}

// ListBetsRequestMultiError is an error wrapping multiple validation errors
// returned by ListBetsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListBetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBetsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBetsRequestMultiError) AllErrors() []error { return m }

// ListBetsRequestValidationError is the validation error returned by
// ListBetsRequest.Validate if the designated constraints aren't met.
type ListBetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBetsRequestValidationError) ErrorName() string { return "ListBetsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListBetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBetsRequestValidationError{}

// Validate checks the field values on ListBetsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListBetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBetsResponseMultiError, or nil if none found.
func (m *ListBetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBetsResponseValidationError{
						field:  fmt.Sprintf("Bets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBetsResponseValidationError{
						field:  fmt.Sprintf("Bets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBetsResponseValidationError{
					field:  fmt.Sprintf("Bets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Turnover

	// no validation rules for WinAmount

	// no validation rules for BetCount

	// no validation rules for RtpPercentage

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListBetsResponseMultiError(errors)
	}

	return nil
}

// ListBetsResponseMultiError is an error wrapping multiple validation errors
// returned by ListBetsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListBetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBetsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBetsResponseMultiError) AllErrors() []error { return m }

// ListBetsResponseValidationError is the validation error returned by
// ListBetsResponse.Validate if the designated constraints aren't met.
type ListBetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBetsResponseValidationError) ErrorName() string { return "ListBetsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListBetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBetsResponseValidationError{}

// Validate checks the field values on Bet with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Bet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bet with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BetMultiError, or nil if none found.
func (m *Bet) ValidateAll() error {
	return m.validate(true)
}

func (m *Bet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProviderBetId

	// no validation rules for RoundId

	// no validation rules for ProviderRoundId

	// no validation rules for ProviderId

	// no validation rules for ProviderName

	// no validation rules for OperatorId

	// no validation rules for OperatorName

	// no validation rules for Currency

	// no validation rules for SettlementCurrency

	// no validation rules for Status

	// no validation rules for UserId

	// no validation rules for GameId

	// no validation rules for GameName

	// no validation rules for GameCategory

	// no validation rules for WinCount

	// no validation rules for BetAmount

	// no validation rules for ValidBetAmount

	// no validation rules for SettlementBetAmount

	// no validation rules for WinAmount

	// no validation rules for SettlementWinAmount

	// no validation rules for Turnover

	// no validation rules for Odds

	// no validation rules for RollbackBetAmount

	// no validation rules for RollbackWinAmount

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BetValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BetValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BetValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BetValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BetValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BetValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BetMultiError(errors)
	}

	return nil
}

// BetMultiError is an error wrapping multiple validation errors returned by
// Bet.ValidateAll() if the designated constraints aren't met.
type BetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BetMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BetMultiError) AllErrors() []error { return m }

// BetValidationError is the validation error returned by Bet.Validate if the
// designated constraints aren't met.
type BetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BetValidationError) ErrorName() string { return "BetValidationError" }

// Error satisfies the builtin error interface
func (e BetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BetValidationError{}

// Validate checks the field values on BackofficeListGamesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BackofficeListGamesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BackofficeListGamesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BackofficeListGamesRequestMultiError, or nil if none found.
func (m *BackofficeListGamesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BackofficeListGamesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GameId != nil {
		// no validation rules for GameId
	}

	if m.SupportBonusBuy != nil {
		// no validation rules for SupportBonusBuy
	}

	if m.HasFreespins != nil {
		// no validation rules for HasFreespins
	}

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if len(errors) > 0 {
		return BackofficeListGamesRequestMultiError(errors)
	}

	return nil
}

// BackofficeListGamesRequestMultiError is an error wrapping multiple
// validation errors returned by BackofficeListGamesRequest.ValidateAll() if
// the designated constraints aren't met.
type BackofficeListGamesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BackofficeListGamesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BackofficeListGamesRequestMultiError) AllErrors() []error { return m }

// BackofficeListGamesRequestValidationError is the validation error returned
// by BackofficeListGamesRequest.Validate if the designated constraints aren't met.
type BackofficeListGamesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BackofficeListGamesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BackofficeListGamesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BackofficeListGamesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BackofficeListGamesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BackofficeListGamesRequestValidationError) ErrorName() string {
	return "BackofficeListGamesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BackofficeListGamesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBackofficeListGamesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BackofficeListGamesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BackofficeListGamesRequestValidationError{}

// Validate checks the field values on BackofficeListGamesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BackofficeListGamesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BackofficeListGamesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BackofficeListGamesResponseMultiError, or nil if none found.
func (m *BackofficeListGamesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BackofficeListGamesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGames() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BackofficeListGamesResponseValidationError{
						field:  fmt.Sprintf("Games[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BackofficeListGamesResponseValidationError{
						field:  fmt.Sprintf("Games[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BackofficeListGamesResponseValidationError{
					field:  fmt.Sprintf("Games[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Total

	// no validation rules for TotalEnabled

	// no validation rules for TotalDisabled

	if len(errors) > 0 {
		return BackofficeListGamesResponseMultiError(errors)
	}

	return nil
}

// BackofficeListGamesResponseMultiError is an error wrapping multiple
// validation errors returned by BackofficeListGamesResponse.ValidateAll() if
// the designated constraints aren't met.
type BackofficeListGamesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BackofficeListGamesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BackofficeListGamesResponseMultiError) AllErrors() []error { return m }

// BackofficeListGamesResponseValidationError is the validation error returned
// by BackofficeListGamesResponse.Validate if the designated constraints
// aren't met.
type BackofficeListGamesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BackofficeListGamesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BackofficeListGamesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BackofficeListGamesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BackofficeListGamesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BackofficeListGamesResponseValidationError) ErrorName() string {
	return "BackofficeListGamesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BackofficeListGamesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBackofficeListGamesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BackofficeListGamesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BackofficeListGamesResponseValidationError{}

// Validate checks the field values on UpdateGameRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateGameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGameRequestMultiError, or nil if none found.
func (m *UpdateGameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if len(errors) > 0 {
		return UpdateGameRequestMultiError(errors)
	}

	return nil
}

// UpdateGameRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateGameRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateGameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGameRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGameRequestMultiError) AllErrors() []error { return m }

// UpdateGameRequestValidationError is the validation error returned by
// UpdateGameRequest.Validate if the designated constraints aren't met.
type UpdateGameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGameRequestValidationError) ErrorName() string {
	return "UpdateGameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGameRequestValidationError{}

// Validate checks the field values on UpdateGameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGameResponseMultiError, or nil if none found.
func (m *UpdateGameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateGameResponseMultiError(errors)
	}

	return nil
}

// UpdateGameResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateGameResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateGameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGameResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGameResponseMultiError) AllErrors() []error { return m }

// UpdateGameResponseValidationError is the validation error returned by
// UpdateGameResponse.Validate if the designated constraints aren't met.
type UpdateGameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGameResponseValidationError) ErrorName() string {
	return "UpdateGameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGameResponseValidationError{}

// Validate checks the field values on UpdateProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProviderRequestMultiError, or nil if none found.
func (m *UpdateProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProviderId

	if m.Enabled != nil {
		// no validation rules for Enabled
	}

	if len(errors) > 0 {
		return UpdateProviderRequestMultiError(errors)
	}

	return nil
}

// UpdateProviderRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProviderRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProviderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProviderRequestMultiError) AllErrors() []error { return m }

// UpdateProviderRequestValidationError is the validation error returned by
// UpdateProviderRequest.Validate if the designated constraints aren't met.
type UpdateProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProviderRequestValidationError) ErrorName() string {
	return "UpdateProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProviderRequestValidationError{}

// Validate checks the field values on UpdateProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProviderResponseMultiError, or nil if none found.
func (m *UpdateProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProviderResponseMultiError(errors)
	}

	return nil
}

// UpdateProviderResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProviderResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProviderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProviderResponseMultiError) AllErrors() []error { return m }

// UpdateProviderResponseValidationError is the validation error returned by
// UpdateProviderResponse.Validate if the designated constraints aren't met.
type UpdateProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProviderResponseValidationError) ErrorName() string {
	return "UpdateProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProviderResponseValidationError{}

// Validate checks the field values on GetBetByIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBetByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBetByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBetByIdRequestMultiError, or nil if none found.
func (m *GetBetByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBetByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BetId

	if m.IncludeActions != nil {
		// no validation rules for IncludeActions
	}

	if len(errors) > 0 {
		return GetBetByIdRequestMultiError(errors)
	}

	return nil
}

// GetBetByIdRequestMultiError is an error wrapping multiple validation errors
// returned by GetBetByIdRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBetByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBetByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBetByIdRequestMultiError) AllErrors() []error { return m }

// GetBetByIdRequestValidationError is the validation error returned by
// GetBetByIdRequest.Validate if the designated constraints aren't met.
type GetBetByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBetByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBetByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBetByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBetByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBetByIdRequestValidationError) ErrorName() string {
	return "GetBetByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBetByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBetByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBetByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBetByIdRequestValidationError{}

// Validate checks the field values on GetBetByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBetByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBetByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBetByIdResponseMultiError, or nil if none found.
func (m *GetBetByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBetByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBetByIdResponseValidationError{
					field:  "Bet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBetByIdResponseValidationError{
					field:  "Bet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBetByIdResponseValidationError{
				field:  "Bet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBetByIdResponseMultiError(errors)
	}

	return nil
}

// GetBetByIdResponseMultiError is an error wrapping multiple validation errors
// returned by GetBetByIdResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBetByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBetByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBetByIdResponseMultiError) AllErrors() []error { return m }

// GetBetByIdResponseValidationError is the validation error returned by
// GetBetByIdResponse.Validate if the designated constraints aren't met.
type GetBetByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBetByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBetByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBetByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBetByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBetByIdResponseValidationError) ErrorName() string {
	return "GetBetByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBetByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBetByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBetByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBetByIdResponseValidationError{}

// Validate checks the field values on ListProvidersResponse_Provider with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProvidersResponse_Provider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProvidersResponse_Provider with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProvidersResponse_ProviderMultiError, or nil if none found.
func (m *ListProvidersResponse_Provider) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProvidersResponse_Provider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProviderId

	// no validation rules for ProviderName

	// no validation rules for Enabled

	if m.GameCount != nil {
		// no validation rules for GameCount
	}

	if len(errors) > 0 {
		return ListProvidersResponse_ProviderMultiError(errors)
	}

	return nil
}

// ListProvidersResponse_ProviderMultiError is an error wrapping multiple
// validation errors returned by ListProvidersResponse_Provider.ValidateAll()
// if the designated constraints aren't met.
type ListProvidersResponse_ProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProvidersResponse_ProviderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProvidersResponse_ProviderMultiError) AllErrors() []error { return m }

// ListProvidersResponse_ProviderValidationError is the validation error
// returned by ListProvidersResponse_Provider.Validate if the designated
// constraints aren't met.
type ListProvidersResponse_ProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersResponse_ProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersResponse_ProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersResponse_ProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersResponse_ProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersResponse_ProviderValidationError) ErrorName() string {
	return "ListProvidersResponse_ProviderValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersResponse_ProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersResponse_Provider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersResponse_ProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersResponse_ProviderValidationError{}

// Validate checks the field values on BalanceResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BalanceResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BalanceResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BalanceResponse_DataMultiError, or nil if none found.
func (m *BalanceResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *BalanceResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Balance

	// no validation rules for Bonus

	// no validation rules for RoundId

	if len(errors) > 0 {
		return BalanceResponse_DataMultiError(errors)
	}

	return nil
}

// BalanceResponse_DataMultiError is an error wrapping multiple validation
// errors returned by BalanceResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type BalanceResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BalanceResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BalanceResponse_DataMultiError) AllErrors() []error { return m }

// BalanceResponse_DataValidationError is the validation error returned by
// BalanceResponse_Data.Validate if the designated constraints aren't met.
type BalanceResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BalanceResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BalanceResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BalanceResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BalanceResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BalanceResponse_DataValidationError) ErrorName() string {
	return "BalanceResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e BalanceResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBalanceResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BalanceResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BalanceResponse_DataValidationError{}

// Validate checks the field values on PlayResponse_Data with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PlayResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlayResponse_DataMultiError, or nil if none found.
func (m *PlayResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Balance

	// no validation rules for RoundId

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlayResponse_DataValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlayResponse_DataValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlayResponse_DataValidationError{
					field:  fmt.Sprintf("Transactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PlayResponse_DataMultiError(errors)
	}

	return nil
}

// PlayResponse_DataMultiError is an error wrapping multiple validation errors
// returned by PlayResponse_Data.ValidateAll() if the designated constraints
// aren't met.
type PlayResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayResponse_DataMultiError) AllErrors() []error { return m }

// PlayResponse_DataValidationError is the validation error returned by
// PlayResponse_Data.Validate if the designated constraints aren't met.
type PlayResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayResponse_DataValidationError) ErrorName() string {
	return "PlayResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e PlayResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayResponse_DataValidationError{}

// Validate checks the field values on RollbackResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RollbackResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RollbackResponse_DataMultiError, or nil if none found.
func (m *RollbackResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Balance

	// no validation rules for RoundId

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RollbackResponse_DataValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RollbackResponse_DataValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RollbackResponse_DataValidationError{
					field:  fmt.Sprintf("Transactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RollbackResponse_DataMultiError(errors)
	}

	return nil
}

// RollbackResponse_DataMultiError is an error wrapping multiple validation
// errors returned by RollbackResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type RollbackResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackResponse_DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackResponse_DataMultiError) AllErrors() []error { return m }

// RollbackResponse_DataValidationError is the validation error returned by
// RollbackResponse_Data.Validate if the designated constraints aren't met.
type RollbackResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackResponse_DataValidationError) ErrorName() string {
	return "RollbackResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e RollbackResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackResponse_DataValidationError{}

// Validate checks the field values on ListBetsRequest_CurrencyWithRange with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBetsRequest_CurrencyWithRange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBetsRequest_CurrencyWithRange
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBetsRequest_CurrencyWithRangeMultiError, or nil if none found.
func (m *ListBetsRequest_CurrencyWithRange) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBetsRequest_CurrencyWithRange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	if m.MinBetAmount != nil {
		// no validation rules for MinBetAmount
	}

	if m.MaxBetAmount != nil {
		// no validation rules for MaxBetAmount
	}

	if m.MinWinAmount != nil {
		// no validation rules for MinWinAmount
	}

	if m.MaxWinAmount != nil {
		// no validation rules for MaxWinAmount
	}

	if len(errors) > 0 {
		return ListBetsRequest_CurrencyWithRangeMultiError(errors)
	}

	return nil
}

// ListBetsRequest_CurrencyWithRangeMultiError is an error wrapping multiple
// validation errors returned by
// ListBetsRequest_CurrencyWithRange.ValidateAll() if the designated
// constraints aren't met.
type ListBetsRequest_CurrencyWithRangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBetsRequest_CurrencyWithRangeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBetsRequest_CurrencyWithRangeMultiError) AllErrors() []error { return m }

// ListBetsRequest_CurrencyWithRangeValidationError is the validation error
// returned by ListBetsRequest_CurrencyWithRange.Validate if the designated
// constraints aren't met.
type ListBetsRequest_CurrencyWithRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBetsRequest_CurrencyWithRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBetsRequest_CurrencyWithRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBetsRequest_CurrencyWithRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBetsRequest_CurrencyWithRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBetsRequest_CurrencyWithRangeValidationError) ErrorName() string {
	return "ListBetsRequest_CurrencyWithRangeValidationError"
}

// Error satisfies the builtin error interface
func (e ListBetsRequest_CurrencyWithRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBetsRequest_CurrencyWithRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBetsRequest_CurrencyWithRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBetsRequest_CurrencyWithRangeValidationError{}

// Validate checks the field values on ListBetsRequest_Currencies with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBetsRequest_Currencies) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBetsRequest_Currencies with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBetsRequest_CurrenciesMultiError, or nil if none found.
func (m *ListBetsRequest_Currencies) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBetsRequest_Currencies) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBetsRequest_CurrenciesMultiError(errors)
	}

	return nil
}

// ListBetsRequest_CurrenciesMultiError is an error wrapping multiple
// validation errors returned by ListBetsRequest_Currencies.ValidateAll() if
// the designated constraints aren't met.
type ListBetsRequest_CurrenciesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBetsRequest_CurrenciesMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBetsRequest_CurrenciesMultiError) AllErrors() []error { return m }

// ListBetsRequest_CurrenciesValidationError is the validation error returned
// by ListBetsRequest_Currencies.Validate if the designated constraints aren't met.
type ListBetsRequest_CurrenciesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBetsRequest_CurrenciesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBetsRequest_CurrenciesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBetsRequest_CurrenciesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBetsRequest_CurrenciesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBetsRequest_CurrenciesValidationError) ErrorName() string {
	return "ListBetsRequest_CurrenciesValidationError"
}

// Error satisfies the builtin error interface
func (e ListBetsRequest_CurrenciesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBetsRequest_Currencies.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBetsRequest_CurrenciesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBetsRequest_CurrenciesValidationError{}

// Validate checks the field values on BackofficeListGamesResponse_Game with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BackofficeListGamesResponse_Game) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BackofficeListGamesResponse_Game with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BackofficeListGamesResponse_GameMultiError, or nil if none found.
func (m *BackofficeListGamesResponse_Game) ValidateAll() error {
	return m.validate(true)
}

func (m *BackofficeListGamesResponse_Game) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Provider

	// no validation rules for Id

	// no validation rules for Category

	// no validation rules for Theme

	// no validation rules for SupportBonusBuy

	// no validation rules for HasFreespins

	// no validation rules for FeeGroup

	// no validation rules for Rate

	// no validation rules for Rtp

	// no validation rules for ValidBetRate

	// no validation rules for Enabled

	if len(errors) > 0 {
		return BackofficeListGamesResponse_GameMultiError(errors)
	}

	return nil
}

// BackofficeListGamesResponse_GameMultiError is an error wrapping multiple
// validation errors returned by
// BackofficeListGamesResponse_Game.ValidateAll() if the designated
// constraints aren't met.
type BackofficeListGamesResponse_GameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BackofficeListGamesResponse_GameMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BackofficeListGamesResponse_GameMultiError) AllErrors() []error { return m }

// BackofficeListGamesResponse_GameValidationError is the validation error
// returned by BackofficeListGamesResponse_Game.Validate if the designated
// constraints aren't met.
type BackofficeListGamesResponse_GameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BackofficeListGamesResponse_GameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BackofficeListGamesResponse_GameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BackofficeListGamesResponse_GameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BackofficeListGamesResponse_GameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BackofficeListGamesResponse_GameValidationError) ErrorName() string {
	return "BackofficeListGamesResponse_GameValidationError"
}

// Error satisfies the builtin error interface
func (e BackofficeListGamesResponse_GameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBackofficeListGamesResponse_Game.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BackofficeListGamesResponse_GameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BackofficeListGamesResponse_GameValidationError{}

// Validate checks the field values on GetBetByIdResponse_Action with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBetByIdResponse_Action) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBetByIdResponse_Action with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBetByIdResponse_ActionMultiError, or nil if none found.
func (m *GetBetByIdResponse_Action) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBetByIdResponse_Action) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RoundId

	// no validation rules for Action

	// no validation rules for BetId

	// no validation rules for ProviderBetId

	// no validation rules for ProviderTransactionId

	// no validation rules for ProviderExternalTransactionId

	// no validation rules for ProviderId

	// no validation rules for ProviderName

	// no validation rules for OperatorId

	// no validation rules for OperatorName

	// no validation rules for UpdateBalance

	// no validation rules for TakeAll

	// no validation rules for IsRefund

	// no validation rules for Amount

	// no validation rules for AmountUsd

	// no validation rules for SettlementAmount

	// no validation rules for SettlementAmountUsd

	// no validation rules for Turnover

	// no validation rules for TurnoverUsd

	// no validation rules for UserId

	// no validation rules for Currency

	// no validation rules for SettlementCurrency

	// no validation rules for GameId

	// no validation rules for GameName

	// no validation rules for GameCategory

	// no validation rules for JackpotContribution

	// no validation rules for JackpotContributionUsd

	// no validation rules for JackpotWin

	// no validation rules for JackpotWinUsd

	// no validation rules for BetTime

	// no validation rules for SettleTime

	// no validation rules for ProviderTimestamp

	// no validation rules for BonusAmount

	// no validation rules for BonusAmountUsd

	// no validation rules for OperatorTimestamp

	// no validation rules for ProcessedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetBetByIdResponse_ActionMultiError(errors)
	}

	return nil
}

// GetBetByIdResponse_ActionMultiError is an error wrapping multiple validation
// errors returned by GetBetByIdResponse_Action.ValidateAll() if the
// designated constraints aren't met.
type GetBetByIdResponse_ActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBetByIdResponse_ActionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBetByIdResponse_ActionMultiError) AllErrors() []error { return m }

// GetBetByIdResponse_ActionValidationError is the validation error returned by
// GetBetByIdResponse_Action.Validate if the designated constraints aren't met.
type GetBetByIdResponse_ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBetByIdResponse_ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBetByIdResponse_ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBetByIdResponse_ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBetByIdResponse_ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBetByIdResponse_ActionValidationError) ErrorName() string {
	return "GetBetByIdResponse_ActionValidationError"
}

// Error satisfies the builtin error interface
func (e GetBetByIdResponse_ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBetByIdResponse_Action.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBetByIdResponse_ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBetByIdResponse_ActionValidationError{}

// Validate checks the field values on GetBetByIdResponse_Bet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBetByIdResponse_Bet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBetByIdResponse_Bet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBetByIdResponse_BetMultiError, or nil if none found.
func (m *GetBetByIdResponse_Bet) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBetByIdResponse_Bet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProviderBetId

	// no validation rules for RoundId

	// no validation rules for ProviderRoundId

	// no validation rules for ProviderId

	// no validation rules for ProviderName

	// no validation rules for OperatorId

	// no validation rules for OperatorName

	// no validation rules for Currency

	// no validation rules for SettlementCurrency

	// no validation rules for Status

	// no validation rules for UserId

	// no validation rules for GameId

	// no validation rules for GameName

	// no validation rules for GameCategory

	// no validation rules for WinCount

	// no validation rules for BetAmount

	// no validation rules for BetAmountUsd

	// no validation rules for SettlementBetAmount

	// no validation rules for SettlementBetAmountUsd

	// no validation rules for WinAmount

	// no validation rules for WinAmountUsd

	// no validation rules for SettlementWinAmount

	// no validation rules for SettlementWinAmountUsd

	// no validation rules for Turnover

	// no validation rules for TurnoverUsd

	// no validation rules for RollbackBetAmount

	// no validation rules for RollbackBetAmountUsd

	// no validation rules for RollbackWinAmount

	// no validation rules for RollbackWinAmountUsd

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBetByIdResponse_BetValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBetByIdResponse_BetValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBetByIdResponse_BetValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBetByIdResponse_BetMultiError(errors)
	}

	return nil
}

// GetBetByIdResponse_BetMultiError is an error wrapping multiple validation
// errors returned by GetBetByIdResponse_Bet.ValidateAll() if the designated
// constraints aren't met.
type GetBetByIdResponse_BetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBetByIdResponse_BetMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBetByIdResponse_BetMultiError) AllErrors() []error { return m }

// GetBetByIdResponse_BetValidationError is the validation error returned by
// GetBetByIdResponse_Bet.Validate if the designated constraints aren't met.
type GetBetByIdResponse_BetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBetByIdResponse_BetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBetByIdResponse_BetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBetByIdResponse_BetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBetByIdResponse_BetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBetByIdResponse_BetValidationError) ErrorName() string {
	return "GetBetByIdResponse_BetValidationError"
}

// Error satisfies the builtin error interface
func (e GetBetByIdResponse_BetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBetByIdResponse_Bet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBetByIdResponse_BetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBetByIdResponse_BetValidationError{}
