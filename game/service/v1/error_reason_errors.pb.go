// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNSPECIFIED.String() && e.Code == 500
}

func ErrorUnspecified(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UNSPECIFIED.String(), fmt.Sprintf(format, args...))
}

func IsGameBetNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GAME_BET_NOT_FOUND.String() && e.Code == 500
}

func ErrorGameBetNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GAME_BET_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsGameActionNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GAME_ACTION_NOT_FOUND.String() && e.Code == 500
}

func ErrorGameActionNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GAME_ACTION_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsGetRatesFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GET_RATES_FAILED.String() && e.Code == 500
}

func ErrorGetRatesFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GET_RATES_FAILED.String(), fmt.Sprintf(format, args...))
}

func IsGameTransactionNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GAME_TRANSACTION_NOT_FOUND.String() && e.Code == 500
}

func ErrorGameTransactionNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GAME_TRANSACTION_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsGameBannedOnUser(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GAME_BANNED_ON_USER.String() && e.Code == 500
}

func ErrorGameBannedOnUser(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GAME_BANNED_ON_USER.String(), fmt.Sprintf(format, args...))
}

func IsGameDisabled(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GAME_DISABLED.String() && e.Code == 500
}

func ErrorGameDisabled(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GAME_DISABLED.String(), fmt.Sprintf(format, args...))
}

func IsGameNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GAME_NOT_FOUND.String() && e.Code == 500
}

func ErrorGameNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GAME_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsGameInsufficientBalance(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GAME_INSUFFICIENT_BALANCE.String() && e.Code == 500
}

func ErrorGameInsufficientBalance(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GAME_INSUFFICIENT_BALANCE.String(), fmt.Sprintf(format, args...))
}
